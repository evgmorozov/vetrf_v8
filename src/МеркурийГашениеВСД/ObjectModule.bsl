//Оформление входящих партий api 2.0 ver от 11/06/18
// ред от 22.04.18
//KB99 Дмитрий Жуков zhukov@kb99.pro


//Роли предприятий-производителей в сведениях о принимаемой партии должны совпадать с указанными в ветеринарно-сопроводительном документе
// вероятно в СЗ производителей еще и роль их иногда нужна

 
Перем Компонента Экспорт;
Перем НП Экспорт;
Перем СписокКонстант Экспорт;
Перем ИмяDLL Экспорт; 
Перем ТермическиеУсловияПеревозки2 Экспорт;  // ТермическиеУсловияПеревозки - поменял местами представление со значеним


//в ГМ отправить  *****************************
Функция Нашебулево(знЧисло) Экспорт
	//Булево возвращает русский, не разобрался, возможно ли по англ
	Если знЧисло=0 Тогда
		Возврат "false";
	Иначе
		Возврат "true";
	КонецЕсли;
КонецФункции

Функция Дата_из_XML(dateXML, Дата1, Дата2, ДатаСтрока ) Экспорт 
	попытка			
		год = ""+dateXML.firstDate.year;
		мес = ""+dateXML.firstDate.month;
		день = ""+dateXML.firstDate.day;
		Дата1 = Дата(год, мес, день);
	Исключение
		Попытка
			ДатаСтрока = ""+dateXML.informalDate;
		Исключение				
		КонецПопытки;
	КонецПопытки;				
	попытка
		год = ""+dateXML.secondDate.year;
		мес = ""+dateXML.secondDate.month;
		день = ""+dateXML.secondDate.day;
		Дата2 = Дата(год, мес, день);
	Исключение			
	КонецПопытки;
КонецФункции


Функция УровниУпаковки_из_XML(PList, Партия ="") Экспорт 
	//Возвращает длинну строку с Уровнями упаковок и Маркировок
	// При наличии Партия записывает в данные в ТЧ УровниУпаковки и Маркировка
	
	// Можно вернуть в виде ТЗ
	//Список физической упаковки. vd:packageList		
	// С уровнями
//   Уровни <dt:level>
//1 	Внутренний уровень. Уровень, при котором упаковка отсутствует, но тем не менее есть необходимость наносить маркировку. Например, яйцо, шкуры, мясо, сыр. Явно указывается, что упаковка отсутствует.
//2 	Потребительский уровень. Товар в упаковке для розничной торговли, маркированный штриховым кодом для сканирования на кассе.
//3 	Промежуточный уровень. Уровень упаковки, если он существует, который находится между потребительским и торговым уровнем.
//4 	Торговый уровень. Товар в упаковке, предназначенной для заказа, оплаты и доставки. Это согласованный между ритейлером и изготовителем (или другим участником) уровень упаковки товара, в котором товар заказывается, оплачивается и доставляется.
//5 	Дополнительный уровень. Товар в упаковке, которую нельзя однозначно отнести к торговому или транспортному уровню.
//6 	Транспортный (Логистический) уровень. Товар в упаковке, предназначенной для отгрузки покупателю (ритейлеру) при выполнении заказа. 		

// Классы <dt:productMarks class = Тип, описывающий тип маркировки.
//UNDEFINED 	Класс неопределен. Это значение используется по умолчанию.
//BN 	Номер производственной партии.
//    Важно, чтобы номера партий совпадали при совершении операции незавершённого производства. 
//SSCC 	SSCC-код (глобально-уникальный код грузовых контейнеров - Serial Shipping Container Code).
//EAN8 	Маркировка в соответствии с EAN-8.
//EAN13 	Маркировка в соответствии с EAN-13.
//EAN128 	Маркировка в соответствии с EAN-128.
//BUNDLE 	Маркировка вышестоящей групповой упаковки, например, паллеты. Может использоваться для поиска группы вет.сертификатов для партий, находящихся на данной паллете. 
	
	ТЗУровни = Новый ТаблицаЗначений;		
	ТЗУровни.Колонки.Добавить("НомерУровня",новый ОписаниеТипов("Число"));
	ТЗУровни.Колонки.Добавить("Упаковка",новый ОписаниеТипов("СправочникСсылка.ВСД_ФормыУпаковки"));
	ТЗУровни.Колонки.Добавить("КолВо",новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(12, 3)));
	ТЗУровни.Колонки.Добавить("Маркировки");
	
	Если ТипЗнч(Партия) = Тип("СправочникОбъект.ВСД_Партия") тогда
		//Парт = Справочники.ВСД_Партия.ПолучитьСсылку(Партия);
		Партия.УровниУпаковки.Очистить();
		Партия.Маркировка.Очистить();
	КонецЕсли;		
	
	
	Если ТипЗнч(PList)=Тип("ОбъектXDTO") Тогда 
		PListArray = Новый Массив;
		PListArray.Добавить(PList);
	ИначеЕсли ТипЗнч(PList)=Тип("СписокXDTO") Тогда
		PListArray = PList;
	Иначе
		Возврат "";
	КонецЕсли;
	Попытка
		Для каждого Узел из PListArray Цикл
			СтрУровня = ТЗУровни.Добавить();

			Попытка СтрУровня.НомерУровня = Узел.level; Исключение КонецПопытки;  // Уровень упаковки
			Попытка СтрУровня.Упаковка = НайтиФормуУпаковки( Узел.packingType.guid, Узел.packingType.name);	Исключение	КонецПопытки;
			//dt:globalID  	Уникальный идентификатор упаковки.
			Попытка	ГлИД = Узел.packingType.globalID; Исключение КонецПопытки;
			Попытка	СтрУровня.КолВо = Число(Узел.quantity);	Исключение	КонецПопытки;
			Если ТипЗнч(Партия) = Тип("СправочникОбъект.ВСД_Партия") тогда
				ПартУровни = Партия.УровниУпаковки.Добавить();
				ПартУровни.НомерУровня = Перечисления.ВСД_УровниУпаковки.Получить(СтрУровня.НомерУровня-1);//Значени = Метаданные.Перечисления.ВСД_УровниУпаковки.ЗначенияПеречисления[СтрУровня.НомерУровня-1];
				ПартУровни.ФормаУпаковки = СтрУровня.Упаковка;
				ПартУровни.Количество = СтрУровня.КолВо;				
			КонецЕсли;		
			
			СзМаркировки = Новый Списокзначений;
			//Маркировка партии продукции. Например
			//      <dt:productMarks class="EAN128">7456873456-147885</dt:productMarks>
             //      <dt:productMarks class="UNDEFINED">custom marking</dt:productMarks> 
			Попытка
                Маркировки = Узел.productMarks;
				Если ТипЗнч(Маркировки)=Тип("ОбъектXDTO") Тогда 
					МаркМассив = Новый Массив;
					МаркМассив.Добавить(Маркировки);
				ИначеЕсли ТипЗнч(Маркировки)=Тип("СписокXDTO") Тогда
					МаркМассив = Маркировки;
				КонецЕсли;
				
				Для каждого МаркН из МаркМассив Цикл		
					//МаркЗнач = МаркН.text;
					МаркЗнач = МаркН.Последовательность().ПолучитьТекст(0);  // ЖД Как получить ???
					МаркКласс = МаркН.class;
					СзМаркировки.Добавить(МаркЗнач,МаркКласс);
					//СзМаркировки.ДобавитьЗначение(Маркзнач,МаркКласс);
					Если ТипЗнч(Партия) = Тип("СправочникОбъект.ВСД_Партия") тогда
						ПартМаркировка = Партия.Маркировка.Добавить();
						ПартМаркировка.НомерУровня = Перечисления.ВСД_УровниУпаковки.Получить(СтрУровня.НомерУровня-1);
						ПартМаркировка.Класс = Перечисления.ВСД_Маркировка[МаркКласс];
						ПартМаркировка.Маркировка = МаркЗнач;				
					КонецЕсли;		
				КонецЦикла;
			Исключение КонецПопытки;
		    Если СзМаркировки.Количество() > 0 Тогда
		        СтрУровня.Маркировки = ЗначениеВСтрокуВнутр(СзМаркировки);
		    КонецЕсли;
		КонецЦикла;
	Исключение	КонецПопытки;
	Если ТЗУровни.Количество()>0 Тогда
		Возврат ЗначениеВСтрокуВнутр(ТЗУровни);
	Иначе
		Возврат "";
	КонецЕсли;
	//Возврат ТЗУровни;
КонецФункции

Функция СписокНомеровПартий_из_XML(batch) Экспорт
	// Номер Партии - м.б. несколько
	СпНомераПартий = Новый СписокЗначений;
	Попытка
	Если ТипЗнч(batch.batchID)<>Тип("СписокXDTO") Тогда 
		ListbatchID = Новый Массив;
		ListbatchID.Добавить(batch.batchID);
	Иначе
		ListbatchID = batch.batchID;
	КонецЕсли;
	Для Каждого batchID из ListbatchID Цикл
		СпНомераПартий.Добавить(batchID);
	КонецЦикла;
	Исключение КонецПопытки;
	Возврат ЗначениеВСтрокуВнутр(СпНомераПартий);		
КонецФункции

Функция СписокПроизводителей_из_XML(ProducerList) Экспорт 
	Если ТипЗнч(ProducerList)=Тип("ОбъектXDTO") Тогда 
		ProdList = Новый Массив;
		ProdList.Добавить(ProducerList);
	ИначеЕсли ТипЗнч(ProducerList)=Тип("СписокXDTO") Тогда
		ProdList = ProducerList;
	Иначе
		Возврат "";
	КонецЕсли;
	ТзПроизводителей = Новый ТаблицаЗначений;
	ТзПроизводителей.Колонки.Добавить("Площадка",новый ОписаниеТипов("СправочникСсылка.ВСД_Площадка"));
	ТзПроизводителей.Колонки.Добавить("Роль",новый ОписаниеТипов("Строка"));
	Попытка
		Для каждого producer из ProdList Цикл
			Попытка
				Если НЕ ЗначениеЗаполнено(producer.enterprise.guid) Тогда
					Продолжить;	
				КонецЕсли;
			Исключение Продолжить; КонецПопытки;
			СтрокаТЗ = ТзПроизводителей.Добавить();
			Попытка СтрокаТЗ.Площадка = НайтиПлощадку(producer.enterprise.guid); Исключение КонецПопытки;
			Попытка СтрокаТЗ.Роль =  producer.role; Исключение СтрокаТЗ.Роль = "PRODUCER"; КонецПопытки;
//			УидПроизводителя = producer.enterprise.guid;
//			СпПроизводителей.Добавить(НайтиПлощадку(УидПроизводителя));
		КонецЦикла;			
	Исключение	КонецПопытки;
//	Если СпПроизводителей.Количество()>0 Тогда	
		Возврат ЗначениеВСтрокуВнутр(ТзПроизводителей);	
//	Иначе
//		Возврат "";
//	КонецЕсли;
КонецФункции

Функция СвязанныеДокументы_из_XML(referencedDocument) Экспорт 
	Если ТипЗнч(referencedDocument)=Тип("ОбъектXDTO") Тогда 
		RDListArray = Новый Массив;
		RDListArray.Добавить(referencedDocument);
	ИначеЕсли ТипЗнч(referencedDocument)=Тип("СписокXDTO") Тогда
		RDListArray = referencedDocument;
	Иначе
		Возврат "";
	КонецЕсли;
	// Связанные документы  - их м.б. много
	ТЗСвДокументы = Новый ТаблицаЗначений;		
	ТЗСвДокументы.Колонки.Добавить("ТипДокумента",новый ОписаниеТипов("Число"));
	ТЗСвДокументы.Колонки.Добавить("НомерДокумента",новый ОписаниеТипов("Строка"));
	ТЗСвДокументы.Колонки.Добавить("СерияДокумента",новый ОписаниеТипов("Строка"));
	ТЗСвДокументы.Колонки.Добавить("ДатаДокумента",новый ОписаниеТипов("Строка"));
	ТЗСвДокументы.Колонки.Добавить("ТипОтношенияДок",новый ОписаниеТипов("Число"));
	
	Попытка
		Для Каждого Узел из RDListArray Цикл
			// 1 -ТТН, 6 -ТОРГ12,5 - ТрН, 16 - Заказ  http://help.vetrf.ru/wiki/DocumentType_v2.0
			СтрокаТЗ = ТЗСвДокументы.Добавить();
			Попытка СтрокаТЗ.ТипДокумента =  Узел.type; Исключение 	КонецПопытки;
			Попытка	СтрокаТЗ.НомерДокумента =  Узел.issueNumber; Исключение  КонецПопытки;
			Попытка СтрокаТЗ.СерияДокумента =  Узел.issueSeries;	Исключение 	КонецПопытки;
			Попытка СтрокаТЗ.ДатаДокумента =  Узел.issueDate; Исключение 	КонецПопытки;
			СтрокаТЗ.СерияДокумента = ?(СтрокаТЗ.СерияДокумента = "ОбъектXDTO","",СтрокаТЗ.СерияДокумента);
		    // ТипОтношенияДок
			//1 	Сопроводительный документ. 	Complementary accompanying document.
			//2 	Предшествующий документ. 	Preceding document (Ancestor).
			//3 	Следующий документ. 	Subsequent/following document (Child).
			//4 	Документ, взамен которого выдан текущий документ. 	Replaced document.
			//5 	Документ, заменяющий текущий документ. 	Replaced by document.
			//6 	Связанный документ. 	Related document. 				
			Попытка	СтрокаТЗ.ТипОтношенияДок =  Узел.relationshipType; Исключение КонецПопытки;
			//Если СтрокаТЗ.ТипДокумента = 1 Тогда
			//	ТЗВСД.ттнСерия = СтрокаТЗ.СерияДокумента;
			//	ТЗВСД.ттнномер = СтрокаТЗ.НомерДокумента;
			//	ТЗВСД.ттндата = СтрокаВДату(СтрокаТЗ.ДатаДокумента);
			//КонецЕсли;
		КонецЦикла;
	Исключение		КонецПопытки;
	Если ТЗСвДокументы.Количество()>0 Тогда
		Возврат ЗначениеВСтрокуВнутр(ТЗСвДокументы);
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции

Процедура Фасовка_из_XML(packaging,ФасовкаНаименование="",ФасовкаФормаУпаковки="",ФасовкаКоличество="",ФасовкаОбъем="",ФасовкаЕдиницаИзм="") Экспорт 
	// 	Тип упаковки. 
	//Попытка	ТипФасовки = packaging.selectSingleNode("dt:packagingType").text;  Исключение КонецПопытки;
	// 	Идентификатор версии типа упаковки.
	//Попытка ФасУИД =  packaging.packagingType.uuid; Исключение КонецПопытки;
	// Наименование упаковки.
	Попытка	ФасовкаНаименование =  packaging.packagingType.name;	Исключение КонецПопытки;
	Попытка ФасовкаФормаУпаковки = НайтиФормуУпаковки( packaging.packagingType.guid, ФасовкаНаименование); Исключение КонецПопытки;
	//  	Уникальный идентификатор упаковки. 
	//Попытка	ФасУН =  packaging.packagingType.globalID;	Исключение	КонецПопытки;
	Попытка	ФасовкаКоличество = Число(packaging.quantity); Исключение КонецПопытки;
	// Объём единицы упаковки товара.
	Попытка	ФасовкаОбъем = Число(packaging.volume); Исключение КонецПопытки;
	// 	Глобальный идентификатор единицы измерения. , есть uuid и имя - <dt:name> 
	Попытка	ФасовкаЕдиницаИзм = НайтиЕдИзмерения(packaging.unit.guid); Исключение КонецПопытки;			
КонецПроцедуры


// **************Сведения о продукции из основного модуля

Функция ПолучитьРезультат_Список_Продукции(имяФайла,продукцияЭлемент="") Экспорт
	// ЖД Добавить реквизиты в справочник для api 2.0 - Фасовка, GTIN, (Вероятно список площадок производителей))
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(имяФайла);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	//Вариации загрузки при разных запросах ЖД 
	//Получение списка по площадке
	Попытка pIList = xdto.Body.getProductItemListResponse.productItemList.productItem; Исключение pIList = ""; КонецПопытки;
	
	Если (ТипЗнч(pIList)<>Тип("СписокXDTO"))и (ТипЗнч(pIList)<>Тип("ОбъектXDTO")) Тогда
		// Изменение  / добавление
		Попытка	pIList = xdto.application.result.modifyProducerStockListResponse.productItemList.productItem; Исключение pIList = "";	КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(pIList)<>Тип("СписокXDTO"))и (ТипЗнч(pIList)<>Тип("ОбъектXDTO")) Тогда
		Попытка	pIList = xdto.Body.getProductItemByGuidResponse.productItem;	Исключение	pIList = ""; КонецПопытки;
	КонецЕсли;	
	
	Если (ТипЗнч(pIList)<>Тип("СписокXDTO"))и (ТипЗнч(pIList)<>Тип("ОбъектXDTO")) Тогда
		Сообщить("Не далось прочитать продукцию из "+имяФайла);
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(pIList)<>Тип("СписокXDTO") Тогда 
		productItemList = Новый Массив;
		productItemList.Добавить(pIList);
	Иначе
		productItemList = pIList;
	КонецЕсли;
	
	Для каждого productItem из productItemList Цикл		
		
		active 	 = productItem.active;
		
		Если active="false" Тогда
			Продолжить;
		КонецЕсли;
		name = productItem.name;
		guid  	 = productItem.guid;
		uuid  	 = productItem.uuid;
	
		Если ЗначениеЗаполнено(продукцияЭлемент) Тогда
			СпрОбъект = ПродукцияЭлемент.ПолучитьОбъект();
		Иначе
			СпрСсылка = Справочники.ВСД_Продукция_Элемент.НайтиПоРеквизиту("GUID", guid);
			Если СпрСсылка = Справочники.ВСД_Продукция_Элемент.ПустаяСсылка() Тогда
				СпрСсылка = Справочники.ВСД_Продукция_Элемент.НайтиПоНаименованию(name);
				Если СпрСсылка = Справочники.ВСД_Продукция_Элемент.ПустаяСсылка() Тогда 
					СпрОбъект = Справочники.ВСД_Продукция_Элемент.СоздатьЭлемент();
				Иначе
					СпрОбъект = СпрСсылка.ПолучитьОбъект();
				КонецЕсли;
			Иначе
				СпрОбъект = СпрСсылка.ПолучитьОбъект();
			КонецЕсли;
		КонецЕсли;
		
		СпрОбъект.UUID = uuid;
		СпрОбъект.GUID = guid;		
		Попытка СпрОбъект.Наименование = name;  Исключение КонецПопытки;
		Попытка СпрОбъект.Продукция = НайтиПродукцию(productItem.product.guid); Исключение КонецПопытки;
		Попытка СпрОбъект.ВидПродукции = НайтиВидПродукции(productItem.subProduct.guid); Исключение КонецПопытки;
		Попытка СпрОбъект.Артикул = productItem.code; Исключение КонецПопытки;
		Попытка СпрОбъект.GTIN = productItem.globalID; Исключение КонецПопытки;
		Попытка СпрОбъект.Гост = productItem.gost;	Исключение 	КонецПопытки;
		Попытка СпрОбъект.СоответствуетГОСТу = ?(productItem.correspondsToGost="true",1,0);	Исключение 	КонецПопытки;
		// Фасовка
		Попытка packaging = productItem.packaging Исключение packaging=""	КонецПопытки; 	
		Попытка ФасовкаНаименование = packaging.packagingType.name;	Исключение ФасовкаНаименование=""	КонецПопытки;
		Попытка СпрОбъект.ФасовкаФормаУпаковки = НайтиФормуУпаковки( packaging.packagingType.guid,ФасовкаНаименование );	Исключение 	КонецПопытки;
		Попытка	СпрОбъект.ФасовкаКоличество = Число(packaging.quantity);	Исключение	КонецПопытки;
		Попытка	СпрОбъект.ФасовкаОбъем = Число(packaging.volume); Исключение	КонецПопытки;
		Попытка	СпрОбъект.ФасовкаЕдиницаИзмерения = НайтиЕдИзмерения(packaging.unit.guid);	Исключение 	КонецПопытки;			
		
		Если СпрОбъект.ТермическиеУсловияПеревозки = 0 Тогда СпрОбъект.ТермическиеУсловияПеревозки = 1; КонецЕсли; 
		//productItem.producer.guid - ХС Производитель
		//productItem.producing.location.guid - Площадка-Производитель  - возможен список
		
//		st  	 = productItem.status;
//		prodType = productItem.productType;		
		СпрОбъект.Записать();

		Сообщить("Записан ["+name+"] uuid =["+uuid+"]");
	КонецЦикла;
				
	УдалитьXML( Компонента.LogFilename );

	Возврат "";
КонецФункции

Функция Продукция_Инфо_ЗапросXML( продукция )
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' 
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2' 
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getProductItemByGuidRequest>
	|      <base:guid>"+ СокрЛП(продукция.GUID) +"</base:guid>
	|    </ws:getProductItemByGuidRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	
	Возврат запрос;
КонецФункции

Процедура Получить_Инфо_Продукции( Продукция ) Экспорт
	ЗапросXML = Продукция_Инфо_ЗапросXML( Продукция );
 
	метод = Компонента.GetMethod();
    метод.Service = "platform/services/2.0/ProductService";
    метод.Action = "GetProductItemByGuid";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
		
	Результат = ПолучитьРезультат_Список_Продукции( Компонента.LogFilename, Продукция);
	
	УдалитьXML( Компонента.LogFilename);
	
КонецПроцедуры

//Окончание  *********Сведения о продукции из основного модуля


Функция ЗагрузитьХСПоGUID(GUID) Экспорт
//ЖД Потестить, прилизать
// В др процедурах не происходит связь с вновь созданным ХС - порешать

	Если НЕ(ЗначениеЗаполнено(GUID)) Тогда 
		Сообщить("Пустой GUID для поиска ХС");
		Возврат "REJECTED";
	КонецЕсли;
	ЗапросXML = "
	|<soapenv:Envelope xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|		  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2' 
	|		  xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'>
	|<soapenv:Header/>
	|<soapenv:Body>
	|   <ws:getBusinessEntityByGuidRequest>
	|      <bs:guid>"+GUID+"</bs:guid>
	|   </ws:getBusinessEntityByGuidRequest>
	|</soapenv:Body>
	|</soapenv:Envelope>";
	
	
	метод = Компонента.GetMethod();
	метод.Service = "platform/services/2.0/EnterpriseService";
	метод.Action = "GetBusinessEntityByGUID";	
	
	Сообщить(" Запрос getEnterpriseByGuid [ "+СокрЛП(GUID)+" ]");
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
		
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
    
	businessEntity = xdto.Body.getBusinessEntityByGuidResponse.businessEntity;
	guid = businessEntity.guid;
	uuid = businessEntity.uuid;
	
	//dt:type>3</dt:type - ЖД вероятно Тип ЮЛ или ИП
	
	Попытка name = businessEntity.name; Исключение name=""; КонецПопытки;
	Если name = "" тогда
		Попытка name = businessEntity.fio; Исключение name=""; КонецПопытки;	
	КонецЕсли;
	
	Попытка Fullname = businessEntity.fullname;  Исключение Fullname=""; КонецПопытки;
	active = businessEntity.active;
	Попытка ИНН =  businessEntity.inn; Исключение ИНН=""; КонецПопытки;
	Попытка КПП = businessEntity.kpp; Исключение КПП=""; КонецПопытки;
	Попытка ОГРН = businessEntity.ogrn; Исключение ОГРН=""; КонецПопытки;
	address = businessEntity.juridicalAddress.addressView;
	
	
	Спр = Новый("СправочникМенеджер.ВСД_ХозСубъект");
	Ссылка_ВСД_ХозСубъект = Спр.НайтиПоРеквизиту("GUID",Guid);
	Если Ссылка_ВСД_ХозСубъект = Справочники.ВСД_ХозСубъект.ПустаяСсылка() Тогда 
		Объект_ВСД_ХозСубъект = Справочники.ВСД_ХозСубъект.СоздатьЭлемент();
	Иначе
		Объект_ВСД_ХозСубъект = Ссылка_ВСД_ХозСубъект.ПолучитьОбъект(); 
	КонецЕсли;
	
	Объект_ВСД_ХозСубъект.Наименование = name;
	//Объект_ВСД_ХозСубъект.Адрес = address;
	Объект_ВСД_ХозСубъект.GUID = guid;
	Объект_ВСД_ХозСубъект.UUID = uuid;	
	
	// Ищем контрагента
	Спр = Новый("СправочникМенеджер.Контрагенты");
	Ссылка_Контрагент = Спр.НайтиПоРеквизиту("ИНН",ИНН);
	Если Ссылка_Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		// Выбираем из справочника
		ФормаВыбора = Справочники.Контрагенты.ПолучитьФормуВыбора();
		ФормаВыбора.Заголовок	= "Выберите контрагента ИНН "+ИНН+ " "+name+ " "+address; 
		Ссылка_Контрагент = ФормаВыбора.ОткрытьМодально();
		Если Ссылка_Контрагент = Неопределено Тогда
			//Не выбрали - попробуем создать
			ТекстВопроса = "Не найден и не выбран контрагент ИНН "+ИНН+ " "+name+"
			|Создать?";
			Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,0);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Объект_Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
				Объект_Контрагент.Наименование = name;
				Объект_Контрагент.ИНН = ИНН;
				Объект_Контрагент.КПП = КПП;
				Объект_Контрагент.НаименованиеПолное = fullname;
				Объект_Контрагент.Комментарий = "ОГРН: "+ОГРН+"; "+ address;
				Объект_Контрагент.Записать();
				СообщитьИнфо("Записан Контрагент ИНН ["+ИНН+ " "+name+"]  Адрес: "+address);
			Иначе			
				Сообщить("Невозможно создать ХС, т.к. не указан контрагент");
				Возврат "";
			КонецЕсли;
		Иначе
			Объект_Контрагент = Ссылка_Контрагент.ПолучитьОбъект();
		КонецЕсли;
	Иначе //Нашли по ИНН
		Объект_Контрагент = Ссылка_Контрагент.ПолучитьОбъект(); 
	КонецЕсли;
	Объект_ВСД_ХозСубъект.Контрагент = Объект_Контрагент.Ссылка;
	Объект_ВСД_ХозСубъект.Записать();
	СообщитьИнфо("Записан ВСД_Хозсубъект ["+Объект_ВСД_ХозСубъект+"] GUID = "+ Guid+" Адрес: "+address);		

	УдалитьXML( Компонента.LogFilename);
	
	Возврат Объект_ВСД_ХозСубъект.Ссылка;
	
КонецФункции


Процедура СообщитьИнфо(стр)
	Если ВыводитьПодробнуюИнформацию Тогда
		Сообщить(стр, СтатусСообщения.Информация );
	КонецЕсли;	
КонецПроцедуры
Процедура СообщитьОшибку(стр)
	//Если ВыводитьПодробнуюИнформацию Тогда
		Сообщить(стр, СтатусСообщения.Внимание );
	//КонецЕсли;	
КонецПроцедуры

Функция ДатаГод(ВыбДата)
	возврат формат(выбДата, "ДФ=""гггг""")
КонецФункции

Функция ДатаМесяц(ВыбДата)
	возврат формат(выбДата, "ДФ=""ММ""")
КонецФункции

Функция ДатаЧисло(ВыбДата)
	возврат формат(выбДата, "ДФ=""дд""")
КонецФункции


Функция ВыбратьВидДокументаВСД(type)
	
    //{ VetDocumentType 
    //    TRANSPORT, = 1	= Транспортный ВСД.	
    //    PRODUCTIVE, = 2 	= Производственный ВСД.
    //    RETURNABLE, = 3 	= Возвратный ВСД.
    //    INCOMING, = 4  	= Входящий ВСД.
    //    OUTGOING, = 5  	= Исходящий ВСД.
    //}
	
	рез = "";
	Если type="TRANSPORT" Тогда
		рез = "ВСД";
	ИначеЕсли type="PRODUCTIVE" Тогда
		рез = "ВСД_Производство";
	ИначеЕсли type="INCOMING" Тогда
		рез = "ВСД_входящий";
	ИначеЕсли type="RETURNABLE" Тогда
		рез = "ВСД_возвратный";
	ИначеЕсли type="OUTGOING" Тогда
		// проверить !!!
		рез = "ВСД";
	Иначе
		Сообщить("Неопределенный вид ВСД ["+type+"]");
	КонецЕсли;
	
	Возврат рез;
КонецФункции

Функция ДатаXML(ВыбДата, Время="") Экспорт
	стрДата = формат(Выбдата, "ДФ=""гггг-ММ-дд""")+Время;
	Возврат стрДата;
КонецФункции

Функция СтрокаВДату(ДатаСтрока)
	Если НЕ(ЗначениеЗаполнено(ДатаСтрока)) Тогда
		Сообщить("Невозможно преобразовать в дату пустую строку");
		Возврат "";
	КонецЕсли;
	год = Лев(ДатаСтрока,4 );
	мес = Сред(ДатаСтрока,6,2);
	день = Сред(ДатаСтрока,9,2);
	возврат Дата(год, мес,день);
КонецФункции

Функция НайтиОшибки(ФайлXML, док="")
	результат = Ложь;	
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлXML);	
	
	СтрОшибки ="";
	Пока ЧтениеXML.Прочитать() Цикл
		Если (ЧтениеXML.Имя = "error") и (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
			ЧтениеXML.Прочитать();
			СтрОшибки = СтрОшибки + "ОШИБКА: "+ЧтениеXML.Значение+" ";
			Сообщить("ОШИБКА: "+ЧтениеXML.Значение,СтатусСообщения.ОченьВажное);
			результат=Истина
		КонецЕсли;		
	КонецЦикла;
		
	Если ЗначениеЗаполнено(Док) Тогда
		ДокОбъект = док.ПолучитьОбъект();
		ДокОбъект.Комментарий = СокрЛП(ДокОбъект.Комментарий) + СтрОшибки;
		ДокОбъект.Записать();
	КонецЕсли;	
	
	Возврат результат;
КонецФункции

Функция НайтиЕдИзмерения(guid, uuid="")	Экспорт
	если ПустаяСтрока(guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ЕдиницыИзмерения.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ЕдиницыИзмерения КАК ВСД_ЕдиницыИзмерения
		                      |ГДЕ
		                      |	ВСД_ЕдиницыИзмерения.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			СообщитьОшибку("ВСД_ЕдиницыИзмерения Guid "+guid+" не найдена. Выполните инициализацию");
			Ответ = Справочники.ВСД_ЕдиницыИзмерения.ПустаяСсылка();	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_ЕдиницыИзмерения");
		Ответ="";
	КонецЕсли;
	 	
	Возврат Ответ;

КонецФункции
Функция НайтиХСпоGUID(Guid) Экспорт

	Ответ = "";
	Guid = СокрЛП(Guid);
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ХозСубъект.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
		                      |ГДЕ
		                      |	ВСД_ХозСубъект.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			//СообщитьОшибку("Guid "+Guid+" не найден, создайте ХС и выполните синхронизацию");	
			Ответ = ЗагрузитьХСПоGUID(guid);
		КонецЕсли;
		
	Иначе
		СообщитьИнфо("Пустой Guid ХозСубъекта");
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции


Функция НайтиФормуУпаковки(guid, name) Экспорт

	Ответ = "";
	Guid = СокрЛП(Guid);
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ФормыУпаковки.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ФормыУпаковки КАК ВСД_ФормыУпаковки
		                      |ГДЕ
		                      |	ВСД_ФормыУпаковки.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_ФормыУпаковки GUID ["+guid+"] добавлена");
			//создать 
			Спр = Справочники.ВСД_ФормыУпаковки.СоздатьЭлемент();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_ФормыУпаковки");
	КонецЕсли;
	
	Возврат Ответ;
		
КонецФункции

Функция ЗагрузитьПлощадкуПоGUID(GUID, ХС="") Экспорт
	
	Сообщить(" Запрос getEnterpriseByGuid [ "+СокрЛП(GUID)+" ]");		
	Результат = Компонента.getEnterpriseByGuid( СокрЛП(GUID) );	
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
    
    enterprise = xdto.enterprise ;						
	guid = enterprise.guid;
	uuid = enterprise.uuid;
	name = enterprise.name;
	active = enterprise.active;		
	address = enterprise.address.addressView;
	
	Спр = Новый("СправочникМенеджер.ВСД_Площадка");
	Ссылка_ВСД_Площадка = Спр.НайтиПоРеквизиту("GUID",Guid);
	Если Ссылка_ВСД_Площадка = Справочники.ВСД_Площадка.ПустаяСсылка() Тогда 
		Объект_ВСД_Площадка = Справочники.ВСД_Площадка.СоздатьЭлемент();
		//Спр.УстановитьНовыйКод("00");	
	Иначе
		Объект_ВСД_Площадка = Ссылка_ВСД_Площадка.ПолучитьОбъект(); 
	КонецЕсли;
	
	Объект_ВСД_Площадка.Наименование = name;
	Объект_ВСД_Площадка.Адрес = address;
	Объект_ВСД_Площадка.GUID = guid;
	Объект_ВСД_Площадка.UUID = uuid;	
	
	Если ХС="" Тогда
		СообщитьОшибку("Внимание: создана площадка ["+GUID+"] без указания ХозСубъекта ");
		//Возврат;
	Иначе 
		Объект_ВСД_Площадка.GUIDХозСубъекта = ХС.GUID;
	КонецЕсли;	
	
	Объект_ВСД_Площадка.Записать();
	СообщитьИнфо("Записана ВСД_Площадка ["+Объект_ВСД_Площадка+"] GUID = "+ Guid);		
	Возврат Объект_ВСД_Площадка.Ссылка;
КонецФункции


Функция НайтиПлощадку(guid)
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Площадка.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Площадка КАК ВСД_Площадка
		                      |ГДЕ
		                      |	ВСД_Площадка.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Ответ = ЗагрузитьПлощадкуПоGUID(guid);	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Площадка");
	КонецЕсли;
	 	
	Возврат Ответ;
КонецФункции

Функция НайтиПродукцию(guid)
	если ПустаяСтрока(guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Продукция.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Продукция КАК ВСД_Продукция
		                      |ГДЕ
		                      |	ВСД_Продукция.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Продукция Guid "+guid+" не найдена. Выполните инициализацию");
			Ответ = Справочники.ВСД_Продукция.ПустаяСсылка();	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Продукция");
	КонецЕсли;
	 	
	Возврат Ответ;

КонецФункции

Функция НайтиВидПродукции(guid)
	если ПустаяСтрока(guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ВидПродукции.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ВидПродукции КАК ВСД_ВидПродукции
		                      |ГДЕ
		                      |	ВСД_ВидПродукции.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_ВидПродукции Guid "+guid+" не найдена. Выполните инициализацию");
			Ответ = Справочники.ВСД_ВидПродукции.ПустаяСсылка();	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_ВидПродукции");
		Ответ = "";
	КонецЕсли;
	 	
	Возврат Ответ;
	
КонецФункции

Функция Найти_Продукция_Элемент2(productItem, ВСД_Продукция, ВСД_ВидПродукции) Экспорт
	Попытка productItemName = productItem.name; Исключение	productItemName = ""; КонецПопытки;
	Попытка	productItemGuid = productItem.guid; Исключение	productItemGuid="";	КонецПопытки;
	Попытка productItemUuid = productItem.uuid; Исключение	productItemUuid=""; КонецПопытки;
	
	Ответ = "";
	если ЗначениеЗаполнено(productItemGuid) Тогда			
		Запрос = Новый Запрос;
		ТекстЗапроса = "	  ВЫБРАТЬ
		                      |	ВСД_Продукция_Элемент.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Продукция_Элемент КАК ВСД_Продукция_Элемент
		                      |ГДЕ
		                      |	ВСД_Продукция_Элемент.GUID = &GUID";
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("GUID", productItemGuid );
		Результат = Запрос.Выполнить().Выбрать();		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Продукция_Элемент Guid "+productItemGuid+" не найдена. Создан новый элемент");
			Спр = Справочники.ВСД_Продукция_Элемент.СоздатьЭлемент();
			Спр.Наименование = productItemName;
			Спр.guid = productItemGuid;
			Спр.Uuid = productItemUuid;
			Спр.Продукция = ВСД_Продукция;
			Спр.ВидПродукции = ВСД_ВидПродукции;
			Спр.ТермическиеУсловияПеревозки = СписокКонстант.Получить("ТермУсловияПеревозки");
			Спр.Записать();	
			Получить_Инфо_Продукции(спр.Ссылка);
			Ответ = спр.Ссылка;
		КонецЕсли;
	Иначе //Если ЗначениеЗаполнено(productItemName) Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Продукция_Элемент.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Продукция_Элемент КАК ВСД_Продукция_Элемент
		                      |ГДЕ
		                      |	ВСД_Продукция_Элемент.Наименование = &Название
		                      |	И ВСД_Продукция_Элемент.GUID = &GUID");
		Запрос.УстановитьПараметр("Название", Лев(productItemName,150) );    //ЖД до размера реквизита 1с8
		Запрос.УстановитьПараметр("GUID", productItemGuid ); // Обязательно пустой GUID
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Продукция_Элемент  "+productItemName+" не найдена. Создан новый элемент");
			Спр = Справочники.ВСД_Продукция_Элемент.СоздатьЭлемент();
			Спр.Наименование = productItemName;
			Спр.Uuid = productItemUuid;
			Спр.Продукция = ВСД_Продукция;
			Спр.ВидПродукции = ВСД_ВидПродукции;
			Спр.ТермическиеУсловияПеревозки = СписокКонстант.Получить("ТермУсловияПеревозки");
			Спр.Записать();	
			Ответ = спр.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция Найти_Продукция_ЭлементУДАЛИТЬ(Название, Guid="", Uuid="", ВСД_Продукция, ВСД_ВидПродукции) Экспорт
	если (ПустаяСтрока(Uuid)=0) Тогда
		Запрос = Новый Запрос;
		ТекстЗапроса = "	  ВЫБРАТЬ
		                      |	ВСД_Продукция_Элемент.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Продукция_Элемент КАК ВСД_Продукция_Элемент
		                      |ГДЕ
		                      |	ВСД_Продукция_Элемент.UUID = &UUID";
		//ЖД Без данного условия м.б. получен любой элемент с пустым гуид, невзирая на ууид 
		Если ЗначениеЗаполнено(GUID) Тогда
			ТекстЗапроса = ТекстЗапроса + "
							  | ИЛИ 	ВСД_Продукция_Элемент.GUID = &GUID
							  |";			
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("GUID", Guid );
		Запрос.УстановитьПараметр("UUID", Uuid );
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Продукция_Элемент Uuid "+Uuid+" не найдена. Создан новый элемент");
			Спр = Справочники.ВСД_Продукция_Элемент.СоздатьЭлемент();
			Спр.Наименование = Название;
			Спр.guid = guid;
			Спр.Uuid = Uuid;
			Спр.Продукция = ВСД_Продукция;
			Спр.ВидПродукции = ВСД_ВидПродукции;
			Спр.ТермическиеУсловияПеревозки = СписокКонстант.Получить("ТермУсловияПеревозки");
			Спр.Записать();	
			
			Получить_Инфо_Продукции(спр.Ссылка);
			
			Ответ = спр.Ссылка;
		КонецЕсли;
	ИначеЕсли ПустаяСтрока(Название)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Продукция_Элемент.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Продукция_Элемент КАК ВСД_Продукция_Элемент
		                      |ГДЕ
		                      |	ВСД_Продукция_Элемент.Наименование = &Название");
		Запрос.УстановитьПараметр("Название", Лев(Название,150) );    //ЖД до размера реквизита 1с8
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Продукция_Элемент  "+Название+" не найдена. Создан новый элемент");
			Спр = Справочники.ВСД_Продукция_Элемент.СоздатьЭлемент();
			Спр.Наименование = Название;
			Спр.Uuid = Uuid;
			Спр.Продукция = ВСД_Продукция;
			Спр.ВидПродукции = ВСД_ВидПродукции;
			Спр.ТермическиеУсловияПеревозки = СписокКонстант.Получить("ТермУсловияПеревозки");
			Спр.Записать();	
			Ответ = спр.Ссылка;
		КонецЕсли;

	Иначе
		СообщитьИнфо("Нет данных для идентификации ВСД_Продукция_Элемент");
		Ответ ="";
	КонецЕсли;
	 	
	Возврат Ответ;

КонецФункции
	
Функция Пауза() Экспорт
	//ЗадержкаСекунд = 5; //СписокКонстант.Получить("ПаузаСек");
	Состояние("Пауза "+ПаузаСек+" сек");
	
	//tt2=_GetPerformanceCounter();			
	//Сообщить("Пауза = "+(tt2 - tt1));
	
	//Состояние("Пауза "+ПаузаСек+" сек");
	//scr = Новый("WScript.Shell");
	//scr.Run("ping 127.0.0.1 -n "+Сокрлп( Число(ПаузаСек) ),0,1); 

	//стандартное поведение функции
	Компонента.Pause(ПаузаСек*1000); // в ms
КонецФункции

Функция УдалитьXML(ИмяФайла) Экспорт
	
	////стандартное поведение функции
	//Если СписокКонстант.Получить("ОтладкаЗапросовXML")=0 Тогда 
	//	Попытка
	//		ФС.УдалитьФайл(ИмяФайла);
	//	Исключение
	//		Сообщить(ОписаниеОшибки());
	//	КонецПопытки;
	//КонецЕсли;
	
КонецФункции

Функция Получить_ApplicationID(LogFilename) Экспорт

	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	applicationId = xdto.Body.submitApplicationResponse.application.applicationId;
	
//	st = item.selectSingleNode("status").text;

	Сообщить("Ответ: ["+applicationId+"]");// ["+st+"]");
	
	возврат applicationId;
КонецФункции


Функция  ОтправитьЗапросSoap( ЗапросXML, метод ) Экспорт
	
	Сообщить("Отправляем запрос");
	результат = Компонента.SendRequestSoap(метод, ЗапросXML);
	Попытка
		appID = Получить_ApplicationID(Компонента.LogFilename);
		// ЖД а так ???: appID = Компонента.ApplicationID;
	Исключение
		appID="";
	КонецПопытки;		
	
	Возврат appID;
	
КонецФункции

//********************* Выше отправить в ГМ
// Загрузка ответов

// ************** Из основного модуля Партии
Функция НайтиПартиюПоGUID(Guid)
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Партия.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Партия КАК ВСД_Партия
		                      |ГДЕ
		                      |	ВСД_Партия.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка.ПолучитьОбъект();
		Иначе
			Ответ = Справочники.ВСД_Партия.СоздатьЭлемент();	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Партия");
		Ответ = Справочники.ВСД_Партия.СоздатьЭлемент();	
	КонецЕсли;
	 	
	Возврат Ответ;
КонецФункции

Функция ЗаписатьПартию2(stockEntry)
// Фасовка, уровниупаковки и маркировки, список производителей

	active = stockEntry.active;		
	guid = stockEntry.guid;	
	
	Партия = НайтиПартиюПоGUID(guid);
	
	Если active="false" Тогда 
		СообщитьИнфо("Изменения в партию "+Партия+" guid ["+guid+"] не внесены. Признак партии = не активна");
		Партия.УстановитьПометкуУдаления(истина);
		Возврат Партия;
	КонецЕсли;
	
	Партия.Статус = stockEntry.status;		
	Партия.GUID = guid;
	Партия.UUID = stockEntry.uuid;
	Партия.НомерЗаписи = stockEntry.entryNumber;
	Партия.ДатаИзменения = СтрокаВДату( stockEntry.updateDate );
	Партия.ВсдДата = СтрокаВДату(stockEntry.createDate);	

	Сообщить(" ВСД_Партия от "+Партия.ВсдДата+" # "+Партия.НомерЗаписи);	
	
	
	batch = stockEntry.batch;
	Партия.Продукция 	= НайтиПродукцию(batch.product.guid);
	Партия.ВидПродукции = НайтиВидПродукции(batch.subProduct.guid);
		
	Попытка НаименованиеПродукции = batch.productItem.name; Исключение	НаименованиеПродукции = ""; КонецПопытки;
	Попытка	productItemUuid = batch.productItem.uuid; Исключение productItemUuid=""; КонецПопытки;
	Попытка productItemGuid = batch.productItem.guid; Исключение productItemGuid = "" КонецПопытки;
	//ЖД Переписать ф-цию  Найти_Продукция_Элемент как в 7-ке
	//Партия.Продукция_Элемент = Найти_Продукция_Элемент(НаименованиеПродукции, productItemGuid, productItemUuid, Партия.Продукция, Партия.ВидПродукции);
	Партия.Продукция_Элемент = Найти_Продукция_Элемент2(batch.productItem, Партия.Продукция, Партия.ВидПродукции);
	Партия.НаименованиеПродукции = НаименованиеПродукции;
	Если НЕ(ПустаяСтрока(НаименованиеПродукции)) Тогда 
		Партия.Наименование = НаименованиеПродукции;
	Иначе
		Партия.Наименование = Партия.Продукция_Элемент.Наименование;
	КонецЕсли;
	
	
	//Trade Identification Number (GTIN) - идентификационный номер продукции производителя.
//	Попытка	GTIN = batch.productItem.globalID;	Исключение	GTIN="";	КонецПопытки;
    //Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
//	Попытка	Артикул = batch.productItem.code;	Исключение	Артикул="";	КонецПопытки;
		
	//<dt:packaging> Фасовка. - в партии НЕ НУЖНА	
	// Объем продукции
	
	Партия.Количество 	= Число(batch.volume);
	Партия.ЕдиницаИзмерения = НайтиЕдИзмерения( batch.unit.guid );
	
	ДатаИзготовления1="";	ДатаИзготовления=""; ДатаИзготовления2="";		
	Дата_из_XML(batch.dateOfProduction, ДатаИзготовления1, ДатаИзготовления2, ДатаИзготовления );
	Партия.ДатаИзготовления1 = ДатаИзготовления1;
	Партия.ДатаИзготовления2 = ДатаИзготовления2;
	Партия.ДатаИзготовления =  ДатаИзготовления;
		
	ДатаСрокГодности1=""; ДатаСрокГодности2=""; ДатаСрокГодности="";
	Дата_из_XML(batch.expiryDate, ДатаСрокГодности1, ДатаСрокГодности2, ДатаСрокГодности );
	Партия.ДатаСрокГодности = ДатаСрокГодности;
	Партия.ДатаСрокГодности1 = ДатаСрокГодности1;
	Партия.ДатаСрокГодности2 = ДатаСрокГодности2;
	// Номер Партии - м.б. несколько
	
	ВремНомер = ""; к = 0;
	
	СпНомераПартии = ЗначениеИзСтрокиВнутр(СписокНомеровПартий_из_XML(batch));
	Для каждого СтрокаНомера из СпНомераПартии Цикл
		ВремНомер = ВремНомер + СтрокаНомера.Значение;
		если к>0 Тогда
			ВремНомер = ВремНомер+"; ";	
		КонецЕсли;
		к=к+1;
	КонецЦикла;
	Попытка Партия.НомерПартии =  ВремНомер; Исключение	КонецПопытки; //В спр нет реквизита

	//<vd:batchID> 	bs:String255 	[1..*] 	Уникальный идентификатор производственной партии продукции. 	<vd:batchID>ПП64219</vd:batchID> 
	//Попытка	Скоропортящийся = batch.perishable; Исключение	КонецПопытки;

	Попытка ПроизводителиСписок = СписокПроизводителей_из_XML(batch.origin.producer);Исключение КонецПопытки;
	//Запишем одного из производителей в Реквизит
	Попытка
		СЗПроизводители = ЗначениеИзСтрокиВнутр(ПроизводителиСписок);			
		Партия.Производитель_Площадка = СЗПроизводители[0].Значение;	
	Исключение КонецПопытки;
	Попытка Партия.ПроизводителиСписок = ПроизводителиСписок;Исключение КонецПопытки; //Если есть реквизит либо в Табчасть
	//Партия.Производитель_Площадка = ТекПроизводитель.Значение; М.б. если 1 производитель сюда записать ???
	
//	Попытка	Страна_ГУИД = batch.origin.country.guid;	Исключение	КонецПопытки;
//	Попытка	Некач = batch.lowGradeCargo; Исключение	КонецПопытки;
	Попытка	Партия.УровниУпаковки = УровниУпаковки_из_XML(batch.packageList.package,Партия);	Исключение 	КонецПопытки;	
		
	Попытка	Партия.Получатель_ХозСубъект = НайтиХСпоGUID(batch.owner.guid); Исключение КонецПопытки;
		
	Партия.Получатель_Площадка = Отправитель_Площадка;

	Если Партия.Количество=0 Тогда 
		
		Если ( Партия.ЭтоНовый()=0 ) Тогда
			СообщитьИнфо("Количество партии guid ["+Партия.guid+"] uuid ["+Партия.uuid+"] = 0. Партия удалена. ");
			Партия.Записать();
			Партия.УстановитьПометкуУдаления(истина);
		Иначе
			СообщитьИнфо("Количество партии guid ["+Партия.guid+"] uuid ["+Партия.uuid+"] = 0. Партия пропущена. ");
			Возврат "";
		КонецЕсли;
	Иначе
		Партия.Записать();
		Партия.УстановитьПометкуУдаления(ложь);
	КонецЕсли;
	
	Возврат Партия;	
	
КонецФункции

Процедура ЗагрузитьXML_Партии2(имяФайла, докОснование="") Экспорт
	
	Если НайтиОшибки(имяФайла, докОснование)>0 Тогда 
		Возврат;
	КонецЕсли;	
	
    СообщитьИнфо("Загрузка XML-файла: "+ИмяФайла);    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(имяФайла);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	//Вариации загрузки партий при разных запросах ЖД доработать
	
	 //+<merc:processIncomingConsignmentResponse 
	Попытка	seList = xdto.application.result.processIncomingConsignmentResponse.StockEntry;	Исключение	seList = ""; КонецПопытки;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		Попытка	seList = xdto.application.result.prepareOutcomingConsignmentResponse.StockEntry; Исключение	seList = ""; КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		//Запрос акт партий
		Попытка	seList = xdto.application.result.getStockEntryListResponse.stockEntryList.StockEntry; Исключение seList = ""; КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		// Выпуск
		Попытка seList = xdto.application.result.registerProductionOperationResponse.stockEntryList.StockEntry;	Исключение	seList = "";КонецПопытки;
	КонецЕсли;
		
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		// Анулирование
		Попытка	seList = xdto.application.result.withdrawVetDocumentResponse.StockEntry; Исключение	seList = ""; КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		Сообщить("Не далось прочитать Партии из "+имяФайла);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		stockEntryList = Новый Массив;
		stockEntryList.Добавить(seList);
	Иначе
		stockEntryList = seList;
	КонецЕсли;
			
	//Сообщить("Получено "+seList.length+" записей","i");
	Для каждого stockEntry из stockEntryList Цикл		
					
		Партия = ЗаписатьПартию2(stockEntry);
		
		Если докОснование<>"" Тогда 
			Партия.ДокОснование = докОснование;
			Партия.Записать();
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры

// ************** Окончание Из основного модуля Партии


Функция ЗагрузитьXML_ВСД2(имяФайла, докОснование="")
	
	Если НайтиОшибки(имяФайла, докОснование)>0 Тогда 
		Возврат "";
	КонецЕсли;		
	
	// ЖД грузанем в ТЗ
	ВСДВходящие.Очистить();
	
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(имяфайла);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	applicationId = xdto.application.applicationId;
	
	Попытка
		seList = xdto.application.result.getVetDocumentListResponse.vetDocumentList.vetDocument;	
	Исключение
		Возврат "";
	КонецПопытки;
	
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		vetDocumentList = Новый Массив;
		vetDocumentList.Добавить(seList);
	Иначе
		vetDocumentList = seList;
	КонецЕсли;
	
	Для каждого vetDocument из vetDocumentList Цикл
		ТЗВСД = ВСДВходящие.Добавить();
        ТЗВСД.Организация = Организация;
		ТЗВСД.НомерДок = ТЗВСД.НомерСтроки;
		ТЗВСД.uuid =  vetDocument.uuid;
		
		// ищем Сведения об измененных ВСД. 
		Попытка ТЗВСД.forma 	 = vetDocument.vetDForm;	Исключение 	Продолжить;	КонецПопытки; 
		
		ТЗВСД.Статус 	 = vetDocument.vetDStatus;
		ТЗВСД.type = vetDocument.vetDType;
//		Попытка Завершен = vetDocument.finalized; 	Исключение 	КонецПопытки;
//		Попытка	Lastupd = vetDocument.lastUpdateDate; Исключение КонецПопытки;
		
		// Бумажный ВСД
		Попытка ТЗВСД.ВсдСерия = vetDocument.issueSeries; 	Исключение	КонецПопытки;
		Попытка ТЗВСД.ВСДНомер = vetDocument.issueNumber; 	Исключение КонецПопытки;
		ТЗВСД.ВидВСД = ?(ЗначениеЗаполнено(ТЗВСД.ВСДНомер),1,2);
	
		ТЗВСД.Датадок = СтрокаВДату(vetDocument.issueDate);
		ТЗВСД.ВСДДата = СтрокаВДату(vetDocument.issueDate);
		
		ЭтоТранспортныйВСД=0;
		Попытка
			batch = vetDocument.certifiedBatch.batch;  //Продуктивный ВСД
		Исключение
			Попытка
				//Сертифицированная партия.
				//Сведения о партии продукции. 
				batch = vetDocument.certifiedConsignment.batch;  //ЖД Транспортный ВСД -другая структура ответа буду делать отдельно
				ЭтоТранспортныйВСД=1;
			Исключение
				batch="";
			КонецПопытки;
		КонецПопытки; 
		
		Если ЭтоТранспортныйВСД = 1 Тогда
			 //Отправитель/Владелец 
			Попытка ТЗВСД.Отправитель_ХозСубъект = НайтиХСпоGUID(vetDocument.certifiedConsignment.consignor.businessEntity.guid); Исключение КонецПопытки;
			Попытка ТЗВСД.Отправитель_Площадка 	= НайтиПлощадку(vetDocument.certifiedConsignment.consignor.enterprise.guid); Исключение КонецПопытки;
			Попытка ТЗВСД.Получатель_ХозСубъект = НайтиХСпоGUID(vetDocument.certifiedConsignment.consignee.businessEntity.guid); Исключение КонецПопытки;
			Попытка ТЗВСД.Получатель_Площадка 	= НайтиПлощадку(vetDocument.certifiedConsignment.consignee.enterprise.guid); Исключение КонецПопытки;
			Попытка ТЗВСД.ВладелецХС = НайтиХСпоGUID(batch.owner.guid);	Исключение КонецПопытки;
			Если НЕ(ЗначениеЗаполнено(ТЗВСД.ВладелецХС)) Тогда
				ТЗВСД.ВладелецХС = ТЗВСД.Отправитель_ХозСубъект;	
			КонецЕсли;
			
	        Попытка ТЗВСД.Перевозчик_ХозСубъект 	= НайтиХСпоGUID(vetDocument.certifiedConsignment.broker.guid); Исключение КонецПопытки;
//			Если НЕ(ЗначениеЗаполнено(ТЗВСД.Перевозчик_ХозСубъект)) Тогда
//				Сообщить("- Остутствует в БД Перевозчик_ХС с ГУИД "+ПеревозчикГУИД);    
//			КонецЕсли;
			
			Попытка
				transportInfo = vetDocument.certifiedConsignment.transportInfo;
				ТЗВСД.ТипТС = transportInfo.transportType;//("*[local-name()='transportType'] ").text;
				Если ТЗВСД.ТипТС = "1" Тогда
					ТЗВСД.номеравто = transportInfo.transportNumber.vehicleNumber;//("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='vehicleNumber']").text; 
					Попытка ТЗВСД.номерПолуприцепа = transportInfo.transportNumber.trailerNumber; Исключение КонецПопытки;
					Попытка ТЗВСД.номерКонтейнера = transportInfo.transportNumber.containerNumber; Исключение КонецПопытки;
					ТЗВСД.номерПолуприцепа = ?(ТЗВСД.номерПолуприцепа = "ОбъектXDTO","",ТЗВСД.номерПолуприцепа);
					ТЗВСД.номерКонтейнера = ?(ТЗВСД.номерКонтейнера = "ОбъектXDTO","",ТЗВСД.номерКонтейнера);
				Иначеесли ТЗВСД.ТипТС = "2" Тогда
					ТЗВСД.номеравто = transportInfo.transportNumber.wagonNumber;
				Иначеесли ТЗВСД.ТипТС = "3" Тогда
					ТЗВСД.номеравто = transportInfo.transportNumber.flightNumber;
				Иначеесли (ТЗВСД.ТипТС = "4") или (ТЗВСД.ТипТС = "5") или (ТЗВСД.ТипТС = "6") Тогда
					ТЗВСД.номеравто = transportInfo.transportNumber.shipName;
	//			Иначеесли ТЗВСД.ТипТС = "7" Тогда
				
				КонецЕсли;
			исключение 	КонецПопытки;
			Попытка ТЗВСД.термическоесостояние = Число(ТермическиеУсловияПеревозки2.НайтиПоЗначению(vetDocument.certifiedConsignment.transportStorageType).Представление); 	Исключение 	КонецПопытки;
//			ТермУсловия = ТермическиеУсловияПеревозки.НайтиПоЗначению(термическоесостояние); 		
//			ТЗВСД.термическоесостояние = Число(ТермУсловия.Представление);
			
			
		КонецЕсли; // транспортный ВСД
		
		Попытка ТЗВСД.Продукция 	= НайтиПродукцию(batch.product.guid); Исключение КонецПопытки;
		Попытка ТЗВСД.ВидПродукции 	= НайтиВидПродукции(batch.subProduct.guid); Исключение КонецПопытки;
		Попытка	ТЗВСД.НаименованиеПродукции = batch.productItem.name; Исключение КонецПопытки;
		Попытка productItemUuid = batch.productItem.uuid; Исключение productItemUuid = "" КонецПопытки;
		Попытка productItemGuid = batch.productItem.guid; Исключение productItemGuid = "" КонецПопытки;
		
		//ЖД Переписать ф-цию  Найти_Продукция_Элемент как в 7-ке
		//ТЗВСД.Продукция_Элемент = Найти_Продукция_Элемент(ТЗВСД.НаименованиеПродукции, productItemGuid,productItemUuid, ТЗВСД.Продукция, ТЗВСД.ВидПродукции);
		ТЗВСД.Продукция_Элемент = Найти_Продукция_Элемент2(batch.productItem, ТЗВСД.Продукция, ТЗВСД.ВидПродукции);
		//Trade Identification Number (GTIN) - идентификационный номер продукции производителя.
		Попытка ТЗВСД.GTIN = batch.productItem.globalID;	Исключение 	КонецПопытки;
        //Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
		Попытка	ТЗВСД.Артикул = batch.productItem.code;	Исключение	КонецПопытки;
		
		//<dt:packaging> Фасовка.  
		// Параметры фасовки привязаны к ВСД_ПродукцияЭлемент
		Попытка Фасовка_из_XML(batch.productItem.packaging,ТЗВСД.ФасовкаНаименование,ТЗВСД.ФасовкаФормаУпаковки,ТЗВСД.ФасовкаКоличество,ТЗВСД.ФасовкаОбъем,ТЗВСД.ФасовкаЕдиницаИзм); Исключение КонецПопытки;
		
		// Объем продукции
		Попытка	ТЗВСД.Количество 		= Число(batch.volume); Исключение КонецПопытки;
		Попытка	ТЗВСД.ЕдиницаИзмерения	= НайтиЕдИзмерения( batch.unit.guid ); Исключение КонецПопытки;
		
		ДатаИзготовления1="";	ДатаИзготовления=""; ДатаИзготовления2="";		
		Дата_из_XML(batch.dateOfProduction, ДатаИзготовления1, ДатаИзготовления2, ДатаИзготовления );
		ТЗВСД.ДатаИзготовления1=ДатаИзготовления1;
		ТЗВСД.ДатаИзготовления2=ДатаИзготовления2; 
		ТЗВСД.ДатаИзготовления = ДатаИзготовления;
		
		
		ДатаСрокГодности1=""; ДатаСрокГодности2=""; ДатаСрокГодности="";
		Дата_из_XML(batch.expiryDate, ДатаСрокГодности1, ДатаСрокГодности2, ДатаСрокГодности );
		ТЗВСД.ДатаСрокГодности1 = ДатаСрокГодности1;
		ТЗВСД.ДатаСрокГодности = ДатаСрокГодности;
		ТЗВСД.ДатаСрокГодности2 = ДатаСрокГодности2;
		Попытка ТЗВСД.НомерПартии =  СписокНомеровПартий_из_XML(batch); Исключение	КонецПопытки; //В спр нет реквизита
        //<vd:batchID> 	bs:String255 	[1..*] 	Уникальный идентификатор производственной партии продукции. 	<vd:batchID>ПП64219</vd:batchID> 
		Попытка ТЗВСД.Скоропортящийся = ?(batch.perishable="true",1,0); Исключение	КонецПопытки;
		Попытка ТЗВСД.Некачественный =  ?(batch.lowGradeCargo="true",1,0); Исключение	КонецПопытки;
		
		//Информация о предприятие-производителе продукции.
		//ЖД  возможен список предприятий
		Попытка ТЗВСД.ПроизводителиСписок = СписокПроизводителей_из_XML(batch.origin.producer);Исключение КонецПопытки; 
		Попытка ТЗВСД.Страна_ГУИД = batch.origin.country.guid; Исключение КонецПопытки;

		Попытка	ТЗВСД.УровниУпаковки = УровниУпаковки_из_XML(batch.packageList.package);	Исключение 	КонецПопытки;
		
		// batch закончился

		// <vd:authentication>  Результаты осмотра/исследований партии. Заключение ветеринарного врача/специалиста.
		//<vd:cargoInspected>false</vd:cargoInspected>   Осуществлен контроль гос.ветврачом на соответствие требованиям. 
        // <vd:cargoExpertized>UNFULFILLED</vd:cargoExpertized>  Проводилась ли ветсанэкспертиза. 
        // <vd:specialMarks> Особые отметки / примечания для ВСД.
		Попытка	ТЗВСД.cargoInspected = ?(vetDocument.authentication.cargoInspected="true",1,0);	Исключение	КонецПопытки;
        Попытка	cargoExpertized = vetDocument.authentication.cargoExpertized;Исключение	КонецПопытки;
		Попытка ТЗВСД.РезультатыИсследований = Перечисления.ВСД_РезультатИсследования[cargoExpertized];Исключение	КонецПопытки; 
		
		Попытка	ТЗВСД.особыеотметки = vetDocument.authentication.specialMarks; 	Исключение	КонецПопытки;
		Попытка	ТЗВСД.ВСДместность = vetDocument.authentication.locationProsperity;	Исключение  КонецПопытки; 
		
        // след блок Сделать ЖД Если Нужен
		//·······<vd:laboratoryResearch> 	vd:LaboratoryResearchEvent 	[0..*] 	Сведения о проведенных лабораторных исследованиях. 
		
		//Попытка referencedDocument = vetDocument.referencedDocument; Исключение referencedDocument = ""; КонецПопытки;
		Попытка ТЗВСД.СвязанныеДокументы = СвязанныеДокументы_из_XML(vetDocument.referencedDocument); Исключение  КонецПопытки;
		
		// Получим ТТН
		Попытка
			ТЗДоков = ЗначениеИзСтрокиВнутр(ТЗВСД.СвязанныеДокументы);
			СтрокаТЗ = ТЗДоков.Найти(1, "ТипДокумента");
			Если СтрокаТЗ  = Неопределено Тогда
				СтрокаТЗ = ТЗДоков.Найти(2, "ТипДокумента");
				Если СтрокаТЗ  = Неопределено Тогда
					СтрокаТЗ = ТЗДоков.Найти(3, "ТипДокумента");
					Если СтрокаТЗ  = Неопределено Тогда
						СтрокаТЗ = ТЗДоков.Найти(4, "ТипДокумента");
						Если СтрокаТЗ  = Неопределено Тогда
							СтрокаТЗ = ТЗДоков.Найти(5, "ТипДокумента");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ(СтрокаТЗ = Неопределено) Тогда
				ТЗВСД.ттнСерия = СтрокаТЗ.СерияДокумента;
				ТЗВСД.ттнномер = СтрокаТЗ.НомерДокумента;
				ТЗВСД.ттндата = СтрокаВДату(СтрокаТЗ.ДатаДокумента);
				Попытка ТЗВСД.ттнТип = СтрокаТЗ.ТипДокумента; Исключение КонецПопытки;
			КонецЕсли;
		Исключение КонецПопытки;
	КонецЦикла;
	
	Возврат "";	
КонецФункции

Процедура СоздатьВСД2Входящие()
	Сообщить("Функция создания документов не реализована, погасите без загрузки в 1с");
КонецПроцедуры

Процедура ОбработатьПолученныеДанные() Экспорт
//	Если ФС.СуществуетФайл(ЭтотОбъект.СтрИмяФайла) = 0 Тогда
//	    Сообщить("Отсутствует файл ответа");
//		Возврат;
//	КонецЕсли;
	ЗагрузитьXML_ВСД2(ЭтотОбъект.СтримяФайла);
	Если ФлНеЗагружать = 0 Тогда
		СоздатьВСД2Входящие();    
	КонецЕсли;
//	РаскраситьСписокДокументов();	
КонецПроцедуры


// Получить ВСД для гашения от Меркурия

//*********************************

Функция  ПолучитьСписокВСД2_ОтветXML(appID)

	//стандартное поведение функции
	Если НЕ(ЗначениеЗаполнено(appID)) Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	Пауза( );
	
	Сообщить("Отправляем запрос " );
	Результат = Компонента.SendRequestResult( appID );

	СтрИмяФайла = Компонента.LogFilename;
	
	ОбработатьПолученныеДанные(); // Загрузить в ТЗ, обработать ТЗ
	
	УдалитьXML( Компонента.LogFilename);
		
	Возврат Результат;
КонецФункции


Функция ПолучитьСписокВСД2_ЗапросXML(ГУИД_Площадки, vetDocumentType, vetDocumentStatus, Смещение)

	Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:getVetDocumentListRequest>
	|            <merc:localTransactionId>a1</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|            <bs:listOptions>
	|              <bs:count>1000</bs:count>
	|              <bs:offset>"+Смещение+"</bs:offset>
	|            </bs:listOptions>
	|            <vd:vetDocumentType>"+ vetDocumentType +"</vd:vetDocumentType>
	|            <vd:vetDocumentStatus>"+ vetDocumentStatus +"</vd:vetDocumentStatus>
	|            <dt:enterpriseGuid>"+ ГУИД_Площадки +"</dt:enterpriseGuid>
	|          </merc:getVetDocumentListRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";
	Возврат Запрос;
КонецФункции



// Оформить входящие партии
//**********************************
Функция Проверка_ВСД2_Входящий(док) 

	//стандартное поведение функции	
	Результат = 1; //все в порядке
	
	Если НЕ(ЗначениеЗаполнено(док.Отправитель_ХозСубъект.GUID)) Тогда 
		СообщитьОшибку("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников");
		результат = 0;
	КонецЕсли;

	Если НЕ(ЗначениеЗаполнено(док.Отправитель_Площадка.GUID)) Тогда 
		СообщитьОшибку("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников");
		результат = 0;
	КонецЕсли;
	Если НЕ(ЗначениеЗаполнено(док.Получатель_ХозСубъект.GUID)) Тогда 
		СообщитьОшибку("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников");
		результат = 0;
	КонецЕсли;
	Если НЕ(ЗначениеЗаполнено(док.Получатель_Площадка.GUID)) Тогда 
		СообщитьОшибку("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников");
		результат = 0;
	КонецЕсли;
	Если НЕ(ЗначениеЗаполнено(Док.ПроизводителиСписок)) Тогда 
		СообщитьОшибку("Не указан Производитель_Площадка.GUID Выполните синхронизацию справочников");
		результат = 0;
	КонецЕсли;

	Если док.ВидВСД = 1 Тогда 
		//бумажный
		Если НЕ(ЗначениеЗаполнено(док.ВсдНомер)) Тогда 
			СообщитьОшибку("Не указан ВсдНомер ");
			результат = 0;
		КонецЕсли;
		Если НЕ(ЗначениеЗаполнено(док.ВсдДата)) Тогда 
			СообщитьОшибку("Не указан ВсдДата ");
			результат = 0;
		КонецЕсли;
	Иначе
		//электронный
		Если НЕ(ЗначениеЗаполнено(док.UUID)) Тогда 
			СообщитьОшибку("Не указан UUID ");
			результат = 0;
		КонецЕсли;
		
	КонецЕсли;
		
	Если НЕ(ЗначениеЗаполнено(док.ЕдиницаИзмерения)) Тогда 
		СообщитьОшибку("Не указана ЕдиницаИзмерения ");
		результат = 0;
	КонецЕсли;	
	
	Возврат результат;
КонецФункции


//*********************************************
// создание запроса и отправка без создания документа 

Функция ВСД2_ВходящийБумажныйГашение_ЗапросXML(док)
	Запрос = "
    |              <vd:issueSeries>"+СокрЛП(док.ВСДСерия)+"</vd:issueSeries>
    |              <vd:issueNumber>"+СокрЛП(док.ВСДномер)+"</vd:issueNumber>
    |              <vd:issueDate>"+ ДатаXML(док.ВсдДата) +"</vd:issueDate>
    |              <vd:vetDForm>"+СокрЛП(док.ФормаВСД)+"</vd:vetDForm>
    |              <vd:certifiedConsignment>
	|              <vd:consignor>
	|                <dt:businessEntity>
	|                  <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
	|                </dt:businessEntity>
	|                </dt:businessEntity>";
	Если ЗначениеЗаполнено(док.Отправитель_Площадка) Тогда // У импортных ВСД отсутствует
		Запрос = запрос +"
		|                <dt:enterprise>
		|                  <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
		|                </dt:enterprise>";
	КонецЕсли;
	// У импортных ВСД может отсутствовать
	ВремПолучатель_Площадка = ?(ЗначениеЗаполнено(док.Получатель_Площадка) ,док.Получатель_Площадка,СписокКонстант.Получить("Отправитель_Площадка")); // возьмем из Парметров
   Запрос = запрос +"
	|              </vd:consignor>
	|              <vd:consignee>
	|                <dt:businessEntity>
	|                  <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
	|                </dt:businessEntity>
	|                <dt:enterprise>
	|                  <bs:guid>"+ СокрЛП(ВремПолучатель_Площадка.GUID) +"</bs:guid>
	|                </dt:enterprise>
	|              </vd:consignee>";

	
	Если ЗначениеЗаполнено(СокрЛП(док.Перевозчик_ХозСубъект)) Тогда  
			Запрос=Запрос+"			
			|        <vd:broker>
			|          <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
			|        </vd:broker>";
		КонецЕсли;
		Если ЗначениеЗаполнено(СокрЛП(док.ТипТС)) Тогда  
			Запрос=Запрос+"			
			|        <vd:transportInfo>
			|          <vd:transportType>"+СокрЛП(док.ТипТС)+"</vd:transportType>
			|          <vd:transportNumber>";
//			|"; 
	
			Если СокрЛП(Док.ТипТС) = "1" Тогда
				Попытка
					// Странный важный момент - контейнер д.б. первым !
				Если ЗначениеЗаполнено(док.номерКонтейнера) Тогда
			    	Запрос = Запрос+"
					|            <vd:containerNumber>"+ СокрЛП(док.номерКонтейнера) +"</vd:containerNumber>
					|";
				КонецЕсли;
				Исключение КонецПопытки;

				Запрос = Запрос+"
				|            <vd:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</vd:vehicleNumber>
				|"; 
				Попытка
				Если ЗначениеЗаполнено(док.номерПолуприцепа) Тогда
			    	Запрос = Запрос+"
					|            <vd:trailerNumber>"+ СокрЛП(док.номерПолуприцепа) +"</vd:trailerNumber>
					|";
				КонецЕсли;
				Исключение КонецПопытки;
			иначеЕсли СокрЛП(Док.ТипТС) = "2" Тогда
		    Запрос = Запрос+"
			|            <vd:wagonNumber>"+ СокрЛП(док.номерАвто) +"</vd:wagonNumber>
			|"; 
			иначеЕсли СокрЛП(Док.ТипТС) = "3" Тогда
		    Запрос = Запрос+"
			|            <vd:flightNumber>"+ СокрЛП(док.номерАвто) +"</vd:flightNumber>
			|";
			иначеЕсли (СокрЛП(Док.ТипТС) = "4") или (СокрЛП(Док.ТипТС) = "5") или (СокрЛП(Док.ТипТС) = "6") Тогда
		    Запрос = Запрос+"
			|            <vd:shipName>"+ СокрЛП(док.номерАвто) +"</vd:shipName>
			|";
			
			КонецЕсли;	
			Запрос=Запрос+"
			|          </vd:transportNumber>
			|        </vd:transportInfo>";
	КонецЕсли;
	Если ЗначениеЗаполнено(док.ТермическоеСостояние) Тогда
		Запрос=Запрос+"			
		|              <vd:transportStorageType>"+ ТермическиеУсловияПеревозки2.Получить( док.ТермическоеСостояние - 1).Значение +"</vd:transportStorageType>";
	КонецЕсли;
	Запрос=Запрос+"			
	|              <vd:batch>
	|                <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
	|                <vd:product>
	|                  <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
	|                </vd:product>
	|                <vd:subProduct>
	|                  <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
	|                </vd:subProduct>
	|                <vd:productItem>"; 
	
// <dt:globalID> 	dt:GTINType 	[0..1] 	Trade Identification Number (GTIN) - идентификационный номер продукции производителя. Уникальность не проверяется. 	<dt:globalID>85672854</dt:globalID>
//·<dt:name> 	bs:String255 	[0..1] 	Наименование продукции. 	<dt:name>Наименование</dt:name>
// <dt:code> 	bs:String255 	[0..1] 	Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
// Артикул должен быть уникален в пределах одного производителя 	<dt:code>12</dt:code> 	

	Если ЗначениеЗаполнено(док.Продукция_Элемент.GUID) Тогда
		Запрос = Запрос + "
		|              <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>";
	КонецЕсли;
	Попытка
		Запрос = Запрос + "
		|              <dt:name>"+ СокрЛП(док.НаименованиеПродукции) +"</dt:name>";
	Исключение
		Запрос = Запрос + "
		|              <dt:name>"+ СокрЛП(док.Продукция_Элемент.Наименование) +"</dt:name>";
	КонецПопытки;


//	Если ЗначениеЗаполнено(док.GTIN) Тогда
//		Запрос = Запрос + "
//		|              <dt:globalID>"+ СокрЛП(док.GTIN) +"</dt:globalID>";
//	КонецЕсли;
//	Если ЗначениеЗаполнено(док.Артикул)  Тогда
//		Запрос = Запрос + "
//		|              <dt:code>"+ СокрЛП(док.Артикул) +"</dt:code>";
//	КонецЕсли;
	
// сведения о фасовке
	Если ЗначениеЗаполнено(док.ФасовкаФормаУпаковки) Тогда
		Запрос = Запрос + "
		|             <dt:packaging>
		|               <dt:packagingType>
		|                  <bs:guid>"+ СокрЛП(док.ФасовкаФормаУпаковки.GUID) +"</bs:guid>
		|               </dt:packagingType>
		|               <dt:quantity>"+ Формат(док.ФасовкаКоличество, "ЧРД=.; ЧГ=0") +"</dt:quantity>
		|               <dt:volume>"+ Формат(док.ФасовкаОбъем, "ЧРД=.; ЧГ=0") +"</dt:volume>
		|               <dt:unit>
		|                  <bs:guid>"+ СокрЛП(док.ФасовкаЕдиницаИзм.GUID) +"</bs:guid>
		|               </dt:unit>
		|             </dt:packaging>";
	КонецЕсли;
	
	Запрос = Запрос + "
			|            </vd:productItem>
			|            <vd:volume>"+ Формат(Док.Количество, "ЧРД=.; ЧГ=0") +"</vd:volume>
			|            <vd:unit>
			|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
			|            </vd:unit>";
		Если (ЗначениеЗаполнено(док.ДатаИзготовления1)) или (ЗначениеЗаполнено(док.ДатаИзготовления2)) или (ЗначениеЗаполнено(док.ДатаИзготовления)) Тогда
			Запрос = Запрос + "
        				|                <vd:dateOfProduction>"; 

			Если (ЗначениеЗаполнено(док.ДатаИзготовления1)) Тогда
				Запрос = Запрос + "
				|              <vd:firstDate>
				|                <dt:year>"+ДатаГод(док.ДатаИзготовления1)+"</dt:year>
				|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</dt:month>
				|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</dt:day>
				|                <dt:hour>0</dt:hour>
				|              </vd:firstDate>";
			КонецЕсли;
			Если ((ЗначениеЗаполнено(док.ДатаИзготовления2)) и 
					(док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
				Запрос = Запрос + "
				|              <vd:secondDate>
				|                <dt:year>"+ ДатаГод(док.ДатаИзготовления2) +"</dt:year>
				|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</dt:month>
				|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</dt:day>
				|                <dt:hour>0</dt:hour>
				|              </vd:secondDate>";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(док.ДатаИзготовления) Тогда
				Запрос = Запрос + "
				|              <vd:informalDate>"+ СокрЛП(док.ДатаИзготовления) +"</vd:informalDate>";
			КонецЕсли;
			Запрос = Запрос + "
			|                </vd:dateOfProduction>"; 
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(док.ДатаСрокГодности1) ) или (ЗначениеЗаполнено(док.ДатаСрокГодности2) ) или (ЗначениеЗаполнено(док.ДатаСрокГодности)) Тогда
			Запрос = Запрос + "
				|                <vd:expiryDate>";
			Если (ЗначениеЗаполнено(док.ДатаСрокГодности1)) Тогда
				Запрос = Запрос + "
				|              <vd:firstDate>
				|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</dt:year>
				|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</dt:month>
				|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</dt:day>
				|                <dt:hour>0</dt:hour>
				|              </vd:firstDate>";
			КонецЕсли;
			Если ((ЗначениеЗаполнено(док.ДатаСрокГодности2)) и 
					(док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
				Запрос = Запрос + "
				|              <vd:secondDate>
				|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</dt:year>
				|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</dt:month>
				|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</dt:day>
				|                <dt:hour>0</dt:hour>
				|              </vd:secondDate>";
			КонецЕсли; 
			Если ЗначениеЗаполнено(док.ДатаСрокГодности) Тогда
				Запрос = Запрос + "
				|              <vd:informalDate>"+ СокрЛП(док.ДатаСрокГодности) +"</vd:informalDate>";
			КонецЕсли;
			
			Запрос = Запрос + "
				|            </vd:expiryDate>";
		КонецЕсли;
		Попытка
			Если ЗначениеЗаполнено(док.НомерПартии) Тогда
				Запрос = Запрос + "
				|			<vd:batchID>"+СокрЛП(док.НомерПартии)+"</vd:batchID>";
			КонецЕсли;	
		Исключение КонецПопытки;	

//			|           <vd:batchID>BN-875999954</vd:batchID>    Уникальный идентификатор производственной партии продукции.
		Попытка ГУИДСтраны = СокрЛП( док.Страна_Гуид); Исключение ГУИДСтраны = СокрЛП( СписокКонстант.Получить("Страна").GUID); КонецПопытки;

		Запрос = Запрос + "
			|			<vd:perishable>"+НашеБулево(док.скоропортящийся)+"</vd:perishable>
			|			<vd:origin>
			|            <vd:country>
			|              <bs:guid>"+ ГУИДСтраны +"</bs:guid>
			|            </vd:country>";


			
		Если ЗначениеЗаполнено(Док.ПроизводителиСписок) Тогда  
			СпПроизводители = ЗначениеИзСтрокиВнутр(Док.ПроизводителиСписок);
			Для Каждого Производитель из СпПроизводители Цикл
				Запрос=Запрос+"
				|        		<vd:producer>
				|          			<dt:enterprise>
				|            			<bs:guid>"+ СокрЛП(Производитель.Площадка.GUID) +"</bs:guid>
				|          			</dt:enterprise>
				|					<dt:role>"+ СокрЛП(Производитель.Роль) +"</dt:role>
				|        		</vd:producer>";
			КонецЦикла;
		КонецЕсли;
			
			
		Запрос = Запрос + "
	|                </vd:origin>
	|                <vd:lowGradeCargo>"+НашеБулево(док.некачественный)+"</vd:lowGradeCargo>"; 
//<vd:packageList> 	dt:PackageList 	[0..1] 	Список физической упаковки. ЖД Уровни упаковки
	Если ЗначениеЗаполнено(док.УровниУпаковки) Тогда 
    	ТЗУровни = ЗначениеИзСтрокиВнутр(док.УровниУпаковки);
	Иначе
		ТЗУровни = "";
	КонецЕсли;
	Если ТипЗнч(ТЗУровни) = Тип("ТаблицаЗначений") Тогда
		Запрос=Запрос+"
		|                <vd:packageList>";

		Для каждого стрУровня из ТЗУровни Цикл 
			Запрос=Запрос+"
			|                  <dt:package>
			|                    <dt:level>"+стрУровня.НомерУровня+"</dt:level>";
			Если ЗначениеЗаполнено(ТЗУровни.Упаковка.GUID) Тогда
				Запрос=Запрос+"
				|                    <dt:packingType>
				|                      <bs:guid>"+ СокрЛП(стрУровня.Упаковка.GUID) +"</bs:guid>
				|                    </dt:packingType>";
			КонецЕсли;
			Запрос=Запрос+"
			|                    <dt:quantity>"+ Формат(стрУровня.Колво,"ЧРД=.; ЧГ=0") +"</dt:quantity>";
			Попытка
				СзМаркировок = ЗначениеИзСтрокиВнутр(стрУровня.Маркировки);
			исключение
				СзМаркировок = "";
			КонецПопытки;
			Если ТипЗнч(СзМаркировок) = Тип("СписокЗначений") Тогда
				для каждого стрМаркировки из СзМаркировок Цикл				
					стрМарк = стрМаркировки.Представление;
					ЗнМарк = стрМаркировки.Значение;
					
					Запрос=Запрос+"
					|                    <dt:productMarks class='"+стрМарк+"'>"+знМарк+"</dt:productMarks>";
				КонецЦикла;
			КонецЕсли;
			Запрос=Запрос+"
       		|                  </dt:package>";

		КонецЦикла;
		Запрос=Запрос+"
		|                </vd:packageList>";

	КонецЕсли;

//		ТЗВСД.cargoInspected = ?(cargoInspected="true",1,0);//cargoInspected;
//		ТЗВСД.РезультатыИсследований = Перечисление.ВСД2_РезультатИсследований.ЗначениеПоИдентификатору(cargoExpertized); 

		Запрос=Запрос+"
	|              </vd:batch>
	|              </vd:certifiedConsignment>
    |              <vd:authentication>
    |                <vd:purpose>
    |                  <bs:guid>"+ СокрЛП( СписокКонстант.Получить("Цель").Guid ) +"</bs:guid>
    |                </vd:purpose>
    |                <vd:cargoInspected>"+ НашеБулево(док.cargoInspected) +"</vd:cargoInspected>
    |                <vd:cargoExpertized>"+док.РезультатыИсследований.Идентификатор()+"</vd:cargoExpertized>
    |                <vd:locationProsperity>"+СокрЛП(Док.ВСДМестность)+"</vd:locationProsperity>
    |                <vd:specialMarks>"+СокрЛП(док.ОсобыеОтметки)+"</vd:specialMarks>
    |              </vd:authentication>";
//    |              <vd:precedingVetDocuments>ВСД №5891</vd:precedingVetDocuments> 



	//ЖД не факт, что в Бумажном это нужно, оставлю только ТТН 
//	Если ЗначениеЗаполнено(док.СвязанныеДокументы) Тогда 
//    	ТЗДокументов = ЗначениеИзСтрокиВнутр(док.СвязанныеДокументы);
//	Иначе
//		ТЗДокументов = "";
//	КонецЕсли;
	Если ЗначениеЗаполнено(док.ТтнНомер) Тогда
		Запрос=Запрос+"
    	|              <vd:referencedDocument>
		|                <vd:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</vd:issueSeries>
		|                <vd:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:issueNumber>
	    |                <vd:issueDate>"+ ДатаXML(док.ТтнДата) +"</vd:issueDate>
    	|                <vd:type>1</vd:type>
	    |                <vd:relationshipType>1</vd:relationshipType>
    	|              </vd:referencedDocument>";
	КонецЕсли;
	
		
		Запрос=Запрос+"
    |              <vd:statusChange>
    |                <vd:status>CONFIRMED</vd:status>
    |                <vd:specifiedPerson>
    |                  <vd:fio>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_fio")) +"</vd:fio>
    |                  <vd:post>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_post")) +"</vd:post>
    |                </vd:specifiedPerson>
    |                <vd:actualDateTime>"+ ДатаXML(док.ДатаДок,"T00:00:00") +"</vd:actualDateTime>
    |              </vd:statusChange>";
                
	
	Возврат Запрос;
КонецФункции

// Запрос на гашение ВСД входящего ЖД 11/06/2018
Функция ВСД2_входящийГашение_ЗапросXML(док)

		Запрос="
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>  
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:processIncomingConsignmentRequest>
	|            <merc:localTransactionId>"+СокрЛП(док.НомерДок)+"</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>";
   Запрос = запрос +"
	|            <merc:delivery>
	|              <vd:deliveryDate>" + ДатаXML(?(ЗначениеЗаполнено(док.ТтнДата),док.ТтнДата,ТекущаяДата()), "T00:00:00") + "</vd:deliveryDate>
	|              <vd:consignor>
	|                <dt:businessEntity>
	|                  <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
	|                </dt:businessEntity>";
	Если ЗначениеЗаполнено(док.Отправитель_Площадка) Тогда // У импортных ВСД отсутствует
		Запрос = запрос +"
		|                <dt:enterprise>
		|                  <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
		|                </dt:enterprise>";
	КонецЕсли;
	// У импортных ВСД может отсутствовать
	ВремПолучатель_Площадка = ?(ЗначениеЗаполнено(док.Получатель_Площадка) ,док.Получатель_Площадка,СписокКонстант.Получить("Отправитель_Площадка")); // возьмем из Парметров
   Запрос = запрос +"
	|              </vd:consignor>
	|              <vd:consignee>
	|                <dt:businessEntity>
	|                  <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
	|                </dt:businessEntity>
	|                <dt:enterprise>
	|                  <bs:guid>"+ СокрЛП(ВремПолучатель_Площадка.GUID) +"</bs:guid>
	|                </dt:enterprise>
	|              </vd:consignee>
	|              <vd:consignment>
	|                <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
	|                <vd:product>
	|                  <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
	|                </vd:product>
	|                <vd:subProduct>
	|                  <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
	|                </vd:subProduct>
	|                <vd:productItem>"; 
	
// <dt:globalID> 	dt:GTINType 	[0..1] 	Trade Identification Number (GTIN) - идентификационный номер продукции производителя. Уникальность не проверяется. 	<dt:globalID>85672854</dt:globalID>
//·<dt:name> 	bs:String255 	[0..1] 	Наименование продукции. 	<dt:name>Наименование</dt:name>
// <dt:code> 	bs:String255 	[0..1] 	Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
// Артикул должен быть уникален в пределах одного производителя 	<dt:code>12</dt:code> 	

	Если ЗначениеЗаполнено(док.Продукция_Элемент.GUID) Тогда
		Запрос = Запрос + "
		|              <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>";
	КонецЕсли;
	Попытка
		Запрос = Запрос + "
		|              <dt:name>"+ СокрЛП(док.НаименованиеПродукции) +"</dt:name>";
	Исключение
		Запрос = Запрос + "
		|              <dt:name>"+ СокрЛП(док.Продукция_Элемент.Наименование) +"</dt:name>";
	КонецПопытки;
	
//	ЖД Ошибка при указании ГТИН - Element 'globalID' not expected
//	Если ЗначениеЗаполнено(док.GTIN)  Тогда
//		Запрос = Запрос + "
//		|              <dt:globalID>"+ СокрЛП(док.GTIN) +"</dt:globalID>";
//	КонецЕсли;
// ЖД На наличие Артикула Меркурий никак не реагирует
//	Если ЗначениеЗаполнено(док.Артикул)  Тогда
//		Запрос = Запрос + "
//		|              <dt:code>"+ СокрЛП(док.Артикул) +"</dt:code>";
//	КонецЕсли;
	
// сведения о фасовке
	Если ЗначениеЗаполнено(док.ФасовкаФормаУпаковки)  Тогда
		Запрос = Запрос + "
		|             <dt:packaging>
		|               <dt:packagingType>
		|                  <bs:guid>"+ СокрЛП(док.ФасовкаФормаУпаковки.GUID) +"</bs:guid>
		|               </dt:packagingType>
		|               <dt:quantity>"+ Формат(док.ФасовкаКоличество, "ЧРД=.; ЧГ=0") +"</dt:quantity>
		|               <dt:volume>"+ Формат(док.ФасовкаОбъем, "ЧРД=.; ЧГ=0") +"</dt:volume>
		|               <dt:unit>
		|                  <bs:guid>"+ СокрЛП(док.ФасовкаЕдиницаИзм.GUID) +"</bs:guid>
		|               </dt:unit>
		|             </dt:packaging>";
	КонецЕсли;


	Запрос = Запрос + "
			|            </vd:productItem>
			|            <vd:volume>"+ Формат(Док.Количество, "ЧРД=.; ЧГ=0") +"</vd:volume>
			|            <vd:unit>
			|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
			|            </vd:unit>";
	
		Если (ЗначениеЗаполнено(док.ДатаИзготовления1)) или (ЗначениеЗаполнено(док.ДатаИзготовления2)) или (ЗначениеЗаполнено(док.ДатаИзготовления)) Тогда
			Запрос = Запрос + "
        				|                <vd:dateOfProduction>"; 

			Если (ЗначениеЗаполнено(док.ДатаИзготовления1)) Тогда
				Запрос = Запрос + "
				|              <vd:firstDate>
				|                <dt:year>"+ДатаГод(док.ДатаИзготовления1)+"</dt:year>
				|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</dt:month>
				|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</dt:day>
				|                <dt:hour>0</dt:hour>
				|              </vd:firstDate>";
			КонецЕсли;
			Если ((ЗначениеЗаполнено(док.ДатаИзготовления2)) и 
					(док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
				Запрос = Запрос + "
				|              <vd:secondDate>
				|                <dt:year>"+ ДатаГод(док.ДатаИзготовления2) +"</dt:year>
				|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</dt:month>
				|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</dt:day>
				|                <dt:hour>0</dt:hour>
				|              </vd:secondDate>";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(док.ДатаИзготовления) Тогда
				Запрос = Запрос + "
				|              <vd:informalDate>"+ СокрЛП(док.ДатаИзготовления) +"</vd:informalDate>";
			КонецЕсли;
			Запрос = Запрос + "
			|                </vd:dateOfProduction>"; 
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(док.ДатаСрокГодности1) ) или (ЗначениеЗаполнено(док.ДатаСрокГодности2) ) или (ЗначениеЗаполнено(док.ДатаСрокГодности)) Тогда
			Запрос = Запрос + "
				|                <vd:expiryDate>";
			Если (ЗначениеЗаполнено(док.ДатаСрокГодности1)) Тогда
				Запрос = Запрос + "
				|              <vd:firstDate>
				|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</dt:year>
				|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</dt:month>
				|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</dt:day>
				|                <dt:hour>0</dt:hour>
				|              </vd:firstDate>";
			КонецЕсли;
			Если ((ЗначениеЗаполнено(док.ДатаСрокГодности2)) и 
					(док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
				Запрос = Запрос + "
				|              <vd:secondDate>
				|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</dt:year>
				|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</dt:month>
				|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</dt:day>
				|                <dt:hour>0</dt:hour>
				|              </vd:secondDate>";
			КонецЕсли; 
			Если ЗначениеЗаполнено(док.ДатаСрокГодности) Тогда
				Запрос = Запрос + "
				|              <vd:informalDate>"+ СокрЛП(док.ДатаСрокГодности) +"</vd:informalDate>";
			КонецЕсли;
			
			Запрос = Запрос + "
				|            </vd:expiryDate>";
		КонецЕсли;
		Попытка
			Если ЗначениеЗаполнено(док.НомерПартии) Тогда
				Попытка
					спНомераПартий = ЗначениеИзСтрокиВнутр(Док.НомерПартии);
					Для Каждого СтрокаНомера из спНомераПартий Цикл
						Запрос = Запрос + "
						|			<vd:batchID>"+СокрЛП(СтрокаНомера.Значение)+"</vd:batchID>";
					КонецЦикла;
				Исключение
				 	Сообщить("Не удалось преобразовать номера партий");
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;	
		Исключение КонецПопытки;	

		// По идее страну мы загрузили в ТЗ, вот только в документе ее нет
		Попытка ГУИДСтраны = СокрЛП( док.Страна_Гуид); Исключение ГУИДСтраны = СокрЛП( СписокКонстант.Получить("Страна").GUID); КонецПопытки;
		Запрос = Запрос + "
			|			<vd:perishable>"+НашеБулево(док.скоропортящийся)+"</vd:perishable>
			|			<vd:origin>
			|            <vd:country>
			|              <bs:guid>"+ ГУИДСтраны +"</bs:guid>
			|            </vd:country>";
			
		Если ЗначениеЗаполнено(Док.ПроизводителиСписок) Тогда    
			СпПроизводители = ЗначениеИзСтрокиВнутр(Док.ПроизводителиСписок);
			Для Каждого Производитель из СпПроизводители Цикл
				Запрос=Запрос+"
				|        		<vd:producer>
				|          			<dt:enterprise>
				|            			<bs:guid>"+ СокрЛП(Производитель.Площадка.GUID) +"</bs:guid>
				|          			</dt:enterprise>
				|					<dt:role>"+ СокрЛП(Производитель.Роль) +"</dt:role>
				|        		</vd:producer>";
			КонецЦикла;
		КонецЕсли;
			
			
		Запрос = Запрос + "
	|                </vd:origin>
	|                <vd:lowGradeCargo>"+НашеБулево(док.некачественный)+"</vd:lowGradeCargo>"; 
//<vd:packageList> 	dt:PackageList 	[0..1] 	Список физической упаковки. ЖД Уровни упаковки
	Если ЗначениеЗаполнено(док.УровниУпаковки) Тогда 
    	ТЗУровни = ЗначениеИзСтрокиВнутр(док.УровниУпаковки);
	Иначе
		ТЗУровни = "";
	КонецЕсли;
	Если ТипЗнч(ТЗУровни) = Тип("ТаблицаЗначений") Тогда
		Запрос=Запрос+"
		|                <vd:packageList>";
		
		для каждого стрУровня из ТЗУровни Цикл 		
			Запрос=Запрос+"
			|                  <dt:package>
			|                    <dt:level>"+стрУровня.НомерУровня+"</dt:level>";
			Если ЗначениеЗаполнено(стрУровня.Упаковка.GUID) Тогда
				Запрос=Запрос+"
				|                    <dt:packingType>
				|                      <bs:guid>"+ СокрЛП(стрУровня.Упаковка.GUID) +"</bs:guid>
				|                    </dt:packingType>";
			КонецЕсли;
			Запрос=Запрос+"
			|                    <dt:quantity>"+ Формат(стрУровня.Колво,"ЧРД=.; ЧГ=0") +"</dt:quantity>";
			Попытка	СзМаркировок = ЗначениеИзСтрокиВнутр(стрУровня.Маркировки); исключение СзМаркировок = ""; КонецПопытки;
			Если ТипЗнч(СзМаркировок) = Тип("СписокЗначений") Тогда
				для каждого стрМаркировки из СзМаркировок Цикл				
					стрМарк=стрМаркировки.Представление;
					ЗнМарк = стрМаркировки.Значение;					
					Запрос=Запрос+"
					|                    <dt:productMarks class='"+стрМарк+"'>"+знМарк+"</dt:productMarks>";
				КонецЦикла;
			КонецЕсли;
			Запрос=Запрос+"
       		|                  </dt:package>";
		КонецЦикла;
		Запрос=Запрос+"
		|                </vd:packageList>";
	КонецЕсли;


		Запрос=Запрос+"
	|              </vd:consignment>";
		Если ЗначениеЗаполнено(СокрЛП(док.Перевозчик_ХозСубъект)) Тогда  
			Запрос=Запрос+"			
			|        <vd:broker>
			|          <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
			|        </vd:broker>";
		КонецЕсли;
		Если ЗначениеЗаполнено(СокрЛП(док.ТипТС)) Тогда  
			Запрос=Запрос+"			
			|        <vd:transportInfo>
			|          <vd:transportType>"+СокрЛП(док.ТипТС)+"</vd:transportType>
			|          <vd:transportNumber>";
	
			Если СокрЛП(Док.ТипТС) = "1" Тогда
				Попытка
					// Странный важный момент - контейнер д.б. первым !
				Если ЗначениеЗаполнено(док.номерКонтейнера) Тогда
			    	Запрос = Запрос+"
					|            <vd:containerNumber>"+ СокрЛП(док.номерКонтейнера) +"</vd:containerNumber>
					|";
				КонецЕсли;
				Исключение КонецПопытки;

				Запрос = Запрос+"
				|            <vd:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</vd:vehicleNumber>
				|"; 
				Попытка
				Если ЗначениеЗаполнено(док.номерПолуприцепа) Тогда
			    	Запрос = Запрос+"
					|            <vd:trailerNumber>"+ СокрЛП(док.номерПолуприцепа) +"</vd:trailerNumber>
					|";
				КонецЕсли;
				Исключение КонецПопытки;
			иначеЕсли СокрЛП(Док.ТипТС) = "2" Тогда
		    Запрос = Запрос+"
			|            <vd:wagonNumber>"+ СокрЛП(док.номерАвто) +"</vd:wagonNumber>
			|"; 
			иначеЕсли СокрЛП(Док.ТипТС) = "3" Тогда
		    Запрос = Запрос+"
			|            <vd:flightNumber>"+ СокрЛП(док.номерАвто) +"</vd:flightNumber>
			|";
			иначеЕсли (СокрЛП(Док.ТипТС) = "4") или (СокрЛП(Док.ТипТС) = "5") или (СокрЛП(Док.ТипТС) = "6") Тогда
		    Запрос = Запрос+"
			|            <vd:shipName>"+ СокрЛП(док.номерАвто) +"</vd:shipName>
			|";
			
			КонецЕсли;	
			Запрос=Запрос+"
			|          </vd:transportNumber>
			|        </vd:transportInfo>";
		КонецЕсли;
		Если ЗначениеЗаполнено(док.ТермическоеСостояние) Тогда		
			Запрос=Запрос+"			
			|              <vd:transportStorageType>"+ ТермическиеУсловияПеревозки2.Получить( док.ТермическоеСостояние - 1 ).Значение +"</vd:transportStorageType>";
		КонецЕсли;	
//	Запрос=Запрос+"			
//	|              <vd:transportStorageType>"+ Док.ТермическоеСостояние +"</vd:transportStorageType>";
// сложный вариант с перегрузками Пример
//              <vd:shipmentRoute>
//                <vd:routePoint>
//                  <vd:sqnId>1</vd:sqnId>
//                  <vd:enterprise>
//                    <bs:guid>ac264dc6-a3eb-4b0f-a86a-9c9577209d6f</bs:guid>
//                  </vd:enterprise>
//                  <vd:nextTransport>
//                    <vd:transportType>1</vd:transportType>
//                    <vd:transportNumber>
//                      <vd:vehicleNumber>в206кв58</vd:vehicleNumber>
//                    </vd:transportNumber>
//                  </vd:nextTransport>
//                </vd:routePoint>
//              </vd:shipmentRoute>

// ЖД в тестовой для гашения достаточно только ТТН, связанных доков не нужно !!!!
//	Если ТипЗнч(ТЗДокументов) = Тип("ТаблицаЗначений") Тогда
//		Для каждого СтрДокумент из ТЗДокументов Цикл
//		КонецЦикла;
//	КонецЕсли;

	Запрос=Запрос+"			
	|              <vd:accompanyingForms>";
 // Для гашения нужен только ТТН, при "Без ТТН" - waybill не нужен
 	Если ЗначениеЗаполнено(док.ТтнНомер) Тогда
		Запрос=Запрос+"			
		|                <vd:waybill>  
		|                  <vd:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</vd:issueSeries>
		|                  <vd:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:issueNumber>
		|                  <vd:issueDate>"+ ДатаXML(док.ТтнДата) +"</vd:issueDate>";
		Попытка
			Запрос=Запрос+"			
			|                  <vd:type>"+ док.ТтнТип +"</vd:type>";
		Исключение
			//Добавить Реквизит ттнТип в документ ВСД2_входящий
			Сообщить("Добавьте Реквизит ттнТип (число 1.0) в документ ВСД2_входящий");
			Сообщить("Отправляю с типом 1 - Товарно транспортная накладная");
			Запрос=Запрос+"			
			|                  <vd:type>1</vd:type>";
		КонецПопытки;
		Запрос=Запрос+"			
		|                </vd:waybill>";
	КонецЕсли;	
		
	Запрос=Запрос+"		
	|                <vd:vetCertificate>";
	Если док.ВидВСД=1 Тогда
		Запрос = Запрос + ВСД2_ВходящийБумажныйГашение_ЗапросXML(док);
	Иначе	
		Запрос=Запрос+"
		|                  <bs:uuid>"+ СокрЛП(док.UUID) +"</bs:uuid>";
	КонецЕсли;
	
	Запрос=Запрос+"			
	|                </vd:vetCertificate>
	|              </vd:accompanyingForms>
	|            </merc:delivery>
	|            <merc:deliveryFacts>";
	Если док.ВидВСД=1 Тогда
		Запрос=Запрос+"			
		|              <vd:vetCertificatePresence>PAPER</vd:vetCertificatePresence>";
	Иначе
		Запрос=Запрос+"			
		|              <vd:vetCertificatePresence>ELECTRONIC</vd:vetCertificatePresence>";
	КонецЕсли;
	
//	|";
//<vd:docInspection> 	vd:DeliveryInspection 	[1..1] 	Соответствуют ли сведения о партии, указанной в ВСД, фактическим. 	
//<vd:responsible> 	dt:User 	[1..1] 	Пользователь, указавший результат соответствия. 	
//<vd:login> 	xs:NCName 	[0..1] 	Логин пользователя, зарегистрированного в системе Меркурий. 	<vd:login>user_ab_150101</vd:login>
//</vd:responsible> 				
//·<vd:result> 	vd:DeliveryInspectionResult 	[1..1] 	Результат соответствия. 	<vd:result>CORRESPONDS</vd:result>
//</vd:docInspection> 

	Запрос=Запрос+"			
	|              <vd:docInspection>
	|                <vd:responsible>
	|                  <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_login")) +"</vd:login>
	|                </vd:responsible>
	|                <vd:result>CORRESPONDS</vd:result>
	|              </vd:docInspection>
	|              <vd:vetInspection>
	|                <vd:responsible>
	|                  <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_login")) +"</vd:login>
	|                </vd:responsible>
	|                <vd:result>CORRESPONDS</vd:result>
	|              </vd:vetInspection>
	|              <vd:decision>ACCEPT_ALL</vd:decision>
	|            </merc:deliveryFacts>";
	
	// Акт несоотв.
   	Если ФлАктНесоответствия = 1 Тогда
	Запрос = Запрос+"
	|            <merc:discrepancyReport>
//	|              <vd:issueSeries>S1624387448</vd:issueSeries>  Для электронного акта несоответствия серия генерируется автоматически
//	|              <vd:issueNumber>N1584929183</vd:issueNumber>
	|              <vd:issueDate>"+ ДатаXML(док.ТтнДата) +"</vd:issueDate>
	|              <vd:reason>
	|                <vd:name>"+СокрЛП(тПричинаАкта)+"</vd:name>
	|              </vd:reason>
	|              <vd:description>"+?(НЕ(ЗначениеЗаполнено(тОписаниеНесоответствия)),"Описание несоответствия",СокрЛП(тОписаниеНесоответствия)) +"</vd:description>
	|            </merc:discrepancyReport>";
    КонецЕсли;

	Запрос = Запрос+"
	|          </merc:processIncomingConsignmentRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";	
	

	Возврат Запрос;
КонецФункции


Функция ПолучитьРезультат_ГашениеВСД2(applicationID, докСсылка="" ) Экспорт
	
	//стандартное поведение функции
	Если НЕ(ЗначениеЗаполнено(applicationID)) Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	Пауза( );
	
	Сообщить("Отправляем запрос ["+докСсылка+"]" );
	Результат = Компонента.SendRequestResult( applicationID );

	Если ЗначениеЗаполнено(докСсылка) Тогда 
		докСсылка.applicationID = СокрЛП(Компонента.ApplicationId);
		докСсылка.Статус 		= СокрЛП(Компонента.Status);
		докСсылка.Комментарий = СокрЛП(Компонента.ErrorMessage);		
		Сообщить(" статус = "+докСсылка.Статус );
		Если ЗначениеЗаполнено(СокрЛП(докСсылка.Комментарий)) Тогда
			Сообщить("Ошибка: "+докСсылка.Комментарий);
		КонецЕсли;
		Если ТипЗнч(докСсылка) = Тип("ДокументСсылка.ВСД_Входящий") Тогда
		// Если допилить при необходимости код 7.7
//			СохранитьСтатусЗапроса(докСсылка);
//			Если (СокрЛП(докСсылка.Статус)="COMPLETED") Тогда
//				ДокОб = СоздатьОбъект("Документ");
//				ДокОб.НайтиДокумент(докСсылка);			
//				ДокОб.Провести();
//			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	ЗагрузитьXML_Партии2(Компонента.LogFilename, "")	;
		
	УдалитьXML( Компонента.LogFilename );
	
	Возврат Результат;
КонецФункции


Функция Отправить_ВСД2_ВходящийГашение(док)

	Если Проверка_ВСД2_Входящий(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
	
	ЗапросXML = ВСД2_входящийГашение_ЗапросXML(док);
	метод = Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    //метод.Service = "platform/services/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	
	УдалитьXML( Компонента.LogFilename);
	Если ЗначениеЗаполнено(appID) Тогда
		
		Результат = ПолучитьРезультат_ГашениеВСД2(appID, док );
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ГашениеВСД2(appID, док );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;
	
КонецФункции 


Процедура ОтправкаЗапросовНаГашение() Экспорт
	//ВремТЗ = Новый ТаблицаЗначений;
	
	//ВСДВходящие.Выгрузить(ВремТЗ);
	
	Отправлено = 0;
	Для каждого СтрокаТЗ из ВСДВходящие Цикл 
		Если НЕ(СтрокаТЗ.Отметка = 1) Тогда
		    Продолжить;
		КонецЕсли;

		Если ФлНеЗагружать = 0 Тогда
			Если НЕ(ЗначениеЗаполнено(СтрокаТЗ.ДокВСД)) Тогда
			    Продолжить;
			КонецЕсли;
			Если СтрокаТЗ.ДокВСД.Проведен() = 1 Тогда
			    Продолжить;
			КонецЕсли;
			Отправить_ВСД2_ВходящийГашение(СтрокаТЗ.ДокВСД);			
		Иначе
			Если СокрЛП(СтрокаТЗ.Статус) = "COMPLETED" Тогда
				Сообщить("Партия уже оформлена. uuid "+СтрокаТЗ.uuid);
		    	Продолжить;
			КонецЕсли;
			Отправить_ВСД2_ВходящийГашение(СтрокаТЗ); // не создаем документ ВСД2_Входящий в 1с
		КонецЕсли;
		Отправлено = Отправлено + 1;
		СтрокаТЗ.Отметка = 0;
	КонецЦикла;
	
	Если Отправлено>0 Тогда
    	//ВремТЗ.Выгрузить(ВСДВходящие); 
		//РаскраситьСписокДокументов();    
	КонецЕсли;
	
КонецПроцедуры // Отправка()


Функция  ПолучитьСписокВСД(Предприятие, vetDocumentType	= "INCOMING", vetDocumentStatus = "CONFIRMED", Смещение) Экспорт

	Если НЕ(ЗначениеЗаполнено(Предприятие.GUID)) Тогда 
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;
	                 
	ЗапросXML = ПолучитьСписокВСД2_ЗапросXML(СокрЛП(Предприятие.GUID), vetDocumentType, vetDocumentStatus, Смещение);
	
	метод = Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
	//метод.Service = "platform/services/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
		
	appID = Получить_ApplicationID(Компонента.LogFilename);
	
	УдалитьXML( Компонента.LogFilename);
	Результат = "";
	Если ЗначениеЗаполнено(appID) Тогда
		Результат = ПолучитьСписокВСД2_ОтветXML(appID ); 
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьСписокВСД2_ОтветXML( appID );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	УдалитьXML( Компонента.LogFilename);
	
	Возврат Результат;
	
КонецФункции



//=================== ИНИЦИАЛИЗАЦИЯ ===================================================

Функция ЗагрузитьПараметры(_Организация="") Экспорт
	Если НЕ(ЗначениеЗаполнено(_Организация)) Тогда
		_Организация   = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		Если _Организация.Пустая() Тогда
			Сообщить("Не определена Основная Организация пользователя", СтатусСообщения.ОченьВажное);
		КонецЕсли;		
	КонецЕсли;

	//ИмяФайла = ИмяФайлаНастроек();
	//СписокКонстант=Новый("Соответствие");
	//
	//ФайлНастроек = Новый Файл(ИмяФайла);
	//Если НЕ(ФайлНастроек.Существует()) Тогда
	//	Сообщить("Файл с константами ["+ИмяФайла+"] не найден");
	//Иначе
	//	Сообщить("Параметры загружены из файла ["+ИмяФайла+"] ");
	//	СписокКонстант = ЗначениеИзФайла(ИмяФайла);
	//КонецЕсли;
	//
	//КлючОбъекта  = "ВСД";
	//КлючНастроек = "НастройкиВСД";
	//ВладелецНастроек = ИмяПользователя();
	//// Для восстановления настроек необходимо воспользоваться функцией Загрузить
	//СтруктураНастроек = Неопределено;
	//Попытка
	//	СписокКонстант = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта,КлючНастроек,,ВладелецНастроек);
	//	// если настроек нет, то будет возвращено значение "Неопределено"
	//Исключение
	//	Сообщить("Нет прав на восстановление настроек.");
	//КонецПопытки;

	//Если СписокКонстант = Неопределено Тогда
	//	Сообщить("Не удалось загрузить настройки!");
	//КонецЕсли;	
	
	СписокКонстант = ВСД.ЗагрузитьПараметры( _Организация );
		
	param_username 		= СписокКонстант.Получить("param_username"); ;  // для базовой авторизации
	param_password 		= СписокКонстант.Получить("param_password");
	param_issuer_id		= СписокКонстант.Получить("param_issuer_id"); // идентификатор хозяйствующего субъекта в реестре РСХН.
	param_service_id 	= СписокКонстант.Получить("param_service_id") ;
	param_api_key 		= СписокКонстант.Получить("param_api_key") ;

	param_intiator_login 	= СписокКонстант.Получить("param_intiator_login"); // ! логин ветврача или др. пользователя в Меркурии
	param_vetdoctor_login = СписокКонстант.Получить("param_vetdoctor_login");
	param_vetdoctor_fio 	= СписокКонстант.Получить("param_vetdoctor_fio");
	param_vetdoctor_post 	= СписокКонстант.Получить("param_vetdoctor_post");
	
	Отправитель_ХозСубъект = СписокКонстант.Получить("Отправитель_ХозСубъект");	
	Отправитель_Площадка 	= СписокКонстант.Получить("Отправитель_Площадка");
	Перевозчик_ХозСубъект = СписокКонстант.Получить("Перевозчик_ХозСубъект");
	
	Страна 				= СписокКонстант.Получить("Страна");
	Регион 				= СписокКонстант.Получить("Регион");
	Город 				= СписокКонстант.Получить("Город");
	
	ВСД_Экспертиза 		= СписокКонстант.Получить("ВСД_Экспертиза");	
	Если НЕ(ЗначениеЗаполнено(ВСД_Экспертиза)) Тогда		
		ВСД_Экспертиза 	= "Произ.лабор ";
	КонецЕсли;
	
	ВСД_Местность 		= СписокКонстант.Получить("ВСД_Местность");
	Если НЕ(ЗначениеЗаполнено(ВСД_Местность))  Тогда 
		ВСД_Местность 	= "местность благополучная по остро инфекционным заболеваниям с\х животных и птиц";
	КонецЕсли;

	ВСД_ОсобыеОтметки 	= СписокКонстант.Получить("ВСД_ОсобыеОтметки");
	//	
	//	//КонтекстФормы.КаталогЛогов = КаталогИБ()+"logs\";
	КаталогЛогов = СписокКонстант.Получить("КаталогЛогов");
	//Если НЕ(ЗначениеЗаполнено(КонтекстФормы.КаталогЛогов )=1 Тогда 
	//	//КаталогЛогов = КаталогИБ()+"logs\";
	//КонецЕсли;
	//	//Если ФС.СуществуетФайл(КонтекстФормы.КаталогЛогов)=0 Тогда 
	//	//	ФС.СоздатьКаталог(КонтекстФормы.КаталогЛогов);
	//	//КонецЕсли;
	//	
	ПаузаСек 				= СписокКонстант.Получить("ПаузаСек");
	Если НЕ(ЗначениеЗаполнено(ПаузаСек)) Тогда
		ПаузаСек=10;
	КонецЕсли;
	ОтладкаЗапросовXML = СписокКонстант.Получить("ОтладкаЗапросовXML");
	
	ТестовыйРежим = СписокКонстант.Получить("ТестовыйРежим");
	ПолноеИмяФайлаОбработки = СписокКонстант.Получить("ПолноеИмяФайлаОбработки");
	ВыводитьПодробнуюИнформацию = СписокКонстант.Получить("ВыводитьПодробнуюИнформацию");
КонецФункции

//Функция ВыборВерсии() Экспорт
//		
//	Возврат 1;
//КонецФункции // ВыборВерсии

Процедура Инициализация( ) Экспорт
	ЗагрузитьПараметры(Организация);
	Если ТестовыйРежим Тогда 	
		// ТЕСТ
		ИмяDLL = "SoapDLL_test";
		//Форма.Заголовок("Меркурий - ТЕСТ");		
	Иначе
		// РАБОЧАЯ		
		ИмяDLL = "SoapDLL_work";
		//Форма.Заголовок("Меркурий - РАБОЧАЯ [!!!]");
	КонецЕсли;

	Попытка
		ПодключитьВнешнююКомпоненту("AddIn."+ИмяDLL);			
		Компонента = Новый("AddIn."+ИмяDLL); 		
	Исключение		
		Сообщить("Библиотека не зарегистрирована");
		Сообщить(ОписаниеОшибки());
		Предупреждение("Библиотека не зарегистрирована
			|"+ОписаниеОшибки());
		Возврат ;
	КонецПопытки;	
	
	Если НЕ(ЗначениеЗаполнено(СписокКонстант.Получить("КаталогЛогов"))) Тогда 
		Сообщить("Внимание: каталог log файлов не определен");
	КонецЕсли;
	 //ЖД на компе зареглена тестовая компонента
	 //Первый запуск будет невозможен, т.к. ТестовыйРежим = false
	Попытка
		Опции = Компонента.GetOptions();
	Исключение
		Предупреждение("Библиотека "+ИмяDLL+" не зарегистрирована
			|"+ОписаниеОшибки());
		Возврат;
	КонецПопытки;	
	
	Опции.USERNAME 			= param_username;
    Опции.PASSWORD 			= param_password;
    Опции.ISSUER_ID 		= param_issuer_id;
    Опции.SERVICE_ID 		= param_service_id;
    Опции.API_KEY 			= param_api_key;
    Опции.INITIATOR_LOGIN 	= param_intiator_login;
    Опции.VETDOCTOR_LOGIN 	= param_vetdoctor_login;
	Опции.LogsDir 			= КаталогЛогов;
	Опции.VETDOCTOR_FIO 	= param_vetdoctor_fio;
	Опции.VETDOCTOR_POST 	= param_vetdoctor_post;
	Опции.DEBUG 			= ОтладкаЗапросовXML;
	
	Компонента.Init( Опции );
		
	ТермическиеУсловияПеревозки2 = Новый("СписокЗначений");
	ТермическиеУсловияПеревозки2.Добавить("FROZEN","1");
	ТермическиеУсловияПеревозки2.Добавить("CHILLED","2");
	ТермическиеУсловияПеревозки2.Добавить("COOLED","3");
	ТермическиеУсловияПеревозки2.Добавить("VENTILATED","4");
	
	//ИнициализацияСправочников();
	
КонецПроцедуры
