//    РеквизитГрузополучатель= 0,"Контрагент");
//    РеквизитГрузополучатель = 1,"Адрес Доставки");

Перем Компонента Экспорт;
Перем НП Экспорт;
Перем СписокКонстант Экспорт;
//Перем ЭтоТестовыйРежим Экспорт;
Перем ИмяDLL Экспорт; 
Перем ТермическиеУсловияПеревозки Экспорт;
Перем ТермическиеУсловияПеревозки2 Экспорт; //Временный вариант - разобраться


Функция Нашебулево(знЧисло) Экспорт
	//Булево возвращает русский, не разобрался, возможно ли по англ
	Если знЧисло=0 Тогда
		Возврат "false";
	Иначе
		Возврат "true";
	КонецЕсли;
КонецФункции

Функция Дата_из_XML(dateXML, Дата1, Дата2, ДатаСтрока ) Экспорт 
	попытка			
		год = ""+dateXML.firstDate.year;
		мес = ""+dateXML.firstDate.month;
		день = ""+dateXML.firstDate.day;
		Дата1 = Дата(год, мес, день);
	Исключение
		Попытка
			ДатаСтрока = ""+dateXML;
		Исключение				
		КонецПопытки;
	КонецПопытки;				
	попытка
		год = ""+dateXML.secondDate.year;
		мес = ""+dateXML.secondDate.month;
		день = ""+dateXML.secondDate.day;
		Дата2 = Дата(год, мес, день);
	Исключение			
	КонецПопытки;
КонецФункции

Функция Изготовление_СрокГодности_в_XML(СтрПартии) Экспорт
	Запрос = "	
		|                <vd:dateOfProduction> ";
		//Может быть указана датой или диапазоном дат. В случае точной даты выработки указывается только первая компонента - firstDate.
		//Для скоропортящейся продукции обязательны к указанию год/месяц/день и могут быть указаны час/минута.
		//Для не скоропортящейся продукции обязательны к указанию год/месяц и может быть указан день.
		//Для не скоропортящейся продукции дата выработки и дата окончания срока годности должны быть заданы в одном формате 
		//	(например, если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).
		Если ЗначениеЗаполнено(СтрПартии.ДатаИзготовления1) Тогда
			Запрос = Запрос+ "
		|              <vd:firstDate>
		|                <dt:year>"+ДатаГод(СтрПартии.ДатаИзготовления1)+"</dt:year>
		|                <dt:month>"+ ДатаМесяц(СтрПартии.ДатаИзготовления1) +"</dt:month>
		|                <dt:day>"+ ДатаЧисло(СтрПартии.ДатаИзготовления1) +"</dt:day>
		|                <dt:hour>0</dt:hour>
		|              </vd:firstDate> ";
		КонецЕсли;
		Если ((ЗначениеЗаполнено(СтрПартии.ДатаИзготовления2)) и 
				(СтрПартии.ДатаИзготовления2 > СтрПартии.ДатаИзготовления1)) Тогда
			Запрос=Запрос+"		
			|              <vd:secondDate>
			|                <dt:year>"+ ДатаГод(СтрПартии.ДатаИзготовления2) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(СтрПартии.ДатаИзготовления2) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(СтрПартии.ДатаИзготовления2) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:secondDate> ";
		КонецЕсли;	
		Запрос=Запрос+"
		|            </vd:dateOfProduction>
		|            <vd:expiryDate> ";
		// !!! Не указывается для типа продукции "Живые животные".
		//Может быть указана датой или диапазоном дат. В случае точной даты выработки указывается только первая компонента - firstDate.
		//Для скоропортящейся продукции обязательны к указанию год/месяц/день и могут быть указаны час/минута.
		//Для не скоропортящейся продукции обязательны к указанию год/месяц и может быть указан день.
		//Для не скоропортящейся продукции дата выработки и дата окончания срока годности должны быть заданы в одном формате 
		//	(например, если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).
		Если (ЗначениеЗаполнено(СтрПартии.ДатаСрокГодности1)) Тогда
			Запрос=Запрос+"
			|              <vd:firstDate>
			|                <dt:year>"+ ДатаГод(СтрПартии.ДатаСрокГодности1) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(СтрПартии.ДатаСрокГодности1) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(СтрПартии.ДатаСрокГодности1) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:firstDate>";
		КонецЕсли;
		Если ((ЗначениеЗаполнено(СтрПартии.ДатаСрокГодности2)) и 
				(СтрПартии.ДатаСрокГодности2 > СтрПартии.ДатаСрокГодности1)) Тогда
			Запрос=Запрос+"				
			|              <vd:secondDate>
			|                <dt:year>"+ ДатаГод(СтрПартии.ДатаСрокГодности2) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(СтрПартии.ДатаСрокГодности2) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(СтрПартии.ДатаСрокГодности2) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:secondDate>";
		КонецЕсли;
		Запрос=Запрос+"
		|                </vd:expiryDate>";
	Возврат Запрос;	
КонецФункции

Функция УровниУпаковки_из_XML(PList, Партия ="") Экспорт //ЖД
	//Возвращает длинну строку с Уровнями упаковок и Маркировок
	// При наличии Партия записывает в данные в ТЧ УровниУпаковки и Маркировка
	
	// Можно вернуть в виде ТЗ
	//Список физической упаковки. vd:packageList		
	// С уровнями
//   Уровни <dt:level>
//1 	Внутренний уровень. Уровень, при котором упаковка отсутствует, но тем не менее есть необходимость наносить маркировку. Например, яйцо, шкуры, мясо, сыр. Явно указывается, что упаковка отсутствует.
//2 	Потребительский уровень. Товар в упаковке для розничной торговли, маркированный штриховым кодом для сканирования на кассе.
//3 	Промежуточный уровень. Уровень упаковки, если он существует, который находится между потребительским и торговым уровнем.
//4 	Торговый уровень. Товар в упаковке, предназначенной для заказа, оплаты и доставки. Это согласованный между ритейлером и изготовителем (или другим участником) уровень упаковки товара, в котором товар заказывается, оплачивается и доставляется.
//5 	Дополнительный уровень. Товар в упаковке, которую нельзя однозначно отнести к торговому или транспортному уровню.
//6 	Транспортный (Логистический) уровень. Товар в упаковке, предназначенной для отгрузки покупателю (ритейлеру) при выполнении заказа. 		

// Классы <dt:productMarks class = Тип, описывающий тип маркировки.
//UNDEFINED 	Класс неопределен. Это значение используется по умолчанию.
//BN 	Номер производственной партии.
//    Важно, чтобы номера партий совпадали при совершении операции незавершённого производства. 
//SSCC 	SSCC-код (глобально-уникальный код грузовых контейнеров - Serial Shipping Container Code).
//EAN8 	Маркировка в соответствии с EAN-8.
//EAN13 	Маркировка в соответствии с EAN-13.
//EAN128 	Маркировка в соответствии с EAN-128.
//BUNDLE 	Маркировка вышестоящей групповой упаковки, например, паллеты. Может использоваться для поиска группы вет.сертификатов для партий, находящихся на данной паллете. 
	
	ТЗУровни = Новый ТаблицаЗначений;		
	ТЗУровни.Колонки.Добавить("НомерУровня",новый ОписаниеТипов("Число"));
	ТЗУровни.Колонки.Добавить("Упаковка",новый ОписаниеТипов("СправочникСсылка.ВСД_ФормыУпаковки"));
	ТЗУровни.Колонки.Добавить("КолВо",новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(12, 3)));
	ТЗУровни.Колонки.Добавить("Маркировки");
	
	Если ТипЗнч(Партия) = Тип("СправочникОбъект.ВСД_Партия") тогда
		//Парт = Справочники.ВСД_Партия.ПолучитьСсылку(Партия);
		Партия.УровниУпаковки.Очистить();
		Партия.Маркировка.Очистить();
	КонецЕсли;		
	
	
	Если ТипЗнч(PList)=Тип("ОбъектXDTO") Тогда 
		PListArray = Новый Массив;
		PListArray.Добавить(PList);
	ИначеЕсли ТипЗнч(PList)=Тип("СписокXDTO") Тогда
		PListArray = PList;
	Иначе
		Возврат "";
	КонецЕсли;
	Попытка
		Для каждого Узел из PListArray Цикл
			СтрУровня = ТЗУровни.Добавить();

			Попытка СтрУровня.НомерУровня = Узел.level; Исключение КонецПопытки;  // Уровень упаковки
			Попытка СтрУровня.Упаковка = НайтиФормуУпаковки( Узел.packingType.guid, Узел.packingType.name);	Исключение	КонецПопытки;
			//dt:globalID  	Уникальный идентификатор упаковки.
			Попытка	ГлИД = Узел.packingType.globalID; Исключение КонецПопытки;
			Попытка	СтрУровня.КолВо = Число(Узел.quantity);	Исключение	КонецПопытки;
			Если ТипЗнч(Партия) = Тип("СправочникОбъект.ВСД_Партия") тогда
				ПартУровни = Партия.УровниУпаковки.Добавить();
				ПартУровни.НомерУровня = Перечисления.ВСД_УровниУпаковки.Получить(СтрУровня.НомерУровня-1);//Значени = Метаданные.Перечисления.ВСД_УровниУпаковки.ЗначенияПеречисления[СтрУровня.НомерУровня-1];
				ПартУровни.ФормаУпаковки = СтрУровня.Упаковка;
				ПартУровни.Количество = СтрУровня.КолВо;				
			КонецЕсли;		
			
			СзМаркировки = Новый Списокзначений;
			//Маркировка партии продукции. Например
			//      <dt:productMarks class="EAN128">7456873456-147885</dt:productMarks>
             //      <dt:productMarks class="UNDEFINED">custom marking</dt:productMarks> 
			Попытка
                Маркировки = Узел.productMarks;
				Если ТипЗнч(Маркировки)=Тип("ОбъектXDTO") Тогда 
					МаркМассив = Новый Массив;
					МаркМассив.Добавить(Маркировки);
				ИначеЕсли ТипЗнч(Маркировки)=Тип("СписокXDTO") Тогда
					МаркМассив = Маркировки;
				КонецЕсли;
				
				Для каждого МаркН из МаркМассив Цикл		
					//МаркЗнач = МаркН.text;
					МаркЗнач = МаркН.Последовательность().ПолучитьТекст(0);  // ЖД Как получить ???
					МаркКласс = МаркН.class;
					СзМаркировки.Добавить(МаркЗнач,МаркКласс);
					//СзМаркировки.ДобавитьЗначение(Маркзнач,МаркКласс);
					Если ТипЗнч(Партия) = Тип("СправочникОбъект.ВСД_Партия") тогда
						ПартМаркировка = Партия.Маркировка.Добавить();
						ПартМаркировка.НомерУровня = Перечисления.ВСД_УровниУпаковки.Получить(СтрУровня.НомерУровня-1);
						ПартМаркировка.Класс = Перечисления.ВСД_Маркировка[МаркКласс];
						ПартМаркировка.Маркировка = МаркЗнач;				
					КонецЕсли;		
				КонецЦикла;
			Исключение КонецПопытки;
		    Если СзМаркировки.Количество() > 0 Тогда
		        СтрУровня.Маркировки = ЗначениеВСтрокуВнутр(СзМаркировки);
		    КонецЕсли;
		КонецЦикла;
	Исключение	КонецПопытки;
	Если ТЗУровни.Количество()>0 Тогда
		Возврат ЗначениеВСтрокуВнутр(ТЗУровни);
	Иначе
		Возврат "";
	КонецЕсли;
	//Возврат ТЗУровни;
КонецФункции

Функция УровниУпаковки_в_XML(НомерСтрокиПартии,тзУпаковка,тзМаркировка) Экспорт
	Запрос = "";
	// Оптимизировать перебор Фильтрацией
	Если тзУпаковка.Количество()>0 Тогда
		Запрос=Запрос+"
		|                <vd:packageList>";
		Для каждого СтрокаУпаковки из тзУпаковка Цикл
			// связь со строкой Товары
			Если НЕ(СтрокаУпаковки.СтрокаПродукции = НомерСтрокиПартии) Тогда
				Продолжить;	
			КонецЕсли;
			
			Если ПустоеЗначение(СтрокаУпаковки.ФормаУпаковки.GUID)=1 Тогда
				Сообщить("Не указана форма упаковки на уровне "+СтрокаУпаковки.НомерУровня);
			    Продолжить;
			КонецЕсли;
			Запрос=Запрос+"
			|                  <dt:package>
			|                    <dt:level>"+ПолучитьПорядковыйНомерПеречисления(СтрокаУпаковки.НомерУровня)+"</dt:level>
			|                    <dt:packingType>
			|                      <bs:guid>"+ СтрокаУпаковки.ФормаУпаковки.GUID +"</bs:guid>
			|                    </dt:packingType>
			|                    <dt:quantity>"+ СтрокаУпаковки.Количество +"</dt:quantity>";
			
			// Маркировки
			Для каждого СтрокаМаркировки из тзМаркировка Цикл
				Если НЕ(СтрокаУпаковки.НомерУровня = СтрокаМаркировки.НомерУровня) и НЕ(СтрокаУпаковки.СтрокаПродукции = СтрокаМаркировки.СтрокаПродукции) Тогда
					Продолжить;	
				КонецЕсли;
				Если ПустоеЗначение(СтрокаМаркировки.Класс) = 1 Тогда
					Сообщить("Не указан класс маркировки "+СтрокаМаркировки.Маркировка);
				    Продолжить;
				КонецЕсли;
				Запрос=Запрос+"
				|                    <dt:productMarks class='"+ПолучитьИдентификаторПеречисления(СтрокаМаркировки.Класс)+"'>"+СтрокаМаркировки.Маркировка+"</dt:productMarks>";
			КонецЦикла;		
			Запрос=Запрос+"
   	   		|                  </dt:package>";
	    КонецЦикла;
		Запрос=Запрос+"
		|                </vd:packageList>";
	КонецЕсли;
	
	Возврат Запрос;	
КонецФункции

Функция СписокПроизводителей_из_XML(ProducerList) Экспорт //ЖД
	Если ТипЗнч(ProducerList)=Тип("ОбъектXDTO") Тогда 
		ProdList = Новый Массив;
		ProdList.Добавить(ProducerList);
	ИначеЕсли ТипЗнч(ProducerList)=Тип("СписокXDTO") Тогда
		ProdList = ProducerList;
	Иначе
		Возврат "";
	КонецЕсли;
	СпПроизводителей = Новый СписокЗначений;
	Попытка
	    Для каждого producer из ProdList Цикл 
			УидПроизводителя = producer.enterprise.guid;
			СпПроизводителей.Добавить(НайтиПлощадку(УидПроизводителя));
		КонецЦикла;			
	Исключение	КонецПопытки;
//	Если СпПроизводителей.Количество()>0 Тогда	
		Возврат ЗначениеВСтрокуВнутр(СпПроизводителей);	
//	Иначе
//		Возврат "";
//	КонецЕсли;
КонецФункции

Функция СвязанныеДокументы_из_XML(referencedDocument) Экспорт //ЖД
	Если ТипЗнч(referencedDocument)=Тип("ОбъектXDTO") Тогда 
		RDListArray = Новый Массив;
		RDListArray.Добавить(referencedDocument);
	ИначеЕсли ТипЗнч(referencedDocument)=Тип("СписокXDTO") Тогда
		RDListArray = referencedDocument;
	Иначе
		Возврат "";
	КонецЕсли;
	// Связанные документы  - их м.б. много
	ТЗСвДокументы = Новый ТаблицаЗначений;		
	ТЗСвДокументы.Колонки.Добавить("ТипДокумента",новый ОписаниеТипов("Число"));
	ТЗСвДокументы.Колонки.Добавить("НомерДокумента",новый ОписаниеТипов("Строка"));
	ТЗСвДокументы.Колонки.Добавить("СерияДокумента",новый ОписаниеТипов("Строка"));
	ТЗСвДокументы.Колонки.Добавить("ДатаДокумента",новый ОписаниеТипов("Строка"));
	ТЗСвДокументы.Колонки.Добавить("ТипОтношенияДок",новый ОписаниеТипов("Число"));
	
	Попытка
		Для Каждого Узел из RDListArray Цикл
			// 1 -ТТН, 6 -ТОРГ12,5 - ТрН, 16 - Заказ  http://help.vetrf.ru/wiki/DocumentType_v2.0
			СтрокаТЗ = ТЗСвДокументы.Добавить();
			Попытка СтрокаТЗ.ТипДокумента =  Узел.type; Исключение 	КонецПопытки;
			Попытка	СтрокаТЗ.НомерДокумента =  Узел.issueNumber; Исключение  КонецПопытки;
			Попытка СтрокаТЗ.СерияДокумента =  Узел.issueSeries;	Исключение 	КонецПопытки;
			Попытка СтрокаТЗ.ДатаДокумента =  Узел.issueDate; Исключение 	КонецПопытки;
		    // ТипОтношенияДок
			//1 	Сопроводительный документ. 	Complementary accompanying document.
			//2 	Предшествующий документ. 	Preceding document (Ancestor).
			//3 	Следующий документ. 	Subsequent/following document (Child).
			//4 	Документ, взамен которого выдан текущий документ. 	Replaced document.
			//5 	Документ, заменяющий текущий документ. 	Replaced by document.
			//6 	Связанный документ. 	Related document. 				
			Попытка	СтрокаТЗ.ТипОтношенияДок =  Узел.relationshipType; Исключение КонецПопытки;
			//Если СтрокаТЗ.ТипДокумента = 1 Тогда
			//	ТЗВСД.ттнСерия = СтрокаТЗ.СерияДокумента;
			//	ТЗВСД.ттнномер = СтрокаТЗ.НомерДокумента;
			//	ТЗВСД.ттндата = СтрокаВДату(СтрокаТЗ.ДатаДокумента);
			//КонецЕсли;
		КонецЦикла;
	Исключение		КонецПопытки;
	Если ТЗСвДокументы.Количество()>0 Тогда
		Возврат ЗначениеВСтрокуВнутр(ТЗСвДокументы);
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции

Процедура Фасовка_из_XML(packaging,ФасовкаНаименование="",ФасовкаФормаУпаковки="",ФасовкаКоличество="",ФасовкаОбъем="",ФасовкаЕдиницаИзм="") Экспорт //ЖД
	// 	Тип упаковки. 
	//Попытка	ТипФасовки = packaging.selectSingleNode("dt:packagingType").text;  Исключение КонецПопытки;
	// 	Идентификатор версии типа упаковки.
	//Попытка ФасУИД =  packaging.packagingType.uuid; Исключение КонецПопытки;
	// Наименование упаковки.
	Попытка	ФасовкаНаименование =  packaging.packagingType.name;	Исключение КонецПопытки;
	Попытка ФасовкаФормаУпаковки = НайтиФормуУпаковки( packaging.packagingType.guid, ФасовкаНаименование); Исключение КонецПопытки;
	//  	Уникальный идентификатор упаковки. 
	//Попытка	ФасУН =  packaging.packagingType.globalID;	Исключение	КонецПопытки;
	Попытка	ФасовкаКоличество = Число(packaging.quantity); Исключение КонецПопытки;
	// Объём единицы упаковки товара.
	Попытка	ФасовкаОбъем = Число(packaging.volume); Исключение КонецПопытки;
	// 	Глобальный идентификатор единицы измерения. , есть uuid и имя - <dt:name> 
	Попытка	ФасовкаЕдиницаИзм = НайтиЕдИзмерения(packaging.unit.guid); Исключение КонецПопытки;			
КонецПроцедуры

Функция ProductItem_в_XML(СтрПартии) Экспорт
	Запрос = "
	|                    <vd:productItem>";
	Если ПустоеЗначение(СтрПартии.Продукция_Элемент.GUID) = 0 Тогда
		// ПРОИЗВОДСТВО Обязательно должно быть заполнено хотя бы одно из полей: либо UUID, либо GUID. При указании обоих полей приоритет у UUID.
		Запрос = Запрос+ "
		|                      <bs:guid>"+ СокрЛП(СтрПартии.Продукция_Элемент.GUID) +"</bs:guid>";
	КонецЕсли;
	Попытка
	    Запрос = Запрос+?(ПустоеЗначение(СтрПартии.НаименованиеПродукции)= 0,	"
		|                     <dt:name>"+ СокрЛП(СтрПартии.НаименованиеПродукции) +"</dt:name>","");
	Исключение КонецПопытки;
	Попытка
	    Запрос = Запрос+?(ПустоеЗначение(СтрПартии.GTIN)= 0,	"
		|                     <dt:globalID>"+ СокрЛП(СтрПартии.GTIN) +"</dt:globalID>","");
	Исключение КонецПопытки;
	Попытка
		Запрос = Запрос+?(ПустоеЗначение(СтрПартии.Артикул)= 0,	"
		|                     <dt:code>"+ СокрЛП(СтрПартии.КодПродукции) +"</dt:code>","");
	Исключение КонецПопытки;
	//Фасовка
	Попытка
		Если ЗначениеЗаполнено(СтрПартии.ФасовкаФормаУпаковки) Тогда
			Запрос = Запрос + "
	    	|          <dt:packaging>
	      	|            <dt:packagingType>
	        |              <bs:guid>"+ СокрЛП(СтрПартии.ФасовкаФормаУпаковки.GUID) +"</bs:guid>
	//						<dt:globalID>BE</dt:globalID> 	dt:PackingCodeType 	[0..1] 	Уникальный идентификатор упаковки. 
		    |            </dt:packagingType>
	   		|            <dt:quantity>"+ Формат(СтрПартии.ФасовкаКоличество, "ЧРД=.; ЧГ=0") +"</dt:quantity>
	        |            <dt:volume>"+ Формат(СтрПартии.ФасовкаОбъем, "ЧРД=.; ЧГ=0") +"</dt:volume>
		    |            <dt:unit>
	   		|              <bs:guid>"+ СокрЛП(СтрПартии.ФасовкаЕдиницаИзмерения.GUID) +"</bs:guid>
	        |            </dt:unit>
		    |          </dt:packaging>";		    
		КонецЕсли;		
	Исключение КонецПопытки;
	Запрос = Запрос+ "
    |        </vd:productItem>";
	Возврат Запрос;	
КонецФункции

Функция ПолучитьИдентификаторПеречисления(ЗначПеречисления) Экспорт
	//присвоим переменной значение перечисления
	//например перечисления.ставкиНДС.НДС18 
	//или например Док.СтавкаНДС 
	//НужноеЗначение = Какое_то_Значение_Перечисления; 

	//теперь получаем как названо перечисление в конфигураторе
	ИмяПеречисления = ЗначПеречисления.Метаданные().Имя;

	//теперь получим индекс где хранится то что нам надо
	НужныйИндекс = Перечисления[ИмяПеречисления].Индекс(ЗначПеречисления);

	//и вот счастье. то что нам надо - идентификатор!!! всего-то четыре строчки кода
	//вместо Какое_то_Значение_Перечисления.Идентификатор() в 7.7
	Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[НужныйИндекс].Имя;
	
КонецФункции

Функция ПолучитьПорядковыйНомерПеречисления(ЗначПеречисления) Экспорт
	Возврат (Перечисления[ЗначПеречисления.Метаданные().Имя].Индекс(ЗначПеречисления) + 1)
КонецФункции


//************** Окончание ф-ции для Общего модуля


Процедура СообщитьИнфо(стр)
	Если ВыводитьПодробнуюИнформацию Тогда
		Сообщить(стр, СтатусСообщения.Информация );
	КонецЕсли;	
КонецПроцедуры

Процедура СообщитьОшибку(стр)
	//Если ВыводитьПодробнуюИнформацию Тогда
		Сообщить(стр, СтатусСообщения.Внимание );
	//КонецЕсли;	
КонецПроцедуры

Функция НайтиОшибки(ФайлXML, док="")
	результат = Ложь;	
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлXML);	
	
	СтрОшибки ="";
	Пока ЧтениеXML.Прочитать() Цикл
		Если (ЧтениеXML.Имя = "error") и (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
			ЧтениеXML.Прочитать();
			СтрОшибки = СтрОшибки + "ОШИБКА: "+ЧтениеXML.Значение+" ";
			Сообщить("ОШИБКА: "+ЧтениеXML.Значение,СтатусСообщения.ОченьВажное);
			результат=Истина
		КонецЕсли;		
	КонецЦикла;
		
	Если ПустоеЗначение(Док)=0 Тогда
		ДокОбъект = док.ПолучитьОбъект();
		ДокОбъект.Комментарий = СокрЛП(ДокОбъект.Комментарий) + СтрОшибки;
		ДокОбъект.Записать();
	КонецЕсли;	
	
	Возврат результат;
КонецФункции

Функция ДатаГод(ВыбДата)
	возврат формат(выбДата, "ДФ=""гггг""")
КонецФункции

Функция ДатаМесяц(ВыбДата)
	возврат формат(выбДата, "ДФ=""ММ""")
КонецФункции

Функция ДатаЧисло(ВыбДата)
	возврат формат(выбДата, "ДФ=""дд""")
КонецФункции

Функция ПустоеЗначение(Зн)
	возврат Число(НЕ (ЗначениеЗаполнено(Зн)) );	
КонецФункции

Функция ДатаXML(ВыбДата, Время="") Экспорт
		
	стрДата = формат(ВыбДата, "ДФ=""гггг-ММ-дд""")+Время;
	Возврат стрДата;
КонецФункции

Функция ДатаВремяXML(ВыбДата) Экспорт
		
	стрДата = формат(ВыбДата, "ДФ=""гггг-ММ-дд""")+"T"+Формат(ВыбДата,"ДФ=ЧЧ:мм:сс");;
	Возврат стрДата;
КонецФункции


Функция Пауза() Экспорт
	//ЗадержкаСекунд = 5; //СписокКонстант.Получить("ПаузаСек");
	Состояние("Пауза "+ПаузаСек+" сек");
	
	//tt2=_GetPerformanceCounter();			
	//Сообщить("Пауза = "+(tt2 - tt1));
	
	//Состояние("Пауза "+ПаузаСек+" сек");
	//scr = Новый("WScript.Shell");
	//scr.Run("ping 127.0.0.1 -n "+Сокрлп( Число(ПаузаСек) ),0,1); 

	//стандартное поведение функции
	Компонента.Pause(ПаузаСек*1000); // в ms
КонецФункции

Функция УдалитьXML(ИмяФайла) Экспорт
	
	////стандартное поведение функции
	//Если СписокКонстант.Получить("ОтладкаЗапросовXML")=0 Тогда 
	//	Попытка
	//		ФС.УдалитьФайл(ИмяФайла);
	//	Исключение
	//		Сообщить(ОписаниеОшибки());
	//	КонецПопытки;
	//КонецЕсли;
	
КонецФункции

Функция СтрокаВДату(ДатаСтрока)
	год = Лев(ДатаСтрока,4 );
	мес = Сред(ДатаСтрока,6,2);
	день = Сред(ДатаСтрока,9,2);
	возврат Дата(год, мес,день);	
КонецФункции

Функция СтрокаВДатаВремя(ДатаВремяСтрока)
	год = Лев(ДатаВремяСтрока,4 );
	мес = Сред(ДатаВремяСтрока,6,2);
	день = Сред(ДатаВремяСтрока,9,2);
	час = Число(Сред(ДатаВремяСтрока,12,2));
	мин = Сред(ДатаВремяСтрока,15,2);	
	сек = Сред(ДатаВремяСтрока,18,2);
	смещение = Число(Сред(ДатаВремяСтрока,21,2));
	Попытка результат = Дата(год, мес,день, (час+Смещение), мин, сек);	
	Исключение результат = Дата(год, мес,день);	
	КонецПопытки;
	Возврат Результат;

КонецФункции


Функция НайтиХСпоGUID(Guid) Экспорт

	Ответ = "";
	Guid = СокрЛП(Guid);
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ХозСубъект.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
		                      |ГДЕ
		                      |	ВСД_ХозСубъект.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("Guid "+Guid+" не найден, создайте ХС и выполните синхронизацию");			
		КонецЕсли;
		
	Иначе
		СообщитьИнфо("Пустой Guid ХозСубъекта");
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция СоздатьНовыйХозСубъект(ВыбКонтрагент)
	Спр = Справочники.ВСД_ХозСубъект.СоздатьЭлемент();
	Спр.Контрагент = ВыбКонтрагент;
	Спр.Наименование = ВыбКонтрагент.Наименование;
	Спр.Записать();
	Сообщить("Создан ХозСубъект "+Спр.Ссылка);
	
	Возврат Спр.Ссылка;
КонецФункции

Функция НайтиХозСубъект(ВыбКлиент) Экспорт

	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВСД_ХозСубъект.Ссылка,
	               |	ВСД_ХозСубъект.Контрагент,
	               |	ВСД_ХозСубъект.GUID
	               |ИЗ
	               |	Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
	               |ГДЕ
	               |	ВСД_ХозСубъект.Контрагент = &Контрагент";
	Запрос.УстановитьПараметр("Контрагент", ВыбКлиент);				   
					   
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда 
		Ответ = Результат.Ссылка;
	Иначе
		Ответ = СоздатьНовыйХозСубъект(ВыбКлиент);
	КонецЕсли;

	Возврат Ответ;
КонецФункции

Функция НайтиПартиюПоGUID(Guid)
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Партия.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Партия КАК ВСД_Партия
		                      |ГДЕ
		                      |	ВСД_Партия.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка.ПолучитьОбъект();
		Иначе
			Ответ = Справочники.ВСД_Партия.СоздатьЭлемент();	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Партия");
		Ответ = Справочники.ВСД_Партия.СоздатьЭлемент();	
	КонецЕсли;
	 	
	Возврат Ответ;
КонецФункции

Функция НайтиПлощадку(guid)
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Площадка.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Площадка КАК ВСД_Площадка
		                      |ГДЕ
		                      |	ВСД_Площадка.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Ответ = ЗагрузитьПлощадкуПоGUID(guid);	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Площадка");
	КонецЕсли;
	 	
	Возврат Ответ;
КонецФункции

Функция НайтиПродукцию(guid)
	если ПустаяСтрока(guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Продукция.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Продукция КАК ВСД_Продукция
		                      |ГДЕ
		                      |	ВСД_Продукция.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Продукция Guid "+guid+" не найдена. Выполните инициализацию");
			Ответ = Справочники.ВСД_Продукция.ПустаяСсылка();	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Продукция");
	КонецЕсли;
	 	
	Возврат Ответ;

КонецФункции

Функция НайтиВидПродукции(guid)
	если ПустаяСтрока(guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ВидПродукции.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ВидПродукции КАК ВСД_ВидПродукции
		                      |ГДЕ
		                      |	ВСД_ВидПродукции.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_ВидПродукции Guid "+guid+" не найдена. Выполните инициализацию");
			Ответ = Справочники.ВСД_ВидПродукции.ПустаяСсылка();	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_ВидПродукции");
		Ответ = "";
	КонецЕсли;
	 	
	Возврат Ответ;
	
КонецФункции

Функция Найти_Продукция_Элемент(Название, Guid="", Uuid="", ВСД_Продукция, ВСД_ВидПродукции) Экспорт
	если (ПустаяСтрока(Uuid)=0) Тогда			
		Запрос = Новый Запрос;
		ТекстЗапроса = "	  ВЫБРАТЬ
		                      |	ВСД_Продукция_Элемент.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Продукция_Элемент КАК ВСД_Продукция_Элемент
		                      |ГДЕ
		                      |	ВСД_Продукция_Элемент.UUID = &UUID";
		//ЖД Без данного условия м.б. получен любой элемент с пустым гуид, невзирая на ууид 
		Если ЗначениеЗаполнено(GUID) Тогда
			ТекстЗапроса = ТекстЗапроса + "
							  | ИЛИ 	ВСД_Продукция_Элемент.GUID = &GUID
							  |";			
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("UUID", Uuid );
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
			//Спр = Ответ.ПолучитьОбъект();
			//Спр.guid = guid;
			//Спр.Uuid = Uuid;
			//Спр.Записать();	
		Иначе
			Сообщить("ВСД_Продукция_Элемент Uuid "+Uuid+" не найдена. Создан новый элемент");
			Спр = Справочники.ВСД_Продукция_Элемент.СоздатьЭлемент();
			Спр.Наименование = Название;
			Спр.guid = guid;
			Спр.Uuid = Uuid;
			Спр.Продукция = ВСД_Продукция;
			Спр.ВидПродукции = ВСД_ВидПродукции;
			Спр.Записать();	
			
			Получить_Инфо_Продукции(спр.Ссылка);
			
			Ответ = спр.Ссылка;
		КонецЕсли;
	ИначеЕсли ПустаяСтрока(Название)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Продукция_Элемент.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Продукция_Элемент КАК ВСД_Продукция_Элемент
		                      |ГДЕ
		                      |	ВСД_Продукция_Элемент.Наименование = &Название");
		Запрос.УстановитьПараметр("Название", Лев(Название,150) );    //ЖД Сократим до размера реквизита 1С 8
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Продукция_Элемент Guid "+Название+" не найдена. Создан новый элемент");
			Спр = Справочники.ВСД_Продукция_Элемент.СоздатьЭлемент();
			Спр.Наименование = Название;
			Спр.Uuid = Uuid;
			Спр.Продукция = ВСД_Продукция;
			Спр.ВидПродукции = ВСД_ВидПродукции;
			Спр.Записать();	
			Ответ = спр.Ссылка;
		КонецЕсли;

	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Продукция_Элемент");
		Ответ ="";
	КонецЕсли;
	 	
	Возврат Ответ;

КонецФункции

Функция НайтиЕдИзмерения(guid, uuid="")	Экспорт
	если ПустаяСтрока(guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ЕдиницыИзмерения.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ЕдиницыИзмерения КАК ВСД_ЕдиницыИзмерения
		                      |ГДЕ
		                      |	ВСД_ЕдиницыИзмерения.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_ЕдиницыИзмерения Guid "+guid+" не найдена. Выполните инициализацию");
			Ответ = Справочники.ВСД_ЕдиницыИзмерения.ПустаяСсылка();	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_ЕдиницыИзмерения");
		Ответ="";
	КонецЕсли;
	 	
	Возврат Ответ;

КонецФункции

Функция НайтиФормуУпаковки(guid, name) Экспорт

	Ответ = "";
	Guid = СокрЛП(Guid);
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ФормыУпаковки.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ФормыУпаковки КАК ВСД_ФормыУпаковки
		                      |ГДЕ
		                      |	ВСД_ФормыУпаковки.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_ФормыУпаковки GUID ["+guid+"] добавлена");
			//создать 
			Спр = Справочники.ВСД_ФормыУпаковки.СоздатьЭлемент();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_ФормыУпаковки");
	КонецЕсли;
	
	Возврат Ответ;
		
КонецФункции

Функция НайтиСтрануПоGUID(GUID, name) Экспорт

	Ответ = "";
	Guid = СокрЛП(Guid);
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Страна.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Страна КАК ВСД_Страна
		                      |ГДЕ
		                      |	ВСД_Страна.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Страна ["+name+"] GUID ["+guid+"] добавлена");
			//создать 
			Спр = Справочники.ВСД_Страна.СоздатьЭлемент();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Страна");
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция НайтиГородПоGUID(GUID, name) Экспорт

	Ответ = "";
	Guid = СокрЛП(Guid);
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Город.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Город КАК ВСД_Город
		                      |ГДЕ
		                      |	ВСД_Город.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Город ["+name+"] GUID ["+guid+"] добавлена");
			//создать 
			Спр = Справочники.ВСД_Город.СоздатьЭлемент();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Город");
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции


Функция НайтиРегионПоGUID(GUID, name) Экспорт

	Ответ = "";
	Guid = СокрЛП(Guid);
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Регион.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Регион КАК ВСД_Регион
		                      |ГДЕ
		                      |	ВСД_Регион.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Регион ["+name+"] GUID ["+guid+"] добавлена");
			//создать 
			Спр = Справочники.ВСД_Регион.СоздатьЭлемент();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Регион");
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция НайтиВСДпоUUID( uuid, ВидДокумента = "ВСД" ) 
		
	если ПустаяСтрока(uuid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	"+ВидДокумента+".Ссылка
		                      |ИЗ
		                      |	Документ."+ВидДокумента+" КАК "+ВидДокумента+"
		                      |ГДЕ
		                      |	"+ВидДокумента+".UUID = &UUID");
		Запрос.УстановитьПараметр("UUID", Uuid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			ДокОб = Результат.Ссылка.ПолучитьОбъект();		
			ДокОб.Записать( РежимЗаписиДокумента.ОтменаПроведения, );
			ДокОб.УстановитьПометкуУдаления(Ложь);
			//Док.СнятьПометкуУдаления();
			
			Сообщить("Найден "+Результат.Ссылка);
		Иначе
			ДокОб = Документы[ВидДокумента].СоздатьДокумент();
			//ДокОб.applicationId = applicationId;

			Сообщить("Создан новый "+ВидДокумента+" № "+ДокОб.Номер);
		КонецЕсли;	
		
	Иначе
		Сообщить("Пустой UUID");
	КонецЕсли;
	
	Возврат ДокОб;

КонецФункции

Функция НайтиВСДпоApplicationId(applicationId, ВидДокумента) 

	Ответ = "";
	если ПустаяСтрока(applicationId)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	"+ВидДокумента+".Ссылка
		                      |ИЗ
		                      |	Документ."+ВидДокумента+" КАК "+ВидДокумента+"
		                      |ГДЕ
		                      |	"+ВидДокумента+".applicationId = &applicationId");
		Запрос.УстановитьПараметр("applicationId", applicationId );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			//Сообщить("ВСД_Город ["+name+"] GUID ["+guid+"] добавлена");
			////создать 
			//Спр = Справочники.ВСД_Город.СоздатьЭлемент();
			////Спр.Код = ;
			//Спр.Наименование = name;
			//Спр.GUID = guid;
			//Спр.Записать();
			//Ответ = Спр.Ссылка;			
		КонецЕсли;		
	Иначе
		Сообщить("Пустой applicationId");
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

// Поиск ВСД по UUID и/или ApplicationID
// ВариантПоиска = 1 - поиск только по 1 параметру ApplicationID / uuid
// ВариантПоиска = 2 - поиск только по 2 параметрам - сначала по uuid, потом по ApplicationID 
Функция НайтиВСД(ApplicationID, uuid, ВидДокумента, ВариантПоиска=2) Экспорт

	Если ПустаяСтрока(UUID)=0 Тогда 	
		ответ = НайтиВСДпоUUID(uuid );
		
		Если ВариантПоиска=2 Тогда 
			Если ответ="" Тогда 
				ответ = НайтиВСДпоApplicationId(ApplicationID, ВидДокумента );
			КонецЕсли;
		КонецЕсли;
	Иначе
		ответ = НайтиВСДпоApplicationId(ApplicationID, ВидДокумента );
	КонецЕсли;
	
	//Док = Новый("Документ."+ВидДокумента);
	Если ответ="" Тогда 
		ДокОб = Документы[ВидДокумента].СоздатьДокумент();
		ДокОб.applicationId = applicationId;

		Сообщить("Создан новый "+ВидДокумента+" № "+ДокОб.Номер);
	Иначе		
		ДокОб = ответ.ПолучитьОбъект();		
		ДокОб.Записать( РежимЗаписиДокумента.ОтменаПроведения, );
		//Док.СнятьПометкуУдаления();
		
		Сообщить("Найден "+ответ);
	конецЕсли;	
	
	Возврат ДокОб;
КонецФункции

Функция ЗаписатьПартию(stockEntry)
	//t = stockEntry.text;	
	active = stockEntry.active;		
	uuid = stockEntry.uuid;
	guid = stockEntry.guid;
	st = stockEntry.status;
	entryNumber = stockEntry.entryNumber;
	updateDate = stockEntry.updateDate;
	createDate = stockEntry.createDate;
	
	batch = stockEntry.batch;
	
	product 	= batch.product.guid;
	subProduct 	= batch.subProduct.guid;

	Попытка
		productItemName = batch.productItem.name;
	Исключение
		СообщитьИнфо("Не удалось получить элемент [productItem]");
		productItemName = "";
	КонецПопытки;
	Попытка
		productItemGuid = batch.productItem.guid;
	Исключение			
		productItemGuid="";
	КонецПопытки;	
	Попытка
		productItemUuid = batch.productItem.uuid;
	Исключение			
		productItemUuid="";
	КонецПопытки;
	
	volume 		= batch.volume;
	unit		= batch.unit.guid;

	Попытка
		unitGuid	= batch.unit.guid;			
	Исключение
		unitGuid = "";			
	КонецПопытки;
	Попытка
		unitUuid	= batch.unit.uuid;			
	Исключение
		unitUuid = "";			
	КонецПопытки;
	
	Попытка
		packingFormUuid	= batch.packingList.packingForm.uuid;
	Исключение
		СообщитьИнфо("Не удалось получить элемент [packingForm] [uuid]");
		packingFormUuid = "";			
	КонецПопытки;
	Попытка
		packingFormName	= batch.packingList.packingForm.name;
	Исключение
		packingFormName="";
		СообщитьИнфо("Не удалось получить элемент [packingForm] [name]");
	КонецПопытки;

	packingAmount = batch.packingAmount;
		
	// dateOfProduction 1
	ДатаИзготовления1="";
	ДатаИзготовления="";
	попытка			
		год = batch.dateOfProduction.firstDate.year;
		мес = batch.dateOfProduction.firstDate.month;
		день = batch.dateOfProduction.firstDate.day;
		ДатаИзготовления1 = Дата(год, мес, день);
	Исключение
		Попытка
			ДатаИзготовления = batch.dateOfProduction.informalDate;
		Исключение				
		КонецПопытки;
	КонецПопытки;				
	ДатаИзготовления2="";
	попытка
		год = batch.dateOfProduction.secondDate.year;
		мес = batch.dateOfProduction.secondDate.month;
		день = batch.dateOfProduction.secondDate.day;
		ДатаИзготовления2 = Дата(год, мес, день);
	Исключение			
	КонецПопытки;
	
	//ДатаСрокГодности
	попытка			
		год = batch.expiryDate.firstDate.year;
		мес = batch.expiryDate.firstDate.month;
		день = batch.expiryDate.firstDate.day;
		ДатаСрокГодности1 = Дата(год, мес, день);
	Исключение
		Попытка
			ДатаСрокГодности = batch.expiryDate.informalDate;
		Исключение				
		КонецПопытки;
	КонецПопытки;				
	ДатаСрокГодности2="";
	попытка
		год = batch.expiryDate.secondDate.year;
		мес = batch.expiryDate.secondDate.month;
		день = batch.expiryDate.secondDate.day;
		ДатаСрокГодности2 = Дата(год, мес, день);
	Исключение			
	КонецПопытки;
	
	producer = "";
	Попытка			
		спПроизводителей = batch.producerList.producer;
		Если ТипЗнч(спПроизводителей)=Тип("СписокXDTO") Тогда
			Для Каждого ЭлСписка Из спПроизводителей Цикл
				producer = ЭлСписка.enterprise.guid;
			КонецЦикла;
		Иначе	
			Попытка
				producer = batch.producerList.producer.enterprise.guid;
			Исключение
				producerName = batch.producerList.producer.enterprise.name;
			КонецПопытки;			
		КонецЕсли;
	Исключение		
	КонецПопытки;
	
	Попытка				
		owner = batch.owner.guid; //ХозСубъект
		ВладелецХС = НайтиХСпоGUID(owner);
	Исключение
		ВладелецХС = "";
	КонецПопытки;

	Партия = НайтиПартиюПоGUID(guid);
	
	Если active="false" Тогда 
		СообщитьИнфо("Изменения в партию "+Партия+" uuid ["+uuid+"] не внесены. Признак партии = не активна");
		Партия.УстановитьПометкуУдаления(истина);
		//ЖД Партия.Удалить(0);
		Возврат Партия;
	КонецЕсли;
	
	Сообщить(" ВСД_Партия от "+updateDate+" # "+entryNumber);
	
	Партия.ДатаИзменения = СтрокаВДатаВремя( updateDate );
					
	Партия.Получатель_ХозСубъект = ВладелецХС;
	Партия.Получатель_Площадка = Отправитель_Площадка; 
	Партия.Производитель_Площадка = НайтиПлощадку(producer);
	//Попытка
	//	Партия.Производитель_ХозСубъект = Партия.Производитель_Площадка.Контрагент;
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
	Партия.Продукция 	= НайтиПродукцию(product);
	Партия.ВидПродукции = НайтиВидПродукции(subProduct);
	
	Партия.Продукция_Элемент = Найти_Продукция_Элемент(productItemName, productItemGuid, productItemUuid, Партия.Продукция, Партия.ВидПродукции);
	//Партия.СвойствоНоменклатурыЗначение = Партия.Продукция_Элемент.СвойствоНоменклатурыЗначение;
	
	Партия.Количество 	= Число(volume);
	Партия.КоличествоМест = Число(packingAmount);
	Партия.ФормаУпаковки = НайтиФормуУпаковки( packingFormUuid, packingFormName);;

	Партия.ЕдиницаИзмерения = НайтиЕдИзмерения( unitGuid, unitUUID );
	
	Партия.ДатаИзготовления1 = ДатаИзготовления1;
	Партия.ДатаИзготовления2 = ДатаИзготовления2;
	Партия.ДатаИзготовления =  ДатаИзготовления;
	Партия.ДатаСрокГодности = ДатаСрокГодности;
	Партия.ДатаСрокГодности1 = ДатаСрокГодности1;
	Партия.ДатаСрокГодности2 = ДатаСрокГодности2;
	Партия.Статус = st;		
	Партия.GUID = guid;
	Партия.UUID = uuid;
	//Партия.ДатаИзменения = updateDate;
	Партия.НомерЗаписи = entryNumber;
	Партия.НаименованиеПродукции = productItemName;
	Если НЕ(ПустаяСтрока(productItemName)) Тогда 
		Партия.Наименование = productItemName;
	Иначе
		Партия.Наименование = Партия.Продукция_Элемент.Наименование;
	КонецЕсли;
	//Партия.Фирма = глПользователь.ОсновнаяФирма;
	//Если ПустаяСтрока(Партия.Автор)=1 Тогда
	//	Партия.Автор = глПользователь;
	//КонецЕсли;
	
	Партия.ВсдДата = СтрокаВДатаВремя(createDate);
			
	Если Партия.Количество=0 Тогда 
		
		Если ( Партия.ЭтоНовый()=0 ) Тогда
			СообщитьИнфо("Количество партии guid ["+guid+"] uuid ["+uuid+"] = 0. Партия удалена. ");
			Партия.Записать();
			Партия.УстановитьПометкуУдаления(истина);
		Иначе
			СообщитьИнфо("Количество партии guid ["+guid+"] uuid ["+uuid+"] = 0. Партия пропущена. ");
			Возврат "";
		КонецЕсли;
	Иначе
		Партия.Записать();
		Партия.УстановитьПометкуУдаления(ложь);
	КонецЕсли;		
	Возврат Партия;	
КонецФункции

Процедура ЗагрузитьXML_ВсеПартииОтвет(имяФайла) Экспорт
    
    СообщитьИнфо("Загрузка XML-файла: "+ИмяФайла);    
    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Попытка
		seList = xdto.application.result.getStockEntryListResponse.stockEntryList.StockEntry;	
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		stockEntryList = Новый Массив;
		stockEntryList.Добавить(seList);
	Иначе
		stockEntryList = seList;
	КонецЕсли;
	Для каждого stockEntry из stockEntryList Цикл		
		
		Партия = ЗаписатьПартию(stockEntry);
					
	КонецЦикла;
	
	Сообщить("Загрузка партий завершена");
    
КонецПроцедуры

Функция  ПолучитьПартииОтветXML(appID) Экспорт

	Результат = Компонента.GetStockListResult(СокрЛП(appID));

	Если Результат="COMPLETED" Тогда
		
		//При объединении партий в Меркурии - старые партии пропадают, появляются новые
		// поэтому в 1С остаются "остатки", которые нужно удалять
		//Если ОчищатьСправочникВСД_Партии Тогда
			Состояние("Удаление справочника ВСД_Партии");
			//Отправитель_Площадка = СписокКонстант.Получить("Отправитель_Площадка"); 
			
			//ЖД Вот тут удалятся партии по всем ХС и Площадкам, а загрузятся только по 1-ой !!!
			//Убираю закомметированное условие Выборка.Получатель_Площадка = Отправитель_Площадка
			Выборка = Справочники.ВСД_Партия.Выбрать();
			Пока Выборка.Следующий() Цикл			
				Если Выборка.Получатель_Площадка = Отправитель_Площадка Тогда 
					СпрОбъект = Выборка.ПолучитьОбъект();
					СпрОбъект.УстановитьПометкуУдаления(истина);
				КонецЕсли;				
			КонецЦикла;
		//КонецЕсли;
		Состояние("Загрузка справочника ВСД_Партии");
		
		ЗагрузитьXML_ВсеПартииОтвет( Компонента.LogFilename );
				
		УдалитьXML( Компонента.LogFilename);
	Иначе
		//ЖД ТЕСТ покажем ошибки
		НайтиОшибки(Компонента.LogFilename);
		УдалитьXML( Компонента.LogFilename);		
	КонецЕсли;		
		
	Возврат Результат;
КонецФункции

Функция  ПолучитьПартии() Экспорт
	
	Если ПустаяСтрока(Отправитель_Площадка.GUID) Тогда 
		СообщитьОшибку("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

	Результат = Компонента.GetStockList(СокрЛП(Отправитель_Площадка.GUID), Смещение);

	appID = Компонента.ApplicationId;
	//Отладка();
	
	УдалитьXML( Компонента.LogFilename);

	Результат = ПолучитьПартииОтветXML(appID);
	Пока Результат="IN_PROCESS" Цикл
		Пауза();				
		Результат = ПолучитьПартииОтветXML(appID);
	КонецЦикла;		
	
	//УдалитьXML( Компонента.LogFilename);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИНН(ВыбКлиент) экспорт
		
	//стандартное поведение функции
	Попытка		
		ИННКПП = ВыбКлиент.ИНН;
	Исключение
		ИННКПП = "";
	КонецПопытки;
	
	//Если Найти(ИННКПП, "\") <> 0 Тогда
	//	// найден разделитель
	//	Возврат Лев(ИННКПП, Найти(ИННКПП, "\") - 1);

	//ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
	//	// найден разделитель
	//	Возврат Лев(ИННКПП, Найти(ИННКПП, "/") - 1);
	//Иначе
		Возврат СокрЛП(ИННКПП);
	//КонецЕсли;
КонецФункции // ПолучитьИНН() //mbIkola - функция изменена

Функция ЗагрузитьПлощадкуПоGUID(GUID, ХС="") Экспорт
	
	Сообщить(" Запрос getEnterpriseByGuid [ "+СокрЛП(GUID)+" ]");		
	Результат = Компонента.getEnterpriseByGuid( СокрЛП(GUID) );	
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
    
    enterprise = xdto.enterprise ;						
	guid = enterprise.guid;
	uuid = enterprise.uuid;
	name = enterprise.name;
	active = enterprise.active;		
	Попытка address =  ?(ТипЗнч(enterprise.address.addressView) = Тип("Строка"),enterprise.address.addressView,""); Исключение address = "" ;КонецПопытки;
	
	Спр = Новый("СправочникМенеджер.ВСД_Площадка");
	Ссылка_ВСД_Площадка = Спр.НайтиПоРеквизиту("GUID",Guid);
	Если Ссылка_ВСД_Площадка = Справочники.ВСД_Площадка.ПустаяСсылка() Тогда 
		Объект_ВСД_Площадка = Справочники.ВСД_Площадка.СоздатьЭлемент();
		//Спр.УстановитьНовыйКод("00");	
	Иначе
		Объект_ВСД_Площадка = Ссылка_ВСД_Площадка.ПолучитьОбъект(); 
	КонецЕсли;
	
	Объект_ВСД_Площадка.Наименование = name;
	Объект_ВСД_Площадка.Адрес = address;
	Объект_ВСД_Площадка.GUID = guid;
	Объект_ВСД_Площадка.UUID = uuid;	
	
	Если ХС="" Тогда
		СообщитьОшибку("Внимание: создана площадка ["+GUID+"] без указания ХозСубъекта ");
		//Возврат;
	Иначе 
		Объект_ВСД_Площадка.GUIDХозСубъекта = ХС.GUID;
	КонецЕсли;	
	
	Объект_ВСД_Площадка.Записать();
	СообщитьИнфо("Записана ВСД_Площадка ["+Объект_ВСД_Площадка+"] GUID = "+ Guid);		
	
КонецФункции

Функция ЗагрузитьПлощадки(ХС)	Экспорт

	Если ПустаяСтрока(ХС.GUID)=1 Тогда 
		ХС_ПолучитьGuid(ХС);
	КонецЕсли;
	
	Если ПустаяСтрока(ХС.GUID)=1 Тогда 
		Сообщить("В ХозСубъекте ["+ХС+"] не указан GUID");
		Возврат "";
	КонецЕсли;
	
	Сообщить(" Запрос getBusinessEntityByGuid [ "+СокрЛП(ХС.GUID)+" ]");		
	Результат = Компонента.GetBusinessEntityByGuid( СокрЛП(ХС.GUID) );
	
	//Отладка();
			
    СообщитьИнфо("Загрузка XML-файла: "+Компонента.LogFilename);    
    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Если НайтиОшибки(Компонента.LogFilename) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		List = xdto.businessEntity.activityLocation;
		
		Если ТипЗнч(List)<>Тип("СписокXDTO") Тогда 
			activityLocationList = Новый Массив;
			activityLocationList.Добавить(List);
		Иначе
			activityLocationList = List;
		КонецЕсли;
		
		Для каждого activityLocation из activityLocationList Цикл		
				
			guid = activityLocation.enterprise.guid;
			
			ЗагрузитьПлощадкуПоGUID(guid, ХС);
						
		КонецЦикла;
	Исключение
		Сообщить("Ошибка при получении площадок, привязанных к ХозСубъекту");
	КонецПопытки;
	Сообщить("Загрузка площадок завершена");
КонецФункции

Функция ЗаполнитьФормыУпаковки() Экспорт
	//http://help.vetrf.ru/wiki/PackingForm
	
	НайтиФормуУпаковки("fedf3e32-053c-11e1-99b4-d8d385fbc9e8",	"банки");
	НайтиФормуУпаковки("fedf401c-053c-11e1-99b4-d8d385fbc9e8",	"биг бэги");
	НайтиФормуУпаковки("fedf412a-053c-11e1-99b4-d8d385fbc9e8",	"бочки");
	НайтиФормуУпаковки("fedf422e-053c-11e1-99b4-d8d385fbc9e8",	"жестяные банки");
	НайтиФормуУпаковки("fedf4328-053c-11e1-99b4-d8d385fbc9e8",	"картонные коробки");
	НайтиФормуУпаковки("fedf4422-053c-11e1-99b4-d8d385fbc9e8",	"крафтмешки");
	НайтиФормуУпаковки("fedf451c-053c-11e1-99b4-d8d385fbc9e8",	"мешки");
	НайтиФормуУпаковки("fedf4616-053c-11e1-99b4-d8d385fbc9e8",	"мешки полипропиленовые");
	НайтиФормуУпаковки("fedf46fc-053c-11e1-99b4-d8d385fbc9e8",	"навалом");
	НайтиФормуУпаковки("fedf47ec-053c-11e1-99b4-d8d385fbc9e8",	"насыпью");
	НайтиФормуУпаковки("fedf48dc-053c-11e1-99b4-d8d385fbc9e8",	"пакеты");
	НайтиФормуУпаковки("fedf49cc-053c-11e1-99b4-d8d385fbc9e8",	"полиблоки");
	НайтиФормуУпаковки("fedf55e8-053c-11e1-99b4-d8d385fbc9e8",	"пенопластовые ящики");
	НайтиФормуУпаковки("fedf56f6-053c-11e1-99b4-d8d385fbc9e8",	"паллеты");
	НайтиФормуУпаковки("fedf57f0-053c-11e1-99b4-d8d385fbc9e8",	"полиэтилен");
	НайтиФормуУпаковки("fedf58e0-053c-11e1-99b4-d8d385fbc9e8",	"картон");
	НайтиФормуУпаковки("fedf59da-053c-11e1-99b4-d8d385fbc9e8",	"стокинеты");
	НайтиФормуУпаковки("fedf5ad4-053c-11e1-99b4-d8d385fbc9e8",	"коробки");
	НайтиФормуУпаковки("fedf5bc4-053c-11e1-99b4-d8d385fbc9e8",	"прицеп");
	НайтиФормуУпаковки("fedf5cb4-053c-11e1-99b4-d8d385fbc9e8",	"корзины");
	НайтиФормуУпаковки("fedf5d9a-053c-11e1-99b4-d8d385fbc9e8",	"автоцистерна");
	НайтиФормуУпаковки("fedf5e80-053c-11e1-99b4-d8d385fbc9e8",	"мешки бумажные");
	НайтиФормуУпаковки("fedf5f70-053c-11e1-99b4-d8d385fbc9e8",	"пенопластовые коробки");
	НайтиФормуУпаковки("fedf606a-053c-11e1-99b4-d8d385fbc9e8",	"контейнер");
	НайтиФормуУпаковки("fedf615a-053c-11e1-99b4-d8d385fbc9e8",	"поддоны");
	НайтиФормуУпаковки("fedf6240-053c-11e1-99b4-d8d385fbc9e8",	"на подвесе");
	НайтиФормуУпаковки("fedf6344-053c-11e1-99b4-d8d385fbc9e8",	"кипы");
	НайтиФормуУпаковки("a99ecd22-d2e8-11e4-8109-d89d67148660",	"гофроящики");
	НайтиФормуУпаковки("dae4571f-d2e8-11e4-8109-d89d67148660",	"пластмассовые ящики");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьСтраны() Экспорт
	
	Сообщить(" Запрос GetCountryList ");		
	Результат = Компонента.GetCountryList( );
	
	СообщитьИнфо("Загрузка XML-файла: " + Компонента.LogFilename);    

	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Попытка
		countryList = xdto.countryList.country;
		Для каждого country из countryList Цикл		
				
			guid = country.guid;
			uuid = country.uuid;
			name = country.name;			
			
			Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Страна.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Страна КАК ВСД_Страна
		                      |ГДЕ
		                      |	ВСД_Страна.GUID = &GUID");
			Запрос.УстановитьПараметр("GUID", guid );
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда 
				Ответ = Результат.Ссылка;
			Иначе
				Сообщить("ВСД_Страна ["+name+"] GUID ["+guid+"] добавлена");
				Спр = Справочники.ВСД_Страна.СоздатьЭлемент();
				Спр.Наименование = name;
				Спр.GUID = guid;
				Спр.UUID = UUID;
				Спр.Записать();
				Ответ = Спр.Ссылка;
			КонецЕсли;		
					
		КонецЦикла;
	Исключение
		Сообщить("Ошибка при получении ВСД_Страна");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Сообщить("Загрузка стран завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьРегионы(Страна) Экспорт 
	//Страна_GUID = ?(ПустаяСтрока(Страна)=1,"",Страна.GUID);
		
	Сообщить(" Запрос GetRegionList ["+СокрЛП(Страна.GUID) +"]");		
	Результат = Компонента.GetRegionList( СокрЛП(Страна.GUID) );
		
	СообщитьИнфо("Загрузка XML-файла: " + Компонента.LogFilename);    
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Попытка
		regionList = xdto.RegionList.region;
		Для каждого region из regionList Цикл		
				
			guid = region.guid;
			uuid = region.uuid;
			name = region.view;			
			
			Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Регион.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Регион КАК ВСД_Регион
		                      |ГДЕ
		                      |	ВСД_Регион.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Регион ["+name+"] GUID ["+guid+"] добавлена");
			//создать 
			Спр = Справочники.ВСД_Регион.СоздатьЭлемент();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = UUID;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		

		КонецЦикла;
	Исключение
		Сообщить("Ошибка при получении ВСД_Регион");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Сообщить("Загрузка ВСД_Регион завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьГорода(Регион) Экспорт 

	//стандартное поведение функции			
	//Страна_GUID = ?(ПустаяСтрока(Страна)=1,"",Страна_GUID);
		
	Сообщить(" Запрос GetLocalityListByRegion "+Регион+" ["+СокрЛП(Регион.GUID) +"]");		
	Результат = Компонента.GetLocalityListByRegion( СокрЛП(Регион.GUID) );
	
	//Отладка();
	
	СообщитьИнфо("Загрузка XML-файла: " + Компонента.LogFilename);    

	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Попытка
		LocalityList = xdto.LocalityList.Locality;
		Для каждого Locality из LocalityList Цикл		
				
			guid = Locality.guid;
			uuid = Locality.uuid;
			name = Locality.view;			
			
			Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Город.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Город КАК ВСД_Город
		                      |ГДЕ
		                      |	ВСД_Город.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Город ["+name+"] GUID ["+guid+"] добавлена");
			Спр = Справочники.ВСД_Город.СоздатьЭлемент();
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = UUID;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		

						
		КонецЦикла;
	Исключение
		Сообщить("Ошибка при получении ВСД_Город");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Сообщить("Загрузка ВСД_Город завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьПродукцию(Тип) Экспорт
	// http://help.vetrf.ru/wiki/ProductType
	
	Сообщить(" Запрос GetProductList ");		
	Результат = Компонента.GetProductList( Тип );
	
	Если Результат="SUCCESS" Тогда
			
		СообщитьИнфо("Загрузка XML-файла: "+Компонента.LogFilename);    
		
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
		xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

		Попытка
			productList = xdto.productList.product;
			Для каждого product из productList Цикл		
					
				guid = product.guid;
				uuid = product.uuid;
				name = product.name;			
				
				Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	ВСД_Продукция.Ссылка
			                      |ИЗ
			                      |	Справочник.ВСД_Продукция КАК ВСД_Продукция
			                      |ГДЕ
			                      |	ВСД_Продукция.GUID = &GUID");
			Запрос.УстановитьПараметр("GUID", guid );
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда 
				Ответ = Результат.Ссылка;
				Спр = Результат.Ссылка.ПолучитьОбъект();
			Иначе
				Сообщить("ВСД_Продукция ["+name+"] GUID ["+guid+"] добавлена");
				//создать 
				Спр = Справочники.ВСД_Продукция.СоздатьЭлемент();
			КонецЕсли;		
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = UUID;
			Попытка Спр.КодТНВЭД =  ?(ТипЗнч(product.code) = Тип("Строка"),product.code,""); Исключение Спр.КодТНВЭД = "" ;КонецПопытки;
			
			Спр.Тип = product.ProductType;				
			Спр.Записать();
			Ответ = Спр.Ссылка;

			ИнициализацияХС_ЗагрузитьВидыПродукции(guid, Спр.Ссылка );
							
			КонецЦикла;
		Исключение
			Сообщить("Ошибка при получении ВСД_Продукция");
			Сообщить(ОписаниеОшибки());
		КонецПопытки;

	КонецЕсли;	
	Сообщить("Загрузка ВСД_Продукция завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьВидыПродукции(guid, Владелец) Экспорт
	
	Если Владелец=Справочники.ВСД_Продукция.ПустаяСсылка() Тогда 
		Сообщить("Не указан владелец "+guid);
		Возврат 0;
	КонецЕсли;

	Сообщить(" Запрос GetProductList ");		
	Результат = Компонента.GetSubProductByProductList( guid );
	
	СообщитьИнфо("Загрузка XML-файла: "+Компонента.LogFilename);    
		
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Попытка
		//subProductList = xdto.subProductList.subProduct;
		Если ТипЗнч(xdto.subProductList.subProduct)<>Тип("СписокXDTO") Тогда 
			subProductList = Новый Массив;
			subProductList.Добавить(xdto.subProductList.subProduct);
		Иначе
			subProductList = xdto.subProductList.subProduct;
		КонецЕсли;
		
		Для каждого subProduct из subProductList Цикл		
				
			guid = subProduct.guid;
			uuid = subProduct.uuid;
			name = subProduct.name;			
			
			Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ВидПродукции.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ВидПродукции КАК ВСД_ВидПродукции
		                      |ГДЕ
		                      |	ВСД_ВидПродукции.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
			Спр = Результат.Ссылка.ПолучитьОбъект();
			Сообщить("ВСД_ВидПродукции ["+name+"] GUID ["+guid+"] изменена");
		Иначе
			Сообщить("ВСД_ВидПродукции ["+name+"] GUID ["+guid+"] добавлена");
			//создать 
			Спр = Справочники.ВСД_ВидПродукции.СоздатьЭлемент();
		КонецЕсли;		
		Спр.Владелец = Владелец;
		Спр.Наименование = name;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Попытка Спр.КодТНВЭД =  ?(ТипЗнч(subProduct.code) = Тип("Строка"),subProduct.code,""); Исключение Спр.КодТНВЭД = "" ;КонецПопытки;

		//Спр.Тип = subProduct.ProductType;				
		Спр.Записать();
		Ответ = Спр.Ссылка;			
						
		КонецЦикла;
	Исключение
		Сообщить("Ошибка при получении ВСД_ВидПродукции");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Сообщить("Загрузка ВСД_ВидПродукции завершена");
		
	Возврат 1;
КонецФункции


Функция ИнициализацияХС_ЗагрузитьЕдиницыИзмерения() Экспорт
	
	Сообщить(" Запрос GetUnitList ");		
	Результат = Компонента.GetUnitList();
	
	Если Результат="SUCCESS" Тогда
		
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
		xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

		Попытка
			unitList = xdto.UnitList.Unit;
			//Если ТипЗнч(xdto.subProductList.subProduct)<>Тип("СписокXDTO") Тогда 
			//	subProductList = Новый Массив;
			//	subProductList.Добавить(xdto.subProductList.subProduct);
			//Иначе
			//	subProductList = xdto.subProductList.subProduct;
			//КонецЕсли;
			
			Для каждого unit из unitList Цикл		
					
				guid = unit.guid;
				uuid = unit.uuid;
				name = unit.name;
				
				Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	ВСД_ЕдиницыИзмерения.Ссылка
			                      |ИЗ
			                      |	Справочник.ВСД_ЕдиницыИзмерения КАК ВСД_ЕдиницыИзмерения
			                      |ГДЕ
			                      |	ВСД_ЕдиницыИзмерения.GUID = &GUID");
			Запрос.УстановитьПараметр("GUID", guid );
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда 
				Ответ = Результат.Ссылка;
				Спр = Результат.Ссылка.ПолучитьОбъект();
				Сообщить("ВСД_ЕдиницыИзмерения ["+name+"] GUID ["+guid+"] изменена");
			Иначе
				Сообщить("ВСД_ЕдиницыИзмерения ["+name+"] GUID ["+guid+"] добавлена");
				//создать 
				Спр = Справочники.ВСД_ЕдиницыИзмерения.СоздатьЭлемент();
			КонецЕсли;		
			
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = UUID;
			Спр.Коэффициент = unit.factor;			
			Спр.Записать();
			Ответ = Спр.Ссылка;			
							
			КонецЦикла;
		Исключение
			Сообщить("Ошибка при получении ВСД_ЕдиницыИзмерения");
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		Сообщить("Загрузка ВСД_ЕдиницыИзмерения завершена");
	КонецЕсли;	
	Сообщить("Загрузка завершена");
КонецФункции

Процедура ИнициализацияХС() Экспорт
	
	Если ПустаяСтрока(param_username)=1 Тогда 
		Предупреждение("Заполните параметр [param_username]");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(param_password)=1 Тогда 
		Предупреждение("Заполните параметр [param_password]");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(param_issuer_id)=1 Тогда 
		Предупреждение("Заполните параметр [issuer_id]");
		Возврат;
	КонецЕсли;
	
	
	ЗаполнитьФормыУпаковки();
	
	ИнициализацияХС_ЗагрузитьСтраны();
	
	Для А=1 По 8 Цикл
		ИнициализацияХС_ЗагрузитьПродукцию(А);
	КонецЦикла;
	
	Если Отправитель_ХозСубъект=Справочники.ВСД_ХозСубъект.ПустаяСсылка() Тогда
		
		СпрКонтрагенты = Справочники.Контрагенты;
		ФормаСписка= СпрКонтрагенты.ПолучитьФормуВыбора();
		Если Не ФормаСписка.Открыта() Тогда
		    ФормаСписка.Открыть();
		КонецЕсли; 

//		СпрКонтрагенты = Новый("Справочник.Контрагенты");
//		Если СпрКонтрагенты.Выбрать("Выберите фирму-отправитель вет справок",)=1 Тогда 
//			ВыбКонтрагент = СпрКонтрагенты.ТекущийЭлемент();
//			СпрХС = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
//			Если СпрХС.НайтиПоРеквизиту("Контрагент", ВыбКонтрагент ,1)=0 Тогда
//				СпрХС.Новый();
//				СпрХС.Наименование = ВыбКонтрагент .Наименование;
//				СпрХС.Контрагент = ВыбКонтрагент ;
//				СпрХС.ИНН = ГМ.ПолучитьИНН(ВыбКонтрагент);
//				СпрХС.Записать();
//				Отправитель_ХозСубъект = СпрХС.ТекущийЭлемент();
//			Иначе
//				Отправитель_ХозСубъект = СпрХС.ТекущийЭлемент();
//			КонецЕсли;			
//		Иначе
//			Возврат;
//		КонецЕсли;		
	КонецЕсли;
	
	Результат = ХС_ПолучитьGuid(Отправитель_ХозСубъект);
	
	ИмяФайла = Компонента.LogFilename;
	Если Результат="SUCCESS" Тогда
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
		xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		Попытка
			guid = xdto.businessEntityList.businessEntity.guid;
			uuid = xdto.businessEntityList.businessEntity.uuid;
			active = xdto.businessEntityList.businessEntity.active;
			Попытка 
				name = xdto.businessEntityList.businessEntity.name;
			Исключение 
				name = xdto.businessEntityList.businessEntity.fio;
			КонецПопытки;
			country = xdto.businessEntityList.businessEntity.juridicalAddress.country.guid;
			countryName = xdto.businessEntityList.businessEntity.juridicalAddress.country.name;
			
			region = xdto.businessEntityList.businessEntity.juridicalAddress.region.guid;
			regionName = xdto.businessEntityList.businessEntity.juridicalAddress.region.name;		

			Попытка 
				locality = xdto.businessEntityList.businessEntity.juridicalAddress.locality.guid;
				localityName = xdto.businessEntityList.businessEntity.juridicalAddress.locality.name;		
			Исключение
				Сообщить("Площадка НЕ привязана к Хозсубъекту. Проверьте площадку в ГИС Меркурий");
				Возврат;
			КонецПопытки;
			
			//ОбъектХС = ХС.ПолучитьОбъект();
			//ОбъектХС.GUID = GUID;
			//ОбъектХС.UUID = uuid;
			//ОбъектХС.Записать();
			//Сообщить("Записан Эл ["+ХС+"] GUID = "+GUID);		
		
		
		Исключение
			Сообщить("Получен пустой ответ сервера. Заполните параметры подключения.");
			Возврат;
		КонецПопытки;
		
		Страна 	= НайтиСтрануПоGUID(country, countryName);
		
		ИнициализацияХС_ЗагрузитьРегионы(Страна);	
	
		ИнициализацияХС_ЗагрузитьЕдиницыИзмерения();
			
		Регион 	= НайтиРегионПоGUID(region, regionName);			
		
		Город 	= НайтиГородПоGUID(locality, localityName);
		
		Если ПустаяСтрока(param_issuer_id)=1 Тогда 
			param_issuer_id = guid;
		Иначе
			Если НЕ(param_issuer_id = guid) Тогда 
				Сообщить("Ошибка в param_issuer_id, должно быть "+guid);
			Иначе
				Сообщить("param_issuer_id - правильно "+name);
			КонецЕсли;
		КонецЕсли;		
		
		ЗагрузитьПлощадки( Отправитель_ХозСубъект );
		
		//Выбрать площадку
		//ВыбРеквизит = "Отправитель_Площадка";
		//ОткрытьПлощадкиПоХС(Отправитель_ХозСубъект);
		
	КонецЕсли;
		
КонецПроцедуры

//=================== ХозСубъекты ===================================
Функция ХС_ПолучитьGuid(ХС) Экспорт

	//стандартное поведение функции		
	ИНН = ПолучитьИНН(ХС.Контрагент);
	Если ПустаяСтрока(ИНН)=1 Тогда 
		Сообщить("Неправильно указан ИНН");
		Возврат "ERROR";
	КонецЕсли;	
	
	Сообщить(" Запрос GetBusinessEntityByINN [ "+ИНН+" ]");		
	Результат = Компонента.GetBusinessEntityByINN( ИНН );	
	
	Если Результат="SUCCESS" Тогда

	  	СообщитьИнфо("Загрузка XML-файла: "+Компонента.LogFilename);    
	    
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
		xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		Если Число(xdto.businessEntityList.total)>0 Тогда			
			guid = xdto.businessEntityList.businessEntity.guid;
			uuid = xdto.businessEntityList.businessEntity.uuid;
			active = xdto.businessEntityList.businessEntity.active;
					
			ОбъектХС = ХС.ПолучитьОбъект();
			ОбъектХС.GUID = GUID;
			ОбъектХС.UUID = uuid;
			ОбъектХС.Записать();
			Сообщить("Записан ХозСубъект ["+ХС+"] GUID = "+GUID);			
		Иначе
			Сообщить("ХозСубъект ["+ХС+"] с ИНН "+ИНН+" не найден в ГИС Меркурий");			
		КонецЕсли;
		
	КонецЕсли;	
		
	Возврат Результат;
	
КонецФункции


Процедура ХС_Создать_Ответ( applicationID, ХС)
	
	Если Не (ЗначениеЗаполнено(applicationID)) Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateBusinessEntityResult [ "+СокрЛП(applicationID)+" ]");		
	Результат = Компонента.CreateBusinessEntityResult( СокрЛП(applicationID));
	//Отладка();	
	
    СообщитьИнфо("Загрузка XML-файла: "+Компонента.LogFilename);        
 	
	Если НайтиОшибки(Компонента.LogFilename) Тогда 
		Возврат;
	КонецЕсли;
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Попытка
		be = xdto.application.result.modifyBusinessEntityResponse.businessEntity;
		guid = be.guid;
		uuid = be.uuid;
		ОбъектХС = ХС.ПолучитьОбъект();
		ОбъектХС.GUID = guid;
		ОбъектХС.UUID = uuid;
		ОбъектХС.Записать();
		Сообщить("Записан ХозСубъект ["+ХС+"] GUID = "+GUID);	
	Исключение
		Сообщить("ХозСубъект ["+ХС+"] неудалось записать отчет ГИС Меркурий");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	УдалитьXML( Компонента.LogFilename );
КонецПроцедуры

Процедура ХС_Создать(ХС)   Экспорт

	ИНН = ХС.Контрагент.ИНН;	
	КПП = ХС.Контрагент.КПП;	
	//ИНН = СокрЛП(ХС.Контрагент.ИНН);
	//КПП = СокрЛП(ХС.Контрагент.КПП);
	//ЖД нет ОГРН в Контрагентах
	Попытка
		ОГРН = ХС.Контрагент.ОГРН;
	Исключение
		ОГРН = ХС.ОГРН;
	КонецПопытки;

	Если не(ЗначениеЗаполнено(ИНН)) Тогда 
		СообщитьОшибку("Неправильно указан ИНН");
		Возврат;
	КонецЕсли;	
	// для ИП - пустое КПП
	//Если ПустоеЗначение(КПП)=1 Тогда 
	//	Сообщить("Неправильно указан КПП","!");
	//	Возврат;
	//КонецЕсли;
	Если НЕ(ЗначениеЗаполнено(ОГРН)) Тогда 
		СообщитьОшибку("Не указан ОГРН");
		Возврат;
	КонецЕсли;
	
	СведенияОПлательщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ХС.Контрагент, ТекущаяДата());
	// в упп нет ф-ции
	Попытка
	СведенияОПлательщике.Вставить("ЮрФизЛицо", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ХС.Контрагент, "ЮрФизЛицо"));
	Исключение
	КонецПопытки;
	//ДанныеДляПечати.Вставить("СведенияОПлательщике", СведенияОПлательщике);
	//ДанныеДляПечати.Вставить("ПредставлениеПлательщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПлательщике, СписокЮр));
	
	Адрес = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПлательщике, "ЮридическийАдрес");
	//ХС.Контрагент.ЮрФизЛицо.ЮрАдрес;
	Если НЕ(ЗначениеЗаполнено(Адрес)) Тогда 
		Сообщить("Не указан ЮридическийАдрес");
		Возврат;
	КонецЕсли;
	
	Наименование = хс.Контрагент.НаименованиеПолное;
	
	Сообщить(" Запрос CreateBusinessEntity [ "+ИНН+" ]");		
	Результат = Компонента.CreateBusinessEntity(
			Наименование, 
			Наименование, 
			ИНН, 
			КПП, 
			ОГРН, 
	        СокрЛП(Страна.GUID), 
            СокрЛП(Регион.GUID), 
            СокрЛП(Город.GUID), 
			Адрес
	);
	
	//Отладка();	
	УдалитьXML( Компонента.LogFilename );
	
	Если Результат="ACCEPTED" Тогда
		Состояние("Пауза "+ПаузаСек+" сек");
		Пауза();
		
		ХС_Создать_Ответ( Компонента.ApplicationId, ХС )
		
	КонецЕсли;
	
КонецПроцедуры

//================== Площадки ===================================
Процедура СоздатьПлощадку(Площадка) Экспорт
	
	Если ПустаяСтрока(Площадка.GuidХозСубъекта)=1 Тогда
		Сообщить("Не указан Guid ХозСубъекта");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(Площадка.Адрес)=1 Тогда
		Сообщить("Не указан Адрес");
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(Страна.GUID)=1 Тогда
		Сообщить("Не указан Страна.GUID");
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(Регион.GUID)=1 Тогда
		Сообщить("Не указан Регион.GUID");
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(Город.GUID)=1 Тогда
		Сообщить("Не указан Город.GUID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateEnterprise [ "+СокрЛП(Площадка)+" ]");		
	Результат = Компонента.CreateEnterprise(
			СокрЛП(Площадка.Наименование),
			СокрЛП(Площадка.Адрес), 
	        СокрЛП(Страна.GUID),
            СокрЛП(Регион.GUID),
            СокрЛП(Город.GUID), 
			СокрЛП(Площадка.GuidХозСубъекта)
	);	
	//Отладка();	
		
	УдалитьXML( Компонента.LogFilename );
	
	Если Результат="ACCEPTED" Тогда
		Состояние("Пауза "+ПаузаСек+" сек");
		Пауза();
		
		ПолучитьОтветПлощадка( Компонента.ApplicationId, Площадка )
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОтветПлощадка( applicationID , Площадка) Экспорт
	
	Если ПустаяСтрока(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateEnterpriseResult [ "+СокрЛП(applicationID)+" ]");		
	Результат = Компонента.CreateEnterpriseResult( СокрЛП(applicationID));
	
    СообщитьИнфо("Загрузка XML-файла: "+Компонента.LogFilename);    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Если НайтиОшибки(Компонента.LogFilename) Тогда
		Возврат ;
	КонецЕсли;

	
	enterprise = xdto.application.result.modifyEnterpriseResponse.enterprise;
	guid = enterprise.guid;
	uuid = enterprise.uuid;
	active = enterprise.active;
	Попытка 
		name = enterprise.name;
	Исключение 
		name = enterprise.fio;
	КонецПопытки;
			
	ОбъектПлощадка = Площадка.ПолучитьОбъект();
	ОбъектПлощадка.guid = guid;
	ОбъектПлощадка.uuid = uuid;
	ОбъектПлощадка.Записать();
	Сообщить("Успешно записан ВСД_Площадка ["+Площадка+"] GUID = "+GUID);
      			
	УдалитьXML( Компонента.LogFilename );
	Пауза();
	
	СоздатьСвязьХозсубъектПлощадка(Площадка);

КонецПроцедуры

Процедура СоздатьСвязьХозсубъектПлощадка(Площадка) Экспорт
	Если ПустаяСтрока(Площадка.GuidХозСубъекта)=1 Тогда 
		Сообщить("не указан GUID хоз субъекта");
		Возврат;
	КонецЕсли;
		
	Если ПустаяСтрока(Площадка.GUID)=1 Тогда 
		Сообщить("Выб площадке не указан GUID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateActivityLocationsOperation [ "+СокрЛП(Площадка)+" ]");		
	Результат = Компонента.CreateActivityLocationsOperation(
			СокрЛП(Площадка.GuidХозСубъекта),
			СокрЛП(Площадка.GUID) 
	);
	
	//Отладка();	
	УдалитьXML( Компонента.LogFilename );
	
	Если Результат="ACCEPTED" Тогда
		Пауза();
		
		ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( Компонента.ApplicationId)
	КонецЕсли;
	
КонецПроцедуры


Процедура ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( applicationID )
	
	Если ПустаяСтрока(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateActivityLocationsOperationResult [ "+СокрЛП(applicationID)+" ]");		
	Результат = Компонента.CreateActivityLocationsOperationResult( СокрЛП(applicationID));
	
	Если Результат="COMPLETED" Тогда			
		//objDom=СоздатьОбъект("MSXML2.DOMDocument");
		//objDom.load(ГМ.Компонента.LogFilename);    	        
		//businessEntity=objDom.selectSingleNode("//merc:businessEntity") ;									
		//guid = businessEntity.selectSingleNode("base:guid").text;
		//uuid = businessEntity.selectSingleNode("base:uuid").text;			
		//active = businessEntity.selectSingleNode("base:active").text;		
		//enterprise = businessEntity.selectSingleNode("ent:activityLocation").selectSingleNode("ent:enterprise").selectSingleNode("base:guid").text;		
		Сообщить("Успешно установлена связь ВСД_Площадка ");//["+enterprise+"] ВСД_ХозСубъект ["+guid+"]");
		//рез = Компонента.ResultString;
	Иначе
		//ЖД ТЕСТ покажем ошибки
		НайтиОшибки(Компонента.LogFilename);	
	
	КонецЕсли;	
	
	УдалитьXML( Компонента.LogFilename );
КонецПроцедуры

Функция НайтиПлощадкиПоНазванию_ЗапросXML(Регион, Название,Смещение = 0)
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' 
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <ws:getRussianEnterpriseListRequest>
	|     	<bs:listOptions>
	|            <bs:count>"+СтрЗаменить( Смещение , Символы.НПП ,"")+"</bs:count>
	|            <bs:offset>0</bs:offset>
	|        </bs:listOptions>
	|     	<dt:enterprise>";
	Если ПустоеЗначение(Название) = 0 Тогда
	    Запрос = Запрос + "
		|            <dt:name>"+СокрЛП(Название)+"</dt:name>";	
	КонецЕсли;
	Запрос = Запрос + "
	|            <dt:address>
	|               <dt:region>
	|                  <bs:guid>"+СокрЛП(Регион.GUID)+"</bs:guid>
	|               </dt:region>
	|            </dt:address>
	|        </dt:enterprise>
	|      </ws:getRussianEnterpriseListRequest>
	|   </soapenv:Body>
	|</soapenv:Envelope>";	
	Возврат Запрос;
КонецФункции

Функция НайтиПлощадкиПоНазванию(ХС, Регион, УточнитьНазвание) Экспорт

	//стандартное поведение функции	
	Если НЕ(ЗначениеЗаполнено(ХС.GUID)) Тогда
		Сообщить("Не указан ХозСубъект GUID ");
		Возврат 0;
	КонецЕсли;
	
	
	Стр = СокрЛП(ХС.Контрагент.НаименованиеПолное);
	Если СтрДлина( СокрЛП(ХС.Контрагент.ИНН) )=12 Тогда 
		//ИП
		стр = СтрЗаменить(стр, " ИП","");
		стр = СтрЗаменить(стр, "ИП ","");
	КонецЕсли;
	
	Если УточнитьНазвание=1 Тогда 
		Если ВвестиЗначение(стр,"Название контрагента","Строка")=0 Тогда 
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Сообщить(" Запрос GetRussianEnterpriseListByName [ "+стр+" ] регион = ["+Регион+"]");
	ПолученоЗаписей = 1000; Смещение = 0;
	Пока ПолученоЗаписей = 1000 Цикл
		ПолученоЗаписей = 0;
		ЗапросXML = НайтиПлощадкиПоНазванию_ЗапросXML( Регион, стр, Смещение);

		метод = Компонента.GetMethod();
		метод.Service = "platform/services/2.0/EnterpriseService";
    	метод.Action = "GetRussianEnterpriseList";	
	
		appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	
    	СообщитьИнфо("Загрузка XML-файла: "+Компонента.LogFilename);    
    
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
		xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

		Если НайтиОшибки(Компонента.LogFilename) Тогда
			Возврат Ложь;
		КонецЕсли;
	
		Попытка
			List = xdto.Body.getRussianEnterpriseListResponse.enterpriseList.enterprise;
		
			Если ТипЗнч(List)<>Тип("СписокXDTO") Тогда 
				enterpriseList = Новый Массив;
				enterpriseList.Добавить(List);
			Иначе
				enterpriseList = List;
			КонецЕсли;
			ПолученоЗаписей = enterpriseList.Количество();
			Для каждого enterprise из enterpriseList Цикл		
				
				guid = enterprise.guid;
			
				Спр = Новый("СправочникМенеджер.ВСД_Площадка");
				Ссылка_ВСД_Площадка = Спр.НайтиПоРеквизиту("GUID",Guid);
				Если Ссылка_ВСД_Площадка = Справочники.ВСД_Площадка.ПустаяСсылка() Тогда 
					Объект_ВСД_Площадка = Справочники.ВСД_Площадка.СоздатьЭлемент();
					//Спр.УстановитьНовыйКод("00");	
				Иначе
					Объект_ВСД_Площадка = Ссылка_ВСД_Площадка.ПолучитьОбъект(); 
				КонецЕсли;
			
				Объект_ВСД_Площадка.Наименование = enterprise.name;
				Объект_ВСД_Площадка.Адрес = enterprise.address.addressView;
				Объект_ВСД_Площадка.GUID = enterprise.guid;
				Объект_ВСД_Площадка.UUID = enterprise.uuid;	
			
				//Если ХС="" Тогда
				//	Сообщить("Внимание: создана площадка ["+enterprise.GUID+"] ["+enterprise.name+"] без указания ХозСубъекта ");
				//	//Возврат;
				//Иначе 
				Объект_ВСД_Площадка.GUIDХозСубъекта = ХС.GUID;
				//КонецЕсли;	
			
				Объект_ВСД_Площадка.Записать();
				Сообщить("Записан ВСД_Площадка ["+Объект_ВСД_Площадка+"] GUID = "+ Guid);				
				//ЗагрузитьПлощадкуПоGUID(guid, ХС);
						
			КонецЦикла;
		Исключение
			Сообщить("Ошибка при получении площадок, привязанных к ХозСубъекту");
		КонецПопытки;
		Смещение = Смещение + 1000;
	КонецЦикла;  // более 1000
	Сообщить("Загрузка площадок завершена");
	
	Возврат 1;
КонецФункции

//================================================================

Процедура ЗагрузитьXML_Партии(имяФайла, докОснование="") 
	
	Если НайтиОшибки(имяФайла, докОснование)>0 Тогда 
		Возврат;
	КонецЕсли;	
	
    СообщитьИнфо("Загрузка XML-файла: "+ИмяФайла);    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Попытка
		seList = xdto.application.result.prepareOutcomingConsignmentResponse.StockEntry;	
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		stockEntryList = Новый Массив;
		stockEntryList.Добавить(seList);
	Иначе
		stockEntryList = seList;
	КонецЕсли;
			
	//Сообщить("Получено "+seList.length+" записей","i");
	Для каждого stockEntry из stockEntryList Цикл		
					
		Партия = ЗаписатьПартию(stockEntry);
		
		Если докОснование<>"" Тогда 
			Партия.ДокОснование = докОснование;
			Партия.Записать();
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры

Функция ВыбратьВидДокументаВСД(type)
	
    //{ VetDocumentType 
    //    TRANSPORT, = 1	= Транспортный ВСД.	
    //    PRODUCTIVE, = 2 	= Производственный ВСД.
    //    RETURNABLE, = 3 	= Возвратный ВСД.
    //    INCOMING, = 4  	= Входящий ВСД.
    //    OUTGOING, = 5  	= Исходящий ВСД.
    //}
	
	рез = "";
	Если type="TRANSPORT" Тогда
		рез = "ВСД";
	ИначеЕсли type="PRODUCTIVE" Тогда
		рез = "ВСД_Производство";
	ИначеЕсли type="INCOMING" Тогда
		рез = "ВСД_входящий";
	ИначеЕсли type="RETURNABLE" Тогда
		рез = "ВСД_возвратный";
	ИначеЕсли type="OUTGOING" Тогда
		// проверить !!!
		рез = "ВСД";
	Иначе
		Сообщить("Неопределенный вид ВСД ["+type+"]");
	КонецЕсли;
	
	Возврат рез;
КонецФункции

Процедура ЗагрузитьXML_ВСД(имяФайла, докОснование)
	
	Если НайтиОшибки(имяФайла, докОснование)>0 Тогда 
		Возврат;
	КонецЕсли;		
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	applicationId = xdto.application.applicationId;
	
	Попытка
		seList = xdto.application.result.prepareOutcomingConsignmentResponse.vetDocument;	
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		vetDocumentList = Новый Массив;
		vetDocumentList.Добавить(seList);
	Иначе
		vetDocumentList = seList;
	КонецЕсли;
	
	Для каждого vetDocument из vetDocumentList Цикл		
		uuid = vetDocument.uuid;
		st 	 = vetDocument.status;
		type = vetDocument.type;
		
		ВидДокумента = ВыбратьВидДокументаВСД(type);
		
		createDate = vetDocument.issueDate;
		lastUpdateDate = vetDocument.lastUpdateDate;
		
		consignorBusinessEntity = vetDocument.consignor.businessEntity.guid;
		consignorEnterprise 	= vetDocument.consignor.enterprise.guid;
		
		Попытка
			consigneeBusinessEntity = vetDocument.consignee.businessEntity.guid;
		Исключение
			consigneeBusinessEntity ="";
		КонецПопытки;
		Попытка
			consigneeEnterprise 	= vetDocument.consignee.enterprise.guid;
		Исключение
			consigneeEnterprise = "";
		КонецПопытки;
		
		batch = vetDocument.batch;
		
		product 	= batch.product.guid;
		subProduct 	= batch.subProduct.guid;

		Попытка
			productItemName = batch.productItem.name;
		Исключение
			СообщитьИнфо("Не удалось получить элемент [productItem]");
			productItemName = "";
		КонецПопытки;
		
		Попытка
			productItemGuid = batch.productItem.guid;
		Исключение			
			productItemGuid="";
		КонецПопытки;		
		Попытка
			productItemUuid = batch.productItem.uuid;
		Исключение
			productItemUuid="";
		КонецПопытки;
		volume 		= batch.volume;
		unitGuid	= batch.unit.guid;
		
		Попытка
			packingFormUuid	= batch.packingList.packingForm.uuid;			
		Исключение
			СообщитьИнфо("Не удалось получить элемент [packingForm] [uuid]");
			packingFormUuid = "";			
		КонецПопытки;
		Попытка
			packingFormName	= batch.packingList.packingForm.name;	
		Исключение
			packingFormName="";
			СообщитьИнфо("Не удалось получить элемент [packingForm] [name]");
		КонецПопытки;

		packingAmount = batch.packingAmount;
						
		//Попытка			
		//	producer = batch.producerList.producer.enterprise.guid;
		//Исключение
		//	producer = "";
		//КонецПопытки;
		ДатаИзготовления1="";
		ДатаИзготовления="";
		попытка			
			год = batch.dateOfProduction.firstDate.year;
			мес = batch.dateOfProduction.firstDate.month;
			день = batch.dateOfProduction.firstDate.day;
			ДатаИзготовления1 = Дата(год, мес, день);
		Исключение
			Попытка
				ДатаИзготовления = batch.dateOfProduction.informalDate;
			Исключение				
			КонецПопытки;
		КонецПопытки;				
		ДатаИзготовления2="";
		попытка
			год = batch.dateOfProduction.secondDate.year;
			мес = batch.dateOfProduction.secondDate.month;
			день = batch.dateOfProduction.secondDate.day;
			ДатаИзготовления2 = Дата(год, мес, день);
		Исключение			
		КонецПопытки;
		
		//ДатаСрокГодности
		попытка			
			год = batch.expiryDate.firstDate.year;
			мес = batch.expiryDate.firstDate.month;
			день = batch.expiryDate.firstDate.day;
			ДатаСрокГодности1 = Дата(год, мес, день);
		Исключение
			Попытка
				ДатаСрокГодности = batch.expiryDate.informalDate;
			Исключение				
			КонецПопытки;
		КонецПопытки;				
		ДатаСрокГодности2="";
		попытка
			год = batch.expiryDate.secondDate.year;
			мес = batch.expiryDate.secondDate.month;
			день = batch.expiryDate.secondDate.day;
			ДатаСрокГодности2 = Дата(год, мес, день);
		Исключение			
		КонецПопытки;
		
		owner = batch.owner.guid; //ХозСубъект
		ВладелецХС = НайтиХСпоGUID(owner);
				
		//Если ТипЗнч(докОснование) = Тип("ДокументСсылка.ВСД_транзакция") Тогда 
		//	докОбъект = НайтиВсд(applicationId, uuid, ВидДокумента, 1);
		//Иначе			
		//	докОбъект = НайтиВсд(applicationId, uuid, ВидДокумента);
		//КонецЕсли;
		докОбъект = НайтиВСДпоUUID( uuid );
		докОбъект.UUID = uuid;
		докОбъект.applicationId = applicationId;
		//Если докОбъект.ТекущийДокумент() <> докОснование Тогда 
			докОбъект.ДокументОснование = докОснование;
		//КонецЕсли;
		//док.UUID = Компонента.DocUUID;					
		
		Попытка 
			докОбъект.Отправитель_ХозСубъект 	= НайтиХСпоGUID(consignorBusinessEntity);
		Исключение			
		КонецПопытки;
		Попытка			
			докОбъект.Отправитель_Площадка 		= НайтиПлощадку(consignorEnterprise);
		Исключение			
		КонецПопытки;

		Попытка
			докОбъект.Получатель_ХозСубъект 	= НайтиХСпоGUID(consigneeBusinessEntity);
		Исключение			
		КонецПопытки;

		Попытка			
			докОбъект.Получатель_Площадка 		= НайтиПлощадку(consigneeEnterprise);
		Исключение			
		КонецПопытки;
			
		//докОбъект.Производитель_Площадка 	= НайтиПлощадку(producer);
		//Попытка
		//	докОбъект.Производитель_ХозСубъект = докОбъект.Производитель_Площадка.Контрагент;
		//Исключение
		//	Сообщить(ОписаниеОшибки());
		//КонецПопытки;		
		//ДокПартия.Перевозчик_ХозСубъект = ;
		докОбъект.Продукция 	= НайтиПродукцию(product);
		докОбъект.ВидПродукции 	= НайтиВидПродукции(subProduct);
		
		докОбъект.Продукция_Элемент = Найти_Продукция_Элемент(productItemName, "", productItemUuid, докОбъект.Продукция, докОбъект.ВидПродукции);
		//докОбъект.СвойствоНоменклатурыЗначение = докОбъект.Продукция_Элемент.СвойствоНоменклатурыЗначение;
		
		докОбъект.Количество 	= Число(volume);
		докОбъект.КоличествоМест = Число(packingAmount);
		ФормаУпаковки 			= НайтиФормуУпаковки( packingFormUuid, packingFormName);
		докОбъект.ФормаУпаковки = ФормаУпаковки;	

		докОбъект.ЕдиницаИзмерения = НайтиЕдИзмерения( unitGuid );;
		
		докОбъект.ДатаИзготовления1 = ДатаИзготовления1;
		докОбъект.ДатаИзготовления2 = ДатаИзготовления2;
		докОбъект.ДатаИзготовления =  ДатаИзготовления;
		докОбъект.ДатаСрокГодности = ДатаСрокГодности;
		докОбъект.ДатаСрокГодности1 = ДатаСрокГодности1;
		докОбъект.ДатаСрокГодности2 = ДатаСрокГодности2;
		
		докОбъект.Статус = st;		
		докОбъект.НаименованиеПродукции = докОбъект.Продукция_Элемент.Наименование;
		//докОбъект.Фирма = глПользователь.ОсновнаяФирма;
		//докОбъект.Автор = глПользователь;	
		  		
		//докОбъект.Дата = СтрокаВДату(createDate);
		докОбъект.Дата = СтрокаВДатаВремя(lastUpdateDate);
				
		докОбъект.Записать(РежимЗаписиДокумента.Проведение);

		Сообщить("Записан "+ВидДокумента+" "+докОбъект.Номер+" от "+докОбъект.Дата+" ["+uuid+"]");
	КонецЦикла;

	Если ПустоеЗначение(докОснование)=0 Тогда
		докОснованиеОбъект = докОснование.ПолучитьОбъект();
		докОснованиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;		
КонецПроцедуры


//=================== Документы ==================================

Процедура СохранитьСтатусЗапроса(док)
	ДокОб = док.ПолучитьОбъект();

	ДокОб.applicationID = СокрЛП(Компонента.ApplicationId);
	ДокОб.Статус 		= СокрЛП(Компонента.Status);
	ДокОб.Комментарий = СокрЛП(Компонента.ErrorMessage);		
	ДокОб.Записать();
	Сообщить(" статус = "+ДокОб.Статус );
	Если ПустаяСтрока(СокрЛП(ДокОб.Комментарий))=0 Тогда
		Сообщить("Ошибка: "+ДокОб.Комментарий);
	КонецЕсли;	
КонецПроцедуры

Функция Проверка_ВСД_Исходящий(док)
	Если НЕ(ЗначениеЗаполнено(Док)) тогда
		Возврат 0;	
	КонецЕсли;
	
	Результат = 1; //все в порядке
	
	Если ПустаяСтрока(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;

	Если ПустаяСтрока(док.Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Получатель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Партия.Производитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан док.Партия.Производитель_Площадка.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Перевозчик_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Партия.GUID)=1 Тогда 
		Сообщить("Не указан Партия.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Партия.ВсдДата)=1 Тогда 
		Сообщить("Не указан Партия.ВсдДата");
		Результат = 0;
	КонецЕсли;
	//Если ПустаяСтрока(док.Партия.ФормаУпаковки)=1 Тогда 
	//	Сообщить("Не указан Партия.ФормаУпаковки");
	//	Результат = 0;
	//КонецЕсли;
	Если ПустаяСтрока(док.Продукция)=1 Тогда 
		Сообщить("Не указан Продукция");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.ВидПродукции)=1 Тогда 
		Сообщить("Не указан ВидПродукции");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.НаименованиеПродукции)=1 Тогда 
		Сообщить("Не указан НаименованиеПродукции");
		Результат = 0;
	КонецЕсли;
	//Если ПустаяСтрока(док.ЕдиницаИзмерения)=1 Тогда 
	//	Сообщить("Не указан ЕдиницаИзмерения");
	//	Результат = 0;
	//КонецЕсли;
	//Если ПустаяСтрока(док.ФормаУпаковки)=1 Тогда 
	//	Сообщить("Не указан ФормаУпаковки");
	//	Результат = 0;
	//КонецЕсли;

//	Если ПустаяСтрока(док.applicationID)=0 Тогда 
//		Сообщить("ВСД уже отправлен "+док);
//		Результат = 0;
//	КонецЕсли;
	Если ПустаяСтрока( СокрЛП(док.UUID) )=0 Тогда 
		Сообщить("ВСД уже отправлен "+док);
		Результат = 0;
	КонецЕсли;
	//Если док.ФормаВСД=0 Тогда 
	//	Сообщить("Не указана форма ВСД "+док);
	//	Результат = 0;
	//КонецЕсли;
	Если  док.Количество=0 Тогда 
		Сообщить("не указано Количество "+док);
		Результат = 0;
	КонецЕсли;
	//Если док.КоличествоМест =0 Тогда 
	//	Сообщить("не указано Количество коробов"+док);
	//	Результат = 0;
	//КонецЕсли;

	Если ПустаяСтрока(док.Партия.Продукция.Тип)=1 Тогда 
		Сообщить("Не указан Партия.Продукция.Тип");
		Результат = 0;
	КонецЕсли;

	
	Возврат Результат;
КонецФункции

Функция Отправить_ВСД_Исходящий(док) Экспорт
	
	Если Проверка_ВСД_Исходящий(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Сообщить("Отправляем запрос ВСД_Исходящий ["+док+"]");
	Результат = Компонента.Send_VSD_OUT( док );
	
	//Отладка();
	УдалитьXML( Компонента.LogFilename );
	
	Попытка
		СохранитьСтатусЗапроса(док);
		
		Если Результат="ACCEPTED" Тогда 
			//ВСД отправлен успешно, осталось получить ответ				
			Пауза();			
			
			Результат = ПолучитьРезультат_ВСД_Исходящий( док );
			Сообщить("Результат = "+Результат);
			Для А=1 По 10 Цикл
				Если (Результат="IN_PROCESS") Тогда 
					Пауза();
					Результат = ПолучитьРезультат_ВСД_Исходящий( док );
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		Сообщить("Не удалось записать ApplicationID в документ ВСД "+ОписаниеОшибки());
	КонецПопытки;		

	Возврат 1;
	
КонецФункции

Функция ПолучитьРезультат_ВСД_Исходящий( докСсылка ) Экспорт	

	applicationID = СокрЛП(докСсылка.applicationID);
	Если ПустаяСтрока(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;

	Сообщить("Отправляем запрос ВСД_Исходящий_Результат ["+докСсылка+"]" );
	Результат = Компонента.Send_VSD_OUT_Result( applicationID );

	СохранитьСтатусЗапроса(докСсылка);

	Если Результат="COMPLETED" Тогда

		ЗагрузитьXML_Партии( Компонента.LogFilename );
		
		//Если докСсылка.Вид()="ВСД_исходящий" Тогда 
		//	ДокОснование = докСсылка.ДокОснование;
		//Иначе
			ДокОснование = докСсылка;
		//КонецЕсли;
		//
		ЗагрузитьXML_ВСД( Компонента.LogFilename, ДокОснование);
		
	Иначе
		Сообщить(докСсылка.Комментарий);		
	КонецЕсли;
			
	УдалитьXML( Компонента.LogFilename );
	
	Возврат Результат;
КонецФункции

Функция ПолучитьРезультат_ВСД(applicationID, докСсылка, Пауза = Истина ) Экспорт
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	Если Пауза Тогда		
		Пауза( );
	КонецЕсли;	
	
	Сообщить("Отправляем запрос ["+докСсылка+"]" );
	Результат = Компонента.SendRequestResult( applicationID );

	Если НайтиОшибки(Компонента.LogFilename, докСсылка)>0 Тогда 
		Возврат Результат;
	КонецЕсли;		
	
	Если ПустоеЗначение(докСсылка)=0 Тогда 
		СохранитьСтатусЗапроса(докСсылка);
		ЗагрузитьXML_ВСД( Компонента.LogFilename, докСсылка);
	КонецЕсли;

	ЗагрузитьXML_Партии( Компонента.LogFilename );
		
	УдалитьXML( Компонента.LogFilename );
	
	Возврат Результат;
КонецФункции

Функция  ОтправитьЗапросXML(ЗапросXML, док="") Экспорт
	Если ПустоеЗначение(док)=0 Тогда 
		Сообщить("Отправляем запрос "+ТипЗнч(док)+" ["+док+"]");
	Иначе
		Сообщить("Отправляем запрос");
	КонецЕсли;
	результат = Компонента.SendRequestXML(ЗапросXML);

	appID = Компонента.ApplicationId;
	
	УдалитьXML( Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьРезультат_ВСД(appID, док ); //ДокОб.ТекущийДокумент()
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД(appID, док ); //ДокОб.ТекущийДокумент()
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;
	
КонецФункции


//================== ВСД_транзакция ===============================

Функция Проверка_ВСД_транзакция(док)
	Если НЕ(ЗначениеЗаполнено(Док)) тогда
		Возврат 0;	
	КонецЕсли;
	Результат = 1; //все в порядке
	Если СокрЛП(Док.Статус) = "COMPLETED" Тогда		
		Сообщить("Документ "+Док+" уже отправлен ");
		Возврат  0;
	КонецЕсли;
	Если ПустаяСтрока(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;

	Если ПустаяСтрока(док.Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Получатель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
//	Если ПустаяСтрока(док.Перевозчик_ХозСубъект.GUID)=1 Тогда 
//		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников");
//		Результат = 0;
//	КонецЕсли;
	Если Не(ЗначениеЗаполнено(док.ТермическоеСостояние)) Тогда
		Сообщить("Не указаны Термические условия перемещения товаров");
		Результат = 0;
	КонецЕсли;
	
	
	Для А=0 по Док.Товары.Количество()-1 Цикл
		ТекСтр = Док.Товары[А];
		
		// Не обязательное условие
		//Если ПустаяСтрока(док.Партия.Производитель_Площадка.GUID)=1 Тогда 
		//	Сообщить("Не указан док.Партия.Производитель_Площадка.GUID Выполните синхронизацию справочников");
		//	Результат = 0;
		//КонецЕсли;		
	
		Если ПустаяСтрока(ТекСтр.Партия.GUID)=1 Тогда 
			Сообщить("Не указан Партия.GUID Выполните загрузку Партий");
			Результат = 0;
		КонецЕсли;
		Если ПустаяСтрока(ТекСтр.Партия.ВсдДата)=1 Тогда 
			Сообщить("Не указан Партия.ВсдДата");
			Результат = 0;
		КонецЕсли;
		//Если ПустаяСтрока(док.Партия.ФормаУпаковки)=1 Тогда 
		//	Сообщить("Не указан Партия.ФормаУпаковки");
		//	Результат = 0;
		//КонецЕсли;
		//Если ПустаяСтрока(док.ФормаУпаковки)=1 Тогда 
		//	Сообщить("Не указан ФормаУпаковки");
		//	Результат = 0;
		//КонецЕсли;
		Если  ТекСтр.Количество=0 Тогда 
			Сообщить("не указано Количество "+док);
			Результат = 0;
		КонецЕсли;
		//Если док.КоличествоМест =0 Тогда 
		//	Сообщить("не указано Количество коробов"+док);
		//	Результат = 0;
		//КонецЕсли;
	
		Если ПустаяСтрока(ТекСтр.Партия.Продукция.Тип)=1 Тогда 
			Сообщить("Не указан Партия.Продукция.Тип");
			Результат = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	//Если ПустаяСтрока(док.applicationID)=0 Тогда 
	//	Сообщить("ВСД уже отправлен "+док);
	//	Результат = 0;
	//КонецЕсли;
	//Если ПустаяСтрока( СокрЛП(док.UUID) )=0 Тогда 
	//	Сообщить("ВСД уже отправлен "+док);
	//	Результат = 0;
	//КонецЕсли;
	//Если док.ФормаВСД=0 Тогда 
	//	Сообщить("Не указана форма ВСД "+док);
	//	Результат = 0;
	//КонецЕсли;

	
	Возврат Результат;
КонецФункции

Функция ВСД_транзакция_ЗапросXML(док)
	
	Запрос_Шапка = "
	|<prepareOutcomingConsignmentRequest 
	|xmlns:sch='http://www.w3.org/2001/XMLSchema' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document' 
	|xmlns:sh='http://api.vetrf.ru/schema/cdm/argus/shipment' 
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:app='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:co='http://api.vetrf.ru/schema/cdm/argus/common' 
	|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' 
	|xmlns:pr='http://api.vetrf.ru/schema/cdm/argus/production' 
	|xmlns:ik='http://api.vetrf.ru/schema/cdm/ikar' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns='http://api.vetrf.ru/schema/cdm/mercury/applications'>
	|        <localTransactionId>[GUID]</localTransactionId>
	|        <initiator>
	|          <co:login>"+СокрЛП( СписокКонстант.Получить("param_intiator_login") )+"</co:login>
	|        </initiator>
	|";
	
	delivery = "
	|        <delivery>
	|          <vd:deliveryDate>" + ДатаXML(док.ТтнДата, "T00:00:00") + "</vd:deliveryDate>
	|          <vd:consignor>
	|            <ent:businessEntity>
	|              <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
	|            </ent:businessEntity>
	|            <ent:enterprise>
	|              <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
	|            </ent:enterprise>
	|          </vd:consignor>
	|          <vd:consignee>
	|            <ent:businessEntity>
	|              <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
	|            </ent:businessEntity>
	|            <ent:enterprise>
	|              <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
	|            </ent:enterprise>
	|          </vd:consignee>
	|";
	
	consignment=""; vetCertificate ="";
	тз = Док.Товары.Выгрузить();
	//тз.ВыбратьСтроки()
	Для А=0 По тз.Количество()-1 Цикл
		СтрокаДокумента = тз[А];
		consignment = consignment+ "
		|          <vd:consignment id='id"+ А +"'>
		|            <vd:productType>"+ СтрокаДокумента.Партия.Продукция.Тип +"</vd:productType>
		|            <vd:product>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.Продукция.GUID) +"</bs:guid>
		|            </vd:product>
		|            <vd:subProduct>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.ВидПродукции.GUID) +"</bs:guid>
		|            </vd:subProduct>
		|            <vd:productItem>
		|";
		Если ПустоеЗначение(СтрокаДокумента.Партия.Продукция_Элемент.GUID)=0 Тогда
			consignment = consignment+ "
			|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.Продукция_Элемент.GUID) +"</bs:guid>
			|";
		КонецЕсли;
		consignment = consignment+ "
		|              <pr:name>"+ СокрЛП(СтрокаДокумента.Партия.Продукция_Элемент.Наименование) +"</pr:name>
		|            </vd:productItem>
		|            <vd:volume>"+ Формат(СтрокаДокумента.Количество, "ЧРД=.; ЧГ=0") +"</vd:volume>
		|            <vd:unit>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.ЕдиницаИзмерения.GUID) +"</bs:guid>
		|            </vd:unit>
		|";
		
		Если СтрокаДокумента.КоличествоМест>0 Тогда 
			consignment = consignment+ "
			|            <vd:packingList>
			|              <co:packingForm>
			|                <bs:uuid>"+ СокрЛП(СтрокаДокумента.ФормаУпаковки.GUID) +"</bs:uuid>
			|              </co:packingForm>
			|            </vd:packingList>
			|            <vd:packingAmount>"+ СтрокаДокумента.КоличествоМест +"</vd:packingAmount>
			|";
		КонецЕсли;
		consignment = consignment+ "
		|            <vd:dateOfProduction>
		|";
		Если (ПустоеЗначение(СтрокаДокумента.Партия.ДатаИзготовления1)=0) Тогда
			consignment = consignment+ "
		|              <vd:firstDate>
		|                <bs:year>"+ДатаГод(СтрокаДокумента.Партия.ДатаИзготовления1)+"</bs:year>
		|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаИзготовления1) +"</bs:month>
		|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаИзготовления1) +"</bs:day>
		|                <bs:hour>0</bs:hour>
		|              </vd:firstDate>
		|";
	КонецЕсли;
		Если ((ПустоеЗначение(СтрокаДокумента.Партия.ДатаИзготовления2)=0) и 
				(СтрокаДокумента.Партия.ДатаИзготовления2 > СтрокаДокумента.Партия.ДатаИзготовления1)) Тогда
			consignment=consignment+"		
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(СтрокаДокумента.Партия.ДатаИзготовления2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаИзготовления2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаИзготовления2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		consignment=consignment+"
		|              <vd:informalDate />
		|            </vd:dateOfProduction>
		|            <vd:expiryDate>
		|";
		
		Если (ПустоеЗначение(СтрокаДокумента.Партия.ДатаСрокГодности1)=0) Тогда
			consignment=consignment+"
			|              <vd:firstDate>
			|                <bs:year>"+ ДатаГод(СтрокаДокумента.Партия.ДатаСрокГодности1) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаСрокГодности1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаСрокГодности1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(СтрокаДокумента.Партия.ДатаСрокГодности2)=0) и 
				(СтрокаДокумента.Партия.ДатаСрокГодности2 > СтрокаДокумента.Партия.ДатаСрокГодности1)) Тогда
			consignment=consignment+"				
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(СтрокаДокумента.Партия.ДатаСрокГодности2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаСрокГодности2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаСрокГодности2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		consignment=consignment+"
		|              <vd:informalDate />
		|            </vd:expiryDate>
		|            <vd:perishable>false</vd:perishable>
		|            <vd:countryOfOrigin>
		|              <bs:uuid>"+ СокрЛП( СписокКонстант.Получить("Страна").UUID) +"</bs:uuid>
		|            </vd:countryOfOrigin>
		|            <vd:producerList />
		|            <vd:productMarkingList />
		|            <vd:lowGradeCargo>false</vd:lowGradeCargo>
		|            <vd:productName>"+ СокрЛП(СтрокаДокумента.Партия.НаименованиеПродукции) +"</vd:productName>
		|            <vd:productCode />
		|            <vd:sourceStockEntry>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.GUID) +"</bs:guid>
		|            </vd:sourceStockEntry>
		|          </vd:consignment>
		|";
			
		vetCertificate  = vetCertificate + "
		|            <vd:vetCertificate for='id"+ А +"'>
		|              <vd:issueSeries />
		|              <vd:issueNumber />
		|              <vd:issueDate>"+ ДатаXML(док.Дата) +"</vd:issueDate>
		|              <vd:form>LIC2</vd:form>
		|          <vd:consignor>
		|            <ent:businessEntity>
		|              <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
		|            </ent:businessEntity>
		|            <ent:enterprise>
		|              <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
		|            </ent:enterprise>
		|          </vd:consignor>
		|          <vd:consignee>
		|            <ent:businessEntity>
		|              <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
		|            </ent:businessEntity>
		|            <ent:enterprise>
		|              <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
		|            </ent:enterprise>
		|          </vd:consignee>
		|              <vd:batch>
		|            <vd:productType>"+ СтрокаДокумента.Партия.Продукция.Тип +"</vd:productType>
		|            <vd:product>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.Продукция.GUID) +"</bs:guid>
		|            </vd:product>
		|            <vd:subProduct>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.ВидПродукции.GUID) +"</bs:guid>
		|            </vd:subProduct>
		|            <vd:productItem>
		|";
		Если ПустоеЗначение(СтрокаДокумента.Партия.Продукция_Элемент.GUID)=0 Тогда
			vetCertificate=vetCertificate+"	
			|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.Продукция_Элемент.GUID) +"</bs:guid>
			|";
		КонецЕсли;
		vetCertificate=vetCertificate+"		
		|              <pr:name>"+ СокрЛП(СтрокаДокумента.Партия.Продукция_Элемент.Наименование) +"</pr:name>
		|            </vd:productItem>
		|            <vd:volume>"+ Формат(СтрокаДокумента.Количество, "ЧРД=.; ЧГ=0") +"</vd:volume>
		|            <vd:unit>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.ЕдиницаИзмерения.GUID) +"</bs:guid>
		|            </vd:unit>
		|";
		Если СтрокаДокумента.КоличествоМест>0 Тогда 
			vetCertificate=vetCertificate+"	
			|            <vd:packingList>
			|              <co:packingForm>
			|                <bs:uuid>"+ СокрЛП(СтрокаДокумента.ФормаУпаковки.GUID) +"</bs:uuid>
			|              </co:packingForm>
			|            </vd:packingList>
			|            <vd:packingAmount>"+ СтрокаДокумента.КоличествоМест +"</vd:packingAmount>
			|";
		КонецЕсли;
		vetCertificate=vetCertificate+"	
		|            <vd:dateOfProduction>
		|";
		
		Если (ПустоеЗначение(СтрокаДокумента.Партия.ДатаИзготовления1)=0) Тогда
			vetCertificate=vetCertificate+"				
			|              <vd:firstDate>
			|                <bs:year>"+ДатаГод(СтрокаДокумента.Партия.ДатаИзготовления1)+"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаИзготовления1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаИзготовления1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(СтрокаДокумента.Партия.ДатаИзготовления2)=0) и 
				(СтрокаДокумента.Партия.ДатаИзготовления2 > СтрокаДокумента.Партия.ДатаИзготовления1)) Тогда
			vetCertificate=vetCertificate+"		
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(СтрокаДокумента.Партия.ДатаИзготовления2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаИзготовления2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаИзготовления2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		vetCertificate=vetCertificate+"
		|              <vd:informalDate />
		|            </vd:dateOfProduction>
		|            <vd:expiryDate>
		|";
		Если (ПустоеЗначение(СтрокаДокумента.Партия.ДатаСрокГодности1)=0) Тогда
			vetCertificate=vetCertificate+"						
			|              <vd:firstDate>
			|                <bs:year>"+ ДатаГод(СтрокаДокумента.Партия.ДатаСрокГодности1) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаСрокГодности1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаСрокГодности1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(СтрокаДокумента.Партия.ДатаСрокГодности2)=0) и 
				(СтрокаДокумента.Партия.ДатаСрокГодности2 > СтрокаДокумента.Партия.ДатаСрокГодности1)) Тогда
			vetCertificate=vetCertificate+"				
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(СтрокаДокумента.Партия.ДатаСрокГодности2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаСрокГодности2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаСрокГодности2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		vetCertificate=vetCertificate+"
		|              <vd:informalDate />
		|            </vd:expiryDate>
		|            <vd:perishable>false</vd:perishable>
		|            <vd:countryOfOrigin>
		|              <bs:uuid>"+ СокрЛП( СписокКонстант.Получить("Страна").UUID) +"</bs:uuid>
		|            </vd:countryOfOrigin>
		|            <vd:productMarkingList />
		|            <vd:lowGradeCargo>false</vd:lowGradeCargo>
		//|                <vd:producerList>
		//|                  <ent:producer>
		//|                    <ent:enterprise>
		//|                      <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.Производитель_Площадка.GUID) +"</bs:guid>
		//|                    </ent:enterprise>
		//|                  </ent:producer>
		//|                </vd:producerList>
		|              </vd:batch>
		|              <vd:productName>"+ СокрЛП(СтрокаДокумента.НаименованиеПродукции) +"</vd:productName>
		|              <vd:productCode />
		|              <vd:purpose>
		|                <bs:guid>5b90da1b-e089-11e1-bcf3-b499babae7ea</bs:guid>
		|              </vd:purpose>
		|              <vd:broker>
		|                <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
		|              </vd:broker>
		|              <vd:transportInfo>
		|                <sh:transportType>1</sh:transportType>
		|                <sh:transportNumber>
		|                  <sh:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</sh:vehicleNumber>
		|                </sh:transportNumber>
		|              </vd:transportInfo>
		|              <vd:cargoReloadingPointList />
		|              <vd:cargoInspected>"+ Число(док.cargoInspected) +"</vd:cargoInspected>
		|              <vd:cargoExpertized>"+  Число(док.cargoExpertized) +"</vd:cargoExpertized>
		|              <vd:expertiseInfo>"+ СокрЛП(док.Экспертиза) +"</vd:expertiseInfo>
		|              <vd:confirmedBy>
		|                <co:login>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_login")) +"</co:login>
		|              </vd:confirmedBy>
		|              <vd:locationProsperity>"+ СокрЛП(док.Местность) +"</vd:locationProsperity>
		|              <vd:importPermit />
		|              <vd:transferPermit />
		|              <vd:specialMarks>"+ СокрЛП(док.ОсобыеОтметки) +"</vd:specialMarks>
		|              <vd:withdrawedBy />
		|              <vd:utilizedBy />
		|            </vd:vetCertificate>
		|";
	
	КонецЦикла;
	
	
	accompanyingForms_Шапка = "
	|          <vd:accompanyingForms>
	|            <vd:waybill>
	|              <sh:issueSeries />
	|              <sh:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</sh:issueNumber>
	|              <sh:issueDate>"+ ДатаXML(док.ТтнДата) +"</sh:issueDate>
	|              <sh:type>1</sh:type>
	|              <sh:consignor>
	|                <ent:businessEntity />
	|                <ent:enterprise />
	|              </sh:consignor>
	|              <sh:consignee>
	|                <ent:businessEntity />
	|                <ent:enterprise />
	|              </sh:consignee>
	|              <sh:broker>
	|                <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
	|              </sh:broker>
	|              <sh:transportInfo>
	|                <sh:transportType>1</sh:transportType>
	|                <sh:transportNumber>
	|                  <sh:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</sh:vehicleNumber>
	|                </sh:transportNumber>
	|              </sh:transportInfo>
	|              <sh:transportStorageType>"+ ТермическиеУсловияПеревозки.Получить( док.ТермическоеСостояние-1 ) +"</sh:transportStorageType>
	|              <sh:cargoReloadingPointList />
	|            </vd:waybill>
	|";
	
	
	ЗапросПодвал = "
	|          </vd:accompanyingForms>
	|        </delivery>
	|      </prepareOutcomingConsignmentRequest>
	|";

	Запрос = Запрос_Шапка+
		delivery+
		consignment+
		accompanyingForms_Шапка+
		vetCertificate+
		ЗапросПодвал;
	
	Возврат Запрос;
КонецФункции

//Старый вариант
Функция Отправить_ВСД_транзакция_1(док) Экспорт
	
	Если Проверка_ВСД_транзакция(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Сообщить("Отправляем запрос Send_VSD_OUT_2 ["+док+"]" );
	Результат = Компонента.Send_VSD_OUT_2( док );
	
	УдалитьXML( Компонента.LogFilename );
	
	СохранитьСтатусЗапроса(док);		
	
	Если Результат="ACCEPTED" Тогда 
		//ВСД отправлен успешно, осталось получить ответ				
		Пауза();			
				
		Результат = ПолучитьРезультат_ВСД_Исходящий( док );
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Пауза( );
				Результат = ПолучитьРезультат_ВСД_Исходящий( док );
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	

	Возврат 1;
	
КонецФункции

Функция Отправить_ВСД_транзакция(док) Экспорт
	
	Если Проверка_ВСД_транзакция(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Организация = док.ДокументОснование.Организация;
	Инициализация();
	
	Отправитель_Площадка = Док.Отправитель_Площадка;
	
	Сообщить("Отправляем запрос Send_VSD ["+док+"]" );
	ЗапросXML = ВСД_транзакция_ЗапросXML(док);
	
	appID = ОтправитьЗапросXML(ЗапросXML, док);

	Возврат appID;
	
КонецФункции

//************************** v2 ****************************
//ЖД поместить в ГМ

Функция  ОтправитьЗапросSoap( ЗапросXML, метод ) Экспорт
	
	Сообщить("Отправляем запрос");
	результат = Компонента.SendRequestSoap(метод, ЗапросXML);

	appID = Получить_ApplicationID(Компонента.LogFilename);
			
	
	Возврат appID;
	
КонецФункции

Функция Получить_ApplicationID(LogFilename) Экспорт
	// Не использовать - в новой версии dll Компонента.ApplicationID
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Попытка
		applicationId = xdto.Body.submitApplicationResponse.application.applicationId;
	Исключение
		applicationId = "";
	КонецПопытки;
//	st = item.selectSingleNode("status").text;

	Сообщить("Ответ: ["+applicationId+"]");// ["+st+"]");
	
	возврат applicationId;
КонецФункции

	

Функция ЗагрузитьXML_ВСД2(имяФайла, докОснование="")
	
	Если НайтиОшибки(имяФайла, докОснование)>0 Тогда 
		Возврат "";
	КонецЕсли;		
	
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(имяфайла);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	applicationId = xdto.application.applicationId;
	  
	//варианты ответов на разные операции
	Попытка	seList = xdto.application.result.prepareOutcomingConsignmentResponse.vetDocument;	Исключение	seList = ""; КонецПопытки;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		//Транзакция
		Попытка seList = xdto.application.result.prepareOutgoingConsignmentResponse.vetDocument; Исключение 	seList = ""; КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		//Гашение
		Попытка	seList = xdto.application.result.processIncomingConsignmentResponse.vetDocument; Исключение	seList = ""; КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		// Выпуск
		Попытка	seList = xdto.application.result.registerProductionOperationResponse.vetDocument; Исключение seList = ""; КонецПопытки;
	КонецЕсли;
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		// Аннулирование
		Попытка	seList = xdto.application.result.withdrawVetDocumentResponse.vetDocument; Исключение seList = ""; КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		// Входящие
		Попытка seList = xdto.application.result.getVetDocumentListResponse.vetDocumentList.vetDocument;Исключение	seList = "";	КонецПопытки;	
	КонецЕсли;
	
	//*** тут еще варианты
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		Сообщить("Не далось прочитать ВСД из "+имяФайла);
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		vetDocumentList = Новый Массив;
		vetDocumentList.Добавить(seList);
	Иначе
		vetDocumentList = seList;
	КонецЕсли;
	
	Для каждого vetDocument из vetDocumentList Цикл
		Попытка	forma 	 = vetDocument.vetDForm;	Исключение	forma = ""; КонецПопытки;//Это привязанный к партии ВСД	Продолжить
		
		uuid = vetDocument.uuid;
		докОбъект = НайтиВСДпоUUID( uuid, "ВСД2" );		
		докОбъект.ФормаВСД 	 = forma;
		докОбъект.UUID = uuid;
		
		докОбъект.applicationId = applicationId;
		Попытка докОбъект.Статус = vetDocument.vetDStatus; Исключение КонецПопытки;
		//Попытка докОбъект.Дата = СтрокаВДату(vetDocument.issueDate); Исключение КонецПопытки;
		докОбъект.Дата = СтрокаВДатаВремя( vetDocument.lastUpdateDate );
		Попытка	докОбъект.Организация = Организация; Исключение КонецПопытки;
		//тафтология ?
		Попытка	докОбъект.ТипВСД = vetDocument.vetDType; Исключение КонецПопытки;
		
//		Попытка	Завершен = vetDocument.finalized; Исключение	Завершен=""; КонецПопытки;
//		Попытка	Lastupd = vetDocument.lastUpdateDate; Исключение Lastupd=""; КонецПопытки; // дата время посл изменения

		Если НЕ(ЗначениеЗаполнено(докОбъект.ДокументОснование)) Тогда
			докОбъект.ДокументОснование = докОснование;
		КонецЕсли;
		
		// Бумажный ВСД
		Попытка докОбъект.всдсерия =vetDocument.issueSeries;  Исключение КонецПопытки;
		Попытка докОбъект.всдномер =vetDocument.issueNumber;  Исключение КонецПопытки; 
		Попытка докОбъект.ВидВСД = ?(ЗначениеЗаполнено(докОбъект.ВСДНомер),1,2); Исключение КонецПопытки;
//		ВидДокумента = ВыбратьВидДокументаВСД(type);
		
		ЭтоТранспортныйВСД=0;
		Попытка
			batch = vetDocument.certifiedBatch.batch;  //Продуктивный ВСД
		Исключение
			Попытка
				//Сертифицированная партия.
				//Сведения о партии продукции. 
				batch = vetDocument.certifiedConsignment.batch;  //ЖД Транспортный ВСД -другая структура ответа буду делать отдельно
				ЭтоТранспортныйВСД=1;
			Исключение
				batch="";
			КонецПопытки;
		КонецПопытки; 
		
		Если ЭтоТранспортныйВСД = 1 Тогда
			Попытка докОбъект.Отправитель_ХозСубъект = НайтиХСпоGUID(vetDocument.certifiedConsignment.consignor.businessEntity.guid); Исключение КонецПопытки;
			Попытка докОбъект.Отправитель_Площадка 	= НайтиПлощадку(vetDocument.certifiedConsignment.consignor.enterprise.guid); Исключение КонецПопытки;
			Попытка докОбъект.Получатель_ХозСубъект = НайтиХСпоGUID(vetDocument.certifiedConsignment.consignee.businessEntity.guid); Исключение КонецПопытки;
			Попытка докОбъект.Получатель_Площадка 	= НайтиПлощадку(vetDocument.certifiedConsignment.consignee.enterprise.guid); Исключение КонецПопытки;
			Попытка докОбъект.ВладелецХС = НайтиХСпоGUID(batch.owner.guid);	Исключение КонецПопытки;
			Попытка
				Если НЕ(ЗначениеЗаполнено(докОбъект.ВладелецХС)) Тогда
					докОбъект.ВладелецХС = докОбъект.Отправитель_ХозСубъект;	
				КонецЕсли;
			Исключение КонецПопытки;
	        Попытка докОбъект.Перевозчик_ХозСубъект 	= НайтиХСпоGUID(vetDocument.certifiedConsignment.broker.guid); Исключение КонецПопытки;
			
			Попытка
				transportInfo = vetDocument.certifiedConsignment.transportInfo;
				ТипТС = transportInfo.transportType;//("*[local-name()='transportType'] ").text;
				Если ТипТС = "1" Тогда
					докОбъект.номеравто = transportInfo.transportNumber.vehicleNumber;//("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='vehicleNumber']").text; 
					Попытка докОбъект.номерПолуприцепа = transportInfo.transportNumber.trailerNumber; Исключение КонецПопытки;
					Попытка докОбъект.номерКонтейнера = transportInfo.transportNumber.containerNumber; Исключение КонецПопытки;
				Иначеесли ТипТС = "2" Тогда
					докОбъект.номеравто = transportInfo.transportNumber.wagonNumber;
				Иначеесли ТипТС = "3" Тогда
					докОбъект.номеравто = transportInfo.transportNumber.flightNumber;
				Иначеесли (ТипТС = "4") или (ТипТС = "5") или (ТипТС = "6") Тогда
					докОбъект.номеравто = transportInfo.transportNumber.shipName;
	//			Иначеесли ТЗВСД.ТипТС = "7" Тогда
				
				КонецЕсли;
				Попытка докОбъект.ТипТС = ТипТС; Исключение КонецПопытки;
			исключение	КонецПопытки;
			Попытка докОбъект.термическоесостояние = Число(ТермическиеУсловияПеревозки2.НайтиПоЗначению(vetDocument.certifiedConsignment.transportStorageType).Представление); 	Исключение 	КонецПопытки;
		КонецЕсли; // транспортный ВСД
		
		Попытка докОбъект.Продукция 	= НайтиПродукцию(batch.product.guid); Исключение КонецПопытки;
		Попытка докОбъект.ВидПродукции 	= НайтиВидПродукции(batch.subProduct.guid); Исключение КонецПопытки;
		Попытка	докОбъект.НаименованиеПродукции = batch.productItem.name; Исключение КонецПопытки;
		Попытка productItemUuid = batch.productItem.uuid; Исключение productItemUuid = "" КонецПопытки;
		Попытка productItemGuid = batch.productItem.guid; Исключение productItemGuid = "" КонецПопытки;
		
		//ЖД Переписать ф-цию  Найти_Продукция_Элемент как в 7-ке
		докОбъект.Продукция_Элемент = Найти_Продукция_Элемент(докОбъект.НаименованиеПродукции, productItemGuid,productItemUuid, докОбъект.Продукция, докОбъект.ВидПродукции);
		
		//Trade Identification Number (GTIN) - идентификационный номер продукции производителя.
		Попытка докОбъект.GTIN = batch.productItem.globalID;	Исключение 	КонецПопытки;
        //Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
		Попытка	докОбъект.Артикул = batch.productItem.code;	Исключение	КонецПопытки;
		
		//<dt:packaging> Фасовка.  
		// Параметры фасовки привязаны к ВСД_ПродукцияЭлемент
		Попытка Фасовка_из_XML(batch.productItem.packaging,докОбъект.ФасовкаНаименование,докОбъект.ФасовкаФормаУпаковки,докОбъект.ФасовкаКоличество,докОбъект.ФасовкаОбъем,докОбъект.ФасовкаЕдиницаИзмерения); Исключение КонецПопытки;
		
		// Объем продукции
		Попытка	докОбъект.Количество 		= Число(batch.volume); Исключение КонецПопытки;
		Попытка	докОбъект.ЕдиницаИзмерения	= НайтиЕдИзмерения( batch.unit.guid ); Исключение КонецПопытки;
		
		ДатаИзготовления1="";	ДатаИзготовления=""; ДатаИзготовления2="";		
		Дата_из_XML(batch.dateOfProduction, ДатаИзготовления1, ДатаИзготовления2, ДатаИзготовления );
		докОбъект.ДатаИзготовления1=ДатаИзготовления1;
		докОбъект.ДатаИзготовления2=ДатаИзготовления2; 
		Попытка докОбъект.ДатаИзготовления = ДатаИзготовления;  Исключение КонецПопытки;
		
		ДатаСрокГодности1=""; ДатаСрокГодности2=""; ДатаСрокГодности="";
		Дата_из_XML(batch.expiryDate, ДатаСрокГодности1, ДатаСрокГодности2, ДатаСрокГодности );
		докОбъект.ДатаСрокГодности1 = ДатаСрокГодности1;
		Попытка докОбъект.ДатаСрокГодности = ДатаСрокГодности; Исключение КонецПопытки;
		докОбъект.ДатаСрокГодности2 = ДатаСрокГодности2;
		Попытка докОбъект.НомерПартии =  batch.batchID; Исключение	КонецПопытки; // нет реквизита
        //<vd:batchID> 	bs:String255 	[1..*] 	Уникальный идентификатор производственной партии продукции. 	<vd:batchID>ПП64219</vd:batchID> 
		Попытка докОбъект.Скоропортящийся = ?(batch.perishable="true",1,0); Исключение	КонецПопытки;
		Попытка докОбъект.Некачественный =  ?(batch.lowGradeCargo="true",1,0); Исключение	КонецПопытки;
		
		//Информация о предприятие-производителе продукции.
		//возможен список предприятий
		Попытка ПроизводителиСписок = СписокПроизводителей_из_XML(batch.origin.producer);Исключение КонецПопытки;
		//Запишем одного из производителей в Реквизит
		Попытка
			СЗПроизводители = ЗначениеИзСтрокиВнутр(ПроизводителиСписок);			
			докОбъект.Производитель_Площадка = СЗПроизводители[0].Значение;	
		Исключение КонецПопытки;
		Попытка докОбъект.ПроизводителиСписок = ПроизводителиСписок;Исключение КонецПопытки; // Если есть Реквизит или в ТЧ 
		Попытка докОбъект.Страна_ГУИД = batch.origin.country.guid; Исключение КонецПопытки;

		Попытка	докОбъект.УровниУпаковки = УровниУпаковки_из_XML(batch.packageList.package);	Исключение 	КонецПопытки;
		
		Попытка	докОбъект.cargoInspected = ?(vetDocument.authentication.cargoInspected="true",1,0);	Исключение	КонецПопытки;
        Попытка	cargoExpertized = vetDocument.authentication.cargoExpertized;Исключение	cargoExpertized =""; КонецПопытки;
		докОбъект.РезультатыИсследований = Перечисления.ВСД_РезультатИсследования[cargoExpertized]; 
		Попытка	докОбъект.особыеотметки = vetDocument.authentication.specialMarks; 	Исключение	КонецПопытки;
		Попытка	докОбъект.Местность = vetDocument.authentication.locationProsperity;	Исключение  КонецПопытки; //В гашении ВСДМестность
		
        // след блок Сделать ЖД Если Нужен
		//·······<vd:laboratoryResearch> 	vd:LaboratoryResearchEvent 	[0..*] 	Сведения о проведенных лабораторных исследованиях. 
		Попытка СвязанныеДокументы = СвязанныеДокументы_из_XML(vetDocument.referencedDocument); Исключение  КонецПопытки;
		// Получим ТТН
		Попытка
			ТЗДоков = ЗначениеИзСтрокиВнутр(СвязанныеДокументы);
			СтрокаТЗ = ТЗДоков.Найти(1, "ТипДокумента");
			Если СтрокаТЗ  = Неопределено Тогда
				СтрокаТЗ = ТЗДоков.Найти(2, "ТипДокумента");
				Если СтрокаТЗ  = Неопределено Тогда
					СтрокаТЗ = ТЗДоков.Найти(3, "ТипДокумента");
					Если СтрокаТЗ  = Неопределено Тогда
						СтрокаТЗ = ТЗДоков.Найти(4, "ТипДокумента");
						Если СтрокаТЗ  = Неопределено Тогда
							СтрокаТЗ = ТЗДоков.Найти(5, "ТипДокумента");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ(СтрокаТЗ = Неопределено) Тогда
				докОбъект.ттнСерия = СтрокаТЗ.СерияДокумента;
				докОбъект.ттнномер = СтрокаТЗ.НомерДокумента;
				докОбъект.ттндата = СтрокаВДату(СтрокаТЗ.ДатаДокумента);
				Попытка докОбъект.ттнТип = СтрокаТЗ.ТипДокумента; Исключение КонецПопытки;
			КонецЕсли;
		Исключение КонецПопытки;
		Попытка докОбъект.СвязанныеДокументы = СвязанныеДокументы; Исключение КонецПопытки; //Если есть такой реквизит или в ТЧ
		
		докОбъект.Записать(РежимЗаписиДокумента.Проведение);

		Сообщить("Записан "+докОбъект+" "+докОбъект.Номер+" от "+докОбъект.Дата+" ["+uuid+"]");
	КонецЦикла;

	Если ПустоеЗначение(докОснование)=0 Тогда
		докОснованиеОбъект = докОснование.ПолучитьОбъект();
		докОснованиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;	
		
	
	Возврат "";	
КонецФункции

Процедура ЗагрузитьXML_Партии2(имяФайла, докОснование="") 
	
	Если НайтиОшибки(имяФайла, докОснование)>0 Тогда 
		Возврат;
	КонецЕсли;	
	
    СообщитьИнфо("Загрузка XML-файла: "+ИмяФайла);    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	//Вариации загрузки партий при разных запросах 
	Попытка	seList = xdto.application.result.prepareOutcomingConsignmentResponse.StockEntry; Исключение	seList = ""; КонецПопытки;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		//Транзакция
		Попытка	seList = xdto.application.result.prepareOutgoingConsignmentResponse.StockEntry;	Исключение seList = ""; КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		//Гашение
		Попытка	seList = xdto.application.result.processIncomingConsignmentResponse.StockEntry;	Исключение	seList = ""; КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		// Выпуск 
		Попытка seList = xdto.application.result.registerProductionOperationResponse.stockEntryList.StockEntry; Исключение	seList = ""; КонецПопытки;
	КонецЕсли;
		
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		// Анулирование
		Попытка	seList = xdto.application.result.withdrawVetDocumentResponse.StockEntry; Исключение seList = ""; КонецПопытки;
	КонецЕсли;
		
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		Сообщить("Не далось прочитать Партии из "+имяФайла);
		Возврат;
	КонецЕсли;
	
	
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		stockEntryList = Новый Массив;
		stockEntryList.Добавить(seList);
	Иначе
		stockEntryList = seList;
	КонецЕсли;
			
	//Сообщить("Получено "+seList.length+" записей","i");
	Для каждого stockEntry из stockEntryList Цикл		
					
		Партия = ЗаписатьПартию2(stockEntry);
		
		Если докОснование<>"" Тогда 
			Партия.ДокОснование = докОснование;
			Партия.Записать();
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры


Функция ПолучитьРезультат_ВСД2(applicationID, докСсылка, Пауза = Истина ) Экспорт
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	Если Пауза Тогда		
		Пауза( );
	КонецЕсли;	
	
	Сообщить("Отправляем запрос ["+докСсылка+"]" );
	Результат = Компонента.SendRequestResult( applicationID );

	Если НайтиОшибки(Компонента.LogFilename, докСсылка)>0 Тогда 
		Возврат Результат;
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(докСсылка) Тогда 
		СохранитьСтатусЗапроса(докСсылка);
		ЗагрузитьXML_ВСД2( Компонента.LogFilename, докСсылка);
	КонецЕсли;

	ЗагрузитьXML_Партии2( Компонента.LogFilename );
		
	УдалитьXML( Компонента.LogFilename );
	
	Возврат Результат;
КонецФункции


//**************************ВСД_Производство v2 ****************************

Функция ПроверитьВСД2_Производство(ВСДСсылка)
	Если НЕ(ЗначениеЗаполнено(ВСДСсылка)) Тогда
		Возврат 0;
	КонецЕсли;
	Если (СокрЛП(ВСДСсылка.Статус)="COMPLETED") Тогда
		Сообщить(""+ВСДСсылка+" статус "+ВСДСсылка.Статус+" НЕ отправляем");
		Возврат 0;
	КонецЕсли;
	//Проверить Отправителя ХС
	Если НЕ(ВСДСсылка.Производитель_ХозСубъект = Отправитель_Хозсубъект) Тогда
		Сообщить("Другой ХС Производитель - Выберите в Параметрах организацию для  "+ВСДСсылка.Производитель_ХозСубъект);
		Возврат 0;
	КонецЕсли;
	Если НЕ(ВСДСсылка.ЗавершитьОперацию) и НЕ(ЗначениеЗаполнено(ВСДСсылка.operationId)) Тогда
		Сообщить("При НЗП необходимо указать в документе № операции. Документ  "+ВСДСсылка);
		Возврат 0;
	КонецЕсли;
	Если НЕ(ЗначениеЗаполнено(ВСДСсылка.РезультатыИсследований)) Тогда
		Сообщить("Не указаны Результаты Исследований. Документ  "+ВСДСсылка);
		Возврат 0;
	КонецЕсли;
	
	ЕстьОшибки = false;
	Для каждого стрПродукция из ВСДСсылка.Продукция Цикл
		Если НЕ(ЗначениеЗаполнено(стрПродукция.Продукция_Элемент)) Тогда
			Сообщить("Не указан Продукция_Элемент в документе "+ВСДСсылка+" не отправлен!");
			ЕстьОшибки = true;
			Прервать;
		КонецЕсли;
		Если НЕ(ЗначениеЗаполнено(стрПродукция.Продукция_Элемент.ЕдиницаИзмерения)) Тогда
			Сообщить("Не указана Единица измерения у Продукция_Элемент "+стрПродукция.Продукция_Элемент+" в документе "+ВСДСсылка+" не отправлен!");
			ЕстьОшибки = true;
			Прервать;
		КонецЕсли;
		Если НЕ(ЗначениеЗаполнено(стрПродукция.ЕдиницаИзмерения)) Тогда
			Сообщить("Не указана Единица измерения у Продукции "+стрПродукция.Продукция_Элемент+" в документе "+ВСДСсылка+" не отправлен!");
			ЕстьОшибки = true;
			Прервать;
		КонецЕсли;
		// Возможно несколько производителей
		Если НЕ(стрПродукция.Продукция_Элемент.Площадка = ВСДССылка.Производитель_Площадка) Тогда
			Сообщить(""+ВСДССылка.Производитель_Площадка+" Не является производителем "+стрПродукция.Продукция_Элемент+" не отправлен!");
			ЕстьОшибки = true;
			Прервать;
		КонецЕсли;
		Если НЕ(ЗначениеЗаполнено(стрПродукция.Продукция_Элемент.GUID)) и НЕ(ЗначениеЗаполнено(стрПродукция.Продукция_Элемент.UUID)) Тогда
			ЕстьОшибки = true;
			Сообщить("Не указан GUID или UUID Продукция_Элемент для  "+стрПродукция.Продукция_Элемент+" в документе "+ВСДСсылка+" не отправлен!");
			Прервать;
		КонецЕсли;
		Если НЕ(ЗначениеЗаполнено(стрПродукция.ДатаИзготовления1)) или НЕ(ЗначениеЗаполнено(стрПродукция.ДатаСрокГодности1)) Тогда
			ЕстьОшибки = true;
			Сообщить("Не указаны Дата Изготовления и/или Срок годности  "+стрПродукция.Продукция_Элемент+" в документе "+ВСДСсылка+" не отправлен!");
			Прервать;
		КонецЕсли;
		
//		Если (стрПродукция.Приход = false) и (НЕ(ЗначениеЗаполнено(стрПродукция.Партия))) Тогда
//			ЕстьОшибки = true;
//			Сообщить("Списание в производство без указания партии списания "+ВСДСсылка+" не отправлен!");
//			Прервать;		КонецЕсли;
	КонецЦикла;
	Если ЕстьОшибки Тогда
		Возврат 0;
	Иначе
		Возврат 1;
	КонецЕсли;
КонецФункции

Функция ВСД2_производство_ЗапросXML(док)    
	//ЖД нужны ли УровнямУпаковки и Маркировкам
	
	Запрос ="<SOAP-ENV:Envelope 
		|      xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
		|      xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|      xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
		|      xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
		|      xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
		|      xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
		|      xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
		|  <SOAP-ENV:Header/>
		|  <SOAP-ENV:Body>
		|    <apldef:submitApplicationRequest>
		|      <apldef:apiKey>"+ СокрЛП( СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
		|      <apl:application>
		|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
		|        <apl:issuerId>"+ СокрЛП( СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
		|        <apl:issueDate>" + ДатаВремяXML(док.Дата) + "</apl:issueDate>
		|        <apl:data>
		|          <merc:registerProductionOperationRequest>
		|            <merc:localTransactionId>" + СокрЛП(док.Номер) + "</merc:localTransactionId>
		|            <merc:initiator>
		|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
		|            </merc:initiator>
		|            <merc:enterprise>
		|              <bs:guid>"+ СокрЛП(док.Производитель_Площадка.GUID) +"</bs:guid>
		|            </merc:enterprise>
		|            <merc:productionOperation> ";
	
// НЗП
		Если ЗначениеЗаполнено(Док.operationId) Тогда 
			Запрос=Запрос+"
			|        <vd:operationId>"+ СокрЛП(Док.operationId) +"</vd:operationId>
			|";
		КонецЕсли;
		тз = Док.ПартииСписания.Выгрузить();
		Для А=0 По тз.Количество()-1 Цикл
			СтрокаДокумента = тз[А];
			// 1. rawBatch = списание
			// Уровни упаковки можно использовать, пока без упаковки
			Запрос=Запрос+"
			| <vd:rawBatch>
			|    <vd:sourceStockEntry>
			|       <bs:guid>" + СокрЛП(СтрокаДокумента.Партия.guid) + "</bs:guid>
			|    </vd:sourceStockEntry>
			|    <vd:volume>"+ Формат(СтрокаДокумента.Количество, "ЧРД=.; ЧГ=0") +"</vd:volume>
			|    <vd:unit>
			|       <bs:guid>"+ СокрЛП(СтрокаДокумента.ЕдиницаИзмерения.Guid) +"</bs:guid>
			|    </vd:unit>
			| </vd:rawBatch>
			|";
		КонецЦикла;		
		тз = Док.Продукция.Выгрузить();
		
	Для А=0 По тз.Количество()-1 Цикл
		СтрокаДокумента = тз[А];


		
	Запрос=Запрос+"		
		|              <vd:productiveBatch>
		|                <vd:productType>"+ СтрокаДокумента.Продукция.Тип +"</vd:productType>
		|                <vd:product>
		|                  <bs:guid>"+ СокрЛП(СтрокаДокумента.Продукция.GUID) +"</bs:guid>
		|                </vd:product>
		|                <vd:subProduct>
		|                  <bs:guid>"+ СокрЛП(СтрокаДокумента.ВидПродукции.GUID) +"</bs:guid>
		|                </vd:subProduct>";
	
	 	Запрос = Запрос + ProductItem_в_XML(СтрокаДокумента);   //ТЕСТ вместо ниже

//		|                <vd:productItem>";
//		Если ЗначениеЗаполнено(СтрокаДокумента.Продукция_Элемент.GUID) Тогда
		// Обязательно должно быть заполнено хотя бы одно из полей: либо UUID, либо GUID. При указании обоих полей приоритет у UUID.
		//ТЕСТ - включить в проверку документа наличие ГУИД УУИД
//		Запрос=Запрос+"
//		|                  <bs:guid>"+ СокрЛП(СтрокаДокумента.Продукция_Элемент.GUID) +"</bs:guid>";
//		Иначе
//		Запрос=Запрос+"
//		|                  <bs:uuid>"+ СокрЛП(СтрокаДокумента.Продукция_Элемент.UUID) +"</bs:uuid>";
//		КонецЕсли;
		
		Запрос=Запрос+"	
//		|                </vd:productItem>
		|                <vd:volume>"+ Формат(СтрокаДокумента.Количество, "ЧРД=.; ЧГ=0") +"</vd:volume>
		|                <vd:unit>
		|                  <bs:uuid>"+ СокрЛП(СтрокаДокумента.ЕдиницаИзмерения.UUID) +"</bs:uuid>
		|                </vd:unit>";
//		|                <vd:dateOfProduction> ";
		Запрос = Запрос + Изготовление_СрокГодности_в_XML(СтрокаДокумента); //Тест вместо ниже
//		Если ЗначениеЗаполнено(СтрокаДокумента.ДатаИзготовления1) Тогда
//			Запрос = Запрос+ "
//		|              <vd:firstDate>
//		|                <dt:year>"+ДатаГод(СтрокаДокумента.ДатаИзготовления1)+"</dt:year>
//		|                <dt:month>"+ ДатаМесяц(СтрокаДокумента.ДатаИзготовления1) +"</dt:month>
//		|                <dt:day>"+ ДатаЧисло(СтрокаДокумента.ДатаИзготовления1) +"</dt:day>
//		|                <dt:hour>0</dt:hour>
//		|              </vd:firstDate> ";
//		КонецЕсли;
//		Если ((ЗначениеЗаполнено(СтрокаДокумента.ДатаИзготовления2)) и 
//				(СтрокаДокумента.ДатаИзготовления2 > СтрокаДокумента.ДатаИзготовления1)) Тогда
//			Запрос=Запрос+"		
//			|              <vd:secondDate>
//			|                <dt:year>"+ ДатаГод(СтрокаДокумента.ДатаИзготовления2) +"</dt:year>
//			|                <dt:month>"+ ДатаМесяц(СтрокаДокумента.ДатаИзготовления2) +"</dt:month>
//			|                <dt:day>"+ ДатаЧисло(СтрокаДокумента.ДатаИзготовления2) +"</dt:day>
//			|                <dt:hour>0</dt:hour>
//			|              </vd:secondDate> ";
//		КонецЕсли;	
//		Запрос=Запрос+"
//		|            </vd:dateOfProduction>
//		|            <vd:expiryDate> ";
		// !!! Не указывается для типа продукции "Живые животные".
		//Может быть указана датой или диапазоном дат. В случае точной даты выработки указывается только первая компонента - firstDate.
		//Для скоропортящейся продукции обязательны к указанию год/месяц/день и могут быть указаны час/минута.
		//Для не скоропортящейся продукции обязательны к указанию год/месяц и может быть указан день.
		//Для не скоропортящейся продукции дата выработки и дата окончания срока годности должны быть заданы в одном формате 
		//	(например, если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).
//		Если (ЗначениеЗаполнено(СтрокаДокумента.ДатаСрокГодности1)) Тогда
//			Запрос=Запрос+"
//			|              <vd:firstDate>
//			|                <dt:year>"+ ДатаГод(СтрокаДокумента.ДатаСрокГодности1) +"</dt:year>
//			|                <dt:month>"+ ДатаМесяц(СтрокаДокумента.ДатаСрокГодности1) +"</dt:month>
//			|                <dt:day>"+ ДатаЧисло(СтрокаДокумента.ДатаСрокГодности1) +"</dt:day>
//			|                <dt:hour>0</dt:hour>
//			|              </vd:firstDate>";
//		КонецЕсли;
//		Если ((ЗначениеЗаполнено(СтрокаДокумента.ДатаСрокГодности2)) и 
//				(СтрокаДокумента.ДатаСрокГодности2 > СтрокаДокумента.ДатаСрокГодности1)) Тогда
//			Запрос=Запрос+"				
//			|              <vd:secondDate>
//			|                <dt:year>"+ ДатаГод(СтрокаДокумента.ДатаСрокГодности2) +"</dt:year>
	//		|                <dt:month>"+ ДатаМесяц(СтрокаДокумента.ДатаСрокГодности2) +"</dt:month>
//			|                <dt:day>"+ ДатаЧисло(СтрокаДокумента.ДатаСрокГодности2) +"</dt:day>
//			|                <dt:hour>0</dt:hour>
//			|              </vd:secondDate>";
//		КонецЕсли;
		Запрос=Запрос+"
//		|                </vd:expiryDate>
		//Уникальный идентификатор производственной партии продукции.
		|                <vd:batchID>"+ СокрЛП(Док.operationId) +"</vd:batchID>
		|                <vd:perishable>"+ Нашебулево(СтрокаДокумента.Скоропортящийся)+"</vd:perishable>
		|                <vd:lowGradeCargo>"+ Нашебулево(СтрокаДокумента.Некачественный)+"</vd:lowGradeCargo>
		|";
		
//   Уровни <dt:level>
// Здесь отдельные таблицы, связь по № строки  -  - нужны ли они при Производстве
		тзУпаковка = Док.УровниУпаковки.Выгрузить();
		тзМаркировка = Док.Маркировка.Выгрузить();
		
		Запрос=Запрос + УровниУпаковки_в_XML(СтрокаДокумента.НомерСтроки,тзУпаковка,тзМаркировка);

		Запрос=Запрос+"
		|              </vd:productiveBatch>"; 
	
	
	КонецЦикла;
    // завершение операции
		Запрос=Запрос+"
		|          <vd:finalizeOperation>"+Нашебулево(док.ЗавершитьОперацию)+"</vd:finalizeOperation>";


	Запрос=Запрос+"
	|            </merc:productionOperation>
	|            <merc:vetDocument>
	|              <vd:authentication>
	|              <vd:cargoInspected>"+ Нашебулево(док.cargoInspected) +"</vd:cargoInspected>";
	//				cargoExpertized = Проводилась ли ветсанэкспертиза.
	//				Возможные значения: VSEFULL, VSERAW, UNFULFILLED
	Запрос=Запрос+"
	|                <vd:cargoExpertized>"+ПолучитьИдентификаторПеречисления(док.РезультатыИсследований)+"</vd:cargoExpertized>";

	Запрос=Запрос+"
	|              </vd:authentication>
	|            </merc:vetDocument>
	|          </merc:registerProductionOperationRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";
			
	Возврат Запрос;
КонецФункции

Функция Отправить_ВСД2_Производство(док) Экспорт
	
	Если НЕ(ПроверитьВСД2_Производство(док)) Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Отправитель_Площадка = Док.Производитель_Площадка;
	
	ЗапросXML = ВСД2_производство_ЗапросXML(док);
	
	метод = Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    //метод.Service = "platform/services/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
		
	//appID = Получить_ApplicationID(Компонента.LogFilename);
	
	УдалитьXML( Компонента.LogFilename);

	Если ЗначениеЗаполнено(appID) Тогда
		Результат = ПолучитьРезультат_ВСД2(appID, док );
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда
				Результат = ПолучитьРезультат_ВСД2(appID, док );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;
	
	
КонецФункции

Функция ОтправитьВсе_ВСД2_Производство(СписокВСД="",НачДата, КонДата) Экспорт
	//стандартное поведение функции		
	Состояние("Меркурий: отправка ВСД Производство");
	Сообщить("Начало отправки документов");
	
	Если НЕ(ЗначениеЗаполнено(СписокВСД)) тогда 
		//Выберем документы производства  - запросом
		СписокВСД = Новый СписокЗначений;
 		Запрос = Новый Запрос;
    	Запрос.Текст = 
        "ВЫБРАТЬ
        |	ВСД_Производство.Ссылка
        |ИЗ
        |	Документ.ВСД_Производство КАК ВСД_Производство
        |ГДЕ
        |	ВСД_Производство.Производитель_ХозСубъект = &ВыбХС
        |	И ВСД_Производство.ПометкаУдаления = ЛОЖЬ
        |	И ВСД_Производство.Дата МЕЖДУ &ДатаН И &ДатаК
        |	И ВСД_Производство.Проведен = ЛОЖЬ";
 
	    Запрос.УстановитьПараметр("ДатаН", НачалоДня(НачДата));
		Запрос.УстановитьПараметр("ДатаК", КонецДня(КонДата));
    	Запрос.УстановитьПараметр("ВыбХС", Отправитель_Хозсубъект);
	    //МассивВСД = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		СписокВСД.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		Сообщить("отправляются ВСД производство за период "+ПредставлениеПериода(НачДата,КонецДня(КонДата),"ФП=ИСТИНА")+ "в количестве "+СписокВСД.Количество());//ПериодСтр(НачДата, КонДата));
	Иначе
		Сообщить("отправляются ВСД производство "+СписокВСД.Количество()+" документов");
	КонецЕсли;
		
	Для Каждого стрСпискаВСД из СписокВСД Цикл
		ВСДСсылка = стрСпискаВСД.Значение ;
	
		Если ВСДСсылка.Проведен Тогда 
			продолжить;
		КонецЕсли;
		Если ВСДСсылка.ПометкаУдаления Тогда 
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВСДСсылка.applicationID) Тогда
			Ответ = Вопрос("Документ ["+ВСДСсылка+"] статус=["+СокрЛП(ВСДСсылка.Статус)+"] уже был отправлен, отправить ПОВТОРНО?",РежимДиалогаВопрос.ДаНет,0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
    			Продолжить;
			КонецЕсли;
		КонецЕсли;		
	
		Отправить_ВСД2_производство( ВСДСсылка );

	КонецЦикла;
	
	Сообщить("Отправка документов завершена");
КонецФункции

Процедура Создать_ВСД2_Производство() Экспорт
	//ЖД не решены вопросы по УровнямУпаковки и маркировкам, методом хранения РезультатыИсследований в Документе - ( временно строкой )
	Для каждого стрПартий из Партии Цикл
		Если ЗначениеЗаполнено(стрПартий.ВСД_Производство) Тогда
			Продолжить;	
		КонецЕсли;
		Если ЗначениеЗаполнено(стрПартий.Партия) Тогда
			Сообщить("В строке партий № "+стрПартий.НомерСтроки+" указана партия. Пропускаем...");
			Продолжить;
		КонецЕсли;
		Если СтрПартий.КоличествоСписания <= СтрПартий.Количество Тогда
			Продолжить;	
		КонецЕсли;
		
		Если НЕ(ЗначениеЗаполнено(стрПартий.ВСД_Продукция_Элемент.ЕдиницаИзмерения)) Тогда
			Сообщить("В строке партий № "+стрПартий.НомерСтроки+" у "+стрПартий.ВСД_Продукция_Элемент+" не указана Единица измерения. Пропускаем...");
			Продолжить;
		КонецЕсли;
		
		Если НЕ(ЗначениеЗаполнено(стрПартий.ВСД_Продукция_Элемент.СрокГодности)) Тогда
			Сообщить("В строке партий № "+стрПартий.НомерСтроки+" у "+стрПартий.ВСД_Продукция_Элемент+" не указан Срок годности. Пропускаем...");
			Продолжить;
		КонецЕсли;
		// Возможно несколько производителей-площадок  / продумать
		Если НЕ(стрПартий.ВСД_Продукция_Элемент.Площадка = Отправитель_Площадка)  Тогда
			Сообщить("В строке партий № "+стрПартий.НомерСтроки+" у "+стрПартий.ВСД_Продукция_Элемент+" Производителем является "+стрПартий.ВСД_Продукция_Элемент.Площадка+". Пропускаем...");
			Продолжить;
		КонецЕсли;
		
		
		Состояние("Создание ВСД_Производство ");
		
		ДокВСД = Документы.ВСД_Производство.СоздатьДокумент(); 
		ДокВСД.Дата = ДатаНачалаОтбора;			
		
		ДокВСД.Производитель_ХозСубъект = Отправитель_ХозСубъект;
		ДокВСД.Производитель_площадка = Отправитель_Площадка;
		
		Попытка				
			//ДокВСД.Автор = глПользователь;
		Исключение
		КонецПопытки;
		Попытка				
			//ДокВСД.Филиал = глПользователь.Филиал;
		Исключение
		КонецПопытки;
			
		//ДокВСД.Экспертиза 		= ВСД_Экспертиза;
		//ДокВСД.Местность 		= ВСД_Местность;
		//ДокВСД.ОсобыеОтметки 	= ВСД_ОсобыеОтметки;
			
		ДокВСД.РезультатыИсследований = Перечисления.ВСД_РезультатИсследования.VSEFULL;
		ДокВСД.cargoInspected	= 1;
						
		СтрПродукция = ДокВСД.Продукция.Добавить();
		СтрПродукция.Продукция_Элемент 	= стрПартий.ВСД_Продукция_Элемент;
		СтрПродукция.Количество 			= стрПартий.КоличествоСписания - стрПартий.Количество; //ЖД вероятно не нужно - Количество 
		//Попытка СтрПродукция.КоличествоМест 		= стрПартий.КоличествоМестСписания;Исключение КонецПопытки;					
		СтрПродукция.ЕдиницаИзмерения 	= СтрПродукция.Продукция_Элемент.ЕдиницаИзмерения;
		//СтрПродукция.ФормаУпаковки 		= СтрПродукция.Продукция_Элемент.ФормаУпаковки;
		СтрПродукция.Продукция 			= СтрПродукция.Продукция_Элемент.Продукция;
		СтрПродукция.ВидПродукции 		= СтрПродукция.Продукция_Элемент.ВидПродукции;
		//СтрПродукция.Приход				= true;
		СтрПродукция.НаименованиеПродукции = СтрПродукция.Продукция_Элемент.Наименование;
		СтрПродукция.ДатаИзготовления1 = ДатаНачалаОтбора;
		Если ДатаОкончанияОтбора>ДатаНачалаОтбора Тогда
			СтрПродукция.ДатаИзготовления2 = ДатаОкончанияОтбора;
			СтрПродукция.ДатаСрокГодности2 = СтрПродукция.ДатаИзготовления2+60*60*24*СтрПродукция.Продукция_Элемент.СрокГодности;
		КонецЕсли;
		СтрПродукция.ДатаСрокГодности1 = СтрПродукция.ДатаИзготовления1+60*60*24*СтрПродукция.Продукция_Элемент.СрокГодности;
		
		
		ДокВСД.ЗавершитьОперацию = true;
			
		
		ДокВСД.Записать();
		ДокументСсылка = ДокВСД.Ссылка;
		стрПартий.ВСД_Производство = ДокументСсылка;
		
		Сообщить(" создан документ "+стрПартий.ВСД_Производство);		
	КонецЦикла;
	
КонецПроцедуры


//*************************ВСД_Производство Окончание*********************
//**************************ВСД Партии v2 ****************************

Функция ПолучитьПартии2_ЗапросXML(ГУИД_Площадки, Смещение,НеНулевые=0)

	Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:getStockEntryListRequest>
	|            <merc:localTransactionId>a1</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|            <bs:listOptions>
	|              <bs:count>1000</bs:count>
	|              <bs:offset>"+СтрЗаменить( Смещение , Символы.НПП ,"")+"</bs:offset>
	|            </bs:listOptions>
	|            <dt:enterpriseGuid>"+ ГУИД_Площадки +"</dt:enterpriseGuid>";
	Если НеНулевые = 1 Тогда
		Запрос = Запрос +"
	|             <merc:searchPattern>
    |               <vd:blankFilter>NOT_BLANK</vd:blankFilter>
    |             </merc:searchPattern>";
	КонецЕсли;
	Запрос = Запрос +"
	|          </merc:getStockEntryListRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";
	Возврат Запрос;
КонецФункции

Функция ЗаписатьПартию2(stockEntry)
//ЖД Доработать ВСД_Партии под версию 2:
// Фасовка, уровниупаковки и маркировки, список производителей
	active = stockEntry.active;		
	guid = stockEntry.guid;	
	
	Партия = НайтиПартиюПоGUID(guid);
	
	Если active="false" Тогда 
		СообщитьИнфо("Изменения в партию "+Партия+" guid ["+guid+"] не внесены. Признак партии = не активна");
		Партия.УстановитьПометкуУдаления(истина);
		Возврат Партия;
	КонецЕсли;
	
	Партия.Статус = stockEntry.status;		
	Партия.GUID = guid;
	Партия.UUID = stockEntry.uuid;
	Партия.НомерЗаписи = stockEntry.entryNumber;
	Партия.ДатаИзменения = СтрокаВДату( stockEntry.updateDate );
	Партия.ВсдДата = СтрокаВДату(stockEntry.createDate);	

	Сообщить(" ВСД_Партия от "+Партия.ВсдДата+" # "+Партия.НомерЗаписи);	
	
	
	batch = stockEntry.batch;
	Партия.Продукция 	= НайтиПродукцию(batch.product.guid);
	Партия.ВидПродукции = НайтиВидПродукции(batch.subProduct.guid);
		
	Попытка НаименованиеПродукции = batch.productItem.name; Исключение	НаименованиеПродукции = ""; КонецПопытки;
	Попытка	productItemUuid = batch.productItem.uuid; Исключение productItemUuid=""; КонецПопытки;
	Попытка productItemGuid = batch.productItem.guid; Исключение productItemGuid = "" КонецПопытки;
	//ЖД Переписать ф-цию  Найти_Продукция_Элемент как в 7-ке
	Партия.Продукция_Элемент = Найти_Продукция_Элемент(НаименованиеПродукции, productItemGuid, productItemUuid, Партия.Продукция, Партия.ВидПродукции);
	
	Партия.НаименованиеПродукции = НаименованиеПродукции;
	Если НЕ(ПустаяСтрока(НаименованиеПродукции)) Тогда 
		Партия.Наименование = НаименованиеПродукции;
	Иначе
		Партия.Наименование = Партия.Продукция_Элемент.Наименование;
	КонецЕсли;
	
	
	//Trade Identification Number (GTIN) - идентификационный номер продукции производителя.
//	Попытка	GTIN = batch.productItem.globalID;	Исключение	GTIN="";	КонецПопытки;
    //Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
//	Попытка	Артикул = batch.productItem.code;	Исключение	Артикул="";	КонецПопытки;
		
	//<dt:packaging> Фасовка. - в партии НЕ НУЖНА	
	// Объем продукции
	
	Партия.Количество 	= Число(batch.volume);
	Партия.ЕдиницаИзмерения = НайтиЕдИзмерения( batch.unit.guid );
	
	ДатаИзготовления1="";	ДатаИзготовления=""; ДатаИзготовления2="";		
	Дата_из_XML(batch.dateOfProduction, ДатаИзготовления1, ДатаИзготовления2, ДатаИзготовления );
	Партия.ДатаИзготовления1 = ДатаИзготовления1;
	Партия.ДатаИзготовления2 = ДатаИзготовления2;
	Партия.ДатаИзготовления =  ДатаИзготовления;
		
	ДатаСрокГодности1=""; ДатаСрокГодности2=""; ДатаСрокГодности="";
	Дата_из_XML(batch.expiryDate, ДатаСрокГодности1, ДатаСрокГодности2, ДатаСрокГодности );
	Партия.ДатаСрокГодности = ДатаСрокГодности;
	Партия.ДатаСрокГодности1 = ДатаСрокГодности1;
	Партия.ДатаСрокГодности2 = ДатаСрокГодности2;
	Попытка Партия.НомерПартии =  batch.batchID; Исключение	КонецПопытки; //В спр нет реквизита
	//<vd:batchID> 	bs:String255 	[1..*] 	Уникальный идентификатор производственной партии продукции. 	<vd:batchID>ПП64219</vd:batchID> 
	//Попытка	Скоропортящийся = batch.perishable; Исключение	КонецПопытки;

	Попытка ПроизводителиСписок = СписокПроизводителей_из_XML(batch.origin.producer);Исключение КонецПопытки;
	//Запишем одного из производителей в Реквизит
	Попытка
		СЗПроизводители = ЗначениеИзСтрокиВнутр(ПроизводителиСписок);			
		Партия.Производитель_Площадка = СЗПроизводители[0].Значение;	
	Исключение КонецПопытки;
	Попытка Партия.ПроизводителиСписок = ПроизводителиСписок;Исключение КонецПопытки; //Если есть реквизит либо в Табчасть
	
//	Попытка	Страна_ГУИД = batch.origin.country.guid;	Исключение	КонецПопытки;
//	Попытка	Некачественный = batch.lowGradeCargo; Исключение	КонецПопытки;
	Попытка	Партия.УровниУпаковки = УровниУпаковки_из_XML(batch.packageList.package, Партия);	Исключение 	КонецПопытки;	
		
	Попытка	Партия.Получатель_ХозСубъект = НайтиХСпоGUID(batch.owner.guid); Исключение КонецПопытки;
		
	Партия.Получатель_Площадка = Отправитель_Площадка;

	Если Партия.Количество=0 Тогда 
		
		Если ( Партия.ЭтоНовый()=0 ) Тогда
			СообщитьИнфо("Количество партии guid ["+Партия.guid+"] uuid ["+Партия.uuid+"] = 0. Партия удалена. ");
			Партия.Записать();
			Партия.УстановитьПометкуУдаления(истина);
		Иначе
			СообщитьИнфо("Количество партии guid ["+Партия.guid+"] uuid ["+Партия.uuid+"] = 0. Партия пропущена. ");
			Возврат "";
		КонецЕсли;
	Иначе
		Партия.Записать();
		Партия.УстановитьПометкуУдаления(ложь);
	КонецЕсли;
	
	Возврат Партия;	
	
	
КонецФункции

Процедура ЗагрузитьXML_ВсеПартии2Ответ(имяФайла, Смещение) Экспорт
    // ЖД Продумать рекурсивыный вызов ПолучитьПартии2 со смещением
	// В ПолучитьПартии2_ОтветXML не очищать справочник при следующих входах
	// Здесь прочитать, сколько получено партий, если столько, сколько запросили (1000), то еще повторяем
	// запрос ПолучитьПартии2 с увеличением смещения , пока в ответе будет меньще, зам запрашивали.
	//Проверка на ошибки
	Если НайтиОшибки(имяФайла)> 0 Тогда
		Возврат;	
	КонецЕсли;
	
    СообщитьИнфо("Загрузка XML-файла: "+ИмяФайла);    
    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	// ЖД посмотрим, сколько пришло партий
	Попытка ПришлоПартий = Число(xdto.application.result.getStockEntryListResponse.stockEntryList.count); исключение ПришлоПартий = 1; КонецПопытки;
	//Всего записей Число(xdto.application.result.getStockEntryListResponse.stockEntryList.total)
	Попытка
		seList = xdto.application.result.getStockEntryListResponse.stockEntryList.StockEntry;	
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		stockEntryList = Новый Массив;
		stockEntryList.Добавить(seList);
	Иначе
		stockEntryList = seList;
	КонецЕсли;
	Для каждого stockEntry из stockEntryList Цикл		
		
		Партия = ЗаписатьПартию2(stockEntry);
					
	КонецЦикла;
	//ЖД Рекурсивный Вызов
	Если ПришлоПартий = 1000 Тогда
		//Площадку берем из Констант, либо передавать в параметрах функции
		ПолучитьПартии2(СписокКонстант.Получить("Отправитель_Площадка"), Смещение+1000);	
	КонецЕсли;
	
	Сообщить("Загрузка партий завершена");
    
КонецПроцедуры


Функция  ПолучитьПартии2_ОтветXML(appID, Смещение)

	//стандартное поведение функции
	Если НЕ(ЗначениеЗаполнено(appID)) Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	Пауза( );
	
	Сообщить("Отправляем запрос " );
	Результат = Компонента.SendRequestResult( appID );
	
	Если Результат="COMPLETED" Тогда
		
		//При объединении партий в Меркурии - старые партии пропадают, появляются новые
		// поэтому в 1С остаются "остатки", которые нужно удалять
		//Если ОчищатьСправочникВСД_Партии Тогда
			Состояние("Удаление справочника ВСД_Партии");
			//Отправитель_Площадка = СписокКонстант.Получить("Отправитель_Площадка"); 
		Если Смещение = 0 Тогда  //ЖД следующий проход
			Выборка = Справочники.ВСД_Партия.Выбрать();
			Пока Выборка.Следующий() Цикл			
				// ЖД Не стираем партии другой площадки
				Если Выборка.Получатель_Площадка = Отправитель_Площадка Тогда 
					СпрОбъект = Выборка.ПолучитьОбъект();
					СпрОбъект.УстановитьПометкуУдаления(истина);
				КонецЕсли;				
			КонецЦикла;
		КонецЕсли;
		//КонецЕсли;
		Состояние("Загрузка справочника ВСД_Партии");
		
		ЗагрузитьXML_ВсеПартии2Ответ( Компонента.LogFilename, Смещение );
	Иначе
		//ЖД покажем ошибки
		НайтиОшибки(Компонента.LogFilename);	
	КонецЕсли;		
	
	УдалитьXML( Компонента.LogFilename);
		
	Возврат Результат;
КонецФункции

Функция  ПолучитьПартии2(Предприятие, Смещение=0) Экспорт

	Если НЕ(ЗначениеЗаполнено(Предприятие.GUID)) Тогда 
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

	                 
	ЗапросXML = ПолучитьПартии2_ЗапросXML(СокрЛП(Предприятие.GUID), Смещение);
	
	метод = Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    //метод.Service = "platform/services/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
		
	//appID = Получить_ApplicationID(Компонента.LogFilename);
	
	УдалитьXML( Компонента.LogFilename);
	Результат = "";
	Если ЗначениеЗаполнено(appID) Тогда
		Результат = ПолучитьПартии2_ОтветXML(appID, Смещение ); 
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьПартии2_ОтветXML( appID, Смещение );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	УдалитьXML( Компонента.LogFilename);
	
	Возврат Результат;
	
КонецФункции

//**************************ВСД Партии v2  окончание****************************

// ***** Продукция v2
//возможно эта ф-ция не нужна
Функция НайтиПродукцияЭлементПоGUID(Guid)
	// ЖД  - не используется См ниже
	Если ЗначениеЗаполнено(Guid) Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Продукция_Элемент.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Продукция_Элемент КАК ВСД_Продукция_Элемент
		                      |ГДЕ
		                      |	ВСД_Продукция_Элемент.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка.ПолучитьОбъект();
		Иначе
			Ответ = Справочники.ВСД_Продукция_Элемент.СоздатьЭлемент();	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Продукция_Элемент");
		Ответ = Справочники.ВСД_Продукция_Элемент.СоздатьЭлемент();	
	КонецЕсли;
	 	
	Возврат Ответ;
КонецФункции

Функция ПолучитьРезультат_Список_Продукции(имяФайла,продукцияЭлемент="") Экспорт
	// ЖД Добавить реквизиты в справочник для api 2.0 - Фасовка, GTIN, (Вероятно список площадок производителей))
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(имяФайла);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	
	//Вариации загрузки при разных запросах ЖД 
	//Получение списка по площадке
	Попытка pIList = xdto.Body.getProductItemListResponse.productItemList.productItem; Исключение pIList = ""; КонецПопытки;
	
	Если (ТипЗнч(pIList)<>Тип("СписокXDTO"))и (ТипЗнч(pIList)<>Тип("ОбъектXDTO")) Тогда
		// Изменение  / добавление
		Попытка	pIList = xdto.application.result.modifyProducerStockListResponse.productItemList.productItem; Исключение pIList = "";	КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(pIList)<>Тип("СписокXDTO"))и (ТипЗнч(pIList)<>Тип("ОбъектXDTO")) Тогда
		Попытка	pIList = xdto.Body.getProductItemByGuidResponse.productItem;	Исключение	pIList = ""; КонецПопытки;
	КонецЕсли;	
	
	Если (ТипЗнч(pIList)<>Тип("СписокXDTO"))и (ТипЗнч(pIList)<>Тип("ОбъектXDTO")) Тогда
		Сообщить("Не далось прочитать продукцию из "+имяФайла);
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(pIList)<>Тип("СписокXDTO") Тогда 
		productItemList = Новый Массив;
		productItemList.Добавить(pIList);
	Иначе
		productItemList = pIList;
	КонецЕсли;
	
	Для каждого productItem из productItemList Цикл		
		
		active 	 = productItem.active;
		
		Если active="false" Тогда
			Продолжить;
		КонецЕсли;
		name = productItem.name;
		guid  	 = productItem.guid;
		uuid  	 = productItem.uuid;
	
		Если ЗначениеЗаполнено(продукцияЭлемент) Тогда
			СпрОбъект = ПродукцияЭлемент.ПолучитьОбъект();
		Иначе
			СпрСсылка = Справочники.ВСД_Продукция_Элемент.НайтиПоРеквизиту("GUID", guid);
			Если СпрСсылка = Справочники.ВСД_Продукция_Элемент.ПустаяСсылка() Тогда
				СпрСсылка = Справочники.ВСД_Продукция_Элемент.НайтиПоНаименованию(name);
				Если СпрСсылка = Справочники.ВСД_Продукция_Элемент.ПустаяСсылка() Тогда 
					СпрОбъект = Справочники.ВСД_Продукция_Элемент.СоздатьЭлемент();
				Иначе
					СпрОбъект = СпрСсылка.ПолучитьОбъект();
				КонецЕсли;
			Иначе
				СпрОбъект = СпрСсылка.ПолучитьОбъект();
			КонецЕсли;
		КонецЕсли;
		
		СпрОбъект.UUID = uuid;
		СпрОбъект.GUID = guid;		
		Попытка СпрОбъект.Наименование = name;  Исключение КонецПопытки;
		Попытка СпрОбъект.Продукция = НайтиПродукцию(productItem.product.guid); Исключение КонецПопытки;
		Попытка СпрОбъект.ВидПродукции = НайтиВидПродукции(productItem.subProduct.guid); Исключение КонецПопытки;
		Попытка СпрОбъект.Артикул = productItem.code; Исключение КонецПопытки;
		Попытка СпрОбъект.GTIN = productItem.globalID; Исключение КонецПопытки;
		Попытка СпрОбъект.СоответствуетГОСТу = ?(productItem.correspondsToGost="true",1,0);	Исключение СпрОбъект.СоответствуетГОСТу = 0; КонецПопытки;
		Попытка СпрОбъект.Гост = ?(типзнч(productItem.gost) = Тип("Строка"),productItem.gost,"");	Исключение СпрОбъект.Гост = "";	КонецПопытки;

		// Фасовка
		Попытка packaging = productItem.packaging Исключение packaging=""	КонецПопытки; 	
		Попытка ФасовкаНаименование = packaging.packagingType.name;	Исключение ФасовкаНаименование=""	КонецПопытки;
		Попытка СпрОбъект.ФасовкаФормаУпаковки = НайтиФормуУпаковки( packaging.packagingType.guid,ФасовкаНаименование );	Исключение 	КонецПопытки;
		Попытка	СпрОбъект.ФасовкаКоличество = Число(packaging.quantity);	Исключение	КонецПопытки;
		Попытка	СпрОбъект.ФасовкаОбъем = Число(packaging.volume); Исключение	КонецПопытки;
		Попытка	СпрОбъект.ФасовкаЕдиницаИзмерения = НайтиЕдИзмерения(packaging.unit.guid);	Исключение 	КонецПопытки;			
		
		Если СпрОбъект.ТермическиеУсловияПеревозки = 0 Тогда СпрОбъект.ТермическиеУсловияПеревозки = 1; КонецЕсли; 
		//productItem.producer.guid - ХС Производитель
		//productItem.producing.location.guid - Площадка-Производитель  - возможен список
		
//		st  	 = productItem.status;
//		prodType = productItem.productType;		
		СпрОбъект.Записать();

		Сообщить("Записан ["+name+"] uuid =["+uuid+"]");
	КонецЦикла;
				
	УдалитьXML( Компонента.LogFilename );

	Возврат "";
КонецФункции

Функция Получить_Список_Продукции_ЗапросXML(Площадка)
	
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
    |<soapenv:Header/>
    |<soapenv:Body>
    |   <ws:getProductItemListRequest>
    |      <bs:listOptions>
    |         <bs:count>1000</bs:count>
    |         <bs:offset>0</bs:offset>
    |      </bs:listOptions>
    |      <dt:enterprise>
    |         <bs:guid>"+ СокрЛП(Площадка.GUID) +"</bs:guid>
    |      </dt:enterprise>
    |   </ws:getProductItemListRequest>
    |</soapenv:Body>
	|</soapenv:Envelope>	
	|";
	Возврат Запрос;	
КонецФункции

Функция Получить_Список_Продукции( Площадка ) Экспорт

	ЗапросXML = Получить_Список_Продукции_ЗапросXML( Площадка );

	метод = Компонента.GetMethod();
	
	метод.Service = "platform/services/2.0/ProductService";//"platform/services/ProductService";
    метод.Action = "GetProductItemList";		
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	
	Если НайтиОшибки(Компонента.LogFilename)>0 Тогда 
		Возврат "";
	КонецЕсли;		
	ПолучитьРезультат_Список_Продукции(Компонента.LogFilename);
	УдалитьXML( Компонента.LogFilename);	
	Возврат appID;
		
КонецФункции

Функция  ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID) Экспорт

	Если ПустоеЗначение(appID)=1 Тогда
		Сообщить("Пустая ссылка applicationID");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	Пауза( );
	
	Сообщить("Отправляем запрос ["+продукцияЭлемент+"]" );
	Результат = Компонента.SendRequestResult( appID );

	Если НайтиОшибки(Компонента.LogFilename)>0 Тогда 
		Возврат Результат;
	КонецЕсли;		

	ПолучитьРезультат_Список_Продукции(Компонента.LogFilename,продукцияЭлемент);	
	УдалитьXML( Компонента.LogFilename );
  
	Возврат Результат;
КонецФункции

Функция Изменить_Продукцию_ЗапросXML(продукцияЭлемент,RegisterModificationType)

	Запрос ="<SOAP-ENV:Envelope 
		|      xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
		|      xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|      xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
		|      xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
		|      xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
		|      xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
		|      xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
		|  <SOAP-ENV:Header/>
		|  <SOAP-ENV:Body>
		|    <apldef:submitApplicationRequest>
		|      <apldef:apiKey>"+ СокрЛП( СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
		|      <apl:application>
		|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
		|        <apl:issuerId>"+ СокрЛП( СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
		|        <apl:issueDate>" + ДатаXML(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
		|        <apl:data>
		|          <merc:modifyProducerStockListRequest>
		|            <merc:localTransactionId>" + "Id1" + "</merc:localTransactionId>
		|            <merc:initiator>
		|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
		|            </merc:initiator>
		|            <merc:modificationOperation>
	    |          <vd:type>"+RegisterModificationType+"</vd:type>
	    |          <vd:resultingList>
	    |            <dt:productItem>";
	    Если ЗначениеЗаполнено(продукцияЭлемент.GTIN) Тогда
			Запрос = Запрос + "
    		|              <dt:globalID>"+СокрЛП(продукцияЭлемент.GTIN)+"</dt:globalID>";
		КонецЕсли;
		
		Запрос = Запрос + "
	    |              <dt:name>"+СокрЛП(продукцияЭлемент.Наименование)+"</dt:name>";
	    Если ЗначениеЗаполнено(продукцияЭлемент.Артикул) Тогда
			Запрос = Запрос + "
    		|              <dt:code>"+СокрЛП(продукцияЭлемент.Артикул)+"</dt:code>";
		КонецЕсли;
		
		
		Запрос = Запрос + "
	    |              <dt:productType>"+продукцияЭлемент.Продукция.Тип+"</dt:productType>
    	|              <dt:product>
	    |                <bs:guid>"+Сокрлп(продукцияЭлемент.Продукция.GUID)+"</bs:guid>
    	|              </dt:product>
	    |              <dt:subProduct>
    	|                <bs:guid>"+Сокрлп(продукцияЭлемент.ВидПродукции.GUID)+"</bs:guid>
	    |              </dt:subProduct>
		|              <dt:correspondsToGost>"+НашеБулево(продукцияЭлемент.СоответствуетГОСТу)+"</dt:correspondsToGost>";
	    Если продукцияЭлемент.СоответствуетГОСТу = 1 Тогда
			Запрос = Запрос + "
	    	|              <dt:gost>"+СокрЛП(продукцияЭлемент.Гост)+"</dt:gost>";
		КонецЕсли;
		// ХС Производитель и владелец ТМ		
		Запрос = Запрос + "
	    |              <dt:producer>
    	|                <bs:guid>"+Сокрлп(СписокКонстант.Получить("Отправитель_ХозСубъект").GUID)+"</bs:guid>
	    |              </dt:producer>
	    |              <dt:tmOwner>
    	|                <bs:guid>"+Сокрлп(СписокКонстант.Получить("Отправитель_ХозСубъект").GUID)+"</bs:guid>
	    |              </dt:tmOwner>";
		

//45 	·········<dt:producing> 	dt:ProductItemProducing 	[0..*] 	Список площадок, на которых выпускается данная продукция. 	
//46 	············<dt:location> 	dt:Enterprise 	[1..1] 	Площадка, осуществляющая выпуск продукции. 	
//47 	···············<bs:uuid> 	bs:UUID 	[1..1] 	Идентификатор версии предприятия. 	<bs:uuid>9c706614-b995-4bdd-bda3-8fa9de70803a</bs:uuid>
//48 	···············<bs:guid> 	bs:UUID 	[1..1] 	Глобальный идентификатор предприятия. 	<bs:guid>12f04ea3-e236-4b71-b427-e04d41b26de4</bs:guid>
//49 	············</dt:location> 				
//50 	·········</dt:producing> 			
		Запрос = Запрос + "
	    |              <dt:producing>
		|                <dt:location>
    	|                   <bs:guid>"+Сокрлп(продукцияЭлемент.Площадка.GUID)+"</bs:guid>
	    |                </dt:location>
	    |              </dt:producing>";
		// ЖД ФАСОВКА
		Если ЗначениеЗаполнено(продукцияЭлемент.ФасовкаФормаУпаковки) и  ЗначениеЗаполнено(продукцияЭлемент.ФасовкаЕдиницаИзмерения) Тогда
			Запрос = Запрос + "
			|              <dt:packaging>
		    |                <dt:packagingType>
    		|                  <bs:guid>"+Сокрлп(продукцияЭлемент.ФасовкаФормаУпаковки.GUID)+"</bs:guid>
		    |                </dt:packagingType>
    		|                <dt:quantity>"+продукцияЭлемент.ФасовкаКоличество+"</dt:quantity>
	    	|                <dt:volume>"+Формат(продукцияЭлемент.ФасовкаОбъем, "ЧРД=.; ЧГ=0")+"</dt:volume>
	    	|                <dt:unit>
		    |                  <bs:guid>"+Сокрлп(продукцияЭлемент.ФасовкаЕдиницаИзмерения.GUID)+"</bs:guid>
    		|                </dt:unit>
		    |              </dt:packaging>";
		КонецЕсли;
		Запрос = Запрос + "
		|            </dt:productItem>
	    |          </vd:resultingList>
	    |        </merc:modificationOperation>
	    |      </merc:modifyProducerStockListRequest>
	    |    </apl:data>
	    |  </apl:application>
	    |</apldef:submitApplicationRequest>
		|</SOAP-ENV:Body>
		|</SOAP-ENV:Envelope>";	
	
	
	Возврат Запрос;	
КонецФункции


Функция  Изменить_Продукцию( продукцияЭлемент , RegisterModificationType) Экспорт
	//Если ПустоеЗначение(ВыбПлощадка)=1 Тогда 
	//	Предупреждение("Выберите Площадку");
	//	Возврат;
	//КонецЕсли;

	Если НЕ(ЗначениеЗаполнено(продукцияЭлемент.Площадка.GUID)) Тогда 
		Сообщить("В продукцияЭлемент.Площадка пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

	
	                 
	ЗапросXML = Изменить_Продукцию_ЗапросXML(продукцияЭлемент, RegisterModificationType);
	
	метод = Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";	
    метод.Action = "submitApplicationRequest";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	
	УдалитьXML( Компонента.LogFilename);
	Результат = "";
	Если ЗначениеЗаполнено(appID) Тогда
		Результат = ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID);
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	УдалитьXML( Компонента.LogFilename);
	
	Возврат Результат;
	
КонецФункции


Функция Продукция_Инфо_ЗапросXML( продукция )
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' 
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2' 
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getProductItemByGuidRequest>
	|      <base:guid>"+ СокрЛП(продукция.GUID) +"</base:guid>
	|    </ws:getProductItemByGuidRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	
	Возврат запрос;
КонецФункции

Процедура Получить_Инфо_Продукции( Продукция ) Экспорт
	ЗапросXML = Продукция_Инфо_ЗапросXML( Продукция );

	метод = Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ProductService";//"platform/services/ProductService";
	//метод.Service = "platform/services/ProductService";
    метод.Action = "GetProductItemByGuid";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
		
	Результат = ПолучитьРезультат_Список_Продукции( Компонента.LogFilename, Продукция);
	
	УдалитьXML( Компонента.LogFilename);
	
КонецПроцедуры


// ***** Продукция v2  окончание

// **************** Аннулирование ВСД Транспортного v2
Функция ВСД2_Аннулирование_ЗапросXML(док)
	Запрос = "
	|<SOAP-ENV:Envelope 
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СписокКонстант.Получить("param_api_key") + "</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+СписокКонстант.Получить("param_issuer_id")+"</apl:issuerId>
	|        <apl:issueDate>"+ ДатаXML(ТекущаяДата(), "T00:00:00") +"</apl:issueDate>
	|        <apl:data>
	|          <merc:withdrawVetDocumentRequest>
	|            <merc:localTransactionId>[GUID]</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+СписокКонстант.Получить("param_intiator_login")+"</vd:login>
	|            </merc:initiator>
	|            <merc:vetDocumentId>"+ СокрЛП(док.UUID) +"</merc:vetDocumentId>
	|            <merc:withdrawReason>Неверно указан объём продукции</merc:withdrawReason>
	|            <merc:withdrawDate>"+ ДатаXML(док.Дата, "T23:59:59") +"</merc:withdrawDate>
	|            <merc:specifiedPerson>
	|              <vd:login>"+ СписокКонстант.Получить("param_vetdoctor_login")+"</vd:login>
	|            </merc:specifiedPerson>
	|          </merc:withdrawVetDocumentRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";	
	
	Возврат Запрос;
КонецФункции


Функция Отправить_ВСД2_Аннулирование( док ) Экспорт
	Если НЕ(ЗначениеЗаполнено(док)) Тогда
		Возврат 0;
	КонецЕсли;	
	Если НЕ(ЗначениеЗаполнено(док.uuid)) Тогда
		Сообщить("В документе "+док+" не указан uuid, аннулирование невозможно");
		Возврат "";
	КонецЕсли;
	
	Если СокрЛП(док.Статус) = "Аннулирова" Тогда
		Сообщить("Документ "+док+" уже аннулирован");
		Возврат "";
	КонецЕсли;
	Отправитель_Площадка = Док.Отправитель_Площадка;
	
	ЗапросXML = ВСД2_Аннулирование_ЗапросXML(док);

	метод = Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    //метод.Service = "platform/services/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	
	УдалитьXML( Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда
		Результат = ПолучитьРезультат_ВСД2(appID,док); 
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД2( appID,док); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//условие на ответ - вдруг покупатель уже погасил, либо ошибка аннулирования
	Если СокрЛП(док.Статус)= "WITHDRAWN" Тогда
		докОбъект = док.ПолучитьОбъект();
		докОбъект.Статус = "Аннулирова"; // н не умещается в 10 симв
		докОбъект.Записать( РежимЗаписиДокумента.ОтменаПроведения, );
		докОбъект.УстановитьПометкуУдаления(Истина);
	КонецЕсли;
	Возврат appID;		
КонецФункции

Функция Выбрать_ВСД2( докОснование ) Экспорт
	// Выбирает подчиненные ВСД_Транзакции документы ВСД 
	тзДок = Новый ТаблицаЗначений;
	тзДок.Колонки.Добавить("Док");
	
	Если НЕ(ЗначениеЗаполнено(докОснование)) Тогда
		Возврат тзДок;
	КонецЕсли;
 		Запрос = Новый Запрос;
    	Запрос.Текст = 
        "ВЫБРАТЬ
        |    Ссылка
        |ИЗ
        |    Документ.ВСД КАК
        |    ВСДДокументыОснования
        |ГДЕ
        |    ВСДДокументыОснования.ДокументОснование =
        |    &ВыбВСДТранзакция";
 
	    Запрос.УстановитьПараметр("ВыбВСДТранзакция", докОснование);
    	
	    РезультатЗапроса = Запрос.Выполнить(); 
    	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
 
	    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
    	    ВСДРезультат = ВыборкаДетальныеЗаписи.Ссылка;
        	//Сообщить(ВСДРезультат);
			//Если НЕ(СокрЛП(ВСДРезультат.Статус = "Аннулирова")) Тогда
			СтрТЗ = тзДок.Добавить();
			СтрТЗ.Док = ВСДРезультат;
			//КонецЕсли;
		КонецЦикла;	
	Возврат тзДок;
КонецФункции


Процедура Аннулировать_ВСД2_транзакция( док ) Экспорт
	Если НЕ(ЗначениеЗаполнено(док)) Тогда
		Возврат;
	КонецЕсли;
	ОшибкаАннулирования = false;
	тзВСД = Выбрать_ВСД2(док);
	Для Каждого строкаВСД из тзВСД Цикл
		Если СокрЛП(строкаВСД.Док.ТипВСД) = "PRODUCTIVE" Тогда
			//Сообщить("Производственный не аннулируем");
			Продолжить;	
		КонецЕсли;
		Отправить_ВСД2_Аннулирование(строкаВСД.Док);
		Если НЕ(Сокрлп(строкаВСД.Док.Статус) = "Аннулирова") Тогда
			ОшибкаАннулирования = true;
			Сообщить("Не удалось Аннулировать "+строкаВСД.Док+" для "+док);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ(ОшибкаАннулирования) Тогда
		докОбъект = Док.ПолучитьОбъект();
		докОбъект.Статус = "Аннулирова";
		докОбъект.Записать( РежимЗаписиДокумента.ОтменаПроведения, );
		докОбъект.УстановитьПометкуУдаления(Истина);
	КонецЕсли;
КонецПроцедуры

Процедура Отправить_ВСД2_АннулированиеВыбранные() Экспорт
	Для Каждого стр из Отгрузки Цикл				
		Если НЕ(ЗначениеЗаполнено(стр.ВСД)) или НЕ(стр.Отметка) Тогда
			Продолжить;
		КонецЕсли;
		Аннулировать_ВСД2_транзакция(стр.ВСД);
	КонецЦикла;
	//Перерисуем
	Автозаполнение();
КонецПроцедуры



// **************** Аннулирование ВСД Транспортного окончание v2

// ***************** Транзакция v2
Функция ВСД2_транзакция_ЗапросXML(док)
	
	Запрос_Шапка = "<SOAP-ENV:Envelope
	| xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
  	|<SOAP-ENV:Header/>
  	|<SOAP-ENV:Body>
    |<apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(док.Дата, "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:prepareOutgoingConsignmentRequest>
	|            <merc:localTransactionId>" + СокрЛП(док.Номер) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|";
	
//************************
    delivery = "
    |       <merc:delivery>
    |          <vd:deliveryDate>" + ДатаXML(док.ТтнДата, "T00:00:00") + "</vd:deliveryDate>
    |          <vd:consignor>
    |            <dt:businessEntity>
    |              <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
    |            </dt:businessEntity>
    |            <dt:enterprise>
    |              <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
    |            </dt:enterprise>
    |          </vd:consignor>
    |          <vd:consignee>
    |            <dt:businessEntity>
    |              <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
    |            </dt:businessEntity>
    |            <dt:enterprise>
    |              <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
    |            </dt:enterprise>";
	
	//<dt:globalID>4607009526782</dt:globalID> 	dt:GLNType 	[0..*]  [ ... ] Global Location Number - уникальный номер площадки
	delivery = delivery+"
    |          </vd:consignee>";
	
	consignment="";
	
	тз = Док.Товары.Выгрузить();
	Для А=0 По тз.Количество()-1 Цикл
		СтрокаДокумента = тз[А];
//        |      <vd:consignment id='id1'>
		consignment = consignment+ "
		|      <vd:consignment>";
		
		
	 	consignment = consignment + ProductItem_в_XML(СтрокаДокумента);   //ТЕСТ вместо ниже

		//Указание согласованного наименования и фасовки (указание записи журнала и productItem с наименованием/артикулом/GTIN получателя в запросе). 
//		Если (ПустоеЗначение(СтрокаДокумента.GTIN)= 0) или (ПустоеЗначение(СтрокаДокумента.Артикул)= 0) Тогда
//			consignment = consignment+ "
//   	    |        <vd:productItem>";
//    	    consignment = consignment+?(ЗначениеЗаполнено(СтрокаДокумента.GTIN),	"          <dt:globalID>"+ СокрЛП(СтрокаДокумента.GTIN) +"</dt:globalID>","");
//	        consignment = consignment+?(ЗначениеЗаполнено(СтрокаДокумента.Артикул),	"          <dt:code>"+ СокрЛП(СтрокаДокумента.Артикул) +"</dt:code>","");

//			Если ЗначениеЗаполнено(СтрокаДокумента.ФасовкаФормаУпаковки) Тогда
//				consignment = consignment+ "
//    	    	|          <dt:packaging>
//	        	|            <dt:packagingType>
//		        |              <bs:guid>"+ СокрЛП(СтрокаДокумента.ФасовкаФормаУпаковки.GUID) +"</bs:guid>
		//						<dt:globalID>BE</dt:globalID> 	dt:PackingCodeType 	[0..1] 	Уникальный идентификатор упаковки. 
//    		    |            </dt:packagingType>
//        		|            <dt:quantity>"+ СтрокаДокумента.ФасовкаКоличество +"</dt:quantity>
//		        |            <dt:volume>"+ СтрокаДокумента.ФасовкаОбъем +"</dt:volume>
//    		    |            <dt:unit>
//        		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.ФасовкаЕдиницаИзмерения.GUID) +"</bs:guid>
//		        |            </dt:unit>
//    		    |          </dt:packaging>";		    
//			КонецЕсли;		
		
//			consignment = consignment+ "
//    	    |        </vd:productItem>";
		
//		КонецЕсли;

		consignment = consignment+ "
		|        <vd:volume>"+ Формат(СтрокаДокумента.Количество, "ЧРД=.; ЧГ=0") +"</vd:volume>
        |        <vd:unit>
        |          <bs:guid>"+ СокрЛП(СтрокаДокумента.ЕдиницаИзмерения.GUID) +"</bs:guid>
        |        </vd:unit>
        |";
		
		тзУпаковка = Док.УровниУпаковки.Выгрузить();
		тзМаркировка = Док.Маркировка.Выгрузить();
		consignment = consignment+  УровниУпаковки_в_XML(СтрокаДокумента.НомерСтроки,тзУпаковка,тзМаркировка);
		
		consignment = consignment+ "	
		|        <vd:sourceStockEntry>
        |          <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.GUID) +"</bs:guid>
        |        </vd:sourceStockEntry>
        |      </vd:consignment>
		|";
	КонецЦикла; //по строкам документа		  
	//Тип товарно-транспортной накладной.
    //Допустимые типы для waybill: 1, 2, 3, 4, 5
	ЗапросПодвал = "";
	Если ЗначениеЗаполнено(док.Перевозчик_ХозСубъект) Тогда
	ЗапросПодвал = "		  
        |      <vd:broker>
        |        <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
        |      </vd:broker>";
	КонецЕсли;
	
	
	ЗапросПодвал = ЗапросПодвал+"		  
        |      <vd:transportInfo>
        |        <vd:transportType>1</vd:transportType>
        |        <vd:transportNumber>
        |          <vd:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</vd:vehicleNumber>
        |        </vd:transportNumber>
        |      </vd:transportInfo>
        |      <vd:transportStorageType>"+ ТермическиеУсловияПеревозки.Получить( док.ТермическоеСостояние-1 ) +"</vd:transportStorageType>
        |      <vd:accompanyingForms>
        |        <vd:waybill>
        |          <vd:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</vd:issueSeries>
        |          <vd:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:issueNumber>
        |          <vd:issueDate>"+ ДатаXML(док.ТтнДата) +"</vd:issueDate>
        |          <vd:type>1</vd:type>      
        |        </vd:waybill>
        |        <vd:vetCertificate>
        |          <vd:authentication>
        |            <vd:purpose>
        |              <bs:guid>5b90da1b-e089-11e1-bcf3-b499babae7ea</bs:guid>		
//   Сделать     |              <bs:guid>"+ СокрЛП( СписокКонстант.Получить("Цель").Guid ) +"</bs:guid>
        |            </vd:purpose>
        |            <vd:cargoInspected>"+ НашеБулево(док.cargoInspected) +"</vd:cargoInspected>";
		
//Регионализация  - ДОРАБОТКА по ВИДУ ПРОДУКЦИИ
		тзУсловияПеревозки = Док.УсловияПеревозки.Выгрузить();
		Если ЗначениеЗаполнено(тзУсловияПеревозки) Тогда
			ЗапросПодвал = ЗапросПодвал+ "		  
			|            <vd:locationProsperity>"+ СокрЛП(док.Местность) +"</vd:locationProsperity>";
			
			Для каждого стрУсловия из тзУсловияПеревозки Цикл
				Если стрУсловия.Отметка Тогда
					ЗапросПодвал=ЗапросПодвал+"
					|<vd:r13nClause>
					|<vd:condition>
					|<bs:guid>" + стрУсловия.GUID + "</bs:guid>
					|</vd:condition>
					|</vd:r13nClause>
					|";	
				КонецЕсли;
			КонецЦикла;		
		Иначе
	//				cargoExpertized = Проводилась ли ветсанэкспертиза.
	//				Возможные значения: VSEFULL, VSERAW, UNFULFILLED 
			
			ЗапросПодвал = ЗапросПодвал+ "
			|             <vd:cargoExpertized>"+ПолучитьИдентификаторПеречисления(док.РезультатыИсследований)+"</vd:cargoExpertized>
			|            <vd:locationProsperity>"+ СокрЛП(док.Местность) +"</vd:locationProsperity>
			|";
			
		КонецЕсли;
		
	ЗапросПодвал = ЗапросПодвал+ "
        |          </vd:authentication>
        |        </vd:vetCertificate>";

	
		// Связанные документы
		// тип 16 = Заказ, 6 = ТОРГ12,  1 = ТрН
//        |          <vd:issueSeries>А</vd:issueSeries>
//        |          <vd:issueDate>2017-09-26</vd:issueDate>

		СвязанныеДокументы = "";
		Если ЗначениеЗаполнено(Док.НомерЗаказаПокупателя)Тогда
			СвязанныеДокументы = "
			|        <vd:relatedDocument>
    	    |          <vd:issueNumber>"+СокрЛП(док.НомерЗаказаПокупателя)+"</vd:issueNumber>
			|          <vd:issueDate>"+ ДатаXML(док.ДатаЗаказаПокупателя) +"</vd:issueDate>
    	    |          <vd:type>16</vd:type>
        	|          <vd:relationshipType>1</vd:relationshipType>
	        |	     </vd:relatedDocument>";		    
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Док.ТОРГ12Номер) Тогда
	        СвязанныеДокументы = СвязанныеДокументы+ "
	        |        <vd:relatedDocument>
    	    |          <vd:issueNumber>"+СокрЛП(док.ТОРГ12Номер)+"</vd:issueNumber>
	        |          <vd:issueDate>"+ ДатаXML(док.ТОРГ12Дата) +"</vd:issueDate>
    	    |          <vd:type>6</vd:type>
        	|          <vd:relationshipType>1</vd:relationshipType>
	        |        </vd:relatedDocument>";
        КонецЕсли;
		
		Если ЗначениеЗаполнено(СвязанныеДокументы) = 0 Тогда
			ЗапросПодвал = ЗапросПодвал+СвязанныеДокументы;	
		КонецЕсли;
		
	ЗапросПодвал = ЗапросПодвал+ "
		|      </vd:accompanyingForms>
        |    </merc:delivery>
		|          </merc:prepareOutgoingConsignmentRequest>
		|        </apl:data>
		|      </apl:application>
		|    </apldef:submitApplicationRequest>
		|  </SOAP-ENV:Body>
		|</SOAP-ENV:Envelope>
		|";



	Запрос = Запрос_Шапка+
		delivery+
		consignment+
//		accompanyingForms_Шапка+
//		vetCertificate+
		ЗапросПодвал;
	
	Возврат Запрос;
КонецФункции


Функция Отправить_ВСД2_транзакция(док) Экспорт
	
	Если Проверка_ВСД_транзакция(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
	Отправитель_Площадка = Док.Отправитель_Площадка;
	//Если док.ПеревозкаРазрешена = 3 Тогда
	//	Сообщить("По условиям регионализации Перевозка Запрещена!!! "+док);
	//	Возврат 0;
	//КонецЕсли;
	ЗапросXML = ВСД2_транзакция_ЗапросXML(док); 
	
	метод = Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	
	УдалитьXML( Компонента.LogFilename);

	Если ЗначениеЗаполнено(appID) Тогда
		Результат = ПолучитьРезультат_ВСД2(appID, док );
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда
				Результат = ПолучитьРезультат_ВСД2(appID, док );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;
	
	
КонецФункции

// ***************** Транзакция окончание v2

// ************* Регионализация v2
Функция РегионализацияМаршрута_2_ЗапросXML(док)
	//СокрЛП(док.Партия.Продукция.GUID)
	//СокрЛП(док.Партия.ВидПродукции.GUID)
	//СокрЛП(док.Партия.Продукция_Элемент.GUID) 
Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(док.Дата, "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:checkShipmentRegionalizationRequest>
	|            <merc:localTransactionId>" + СокрЛП(док.Номер) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|";
	
	тз = Док.Товары.Выгрузить();
	Для А=0 По тз.Количество()-1 Цикл
		СтрокаДокумента = тз[А];
		Запрос = Запрос+"
		|            <dt:cargoType>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.ВидПродукции.GUID) +"</bs:guid>       
		|            </dt:cargoType>";	    
	КонецЦикла;
	//<vd:sqnId>1</vd:sqnId>
	//Порядовый номер точки маршрута.
    //Не обязателен для заполнения, будет сгенерирован автоматически в ответе	
	
	// <vd:enterprise>
	//Сведения о предприятии, которое является точкой маршрута.
    //Указывается в случае, если не указано значение location 	
	
	Запрос = Запрос+"
	|            <vd:shipmentRoute>
	|              <vd:routePoint>
	|                <vd:sqnId>1</vd:sqnId>
	|                <vd:enterprise>
	|                  <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
	|                </vd:enterprise>
	|              </vd:routePoint>
	|              <vd:routePoint>
	|                <vd:sqnId>2</vd:sqnId>
	|                <vd:enterprise>
	|                  <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
	|                </vd:enterprise>
	|              </vd:routePoint>
//	|              <vd:routePoint>
//	|                <vd:sqnId>2</vd:sqnId>
//	|                <vd:location>
//	|                  <dt:address>
//	|                    <dt:country>
//	|                      <bs:guid>74a3cbb1-56fa-94f3-ab3f-e8db4940d96b</bs:guid>
//	|                    </dt:country>
//	|                    <dt:region>
//	|                      <bs:guid>d00e1013-16bd-4c09-b3d5-3cb09fc54bd8</bs:guid>
//	|                    </dt:region>
//	|                    <dt:district>
//	|                      <bs:guid>f4ab6f10-4f56-4ebd-a881-4b767dbf4473</bs:guid>
//	|                    </dt:district>
//	|                    <dt:locality>
//	|                      <bs:guid>6f039940-2e3b-4857-a30e-c142865d859e</bs:guid>
//	|                    </dt:locality>
//	|                  </dt:address>
//	|                </vd:location>
//	|              </vd:routePoint>
	|            </vd:shipmentRoute>
	|          </merc:checkShipmentRegionalizationRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";
	Возврат Запрос;	
КонецФункции

Функция ЗагрузитьXML_ПеревозкаРазрешена_2(имяФайла, Решение="") Экспорт 
	//<dt:decision> 	dt:RegionalizationDecision
	//1 	Перемещение разрешено.
	//2 	Перемещение разрешено при обязательном соблюдении условий.
	//3 	Перемещение запрещено. 
	Если НайтиОшибки(имяФайла)>0 Тогда 
		Возврат "";
	КонецЕсли;	
	
    СообщитьИнфо("Загрузка XML-файла: "+ИмяФайла);    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Попытка	seList = xdto.application.result.checkShipmentRegionalizationResponse.r13nRouteSection; Исключение	seList = ""; КонецПопытки;
	

//                  <vd:r13nRouteSection>
//                     <vd:sqnId>1</vd:sqnId>
//                     <vd:appliedR13nRule>
//                        <dt:cargoType>
//                           <bs:guid>55d3c8dc-432d-58c8-151f-cda720795add</bs:guid>
//                        </dt:cargoType>
//                        <dt:decision>1</dt:decision>
//                     </vd:appliedR13nRule>
//                  </vd:r13nRouteSection>
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		Сообщить("Не далось прочитать условия перевозки из "+имяФайла);
		Возврат "";
	КонецЕсли;

	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		RouteSectionList = Новый Массив;
		RouteSectionList.Добавить(seList);
	Иначе
		RouteSectionList = seList;
	КонецЕсли;
	тзРез = Новый("ТаблицаЗначений");
	тзРез.Колонки.Добавить("Отметка");
	тзРез.Колонки.Добавить("UUID");
	тзРез.Колонки.Добавить("GUID");
	тзРез.Колонки.Добавить("ВидПродукции");
	тзРез.Колонки.Добавить("Название");
	тзРез.Колонки.Добавить("Решение");
			
	Для каждого RouteSection из RouteSectionList Цикл
		
		Попытка RList = RouteSection.appliedR13nRule; Исключение RList=""; КонецПопытки; 
		Если ТипЗнч(RList)<>Тип("СписокXDTO") Тогда 
			RuleList = Новый Массив;
			RuleList.Добавить(RList);
		Иначе
			RuleList = RList;
		КонецЕсли;
		
		Для каждого appliedR13nRule из RuleList Цикл 
			Решение = Число(appliedR13nRule.decision);
			Попытка ВидПродукции = НайтиВидПродукции(appliedR13nRule.cargoType.guid); Исключение ВидПродукции=""; КонецПопытки;		
			Попытка reqlist = appliedR13nRule.requirement; Исключение Продолжить; КонецПопытки;
		
			Если ТипЗнч(reqlist)<>Тип("СписокXDTO") Тогда 
				requirementsList = Новый Массив;
				requirementsList.Добавить(reqlist);
			Иначе
				requirementsList = reqlist;
			КонецЕсли;
		
			Для каждого requirements  из requirementsList Цикл
				Попытка cGroupList = requirements.conditionGroup;Исключение Продолжить; КонецПопытки;
				Если ТипЗнч(cGroupList)<>Тип("СписокXDTO") Тогда 
					conditionGroupList = Новый Массив;
					conditionGroupList.Добавить(cGroupList);
				Иначе
					conditionGroupList = cGroupList;
				КонецЕсли; 			
			
				Для каждого conditionGroup из conditionGroupList Цикл 
					Попытка cList = conditionGroup.condition;Исключение Продолжить; КонецПопытки;
					Если ТипЗнч(cList)<>Тип("СписокXDTO") Тогда 
						conditionList = Новый Массив;
						conditionList.Добавить(cList);
					Иначе
						conditionList = cList;
					КонецЕсли; 			
					Для каждого condition из conditionList Цикл 
						//condition = conditionGroup.condition;
						УсловияПеревозки = тзРез.Добавить();
						УсловияПеревозки.Отметка = true;
						УсловияПеревозки.ВидПродукции = ВидПродукции;
						УсловияПеревозки.Решение = Решение;
						УсловияПеревозки.Название = condition.text;
						УсловияПеревозки.UUID = condition.uuid;
						УсловияПеревозки.GUID = condition.guid;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Возврат тзРез;
	
КонецФункции

Функция ПолучитьРезультат_Регион_2(applicationID, докСсылка ) Экспорт
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	Пауза( );
	
	Сообщить("Отправляем запрос ["+докСсылка+"]" );
	Результат = Компонента.SendRequestResult( applicationID );
	
	тзУсловия = ЗагрузитьXML_ПеревозкаРазрешена_2( Компонента.LogFilename ); 
	
	УдалитьXML( Компонента.LogFilename );
	Если ЗначениеЗаполнено(тзУсловия) и (ПустоеЗначение(докСсылка)=0) Тогда
		докОбъект = докСсылка.ПолучитьОбъект();
		докОбъект.УсловияПеревозки.Очистить();
		докОбъект.УсловияПеревозки.Загрузить(тзУсловия);
		//докОбъект.ПеревозкаРазрешена = МожноВезти;
		докОбъект.Комментарий = "Условия перевозки заполнены";
		докОбъект.Записать();
		Сообщить("Условия перевозки записаны в "+докСсылка);
	КонецЕсли;	
	Возврат Результат;
КонецФункции

Функция ПроверитьВозможностьПеремещения(док) Экспорт

	//Инициализация(док.Фирма);
	
	ЗапросXML = РегионализацияМаршрута_2_ЗапросXML(док);

	метод = Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	
	УдалитьXML( Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьРезультат_Регион_2(appID,док); 
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_Регион_2(appID,док); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;
КонецФункции
// ************* Регионализация v2 окончание

//*************** Лабораторные исследования v2

Функция ВСД2_ЛабораторныеИсследования_ЗапросXML(док)    
	
	Запрос ="
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>"+ ДатаXML(док.Дата, "T00:00:00") +"</apl:issueDate>
	|        <apl:data>
	|          <merc:updateVeterinaryEventsRequest>
	|            <merc:localTransactionId>" + СокрЛП(док.Номер) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|            <merc:enterprise>
	|              <bs:guid>"+ СокрЛП(док.Партия.Производитель_Площадка.GUID) +"</bs:guid>
	|            </merc:enterprise>
	|            <vd:stockEntry>
	|              <bs:guid>"+ СокрЛП( док.Партия.GUID ) +"</bs:guid>
	|              <vd:vetEventList>
	|                <vd:laboratoryResearch>
	|                  <vd:actualDateTime>"+ ДатаXML(док.ДатаРезультата, "T00:00:00") +"</vd:actualDateTime>
	|                  <vd:operator>
	|                    <dt:name>" + СокрЛП(док.НаименованиеЛаборатории) + "</dt:name>
	|                  </vd:operator>
	|                  <vd:referencedDocument>
	|                    <vd:issueNumber>"+ СокрЛП(док.НомерАктаОтбораПроб) +"</vd:issueNumber>
	|                    <vd:issueDate>"+ ДатаXML(док.ДатаОтбораПроб) +"</vd:issueDate>
	|                    <vd:type>9</vd:type> 
	//|                    <vd:relationshipType>6</vd:relationshipType>
	|                  </vd:referencedDocument>
	|                  <vd:expertiseID>"+ СокрЛП(док.НомерЭкспертизы) +"</vd:expertiseID>
	|                  <vd:disease>
	|                    <dt:name>"+ СокрЛП(док.НаименованиеПоказателя) +"</dt:name>
	|                  </vd:disease>
	|                  <vd:method>
	|                    <dt:name>"+ СокрЛП(док.МетодИсследования) +"</dt:name>
	|                  </vd:method>
						//Допустимые значения: UNKNOWN, POSITIVE, NEGATIVE
	|                  <vd:result>"+ ПолучитьИдентификаторПеречисления(док.РезультатИсследования) +"</vd:result>
	|                  <vd:conclusion>"+ СокрЛП(док.Заключение)  +"</vd:conclusion>
	|                </vd:laboratoryResearch>
	|              </vd:vetEventList>
	|            </vd:stockEntry>
	|          </merc:updateVeterinaryEventsRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";
	
	Возврат Запрос;
КонецФункции

Функция Проверка_ВСД2_ЛабораторныеИсследования(ДокСсылка)
    Рез = 1;
	
	Если НЕ(ЗначениеЗаполнено(ДокСсылка)) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если (СокрЛП(ДокСсылка.Статус)="COMPLETED") Тогда
		Сообщить(""+ДокСсылка+" статус "+ДокСсылка.Статус+" НЕ отправляем");
		Возврат 0;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокСсылка.Партия) Тогда
	    Сообщить("Не указана исследуемая партия");
		Возврат 0;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДокСсылка.РезультатИсследования) Тогда
	    Сообщить("Нет результатов исследования");
		Возврат 0;
	КонецЕсли;

    Возврат Рез;
КонецФункции

Функция Отправить_ВСД2_ЛабораторныеИсследования( док ) Экспорт
	
	Если Проверка_ВСД2_ЛабораторныеИсследования(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;
	
	ЗапросXML = ВСД2_ЛабораторныеИсследования_ЗапросXML(док);
	
	метод = Компонента.GetMethod(); 
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	
	УдалитьXML( Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьРезультат_ВСД2(appID, док );
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД2(appID, док );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;	
КонецФункции
//*************** Лабораторные исследования v2 окончание

// **************** Инвентаризация v2

Функция ВСД2_инвентаризация_ЗапросXML(док)

	Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
  	|<SOAP-ENV:Header/>
  	|<SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СписокКонстант.Получить("param_api_key") + "</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+СписокКонстант.Получить("param_issuer_id")+"</apl:issuerId>
	|        <apl:issueDate>"+ ДатаXML(ТекущаяДата(), "T00:00:00") +"</apl:issueDate>
	|        <apl:data>
	|          <merc:resolveDiscrepancyRequest>
	|            <merc:localTransactionId>" + СокрЛП(док.Номер) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|            <merc:enterprise>
	|              <bs:guid>"+ СокрЛП(док.Владелец_Площадка.GUID) +"</bs:guid>
	|            </merc:enterprise>
	|            <merc:inventoryDate>" + ДатаXML(док.Дата, "T00:00:00") + "</merc:inventoryDate>
	|            <merc:responsible>
	|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:responsible>
	|            <merc:stockDiscrepancy id='test1'>
	|              <vd:resultingList>";
	тзПартии = док.Партии.Выгрузить();
	Для каждого СтрПартии из тзПартии Цикл
		Запрос = Запрос + "	
		|                <vd:stockEntry>";
	    Если ПустоеЗначение(СтрПартии.Партия)=0 Тогда // изменяем конкретную партию
			Запрос = Запрос + "
			|                <bs:uuid>" + СокрЛП(СтрПартии.Партия.uuid) + "</bs:uuid>";	        
		КонецЕсли;
		
		Запрос = Запрос + "
		|                 <vd:batch>
		|                    <vd:productType>"+ СтрПартии.Продукция.Тип +"</vd:productType>
		|                    <vd:product>
		|                      <bs:guid>"+ СокрЛП(СтрПартии.Продукция.GUID) +"</bs:guid>
		|                    </vd:product>
		|                    <vd:subProduct>
		|                      <bs:guid>"+ СокрЛП(СтрПартии.ВидПродукции.GUID) +"</bs:guid>
		|                    </vd:subProduct>";
		
		Запрос = Запрос + ProductItem_в_XML(СтрПартии);
		
		Запрос = Запрос +"
		|                    <vd:volume>"+ Формат(СтрПартии.Количество, "ЧРД=.; ЧГ=0") +"</vd:volume>
		|                    <vd:unit>
		|                      <bs:uuid>"+ СокрЛП(СтрПартии.ЕдиницаИзмерения.UUID) +"</bs:uuid>
		|                    </vd:unit>";
		
		Запрос = Запрос + Изготовление_СрокГодности_в_XML(СтрПартии); //Тест вместо ниже

		
	//	Запрос = Запрос +"
	//	|                    <vd:dateOfProduction>";
		
	//	Если (ПустоеЗначение(СтрПартии.ДатаИзготовления1)=0) Тогда
	//		Запрос = Запрос+ "
	//	|              <vd:firstDate>
	//	|                <dt:year>"+ДатаГод(СтрПартии.ДатаИзготовления1)+"</dt:year>
	//	|                <dt:month>"+ ДатаМесяц(СтрПартии.ДатаИзготовления1) +"</dt:month>
	//	|                <dt:day>"+ ДатаЧисло(СтрПартии.ДатаИзготовления1) +"</dt:day>
	//	|                <dt:hour>0</dt:hour>
	//	|              </vd:firstDate> ";
	//	КонецЕсли;
	//	Если ((ПустоеЗначение(СтрПартии.ДатаИзготовления2)=0) и 
	//			(СтрПартии.ДатаИзготовления2 > СтрПартии.ДатаИзготовления1)) Тогда
	//		Запрос=Запрос+"		
	//		|              <vd:secondDate>
	//		|                <dt:year>"+ ДатаГод(СтрПартии.ДатаИзготовления2) +"</dt:year>
	//		|                <dt:month>"+ ДатаМесяц(СтрПартии.ДатаИзготовления2) +"</dt:month>
	//		|                <dt:day>"+ ДатаЧисло(СтрПартии.ДатаИзготовления2) +"</dt:day>
	//		|                <dt:hour>0</dt:hour>
	//		|              </vd:secondDate> ";
	//	КонецЕсли;	
	//	Запрос=Запрос+"
	//	|            </vd:dateOfProduction>";
	  
//		Запрос = Запрос +"
//		|            <vd:expiryDate> ";
//		Если (ПустоеЗначение(СтрПартии.ДатаСрокГодности1)=0) Тогда
//			Запрос=Запрос+"
//			|              <vd:firstDate>
//			|                <dt:year>"+ ДатаГод(СтрПартии.ДатаСрокГодности1) +"</dt:year>
//			|                <dt:month>"+ ДатаМесяц(СтрПартии.ДатаСрокГодности1) +"</dt:month>
//			|                <dt:day>"+ ДатаЧисло(СтрПартии.ДатаСрокГодности1) +"</dt:day>
//			|                <dt:hour>0</dt:hour>
//			|              </vd:firstDate>";
//		КонецЕсли;
//		Если ((ПустоеЗначение(СтрПартии.ДатаСрокГодности2)=0) и 
//				(СтрПартии.ДатаСрокГодности2 > СтрПартии.ДатаСрокГодности1)) Тогда
//			Запрос=Запрос+"				
//			|              <vd:secondDate>
//			|                <dt:year>"+ ДатаГод(СтрПартии.ДатаСрокГодности2) +"</dt:year>
//			|                <dt:month>"+ ДатаМесяц(СтрПартии.ДатаСрокГодности2) +"</dt:month>
//			|                <dt:day>"+ ДатаЧисло(СтрПартии.ДатаСрокГодности2) +"</dt:day>
//			|                <dt:hour>0</dt:hour>
//			|              </vd:secondDate>";
//		КонецЕсли;
//		Запрос=Запрос+"
//		|                </vd:expiryDate>";

		Запрос=Запрос+"
//		|                    <vd:batchID>123</vd:batchID>
		|                    <vd:perishable>"+ Нашебулево(СтрПартии.Скоропортящийся)+"</vd:perishable>";
        // Добавляем Партию
		Если (ПустоеЗначение(СтрПартии.Партия) = 1) и (ПустоеЗначение(СтрПартии.Производитель_Площадка.GUID) = 0) и (ПустоеЗначение(СтрПартии.Производитель_Страна) = 0)Тогда
			Запрос=Запрос+"
			|                    <vd:origin>
			|                    <vd:country>
			|                        <bs:uuid>"+СокрЛП(СтрПартии.Производитель_Страна.uuid)+"</bs:uuid>
			|                      </vd:country>
			|                       <vd:producer>
			|                      	<dt:enterprise>
			|                      	  <bs:guid>"+ СокрЛП(СтрПартии.Производитель_Площадка.GUID) +"</bs:guid>
			|                      	</dt:enterprise>
			|                      </vd:producer>
			|                    </vd:origin>";
		КонецЕсли;
		
		Запрос=Запрос+"
		|                    <vd:lowGradeCargo>"+ НашеБулево(СтрПартии.Некачественный)+"</vd:lowGradeCargo>";
        
		//УРОВНИ УПАКОВКИ
		тзУпаковка = Док.УровниУпаковки.Выгрузить();
		тзМаркировка = Док.Маркировка.Выгрузить();
		
		Запрос=Запрос+УровниУпаковки_в_XML(СтрПартии.НомерСтроки,тзУпаковка,тзМаркировка);
		
		Запрос=Запрос+"
		|                    <vd:owner>
		|                      <bs:guid>"+ СокрЛП(док.Владелец_Площадка.GUID) +"</bs:guid>
		|                    </vd:owner>
		|                  </vd:batch>
		|                </vd:stockEntry>";
	КонецЦикла;
	Запрос = Запрос + "
	|              </vd:resultingList>
	|            </merc:stockDiscrepancy>
	|            <merc:discrepancyReport for='test1'>
//	|              <vd:issueSeries>777</vd:issueSeries>
	|              <vd:issueNumber>"+ Док.Номер +"</vd:issueNumber>
	|              <vd:issueDate>" + ДатаXML(док.Дата) + "</vd:issueDate>
	|              <vd:reason>
	|                <vd:name>"+СокрЛП(док.ПричинаРасхождения)+"</vd:name>
	|              </vd:reason>
	|              <vd:description>"+СокрЛП(док.ОписаниеНесоответствия)+"</vd:description>
	|            </merc:discrepancyReport>
	|          </merc:resolveDiscrepancyRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";
    
	Возврат Запрос;
КонецФункции

Функция Проверка_ВСД2_Инвентаризация(ДокСсылка)
	// дата изготовления и срок годности обязательны
	// при добавлении партии обязательны Страна и Производитель_Площадка
	Если НЕ(ЗначениеЗаполнено(ДокСсылка)) Тогда
		Возврат 0;
	КонецЕсли;
	Если (СокрЛП(ДокСсылка.Статус)="COMPLETED") Тогда
		Сообщить(""+ДокСсылка+" статус "+ДокСсылка.Статус+" НЕ отправляем");
		Возврат 0;
	КонецЕсли;
	
	Рез = 1;
	Если ПустоеЗначение(ДокСсылка.Владелец_ХозСубъект) = 1 Тогда
	    Сообщить("Не указан владелец ХС");
		Возврат 0;
	КонецЕсли;
	Если ПустоеЗначение(ДокСсылка.Владелец_Площадка) = 1 Тогда
	    Сообщить("Не указана Площадка владельца");
		Возврат 0;
	КонецЕсли;
	тзПартии = ДокСсылка.Партии.Выгрузить();
	Для каждого СтрПартии из тзПартии Цикл		
        Если (ПустоеЗначение(СтрПартии.Продукция)=1) или (ПустоеЗначение(СтрПартии.ВидПродукции)=1) или (ПустоеЗначение(СтрПартии.Продукция_Элемент)=1) Тогда
        	Сообщить("Не указаны Продукция, Вид Продукции или Продукция_Элемент");
			Возврат 0;
        КонецЕсли;
        
		Если (ПустоеЗначение(СтрПартии.ЕдиницаИзмерения)=1) Тогда
        	Сообщить("Не указана Единица измерения");
			Возврат 0;
        КонецЕсли;
		
        Если (ПустоеЗначение(СтрПартии.ДатаИзготовления1)=1) и (ПустоеЗначение(СтрПартии.ДатаИзготовления2)=1) Тогда
        	Сообщить("Не указана Дата изготовления");
			Возврат 0;
        КонецЕсли;
        Если (ПустоеЗначение(СтрПартии.ДатаСрокГодности1)=1) и (ПустоеЗначение(СтрПартии.ДатаСрокГодности2)=1) Тогда
        	Сообщить("Не указан срок годности");
			Возврат 0;
        КонецЕсли;
	    Если ПустоеЗначение(СтрПартии.Партия) = 1 Тогда
	        Если (ПустоеЗначение(СтрПартии.Производитель_Страна)=1) и (ПустоеЗначение(СтрПартии.Производитель_Площадка)=1) Тогда
    	    	Сообщить("Не указана Страна производителя или его Площадка");
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
    Возврат Рез;
КонецФункции

Функция Отправить_ВСД2_Инвентаризация(док) Экспорт

	//стандартное поведение функции	
	
	Если Проверка_ВСД2_инвентаризация(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
	
	СписокКонстант.Установить("Отправитель_Площадка",док.Владелец_Площадка);

	ЗапросXML = ВСД2_инвентаризация_ЗапросXML(док);
	
	метод = Компонента.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	
	УдалитьXML( Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда
	// по идее партии нужно получить	
		Результат = ПолучитьРезультат_ВСД2(appID, док);
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД2( appID, док);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	докОбъект = "";//СоздатьОбъект("Документ");
//	докОбъект.НайтиДокумент( док );
//	Если СокрЛП(докОбъект.Статус) = "COMPLETED" Тогда
//		докОбъект.Записать();
//		докОбъект.Провести();
//	КонецЕсли;
	
	Возврат appID;
	
КонецФункции

// **************** Инвентаризация v2 окончание




//================ Заполнение табличной части ============================
Функция СформироватьЗапрос(Организации = Неопределено, ПлощадкаОтправителя = Неопределено, ДатаНачала, ДатаОкончания) Экспорт
	//ЖД добавлена фильтрация Реализации по Складу отправителю (=текущая ПлощадкаОтправителя.Склад)
	// м.б. при незаполненном реквизите Склад у Площадки не фильтровать по складу ????
	Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Регистраторы",				Регистраторы);
	Запрос.УстановитьПараметр("ДатаНачала",					НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",				КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("СписокОрганизаций",			Организации);
	Попытка Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад",	ПлощадкаОтправителя.Склад); Исключение КонецПопытки;
	//Запрос.УстановитьПараметр("Сотрудник",					Сотрудник);
	//Запрос.УстановитьПараметр("ОтбиратьСобытияПоДокументу",	ЗначениеЗаполнено(Регистраторы));
	//Запрос.УстановитьПараметр("НеОтбиратьПоПодразделению",	Не ЗначениеЗаполнено(ПодразделениеОрганизации));
	//Запрос.УстановитьПараметр("НеОтбиратьПоСотруднику",		Не ЗначениеЗаполнено(Сотрудник));
	//Запрос.УстановитьПараметр("НеОтбиратьПоОрганизации",	Не ЗначениеЗаполнено(Организации));
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Док,";
	Если РеквизитГрузополучатель = 0 Тогда
		Запрос.Текст = 	Запрос.Текст + "
		|	РеализацияТоваровУслуг.Контрагент КАК Грузополучатель,";
	Иначе
		Запрос.Текст = 	Запрос.Текст + "
		|	ПОДСТРОКА(РеализацияТоваровУслуг.АдресДоставки, 1, 100) КАК Грузополучатель,";
	КонецЕсли;
	//|	ПОДСТРОКА(РеализацияТоваровУслуг.АдресДоставки, 1, 100) КАК Грузополучатель,
	Запрос.Текст = 	Запрос.Текст + "
	|	РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент КАК Контрагент,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	|	СУММА(РеализацияТоваровУслугТовары.КоличествоМест) КАК КоличествоМест,
	|	ВСД_Площадка.Ссылка КАК Площадка,
	|	ВСД_ХозСубъект.Ссылка КАК ХозСубъект,
	|	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	|	ВСД_транзакция.Ссылка КАК ВСД,
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	РеализацияТоваровУслуг.Дата КАК Дата
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВСД_транзакция КАК ВСД_транзакция
	|		ПО (ВСД_транзакция.ДокументОснование = РеализацияТоваровУслуг.Ссылка)
	|			И (ВСД_транзакция.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_Площадка КАК ВСД_Площадка";
	Если РеквизитГрузополучатель = 0 Тогда
		Запрос.Текст = 	Запрос.Текст + "
		|		ПО (РеализацияТоваровУслуг.Контрагент = ВСД_Площадка.Контрагент)
		|			И (ВСД_Площадка.ПометкаУдаления = ЛОЖЬ)";
	Иначе
		Запрос.Текст = 	Запрос.Текст + "
		|		ПО (ПОДСТРОКА(РеализацияТоваровУслуг.АдресДоставки, 1, 100) = ВСД_Площадка.Контрагент)";
	КонецЕсли;
	Запрос.Текст = 	Запрос.Текст + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
	|		ПО РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент = ВСД_ХозСубъект.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПО (РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка)
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РеализацияТоваровУслугТовары.Сумма > 0
	|	И РеализацияТоваровУслуг.Организация В ИЕРАРХИИ(&СписокОрганизаций)";
	////ЖД фильтр по Складу
	//Если ЗначениеЗаполнено(ПлощадкаОтправителя) Тогда
	//	Запрос.Текст = 	Запрос.Текст + "
	//|	И РеализацияТоваровУслуг.Склад В &ПлощадкаОтправителяСклад";
	//КонецЕсли;
	Запрос.Текст = 	Запрос.Текст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Ссылка,";
	Если РеквизитГрузополучатель = 0 Тогда
		Запрос.Текст = 	Запрос.Текст + "
			|	РеализацияТоваровУслуг.Контрагент,
	        |	РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент,";
	Иначе
		Запрос.Текст = 	Запрос.Текст + "
		|	ПОДСТРОКА(РеализацияТоваровУслуг.АдресДоставки, 1, 100),";
	КонецЕсли;
	Запрос.Текст = 	Запрос.Текст + "
	|	ВСД_Площадка.Ссылка,
	|	ВСД_ХозСубъект.Ссылка,
	|	ВСД_транзакция.Ссылка,
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер";
	Запрос.Выполнить();
		
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапрос()

Функция СформироватьЗапросПеремещения(Организации = Неопределено, ПлощадкаОтправителя, ДатаНачала, ДатаОкончания) Экспорт
	// ЖД - В документе ПеремещениеТоваров участвуют склады ХС
	// в таком случае как в 7.7 нужно добавить реквизит Склад к спр. ВСД_Площадка
	// По Складу Получателю определяем площадку
	// ХС один и тот же -или по фирме документа определять, или берем тек параметры, т.к фирма уже определена там
	// также ищем уже созданные транзакции
	
	Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Регистраторы",				Регистраторы);
	Запрос.УстановитьПараметр("ДатаНачала",					НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",				КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("СписокОрганизаций",			Организации);
	Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад",				ПлощадкаОтправителя.Склад);  

	//Запрос.УстановитьПараметр("ПодразделениеОрганизации",	ПодразделениеОрганизации);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка КАК Док,
	|	ПеремещениеТоваров.СкладПолучатель КАК Грузополучатель,
	|	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество,
	|	СУММА(ПеремещениеТоваровТовары.КоличествоМест) КАК КоличествоМест,
	|	ВСД_Площадка.Ссылка КАК Площадка,
	|	ВСД_транзакция.Ссылка КАК ВСД,
	|	ПеремещениеТоваров.Номер КАК Номер,
	|	ПеремещениеТоваров.Дата КАК Дата
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВСД_транзакция КАК ВСД_транзакция
	|		ПО (ВСД_транзакция.ДокументОснование = ПеремещениеТоваров.Ссылка)
	|			И (ВСД_транзакция.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_Площадка КАК ВСД_Площадка
	|		ПО (ПеремещениеТоваров.СкладПолучатель = ВСД_Площадка.Склад)
	|			И (ВСД_Площадка.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|		ПО (ПеремещениеТоваровТовары.Ссылка = ПеремещениеТоваров.Ссылка)
	|ГДЕ
	|	ПеремещениеТоваров.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПеремещениеТоваров.Организация В ИЕРАРХИИ(&СписокОрганизаций)
	|	И ПеремещениеТоваров.СкладОтправитель = &ПлощадкаОтправителяСклад
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваров.Ссылка,
	|	ВСД_Площадка.Ссылка,
	|	ВСД_транзакция.Ссылка,
	|	ПеремещениеТоваров.Номер,
	|	ПеремещениеТоваров.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер";
	Запрос.Выполнить();
		
	Возврат Запрос.Выполнить();
КонецФункции // СформироватьЗапрос()

// Заполняет т.ч. обработки документами
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Булево - Истина, если успешно выполнено заполнение, иначе Ложь
//
Функция Автозаполнение(Перемещения=False) Экспорт

	//Если НЕ ЗначениеЗаполнено(Организация) Тогда
	//	ОбщегоНазначенияЗК.СообщитьОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Необходимо указать организацию!"));
	//	Возврат Ложь;
	//КонецЕсли;
	//ЖД Тест Перемещения
	Если Перемещения Тогда
		РезультатЗапроса = СформироватьЗапросПеремещения(Организация, "", ДатаНачалаОтбора, ДатаОкончанияОтбора);
	Иначе
		РезультатЗапроса = СформироватьЗапрос(Организация, "", ДатаНачалаОтбора, ДатаОкончанияОтбора);
	КонецЕсли;	
	Отгрузки.Загрузить(РезультатЗапроса.Выгрузить());
	Если Перемещения Тогда
		//ЖД Вероятно это все можно в запросе сделать
		// ну а так возъмем из текущих параметров
		Для каждого СтрОтгрузки из Отгрузки Цикл
			СтрОтгрузки.ХозСубъект = Отправитель_Хозсубъект;
			СтрОтгрузки.Контрагент = Отправитель_Хозсубъект.Контрагент;
		КонецЦикла;
	КонецЕсли;
	//Очистим ТЗ Партий
	Партии.Очистить();
	
	Возврат Истина;
	
КонецФункции

Процедура ЗагрузитьПлощадкиСписком(ПоНаименованию=0)  Экспорт
	тзСвертка = Отгрузки.Выгрузить();
	тзСвертка.Свернуть("Отметка, Грузополучатель, Площадка, Контрагент, ХозСубъект",);
	
	Для Каждого стр Из тзСвертка Цикл
		Если стр.Отметка Тогда 
			Если стр.ХозСубъект = Справочники.ВСД_ХозСубъект.ПустаяСсылка() Тогда 
				стр.ХозСубъект = НайтиХозСубъект(стр.Контрагент);
			КонецЕсли;
			
			Если ПустаяСтрока(стр.ХозСубъект.GUID) Тогда 
				ХС_ПолучитьGuid(стр.ХозСубъект);
			КонецЕсли;
			Если ПоНаименованию=0 Тогда 
				Если НЕ(ПустаяСтрока(стр.ХозСубъект.GUID)) Тогда 
					ЗагрузитьПлощадки(стр.ХозСубъект);							
				КонецЕсли;
			Иначе
				Если НЕ(ПустаяСтрока(стр.ХозСубъект.GUID)) Тогда 
					НайтиПлощадкиПоНазванию(стр.ХозСубъект, СписокКонстант.Получить("Регион"), 1);						
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли
	КонецЦикла;
КонецПроцедуры

//============================== Создание ВСД ===================================
Функция ПолучитьВСДПродукцияЭлементПоНоменклатуре(ВыбНоменклатура)
//Вариант 1
	Запрос = Новый Запрос;
	Запрос = Новый Запрос;
	Запрос.Текст = "Выбрать ВСД_Соответсвия.ПродукцияЭлемент КАК ПродукцияЭлемент из РегистрСведений.ВСД_Соответсвия как ВСД_Соответсвия где ВСД_Соответсвия.Номенклатура = &ВыбНоменклатура";
    Запрос.УстановитьПараметр("ВыбНоменклатура", ВыбНоменклатура); 

    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать(); 
	ПродукцияЭлемент = Справочники.ВСД_Продукция_Элемент.ПустаяСсылка();
	Пока Выборка.Следующий() Цикл
		ПродукцияЭлемент = Выборка.ПродукцияЭлемент;
		Прервать;
    КонецЦикла; 
	Возврат ПродукцияЭлемент;
	
//Вариант 2	
	НаборЗаписей = РегистрыСведений.ВСДСоответсвие.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект1с.Установить(ВыбНоменклатура);
	НаборЗаписей.Прочитать();
	СписокЭлементов = НаборЗаписей.ВыгрузитьКолонку("ПродукцияЭлемент");
	Если СписокЭлементов.Количество()>0 Тогда
		ПродукцияЭлемент = СписокЭлементов[0].Значение;	
	Иначе
		ПродукцияЭлемент = Справочники.ВСД_Продукция_Элемент.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПродукцияЭлемент;
КонецФункции

Функция СвернутьТч(Док)
	//тзДок = Новый("Массив");
	//Док.Товары.Выгрузить(тзДок);
	
	тзРез = Новый("ТаблицаЗначений");
	тзРез.Колонки.Добавить("ВСД_Продукция_Элемент");
	тзРез.Колонки.Добавить("Количество");
	тзРез.Колонки.Добавить("КоличествоМест");
	
	//тзДок.ВыбратьСтроки();
	//Пока тзДок.ПолучитьСтроку() = 1 Цикл
	для каждого стрДок из док.Товары Цикл
		
		Если ПропускатьПустыеСвойства Тогда
			ВСДПродукцияЭлемент = ПолучитьВСДПродукцияЭлементПоНоменклатуре(стрДок.Номенклатура);
			Если ВСДПродукцияЭлемент=Справочники.ВСД_Продукция_Элемент.ПустаяСсылка() Тогда
				СообщитьИнфо("["+стрДок.Номенклатура+"] количество = "+стрДок.Количество+" не указан ВСД_Продукция_Элемент - пропущен");
				Продолжить;
			КонецЕсли;
		КонецЕсли;			
		
		СтрТЧ = тзРез.Добавить();
		СтрТЧ.ВСД_Продукция_Элемент = ВСДПродукцияЭлемент;
		СтрТЧ.Количество = стрДок.Количество;
		СтрТЧ.КоличествоМест = стрДок.КоличествоМест;
	КонецЦикла;
		
	тзРез.Свернуть("ВСД_Продукция_Элемент","Количество, КоличествоМест");
	
	Возврат тзРез;
КонецФункции


//выбираем партию, которая подходит под условия отбора: количество, свойство, площадка
Функция НайтиПервуюПартию(Продукция_Элемент, Отпр_Площадка) Экспорт
	Рез="";
	Запрос = Новый Запрос;
   	Запрос.Текст = 
	    "ВЫБРАТЬ
	    |	ВСДПартия.Ссылка
	    |ИЗ
	    |	Справочник.ВСД_Партия КАК ВСДПартия
	    |ГДЕ
	    |	ВСДПартия.Получатель_Площадка = &ВыбПлощадка
	    |	И ВСДПартия.ПометкаУдаления = ЛОЖЬ
		|	И ВСДПартия.Продукция_Элемент = &ВыбПродукция_Элемент
	    |	И ВСДПартия.Количество > 0";
 
	    Запрос.УстановитьПараметр("ВыбПлощадка", Отпр_Площадка);
		Запрос.УстановитьПараметр("ВыбПродукция_Элемент", Продукция_Элемент);
    	
	    РезультатЗапроса = Запрос.Выполнить(); 
    	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
 
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;	
	Возврат Справочники.ВСД_Партия.ПустаяСсылка();
КонецФункции 

Процедура ЗаполнитьТаблицуПартий() Экспорт
	
	//Если НЕ(ЗначениеЗаполнено(Отправитель_ХозСубъект)=1 Тогда
	//	Сообщить("Не выбран параметр Отправитель_ХозСубъект ","!");			
	//	Возврат;
	//КонецЕсли;
	//Если НЕ(ЗначениеЗаполнено(Отправитель_Площадка)=1 Тогда
	//	Сообщить("Не выбран параметр Отправитель_Площадка ","!");			
	//	Возврат;
	//КонецЕсли;
	//Если НЕ(ЗначениеЗаполнено(Перевозчик_ХозСубъект)=1 Тогда
	//	Сообщить("Не выбран параметр Перевозчик_ХозСубъект ","!");			
	//	Возврат;
	//КонецЕсли;
	//
	//Форма.Закладки.ТекущаяСтрока(2);
	//Форма.ИспользоватьСлой("Основной, Партии");
	//ЗаполнитьПартии();
	//ПриВыбореЗакладки(2,"Партии");
		
	Партии.Очистить();
	
	Для Каждого СтрОтгрузки Из Отгрузки Цикл
		Если НЕ(СтрОтгрузки.Отметка) Тогда
			Продолжить;
		КонецЕсли;
		//ЖД Контроль уже отправленного/удаленного ВСД
		Если ЗначениеЗаполнено(СтрОтгрузки.ВСД) Тогда
			Если (СтрОтгрузки.ВСД.Проведен) или (СтрОтгрузки.ВСД.ПометкаУдаления)  Тогда 
				продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Состояние("Заполнение списка партий ВСД ");
		
		тз = СвернутьТч(СтрОтгрузки.Док);
				
		Для Каждого стрТЗ из ТЗ Цикл
			стр=0;
			стр = Партии.Найти(стрТЗ.ВСД_Продукция_Элемент,"ВСД_Продукция_Элемент");
			Если стр <> Неопределено Тогда 
				стр.КоличествоСписания = стр.КоличествоСписания + стрТЗ.Количество;
				стр.КоличествоМестСписания = стр.КоличествоМестСписания + стрТЗ.КоличествоМест;
			Иначе
				НоваяСтр = Партии.Добавить();
				//НомерСтроки = Партии.Количество();
				НоваяСтр.ВСД_Продукция_Элемент = стрТЗ.ВСД_Продукция_Элемент;
				НоваяСтр.КоличествоСписания = стрТЗ.Количество;
				НоваяСтр.КоличествоМестСписания = стрТЗ.КоличествоМест;
			КонецЕсли;	
						
		КонецЦикла;
		
	КонецЦикла;
	
	////Выберем партии автоматом
	Для каждого стрПартии из Партии Цикл
		Попытка
			стрПартии.Партия = НайтиПервуюПартию(стрПартии.ВСД_Продукция_Элемент,Отправитель_Площадка);
			стрПартии.Количество = стрПартии.Партия.Количество;
			стрПартии.КоличествоМест = стрПартии.Партия.КоличествоМест;
		Исключение
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры


Процедура СоздатьВСД() Экспорт
	
	Если Партии.Количество()=0 Тогда
		Сообщить("Не заполнена таблица партий.");
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрОтгрузки Из Отгрузки Цикл
		Если НЕ(СтрОтгрузки.Отметка) Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(СтрОтгрузки.ВСД=Документы.ВСД_транзакция.ПустаяСсылка()) Тогда       
			//Если (СокрЛП(СписокДокументов.ВСД.Статус)= "COMPLETED") Тогда  
			//	Сообщить("["+СписокДокументов.Док+"] партия ["+Партия+"] отправлен "+СписокДокументов.ВСД,"!");
			//	Продолжить;
			//КонецЕсли;
			Если СтрОтгрузки.ВСД.Проведен Тогда
				СообщитьОшибку("Для "+СтрОтгрузки.Док+" уже отправлен "+СтрОтгрузки.ВСД+", Статус:"+СтрОтгрузки.ВСД.Статус);
				Продолжить;
			КонецЕсли;
			Если (ПустаяСтрока(СтрОтгрузки.ВСД.Статус) = 1) Тогда 
				СообщитьОшибку("Для "+СтрОтгрузки.Док+" ВСД уже создан, но не отправлен");
				Продолжить;
			КонецЕсли;		
		КонецЕсли;		
		
		//ЖД контроль
		Если НЕ(ЗначениеЗаполнено(СтрОтгрузки.Площадка)) или НЕ(ЗначениеЗаполнено(СтрОтгрузки.ХозСубъект)) Тогда
			СообщитьОшибку("Для "+СтрОтгрузки.Док+" неизвестен ХС или Площадка получателя ");
			Продолжить;
		КонецЕсли;
		
		Состояние("Заполнение списка партий ВСД ");
				
		ХС = СтрОтгрузки.ХозСубъект;
		Площадка = СтрОтгрузки.Площадка;
					
		ДокВСД = Документы.ВСД_транзакция.СоздатьДокумент();
		ДокВСД.ДокументОснование = СтрОтгрузки.Док;			
		ДокВСД.Дата = ДокВСД.ДокументОснование.Дата;			
		ДокВСД.Отправитель_ХозСубъект = Отправитель_ХозСубъект;
		ДокВСД.Отправитель_Площадка = Отправитель_Площадка;			
		ДокВСД.Получатель_ХозСубъект = ХС;		
		ДокВСД.Получатель_Площадка = Площадка;					
		ДокВСД.Перевозчик_ХозСубъект = Перевозчик_ХозСубъект;
		
		//ТТН = ДокВСД.ДокументОснование.Маршрут;		
		//ТТН = СписокДокументов.Док.НомерМаршрута;	
					
		ДокВСД.ТтнСерия = ""; //ТТН.Серия;
		ДокВСД.ТтнНомер = СтрОтгрузки.Док.Номер;
		ДокВСД.ТтнДата = СтрОтгрузки.Док.Дата;
		//ДокВСД.номерАвто = "номер авто";//ТТН.Авто.НомернойЗнак;
		//Если НЕ(ЗначениеЗаполнено(ДокВСД.номерАвто)=1 Тогда
		Попытка ДокВСД.номерАвто = ВСД.ПолучитьНомерАвто(СтрОтгрузки.Док.Сделка); Исключение ДокВСД.номерАвто = "не используется"; КонецПопытки;
		//КонецЕсли;
		
		//Попытка
		//	ДокВСД.Автор = глПользователь;
		//Исключение
		//КонецПопытки;

		ДокВСД.ФормаВСД = 1;			
		ДокВСД.Экспертиза 		= ВСД_Экспертиза;
		ДокВСД.Местность 		= ВСД_Местность;
		ДокВСД.ОсобыеОтметки 	= ВСД_ОсобыеОтметки;
		ДокВСД.cargoExpertized  = истина;
		ДокВСД.cargoInspected  	= истина;			
		
		тз = СвернутьТч(СтрОтгрузки.Док);
			
		Для Каждого стрТЗ из ТЗ Цикл
			
			стрПартии = Партии.Найти(стрТЗ.ВСД_Продукция_Элемент,"ВСД_Продукция_Элемент");
			Если стрПартии <> Неопределено Тогда 
				Партия = стрПартии.Партия;
				//ЖД Контроль
				Если Партия = Справочники.ВСД_Партия.ПустаяСсылка() Тогда
					Сообщить("Не найдена партия для свойства "+стрТЗ.ВСД_Продукция_Элемент+"
					|документ "+ДокВСД.ДокументОснование+" пропущен");
					Продолжить;
				КонецЕсли;
			Иначе
				Сообщить("Не найдена партия для свойства "+стрТЗ.ВСД_Продукция_Элемент+"
				|документ "+ДокВСД.ДокументОснование+" пропущен");
				Продолжить;
			КонецЕсли;	
			СтрТовары = ДокВСД.Товары.Добавить();
			СтрТовары.Партия 			= Партия;
			СтрТовары.Количество 		= стрТЗ.Количество;
			СтрТовары.КоличествоМест 	= стрТЗ.КоличествоМест;			
			СтрТовары.ЕдиницаИзмерения 	= СтрТовары.Партия.ЕдиницаИзмерения;
			СтрТовары.ФормаУпаковки 	= СтрТовары.Партия.ФормаУпаковки;
			//СтрТовары.Продукция 		= СтрТовары.Партия.Продукция;
			//СтрТовары.ВидПродукции 		= СтрТовары.Партия.ВидПродукции;

			//СтрТовары.Продукция_Элемент 	= стрПартии.ВСД_Продукция_Элемент;
			//СтрТовары.НаименованиеПродукции = стрПартии.ВСД_Продукция_Элемент.Наименование;

			ДокВСД.ТермическоеСостояние 	= стрПартии.ВСД_Продукция_Элемент.ТермическиеУсловияПеревозки;
			
		КонецЦикла;
		//ЖД Контроль
		Если ДокВСД.Товары.Количество() = 0 Тогда
			//Нечего сохранять пустой документ
			Продолжить;	
		КонецЕсли;
		
		ДокВСД.Записать();
		
		СтрОтгрузки.ВСД = ДокВСД.Ссылка;		
		Сообщить("["+СтрОтгрузки.Грузополучатель+"] создан документ "+СтрОтгрузки.ВСД);		

	КонецЦикла;								

	//РаскраситьСписокДокументов();		
	
КонецПроцедуры

Процедура ОтправитьСписокВСД() Экспорт
		
	Состояние("Меркурий: отправка ВСД исходящие");
	Сообщить("Начало отправки документов");
	
	Для каждого СтрОтгрузка Из Отгрузки Цикл
		_ВСД = СтрОтгрузка.ВСД;
		
		//ЖД  - контроль, +еще не проверяется Отметка - отправляется все !!!
		Если НЕ(ЗначениеЗаполнено(_ВСД)) Тогда 		
			Продолжить;    
		КонецЕсли;
		//Если СокрЛП(ВСД.Статус)="REJECTED" Тогда 
		//	Продолжить;
		//КонецЕсли;
		
		//ЖД - Если руками править документ и нажать ОК - он проведется и соотв не отправится
		//Передумать контроль
		Если _ВСД.Проведен Тогда 
			продолжить;
		КонецЕсли;
		Если _ВСД.ПометкаУдаления Тогда 
			Продолжить;
		КонецЕсли;
		Если ПустаяСтрока(_ВСД.applicationID)=0 Тогда 
			Если Вопрос("Документ ["+_ВСД+"] статус=["+СокрЛП(_ВСД.Статус)+"] уже был отправлен, отправить ПОВТОРНО?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Нет Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;		
		
		//tt1=_GetPerformanceCounter();
		Сообщить(""+_ВСД+" "+_ВСД.Статус);
				
		Отправить_ВСД_транзакция( _ВСД );

	КонецЦикла;
	
	Сообщить("Отправка документов завершена");
КонецПроцедуры

//=================== ИНИЦИАЛИЗАЦИЯ ===================================================

Функция ЗагрузитьПараметры(_Организация="") Экспорт
	Если НЕ(ЗначениеЗаполнено(_Организация)) Тогда
		_Организация   = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		Если _Организация.Пустая() Тогда
			Сообщить("Не определена Основная Организация пользователя", СтатусСообщения.ОченьВажное);
		КонецЕсли;		
	КонецЕсли;

	//ИмяФайла = ИмяФайлаНастроек();
	//СписокКонстант=Новый("Соответствие");
	//
	//ФайлНастроек = Новый Файл(ИмяФайла);
	//Если НЕ(ФайлНастроек.Существует()) Тогда
	//	Сообщить("Файл с константами ["+ИмяФайла+"] не найден");
	//Иначе
	//	Сообщить("Параметры загружены из файла ["+ИмяФайла+"] ");
	//	СписокКонстант = ЗначениеИзФайла(ИмяФайла);
	//КонецЕсли;
	//
	//КлючОбъекта  = "ВСД";
	//КлючНастроек = "НастройкиВСД";
	//ВладелецНастроек = ИмяПользователя();
	//// Для восстановления настроек необходимо воспользоваться функцией Загрузить
	//СтруктураНастроек = Неопределено;
	//Попытка
	//	СписокКонстант = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта,КлючНастроек,,ВладелецНастроек);
	//	// если настроек нет, то будет возвращено значение "Неопределено"
	//Исключение
	//	Сообщить("Нет прав на восстановление настроек.");
	//КонецПопытки;

	//Если СписокКонстант = Неопределено Тогда
	//	Сообщить("Не удалось загрузить настройки!");
	//КонецЕсли;	
	
	СписокКонстант = ВСД.ЗагрузитьПараметры( _Организация );
		
	param_username 		= СписокКонстант.Получить("param_username"); ;  // для базовой авторизации
	param_password 		= СписокКонстант.Получить("param_password");
	param_issuer_id		= СписокКонстант.Получить("param_issuer_id"); // идентификатор хозяйствующего субъекта в реестре РСХН.
	param_service_id 	= СписокКонстант.Получить("param_service_id") ;
	param_api_key 		= СписокКонстант.Получить("param_api_key") ;

	param_intiator_login 	= СписокКонстант.Получить("param_intiator_login"); // ! логин ветврача или др. пользователя в Меркурии
	param_vetdoctor_login = СписокКонстант.Получить("param_vetdoctor_login");
	param_vetdoctor_fio 	= СписокКонстант.Получить("param_vetdoctor_fio");
	param_vetdoctor_post 	= СписокКонстант.Получить("param_vetdoctor_post");
	
	Отправитель_ХозСубъект = СписокКонстант.Получить("Отправитель_ХозСубъект");	
	Отправитель_Площадка 	= СписокКонстант.Получить("Отправитель_Площадка");
	Перевозчик_ХозСубъект = СписокКонстант.Получить("Перевозчик_ХозСубъект");
	
	Страна 				= СписокКонстант.Получить("Страна");
	Регион 				= СписокКонстант.Получить("Регион");
	Город 				= СписокКонстант.Получить("Город");
	
	ВСД_Экспертиза 		= СписокКонстант.Получить("ВСД_Экспертиза");	
	Если НЕ(ЗначениеЗаполнено(ВСД_Экспертиза)) Тогда		
		ВСД_Экспертиза 	= "Произ.лабор ";
	КонецЕсли;
	
	ВСД_Местность 		= СписокКонстант.Получить("ВСД_Местность");
	Если НЕ(ЗначениеЗаполнено(ВСД_Местность))  Тогда 
		ВСД_Местность 	= "местность благополучная по остро инфекционным заболеваниям с\х животных и птиц";
	КонецЕсли;

	ВСД_ОсобыеОтметки 	= СписокКонстант.Получить("ВСД_ОсобыеОтметки");
		
	Смещение			= СписокКонстант.Получить("Смещение");
	
	РеквизитГрузополучатель 	= СписокКонстант.Получить("РеквизитГрузополучатель");
	ПропускатьПустыеСвойства 	= СписокКонстант.Получить("ПропускатьПустыеСвойства");
	
	//	//КонтекстФормы.КаталогЛогов = КаталогИБ()+"logs\";
	КаталогЛогов = СписокКонстант.Получить("КаталогЛогов");
	//Если НЕ(ЗначениеЗаполнено(КонтекстФормы.КаталогЛогов )=1 Тогда 
	//	//КаталогЛогов = КаталогИБ()+"logs\";
	//КонецЕсли;
	//	//Если ФС.СуществуетФайл(КонтекстФормы.КаталогЛогов)=0 Тогда 
	//	//	ФС.СоздатьКаталог(КонтекстФормы.КаталогЛогов);
	//	//КонецЕсли;
	//	
	ПаузаСек 				= СписокКонстант.Получить("ПаузаСек");
	Если НЕ(ЗначениеЗаполнено(ПаузаСек)) Тогда
		ПаузаСек=10;
	КонецЕсли;
	ОтладкаЗапросовXML = СписокКонстант.Получить("ОтладкаЗапросовXML");
	
	ТестовыйРежим = СписокКонстант.Получить("ТестовыйРежим");
	ПолноеИмяФайлаОбработки = СписокКонстант.Получить("ПолноеИмяФайлаОбработки");
	ВыводитьПодробнуюИнформацию = СписокКонстант.Получить("ВыводитьПодробнуюИнформацию");
	АвтоЗаписьВСДСоответствия = СписокКонстант.Получить("АвтоЗаписьВСДСоответствия");
КонецФункции

//Функция ВыборВерсии() Экспорт
//		
//	Возврат 1;
//КонецФункции // ВыборВерсии

Процедура Инициализация( ) Экспорт
	ЗагрузитьПараметры(Организация);

	Если ТестовыйРежим Тогда 	
		// ТЕСТ
		ИмяDLL = "SoapDLL_test";
		//Форма.Заголовок("Меркурий - ТЕСТ");		
	Иначе
		// РАБОЧАЯ		
		ИмяDLL = "SoapDLL_work";
		//Форма.Заголовок("Меркурий - РАБОЧАЯ [!!!]");
	КонецЕсли;

	Попытка
		ПодключитьВнешнююКомпоненту("AddIn."+ИмяDLL);			
		Компонента = Новый("AddIn."+ИмяDLL); 		
	Исключение		
		Сообщить("Библиотека не зарегистрирована");
		Сообщить(ОписаниеОшибки());
		Предупреждение("Библиотека не зарегистрирована
			|"+ОписаниеОшибки());
		Возврат ;
	КонецПопытки;	
	
	Если НЕ(ЗначениеЗаполнено(СписокКонстант.Получить("КаталогЛогов"))) Тогда 
		Сообщить("Внимание: каталог log файлов не определен");
	КонецЕсли;
	 //ЖД на компе зареглена тестовая компонента
	 //Первый запуск будет невозможен, т.к. ТестовыйРежим = false
	Попытка
		Опции = Компонента.GetOptions();
	Исключение
		Предупреждение("Библиотека "+ИмяDLL+" не зарегистрирована
			|"+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Опции.USERNAME 			= param_username;
    Опции.PASSWORD 			= param_password;
    Опции.ISSUER_ID 		= param_issuer_id;
    Опции.SERVICE_ID 		= param_service_id;
    Опции.API_KEY 			= param_api_key;
    Опции.INITIATOR_LOGIN 	= param_intiator_login;
    Опции.VETDOCTOR_LOGIN 	= param_vetdoctor_login;
	Опции.LogsDir 			= КаталогЛогов;
	Опции.VETDOCTOR_FIO 	= param_vetdoctor_fio;
	Опции.VETDOCTOR_POST 	= param_vetdoctor_post;
	Опции.DEBUG 			= ОтладкаЗапросовXML;
	
	Компонента.Init( Опции );
		
	ТермическиеУсловияПеревозки = Новый("СписокЗначений");
	ТермическиеУсловияПеревозки.Добавить("1", "FROZEN");
	ТермическиеУсловияПеревозки.Добавить("2", "CHILLED");
	ТермическиеУсловияПеревозки.Добавить("3", "COOLED");
	ТермическиеУсловияПеревозки.Добавить("4", "VENTILATED");
	// напрямую как в 7.7 не найти по представлению
	ТермическиеУсловияПеревозки2 = Новый("СписокЗначений");
	ТермическиеУсловияПеревозки2.Добавить("FROZEN","1");
	ТермическиеУсловияПеревозки2.Добавить("CHILLED","2");
	ТермическиеУсловияПеревозки2.Добавить("COOLED","3");
	ТермическиеУсловияПеревозки2.Добавить("VENTILATED","4");
	
	//ИнициализацияСправочников();
	
КонецПроцедуры

Процедура ПечатьРеестра(НаПринтер) Экспорт
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("Реестр");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	//ОбластьМакета.Параметры.НомерДок = СсылкаНаОбъект.Номер;
	//ОбластьМакета.Параметры.ДатаДок = Формат(СсылкаНаОбъект.Дата,"ДЛФ=Д");
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	Ном=0;
	Для Каждого стр из Отгрузки Цикл				

		ном=ном+1;
		ОбластьМакета.Параметры.ном = ном;
		ОбластьМакета.Параметры.Грузополучатель = стр.Грузополучатель;
		ОбластьМакета.Параметры.ВСД = стр.ВСД;
		ОбластьМакета.Параметры.док = стр.Док;
		ОбластьМакета.Параметры.Количество = стр.Количество;
		ОбластьМакета.Параметры.Контрагент = стр.Контрагент;
		ОбластьМакета.Параметры.ИНН = стр.Контрагент.ИНН;
		ОбластьМакета.Параметры.ХозСубъект = стр.ХозСубъект;
		ОбластьМакета.Параметры.Площадка = стр.Площадка;
		
		СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(стр.Грузополучатель,  ТекущаяДата());
		//ОбластьМакета.Параметры.Адрес = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ФактическийАдрес");
		ОбластьМакета.Параметры.Адрес = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ФактическийАдрес");
		
		
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "Удостоверение качества";
	Если НаПринтер Тогда  //ЖД
		ТабДокумент.Напечатать();
	Иначе
		ТабДокумент.Показать();
	КонецЕсли;
КонецПроцедуры

Процедура ПечатьСокрВСД(НаПринтер) Экспорт
	КолвоЭкз = 1;
	//НаПринтер = False;
	
	Объект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();	
	ДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Объект.Ссылка, Объект.ПолучитьСтруктуруПечатныхФорм(), , );
	
	//ОбъектДок = Стр.Док.ПолучитьОбъект();
//	Попытка
//		СтруктураВнутреннихПечатныхФорм = Объект.ПолучитьСтруктуруПечатныхФорм();
//	Исключение
//		СтруктураВнутреннихПечатныхФорм = Новый Структура;
//	КонецПопытки;
	
	
	Для Каждого стр из Отгрузки Цикл				
		Если НЕ(ЗначениеЗаполнено(стр.ВСД)) или НЕ(стр.Отметка) Тогда
			Продолжить;
		КонецЕсли;
		СсылкаДок = Стр.док;

		ИскомоеИмя = "ВСД";//ЭлементыФормы.СписокМакетов.ТекущаяСтрока.Значение;
		
		СтрМакета = ДеревоМакетов.Строки.Найти(ИскомоеИмя,"Текст");//"Имя");
		Если СтрМакета = Неопределено Тогда
			ТекстСообщения = "Не найдена внешняя печатная форма ВСД !!!
			| Подключите обработку: Сервис-Дополнительные внешние отчеты и обработки 
			| - Печатные формы, Добавить - выберите файл Сокращенная форма ВСД.epf 
			| укажите имя обработки - ВСД";
			Сообщить(ТекстСообщения,СтатусСообщения.Важное);
			Прервать;
		КонецЕсли;
		Расшифровка = СтрМакета.Расшифровка;
			
		Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
			ПечДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(СсылкаДок, Расшифровка);
			УниверсальныеМеханизмы.НапечататьДокумент(ПечДокумент, КолвоЭкз, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(СсылкаДок), );
		    Сообщить("Печать внешней формы: " + СсылкаДок);
		Иначе
			Объект.Печать(ИскомоеИмя, КолвоЭкз, НаПринтер);
			Сообщить("Печать внутренней формы: " + СсылкаДок);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////===============================================================================
НП =  Новый НастройкаПериода;
