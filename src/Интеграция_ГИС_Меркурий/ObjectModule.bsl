// www.KB99.pro
// zhukov@kb99.pro адаптация для Управляемого приложения
// Версия для тестирования 08/08/2018 
// Общий модуль для Обычного и Управляемого Приложений
// Менять Основную форму при поставке (УФ или Обычная)
// Разобраться с СтрРазделить() - > Проверить самописаный аналог СтрРазделить82() на соответствие
//Для УФ цвета в Условном Оформлении брать не из Стилей !!! иначе слетают.

Перем КомпонентаНаСервере Экспорт;
Перем СписокКонстант Экспорт;
Перем ИмяDLL Экспорт; // пока не сохраняю в хранилище   - для формы 82 оставил

Перем ТермическиеУсловияПеревозки Экспорт;
Перем ТермическиеУсловияПеревозки2 Экспорт; //Временный вариант - разобраться


Перем МодульПереопределения Экспорт; //Подключаемая обработка с переопределяемыми функциями


//ТЕСТЫ   - попытка вывода индикатора при выполнении
// Вилы - фоновые задания можно стартовать изи Общего модуля только, напр ВСД
//Но как оттуда вызвать ИнициализацияХС_ЗагрузитьЦелиТЕСТ() ???
Функция ИнициализацияХС_ЗагрузитьЦелиТЕСТ( ) Экспорт
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	//***********Сообщения
	МенеджСВ = Новый МенеджерСистемыВзаимодействия; 
	//создаём обсуждение, в которое будем сообщать о ходе выполнения 
	Обсуждение = МенеджСВ.СоздатьОбсуждение(); 
	Обсуждение.Заголовок = "Служебное"; 
	Обсуждение.Участники.Добавить(МенеджСВ.ИдентификаторТекущегоПользователя()); 
	Обсуждение.Записать();
	//*********************
	
	ЗапросXML = ИнициализацияХС_ЗагрузитьЦели_ЗапросXML();     // т.к. Ф-ция в Модуле объекта
	метод = КомпонентаНаСервере.GetMethod();
    метод.Service = "platform/services/DictionaryService";
    метод.Action = "GetPurposeList";		
	Сообщить83("Отправляем запрос");
	appID = КомпонентаНаСервере.SendRequestSoap(метод, ЗапросXML);
	//ФОтвета = КомпонентаНаСервере.LogFilename;
	Сообщить83("Загрузка XML-файла: " + КомпонентаНаСервере.LogFilename); 
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Попытка
		ПроцентВыполнения = 0;
		
		List = xdto.Body.getPurposeListResponse.purposeList.purpose;
	    Для каждого item из List Цикл
			_uuid = item.uuid;
			guid = item.guid;
			name = item.name;
			Запрос = Новый Запрос("ВЫБРАТЬ
			                     |	ВСД_Цель.Ссылка
			                     |ИЗ
			                     |	Справочник.ВСД_Цель КАК ВСД_Цель
			                     |ГДЕ
			                     |	ВСД_Цель.GUID = &GUID");
			Запрос.УстановитьПараметр("GUID", guid );
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда 
				Ответ = Результат.Ссылка;
				Спр = Результат.Ссылка.ПолучитьОбъект();
				Сообщить("ВСД_Цель ["+name+"] GUID ["+guid+"] изменена");
			Иначе
				Сообщить83("ВСД_Цель ["+name+"] GUID ["+guid+"] добавлена");
				//создать 
				Спр = Справочники.ВСД_Цель.СоздатьЭлемент();
			КонецЕсли;		
			
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = _UUID;
			Спр.Записать();
			Ответ = Спр.Ссылка;			
		    Сообщить83("Записан ВСД_Цель ["+name+"] ");
			
			
			// *** сообщения
			ПроцентВыполнения = ПроцентВыполнения + 1;
			Сообщ = МенеджСВ.СоздатьСообщение(Обсуждение.Идентификатор); 
			УстановитьПривилегированныйРежим(Истина); 
			Сообщ.Автор = МенеджСВ.ИдентификаторТекущегоПользователя(); 
			Сообщ.Дата = ТекущаяДата(); 
			Сообщ.Текст = "Выполнение: " + Строка(ПроцентВыполнения) + "%"; 
			Попытка Сообщ.Записать(); Исключение КонецПопытки; 
			УстановитьПривилегированныйРежим(Ложь);
			// **** Сообщения
			
			
	    КонецЦикла;
	Исключение
		Сообщить83("Ошибка при получении ВСД_Цель");
		Сообщить83(ОписаниеОшибки());
		Попытка УдалитьФайлы(КомпонентаНаСервере.LogFilename);Исключение КонецПопытки;
		Возврат False;
	КонецПопытки;
	//Уничтожим временный Файл
	Попытка УдалитьФайлы(КомпонентаНаСервере.LogFilename);Исключение КонецПопытки;
	Сообщить83("Загрузка классификатора Цели завершена");
	Возврат True;

КонецФункции

Процедура ПутьИИмяИзПолного(ПутьИИмя,Путь="",Имя="")
	//mista
	Путь = "";
	Имя  = "";
	ПозСлэш = Найти(ПутьИИмя,"\");
	Пока ПозСлэш > 0 Цикл
    	Путь = Путь+Сред(ПутьИИмя,1,ПозСлэш);
	    ПутьИИмя = Сред(ПутьИИмя,ПозСлэш+1);
    	ПозСлэш = Найти(ПутьИИмя,"\");
	КонецЦикла;
	Имя = ПутьИИмя;
	КаталогОбработок = Путь;
	ИмяОбработкиИнтеграции = Имя;
	//Сообщить(Путь);
	//Сообщить(Имя);	
КонецПроцедуры

Функция ПодключитьМодульПереопределения() Экспорт
	Если типЗнч(МодульПереопределения) = Тип("Булево") Тогда
		//Модуль не удалось загрузить - нечего пытаться беск число раз - это замедляет время выполнения кода
		Возврат Неопределено;	
	КонецЕсли;
	
	Если МодульПереопределения <> Неопределено тогда
		Возврат МодульПереопределения;
	КонецЕсли;
	
     АдресФайла= СписокКонстант.Получить("ПолноеИмяФайлаОбработки");
	 Если НЕ ЗначениеЗаполнено(АдресФайла) Тогда
         Сообщить("Отладка -> Параметры не заполнены!");
         Возврат Неопределено;
	 Иначе
		Попытка
			 Путь="";
			 ПутьИИмяИзПолного(АдресФайла,Путь);
			 МодульПереопределения = ВнешниеОбработки.Создать(Путь+"Меркурий_Переопределения.epf",ложь);
        	 Возврат МодульПереопределения;
		Исключение
			Сообщить("Отладка -> не удалось подключить переопределения!");
			Сообщить(ОписаниеОшибки());
			МодульПереопределения = Ложь;
		    Возврат Неопределено;
		КонецПопытки
	КонецЕсли;
КонецФункции


Функция ФункцияПереопределена(ИмяФункции)
	обработка = ПодключитьМодульПереопределения();
	Если обработка <> Неопределено Тогда
		Если Обработка.НайтиПереопределяемуюФункцию(ИмяФункции) Тогда
			Возврат обработка;	
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции
//**ТЕСТЫ оконч

Функция ПолучитьИНН(ВыбКлиент) экспорт
	//Переделать в Использование Сведений о Контрагенте
	Попытка		
		ИННКПП = ВыбКлиент.ИНН;
	Исключение
		ИННКПП = "";
	КонецПопытки;
	Возврат СокрЛП(ИННКПП);
КонецФункции
// Использование модулей конфигурации
//Пример
//Функция СведенияОбАдресе(Адрес, ДополнительныеПараметры = Неопределено) Экспорт
//	Если Метаданные.ОбщиеМодули.Найти("РаботаСАдресами") <> Неопределено Тогда
//		МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
//		Возврат МодульРаботаСАдресами.СведенияОбАдресе(Адрес, ДополнительныеПараметры);
//	КонецЕсли;
// БП 3.0
// 		СведенияОПлательщике      = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Плательщик,      СведенияОДокументе.ДатаДляПолученияСведений);
//		СписокПлательщик = "НаименованиеДляПечатныхФорм,ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
//		ПараметрыЗаполнения = Новый Структура;
//		ПараметрыЗаполнения.Вставить("ПредставлениеПлательщика", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПлательщике, СписокПлательщик));

// Возвращает серверный модуль менеджера по имени объекта.
//из типовой БП3   - получение нужного модуля конфы
Функция СтрРазделить82(Имя,знакДелителя)
	Рез = Новый СписокЗначений;
	Рез.Вставить("имя",имя);
	Возврат Рез;	
КонецФункции

Функция СерверныйМодульМенеджера(Имя)
	ОбъектНайден = Ложь;
	
	ЧастиИмени = СтрРазделить82(Имя, ".");
	Если ЧастиИмени.Количество() = 2 Тогда
		
		ИмяВида = ВРег(ЧастиИмени[0]);
		ИмяОбъекта = ЧастиИмени[1];
		
		Если ИмяВида = ВРег("Константы") Тогда
			Если Метаданные.Константы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыСведений") Тогда
			Если Метаданные.РегистрыСведений.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыНакопления") Тогда
			Если Метаданные.РегистрыНакопления.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыБухгалтерии") Тогда
			Если Метаданные.РегистрыБухгалтерии.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыРасчета") Тогда
			Если Метаданные.РегистрыРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Справочники") Тогда
			Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Документы") Тогда
			Если Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Отчеты") Тогда
			Если Метаданные.Отчеты.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Обработки") Тогда
			Если Метаданные.Обработки.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("БизнесПроцессы") Тогда
			Если Метаданные.БизнесПроцессы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ЖурналыДокументов") Тогда
			Если Метаданные.ЖурналыДокументов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Задачи") Тогда
			Если Метаданные.Задачи.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыСчетов") Тогда
			Если Метаданные.ПланыСчетов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыОбмена") Тогда
			Если Метаданные.ПланыОбмена.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовХарактеристик") Тогда
			Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовРасчета") Тогда
			Если Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОбъектНайден Тогда
		ВызватьИсключение("ОШИБКА ПОЛУЧЕНИЯ МОДУЛЯ");
//		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			НСтр("ru = 'Объект метаданных ""%1"" не найден,
//			|либо для него не поддерживается получение модуля менеджера.'"), Имя);
	КонецЕсли;
	
	Модуль = Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
	
	Возврат Модуль;
КонецФункции

Функция ОбщийМодуль(Имя) Экспорт
	Попытка	
		Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
			Модуль = Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
		ИначеЕсли СтрЧислоВхождений(Имя, ".") = 1 Тогда
			Возврат СерверныйМодульМенеджера(Имя);
		Иначе
			Модуль = Неопределено;
		КонецЕсли;
	
		Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
			ВызватьИсключение("ОШИБКА ПОЛУЧЕНИЯ МОДУЛЯ");//ПодставитьПараметрыВСтроку(НСтр("ru = 'Общий модуль ""%1"" не найден.'"), Имя);
		КонецЕсли;
	Исключение
		Сообщить("Ошибка получения модуля Типовой конфигурации "+Имя);
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Модуль;
	
КонецФункции

Функция ПолучитьОрганизациюПоУмолчанию() Экспорт
Попытка	
	Если Метаданные.ОбщиеМодули.Найти("БухгалтерскийУчетПереопределяемый") <> Неопределено Тогда
		//БП 3.0
		МодульТиповойКонфы = ОбщийМодуль("БухгалтерскийУчетПереопределяемый");
		Возврат МодульТиповойКонфы.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ИначеЕсли Метаданные.ОбщиеМодули.Найти("УправлениеПользователями") <> Неопределено Тогда
		//УПП
		МодульТиповойКонфы = ОбщийМодуль("УправлениеПользователями");
		//МодульТиповойКонфы2 = ОбщийМодуль("ГлобальныйМодуль");
		ТекПользователь = ПараметрыСеанса.ТекущийПользователь;//МодульТиповойКонфы2.глЗначениеПеременной("глТекущийПользователь");// ИмяПользователя();
		Возврат МодульТиповойКонфы.ПолучитьЗначениеПоУмолчанию(ТекПользователь,"ОсновнаяОрганизация");
	Иначе
		Сообщить("Для данной конфигурации 1С не удалось получить значение Организации по умолчанию");
		Сообщить("Обратитесь в ТП КБ99");
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
Исключение
	Сообщить("Для данной конфигурации 1С не удалось получить значение Организации по умолчанию");
	Сообщить("Обратитесь в ТП КБ99");
	Сообщить(ОписаниеОшибки());
	Возврат Справочники.Организации.ПустаяСсылка();
КонецПопытки
//БП 3	Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
//УПП         Организация   =  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяОрганизация");
КонецФункции

Функция ПолучитьНомерДокБезПрефикса(ВыбДок)
	Если НЕ(ЗначениеЗаполнено(ВыбДок)) тогда
		Возврат "";	
	КонецЕсли;
	//БП 3.
	Если Метаданные.ОбщиеМодули.Найти("ПрефиксацияОбъектовКлиентСервер") <> Неопределено Тогда
		МодульРабота1 = ОбщийМодуль("ПрефиксацияОбъектовКлиентСервер");
		Возврат МодульРабота1.НомерНаПечать(ВыбДок.Номер, Истина, Ложь);
	ИначеЕсли Метаданные.ОбщиеМодули.Найти("ОбщегоНазначения") <> Неопределено Тогда
		МодульРабота1 = ОбщийМодуль("ОбщегоНазначения");
		Возврат МодульРабота1.ПолучитьНомерНаПечать(ВыбДок);//НомерНаПечать(ВыбДок);
	Иначе
		Сообщить("Для данной конфигурации 1С не удалось ПолучитьНомерДокБезПрефикса");
		Сообщить("Обратитесь в ТП КБ99");
		Возврат "ошибка";
	КонецЕсли;

//	Возврат ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыбДок.Номер, Истина, Ложь);
	// УПП Воврат ОбщегоНазначения.ПолучитьНомерНаПечать(ВыбДок);
КонецФункции

Функция ПолучитьАдрес(СведенияОПлательщике,ТипАдреса) экспорт
	Если Метаданные.ОбщиеМодули.Найти("ФормированиеПечатныхФорм") <> Неопределено Тогда
		МодульРабота1 = ОбщийМодуль("ФормированиеПечатныхФорм");
		Адрес =  МодульРабота1.ОписаниеОрганизации(СведенияОПлательщике, ТипАдреса);
	ИначеЕсли Метаданные.ОбщиеМодули.Найти("ОбщегоНазначенияБПВызовСервера") <> Неопределено Тогда
		МодульРабота1 = ОбщийМодуль("ОбщегоНазначенияБПВызовСервера");
		Адрес = МодульРабота1.ОписаниеОрганизации(СведенияОПлательщике, ТипАдреса);
	Иначе
		Сообщить("Для данной конфигурации 1С не удалось ПолучитьАдрес");
		Сообщить("Обратитесь в ТП КБ99");
		Адрес =  "ошибка";
	КонецЕсли;
	
	
	Попытка		
		//Адрес = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПлательщике, "ЮридическийАдрес");

		//Адрес = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПлательщике, ТипАдреса);
	Исключение
//		Сообщить("В конфигурации нет ф-ции ФормированиеПечатныхФорм.ОписаниеОрганизации()");
//		Адрес = "";
	КонецПопытки;	
	Возврат Адрес;
КонецФункции

Функция ПолучитьСведенияОКонтрагенте(ВыбКонтрагент,ВыбДата) экспорт
	Если Метаданные.ОбщиеМодули.Найти("БухгалтерскийУчетПереопределяемый") <> Неопределено Тогда
		МодульРабота1 = ОбщийМодуль("БухгалтерскийУчетПереопределяемый");
		СведенияОКонтрагенте =  МодульРабота1.СведенияОЮрФизЛице(ВыбКонтрагент, ВыбДата);
	ИначеЕсли Метаданные.ОбщиеМодули.Найти("УправлениеКонтактнойИнформацией") <> Неопределено Тогда
		МодульРабота1 = ОбщийМодуль("УправлениеКонтактнойИнформацией");
		СведенияОКонтрагенте = МодульРабота1.СведенияОЮрФизЛице(ВыбКонтрагент, ВыбДата);
	Иначе
		Сообщить("Для данной конфигурации 1С не удалось ПолучитьСведенияОКонтрагенте");
		Сообщить("Обратитесь в ТП КБ99");
		СведенияОКонтрагенте =  "ошибка";
	КонецЕсли;
	
//	Попытка
//		СведенияОКонтрагенте = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыбКонтрагент, ВыбДата);
//	Исключение
//		СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ВыбКонтрагент, ВыбДата);
//	КонецПопытки;
	Возврат СведенияОКонтрагенте;
КонецФункции

Функция ПолучитьНомерАвто(ДокОснование) Экспорт
	Обработка = ФункцияПереопределена("ПолучитьНомерАвто");
	Если обработка <> Неопределено Тогда
		Возврат Обработка.ПолучитьНомерАвто(ДокОснование);
	КонецЕсли;
	
	МетаданныеОбъекта = ДокОснование.Метаданные();
	Если МетаданныеОбъекта.Реквизиты.Найти("Транспорт") <> Неопределено тогда
		//Это БП ПТФ 2.0
		НомерТС = ДокОснование.Транспорт.ГосНомерАвтомобиля;
		НомерТС = ?(ЗначениеЗаполнено(НомерТС),СокрЛП(НомерТС),"Не исп.");
	ИначеЕсли МетаданныеОбъекта.Реквизиты.Найти("РегистрационныйЗнакАвтомобиля") <> Неопределено тогда
		//	БП 3
		НомерТС = ?(ЗначениеЗаполнено(ДокОснование.РегистрационныйЗнакАвтомобиля),СокрЛП(ДокОснование.РегистрационныйЗнакАвтомобиля),"Не исп.");
	Иначе	
		Попытка
		// Это УПП и УТ
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ 
			| ПараметрыМаршрутаСрезПоследних.Водитель, 
			| ПараметрыМаршрутаСрезПоследних.ЗаказПокупателя, 
			| ПараметрыМаршрутаСрезПоследних.НомерТС 
			|ИЗ 
			| РегистрСведений.ПараметрыМаршрута.СрезПоследних(, ЗаказПокупателя = &ТекЗаказ) КАК ПараметрыМаршрутаСрезПоследних";
		
			Запрос.УстановитьПараметр("ТекЗаказ", ДокОснование.Сделка);
			РезультатЗапроса = Запрос.Выполнить();

			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				//Водитель = ВыборкаДетальныеЗаписи.Водитель;
				НомерТС = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НомерТС),ВыборкаДетальныеЗаписи.НомерТС,"Не уст.(Б/Н)");
			Иначе
				//Водитель = Справочники.ФизическиеЛица.ПустаяСсылка();
				НомерТС = "Не исп.";
			КонецЕсли;
		Исключение //КРК - отстутствует регистр сведений ПараметрыМаршрута		
			НомерТС = "Газель";	
		КонецПопытки;
	КонецЕсли;
	Возврат НомерТС;
КонецФункции

// ********* Преобразования
Функция ДатаXML(ВыбДата, Время="") Экспорт
		
	стрДата = формат(ВыбДата, "ДФ=""гггг-ММ-дд""")+Время;
	Возврат стрДата;
КонецФункции

Функция ДатаВремяXML(ВыбДата) Экспорт
		
	стрДата = формат(ВыбДата, "ДФ=""гггг-ММ-дд""")+"T"+Формат(ВыбДата,"ДФ=ЧЧ:мм:сс");;
	Возврат стрДата;
КонецФункции

Функция Дата_из_XML(dateXML, Дата1, Дата2, ДатаСтрока ) Экспорт 
	попытка			
		год = ""+dateXML.firstDate.year;		
		мес = ""+dateXML.firstDate.month;
		попытка день = ""+dateXML.firstDate.day; Исключение День = 1; КонецПопытки;
		Дата1 = Дата(год, мес, день);
	Исключение
		Попытка
			ДатаСтрока = ""+dateXML.informalDate;
		Исключение				
		КонецПопытки;
	КонецПопытки;				
	попытка
		год = ""+dateXML.secondDate.year;
		мес = ""+dateXML.secondDate.month;
		попытка день = ""+dateXML.secondDate.day; Исключение День = 1; КонецПопытки;
		Дата2 = Дата(год, мес, день);
	Исключение			
	КонецПопытки;
КонецФункции

Функция Изготовление_СрокГодности_в_XML(СтрПартии) Экспорт
	Запрос = "	
		|                <vd:dateOfProduction> ";
		//Может быть указана датой или диапазоном дат. В случае точной даты выработки указывается только первая компонента - firstDate.
		//Для скоропортящейся продукции обязательны к указанию год/месяц/день и могут быть указаны час/минута.
		//Для не скоропортящейся продукции обязательны к указанию год/месяц и может быть указан день.
		//Для не скоропортящейся продукции дата выработки и дата окончания срока годности должны быть заданы в одном формате 
		//	(например, если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).
		Если ЗначениеЗаполнено(СтрПартии.ДатаИзготовления1) Тогда
			Запрос = Запрос+ "
		|              <vd:firstDate>
		|                <dt:year>"+ДатаГод(СтрПартии.ДатаИзготовления1)+"</dt:year>
		|                <dt:month>"+ ДатаМесяц(СтрПартии.ДатаИзготовления1) +"</dt:month>
		|                <dt:day>"+ ДатаЧисло(СтрПартии.ДатаИзготовления1) +"</dt:day>
		|                <dt:hour>0</dt:hour>
		|              </vd:firstDate> ";
		КонецЕсли;
		Если ((ЗначениеЗаполнено(СтрПартии.ДатаИзготовления2)) и 
				(СтрПартии.ДатаИзготовления2 > СтрПартии.ДатаИзготовления1)) Тогда
			Запрос=Запрос+"		
			|              <vd:secondDate>
			|                <dt:year>"+ ДатаГод(СтрПартии.ДатаИзготовления2) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(СтрПартии.ДатаИзготовления2) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(СтрПартии.ДатаИзготовления2) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:secondDate> ";
		КонецЕсли;	
		Запрос=Запрос+"
		|            </vd:dateOfProduction>
		|            <vd:expiryDate> ";
		// !!! Не указывается для типа продукции "Живые животные".
		//Может быть указана датой или диапазоном дат. В случае точной даты выработки указывается только первая компонента - firstDate.
		//Для скоропортящейся продукции обязательны к указанию год/месяц/день и могут быть указаны час/минута.
		//Для не скоропортящейся продукции обязательны к указанию год/месяц и может быть указан день.
		//Для не скоропортящейся продукции дата выработки и дата окончания срока годности должны быть заданы в одном формате 
		//	(например, если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).
		Если (ЗначениеЗаполнено(СтрПартии.ДатаСрокГодности1)) Тогда
			Запрос=Запрос+"
			|              <vd:firstDate>
			|                <dt:year>"+ ДатаГод(СтрПартии.ДатаСрокГодности1) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(СтрПартии.ДатаСрокГодности1) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(СтрПартии.ДатаСрокГодности1) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:firstDate>";
		КонецЕсли;
		Если ((ЗначениеЗаполнено(СтрПартии.ДатаСрокГодности2)) и 
				(СтрПартии.ДатаСрокГодности2 > СтрПартии.ДатаСрокГодности1)) Тогда
			Запрос=Запрос+"				
			|              <vd:secondDate>
			|                <dt:year>"+ ДатаГод(СтрПартии.ДатаСрокГодности2) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(СтрПартии.ДатаСрокГодности2) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(СтрПартии.ДатаСрокГодности2) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:secondDate>";
		КонецЕсли;
		Запрос=Запрос+"
		|                </vd:expiryDate>";
	Возврат Запрос;	
КонецФункции

Функция УровниУпаковки_из_XML(PList, Партия ="") Экспорт //ЖД
	//Возвращает длинну строку с Уровнями упаковок и Маркировок
	// При наличии Партия записывает в данные в ТЧ УровниУпаковки и Маркировка
	
	// Можно вернуть в виде ТЗ
	//Список физической упаковки. vd:packageList		
	// С уровнями
//   Уровни <dt:level>
//1 	Внутренний уровень. Уровень, при котором упаковка отсутствует, но тем не менее есть необходимость наносить маркировку. Например, яйцо, шкуры, мясо, сыр. Явно указывается, что упаковка отсутствует.
//2 	Потребительский уровень. Товар в упаковке для розничной торговли, маркированный штриховым кодом для сканирования на кассе.
//3 	Промежуточный уровень. Уровень упаковки, если он существует, который находится между потребительским и торговым уровнем.
//4 	Торговый уровень. Товар в упаковке, предназначенной для заказа, оплаты и доставки. Это согласованный между ритейлером и изготовителем (или другим участником) уровень упаковки товара, в котором товар заказывается, оплачивается и доставляется.
//5 	Дополнительный уровень. Товар в упаковке, которую нельзя однозначно отнести к торговому или транспортному уровню.
//6 	Транспортный (Логистический) уровень. Товар в упаковке, предназначенной для отгрузки покупателю (ритейлеру) при выполнении заказа. 		

// Классы <dt:productMarks class = Тип, описывающий тип маркировки.
//UNDEFINED 	Класс неопределен. Это значение используется по умолчанию.
//BN 	Номер производственной партии.
//    Важно, чтобы номера партий совпадали при совершении операции незавершённого производства. 
//SSCC 	SSCC-код (глобально-уникальный код грузовых контейнеров - Serial Shipping Container Code).
//EAN8 	Маркировка в соответствии с EAN-8.
//EAN13 	Маркировка в соответствии с EAN-13.
//EAN128 	Маркировка в соответствии с EAN-128.
//BUNDLE 	Маркировка вышестоящей групповой упаковки, например, паллеты. Может использоваться для поиска группы вет.сертификатов для партий, находящихся на данной паллете. 
	
	ТЗУровни = Новый ТаблицаЗначений;		
	ТЗУровни.Колонки.Добавить("НомерУровня",новый ОписаниеТипов("Число"));
	ТЗУровни.Колонки.Добавить("Упаковка",новый ОписаниеТипов("СправочникСсылка.ВСД_ФормыУпаковки"));
	ТЗУровни.Колонки.Добавить("КолВо",новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(12, 3)));
	ТЗУровни.Колонки.Добавить("Маркировки");
	
	Если ТипЗнч(Партия) = Тип("СправочникОбъект.ВСД_Партия") тогда
		//Парт = Справочники.ВСД_Партия.ПолучитьСсылку(Партия);
		Партия.УровниУпаковки.Очистить();
		Партия.Маркировка.Очистить();
	КонецЕсли;		
	
	
	Если ТипЗнч(PList)=Тип("ОбъектXDTO") Тогда 
		PListArray = Новый Массив;
		PListArray.Добавить(PList);
	ИначеЕсли ТипЗнч(PList)=Тип("СписокXDTO") Тогда
		PListArray = PList;
	Иначе
		Возврат "";
	КонецЕсли;
	Попытка
		Для каждого Узел из PListArray Цикл
			СтрУровня = ТЗУровни.Добавить();

			Попытка СтрУровня.НомерУровня = Узел.level; Исключение КонецПопытки;  // Уровень упаковки
			Попытка СтрУровня.Упаковка = НайтиФормуУпаковки( Узел.packingType.guid, Узел.packingType.name);	Исключение	КонецПопытки;
			//dt:globalID  	Уникальный идентификатор упаковки.
			Попытка	ГлИД = Узел.packingType.globalID; Исключение КонецПопытки;
			Попытка	СтрУровня.КолВо = Число(Узел.quantity);	Исключение	КонецПопытки;
			Если ТипЗнч(Партия) = Тип("СправочникОбъект.ВСД_Партия") тогда
				ПартУровни = Партия.УровниУпаковки.Добавить();
				ПартУровни.НомерУровня = Перечисления.ВСД_УровниУпаковки.Получить(СтрУровня.НомерУровня-1);//Значени = Метаданные.Перечисления.ВСД_УровниУпаковки.ЗначенияПеречисления[СтрУровня.НомерУровня-1];
				ПартУровни.ФормаУпаковки = СтрУровня.Упаковка;
				ПартУровни.Количество = СтрУровня.КолВо;				
			КонецЕсли;		
			
			СзМаркировки = Новый Списокзначений;
			//Маркировка партии продукции. Например
			//      <dt:productMarks class="EAN128">7456873456-147885</dt:productMarks>
             //      <dt:productMarks class="UNDEFINED">custom marking</dt:productMarks> 
			Попытка
                Маркировки = Узел.productMarks;
				Если ТипЗнч(Маркировки)=Тип("ОбъектXDTO") Тогда 
					МаркМассив = Новый Массив;
					МаркМассив.Добавить(Маркировки);
				ИначеЕсли ТипЗнч(Маркировки)=Тип("СписокXDTO") Тогда
					МаркМассив = Маркировки;
				КонецЕсли;
				
				Для каждого МаркН из МаркМассив Цикл		
					//МаркЗнач = МаркН.text;
					МаркЗнач = МаркН.Последовательность().ПолучитьТекст(0);  // ЖД Как получить ???
					МаркКласс = МаркН.class;
					СзМаркировки.Добавить(МаркЗнач,МаркКласс);
					//СзМаркировки.ДобавитьЗначение(Маркзнач,МаркКласс);
					Если ТипЗнч(Партия) = Тип("СправочникОбъект.ВСД_Партия") тогда
						ПартМаркировка = Партия.Маркировка.Добавить();
						ПартМаркировка.НомерУровня = Перечисления.ВСД_УровниУпаковки.Получить(СтрУровня.НомерУровня-1);
						ПартМаркировка.Класс = Перечисления.ВСД_Маркировка[МаркКласс];
						ПартМаркировка.Маркировка = МаркЗнач;				
					КонецЕсли;		
				КонецЦикла;
			Исключение КонецПопытки;
		    Если СзМаркировки.Количество() > 0 Тогда
		        СтрУровня.Маркировки = ЗначениеВСтрокуВнутр(СзМаркировки);
		    КонецЕсли;
		КонецЦикла;
	Исключение	КонецПопытки;
	Если ТЗУровни.Количество()>0 Тогда
		Возврат ЗначениеВСтрокуВнутр(ТЗУровни);
	Иначе
		Возврат "";
	КонецЕсли;
	//Возврат ТЗУровни;
КонецФункции

Функция УровниУпаковки_в_XML(НомерСтрокиПартии,тзУпаковка,тзМаркировка) Экспорт
	Запрос = "";
	// Оптимизировать перебор Фильтрацией
	Если тзУпаковка.Количество()>0 Тогда
		Запрос=Запрос+"
		|                <vd:packageList>";
		Для каждого СтрокаУпаковки из тзУпаковка Цикл
			// связь со строкой Товары
			Если НЕ(СтрокаУпаковки.СтрокаПродукции = НомерСтрокиПартии) Тогда
				Продолжить;	
			КонецЕсли;
			
			Если ПустоеЗначение(СтрокаУпаковки.ФормаУпаковки.GUID)=1 Тогда
				Сообщить("Не указана форма упаковки на уровне "+СтрокаУпаковки.НомерУровня);
			    Продолжить;
			КонецЕсли;
			Запрос=Запрос+"
			|                  <dt:package>
			|                    <dt:level>"+ПолучитьПорядковыйНомерПеречисления(СтрокаУпаковки.НомерУровня)+"</dt:level>
			|                    <dt:packingType>
			|                      <bs:guid>"+ СтрокаУпаковки.ФормаУпаковки.GUID +"</bs:guid>
			|                    </dt:packingType>
			|                    <dt:quantity>"+ Формат(СтрокаУпаковки.Количество, "ЧРД=.; ЧГ=0") +"</dt:quantity>";
			
			// Маркировки
			Для каждого СтрокаМаркировки из тзМаркировка Цикл
				Если НЕ(СтрокаУпаковки.НомерУровня = СтрокаМаркировки.НомерУровня) и НЕ(СтрокаУпаковки.СтрокаПродукции = СтрокаМаркировки.СтрокаПродукции) Тогда
					Продолжить;	
				КонецЕсли;
				Если ПустоеЗначение(СтрокаМаркировки.Класс) = 1 Тогда
					Сообщить("Не указан класс маркировки "+СтрокаМаркировки.Маркировка);
				    Продолжить;
				КонецЕсли;
				Запрос=Запрос+"
				|                    <dt:productMarks class='"+ПолучитьИдентификаторПеречисления(СтрокаМаркировки.Класс)+"'>"+СтрокаМаркировки.Маркировка+"</dt:productMarks>";
			КонецЦикла;		
			Запрос=Запрос+"
   	   		|                  </dt:package>";
	    КонецЦикла;
		Запрос=Запрос+"
		|                </vd:packageList>";
	КонецЕсли;
	
	Возврат Запрос;	
КонецФункции

Функция СписокПроизводителей_из_XML(ProducerList) Экспорт 
	Если ТипЗнч(ProducerList)=Тип("ОбъектXDTO") Тогда 
		ProdList = Новый Массив;
		ProdList.Добавить(ProducerList);
	ИначеЕсли ТипЗнч(ProducerList)=Тип("СписокXDTO") Тогда
		ProdList = ProducerList;
	Иначе
		Возврат "";
	КонецЕсли;
	ТзПроизводителей = Новый ТаблицаЗначений;
	ТзПроизводителей.Колонки.Добавить("Площадка",новый ОписаниеТипов("СправочникСсылка.ВСД_Площадка"));
	ТзПроизводителей.Колонки.Добавить("Роль",новый ОписаниеТипов("Строка"));
	ТзПроизводителей.Колонки.Добавить("Имя",новый ОписаниеТипов("Строка"));
	Попытка
		Для каждого producer из ProdList Цикл
			Попытка
				Если НЕ ЗначениеЗаполнено(producer.enterprise.guid) Тогда
					//Продолжить;	
				КонецЕсли;
			Исключение
				Сообщить("Не указан ГУИД Производителя во входящем ВСД, возможно импортный. Гашение без ГУИД производителя м.б. Невозможно.");
				//Продолжить; 
			КонецПопытки;
			СтрокаТЗ = ТзПроизводителей.Добавить();
			Попытка СтрокаТЗ.Имя = producer.enterprise.name; Исключение КонецПопытки;
			Попытка СтрокаТЗ.Площадка = НайтиПлощадку(producer.enterprise.guid); Исключение КонецПопытки;
			Попытка СтрокаТЗ.Роль =  producer.role; Исключение СтрокаТЗ.Роль = "PRODUCER"; КонецПопытки;
		КонецЦикла;			
	Исключение	КонецПопытки;
	Возврат ЗначениеВСтрокуВнутр(ТзПроизводителей);	
КонецФункции

Функция УдалитьСвязанныеДокументы_из_XML(referencedDocument) Экспорт //ЖД
	Если ТипЗнч(referencedDocument)=Тип("ОбъектXDTO") Тогда 
		RDListArray = Новый Массив;
		RDListArray.Добавить(referencedDocument);
	ИначеЕсли ТипЗнч(referencedDocument)=Тип("СписокXDTO") Тогда
		RDListArray = referencedDocument;
	Иначе
		Возврат "";
	КонецЕсли;
	// Связанные документы  - их м.б. много
	ТЗСвДокументы = Новый ТаблицаЗначений;		
	ТЗСвДокументы.Колонки.Добавить("ТипДокумента",новый ОписаниеТипов("Число"));
	ТЗСвДокументы.Колонки.Добавить("НомерДокумента",новый ОписаниеТипов("Строка"));
	ТЗСвДокументы.Колонки.Добавить("СерияДокумента",новый ОписаниеТипов("Строка"));
	ТЗСвДокументы.Колонки.Добавить("ДатаДокумента",новый ОписаниеТипов("Строка"));
	ТЗСвДокументы.Колонки.Добавить("ТипОтношенияДок",новый ОписаниеТипов("Число"));
	
	Попытка
		Для Каждого Узел из RDListArray Цикл
			// 1 -ТТН, 6 -ТОРГ12,5 - ТрН, 16 - Заказ  http://help.vetrf.ru/wiki/DocumentType_v2.0
			СтрокаТЗ = ТЗСвДокументы.Добавить();
			Попытка СтрокаТЗ.ТипДокумента =  Узел.type; Исключение 	КонецПопытки;
			Попытка	СтрокаТЗ.НомерДокумента =  Узел.issueNumber; Исключение  КонецПопытки;
			Попытка СтрокаТЗ.СерияДокумента =  Узел.issueSeries;	Исключение 	КонецПопытки;
			Попытка СтрокаТЗ.ДатаДокумента =  Узел.issueDate; Исключение 	КонецПопытки;
		    // ТипОтношенияДок
			//1 	Сопроводительный документ. 	Complementary accompanying document.
			//2 	Предшествующий документ. 	Preceding document (Ancestor).
			//3 	Следующий документ. 	Subsequent/following document (Child).
			//4 	Документ, взамен которого выдан текущий документ. 	Replaced document.
			//5 	Документ, заменяющий текущий документ. 	Replaced by document.
			//6 	Связанный документ. 	Related document. 				
			Попытка	СтрокаТЗ.ТипОтношенияДок =  Узел.relationshipType; Исключение КонецПопытки;
			//Если СтрокаТЗ.ТипДокумента = 1 Тогда
			//	ТЗВСД.ттнСерия = СтрокаТЗ.СерияДокумента;
			//	ТЗВСД.ттнномер = СтрокаТЗ.НомерДокумента;
			//	ТЗВСД.ттндата = СтрокаВДату(СтрокаТЗ.ДатаДокумента);
			//КонецЕсли;
		КонецЦикла;
	Исключение		КонецПопытки;
	Если ТЗСвДокументы.Количество()>0 Тогда
		Возврат ЗначениеВСтрокуВнутр(ТЗСвДокументы);
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции

Функция СвязанныеДокументы_из_XML(referencedDocument) Экспорт 
	Если ТипЗнч(referencedDocument)=Тип("ОбъектXDTO") Тогда 
		RDListArray = Новый Массив;
		RDListArray.Добавить(referencedDocument);
	ИначеЕсли ТипЗнч(referencedDocument)=Тип("СписокXDTO") Тогда
		RDListArray = referencedDocument;
	Иначе
		Возврат "";
	КонецЕсли;
	// Связанные документы  - их м.б. много
	ТЗСвДокументы = Новый ТаблицаЗначений;		
	ТЗСвДокументы.Колонки.Добавить("ТипДокумента",новый ОписаниеТипов("Число"));
	ТЗСвДокументы.Колонки.Добавить("НомерДокумента",новый ОписаниеТипов("Строка"));
	ТЗСвДокументы.Колонки.Добавить("СерияДокумента",новый ОписаниеТипов("Строка"));
	ТЗСвДокументы.Колонки.Добавить("ДатаДокумента",новый ОписаниеТипов("Строка"));
	ТЗСвДокументы.Колонки.Добавить("ТипОтношенияДок",новый ОписаниеТипов("Число"));
	
	Попытка
		Для Каждого Узел из RDListArray Цикл
			// 1 -ТТН, 6 -ТОРГ12,5 - ТрН, 16 - Заказ  http://help.vetrf.ru/wiki/DocumentType_v2.0
			СтрокаТЗ = ТЗСвДокументы.Добавить();
			Попытка СтрокаТЗ.ТипДокумента =  Узел.type; Исключение 	КонецПопытки;
			Попытка	СтрокаТЗ.НомерДокумента =  Узел.issueNumber; Исключение  КонецПопытки;
			Попытка СтрокаТЗ.СерияДокумента =  Узел.issueSeries;	Исключение 	КонецПопытки;
			Попытка СтрокаТЗ.ДатаДокумента =  Узел.issueDate; Исключение 	КонецПопытки;
			СтрокаТЗ.СерияДокумента = ?(СтрокаТЗ.СерияДокумента = "ОбъектXDTO","",СтрокаТЗ.СерияДокумента);
		    // ТипОтношенияДок
			//1 	Сопроводительный документ. 	Complementary accompanying document.
			//2 	Предшествующий документ. 	Preceding document (Ancestor).
			//3 	Следующий документ. 	Subsequent/following document (Child).
			//4 	Документ, взамен которого выдан текущий документ. 	Replaced document.
			//5 	Документ, заменяющий текущий документ. 	Replaced by document.
			//6 	Связанный документ. 	Related document. 				
			Попытка	СтрокаТЗ.ТипОтношенияДок =  Узел.relationshipType; Исключение КонецПопытки;
			//Если СтрокаТЗ.ТипДокумента = 1 Тогда
			//	ТЗВСД.ттнСерия = СтрокаТЗ.СерияДокумента;
			//	ТЗВСД.ттнномер = СтрокаТЗ.НомерДокумента;
			//	ТЗВСД.ттндата = СтрокаВДату(СтрокаТЗ.ДатаДокумента);
			//КонецЕсли;
		КонецЦикла;
	Исключение		КонецПопытки;
	Если ТЗСвДокументы.Количество()>0 Тогда
		Возврат ЗначениеВСтрокуВнутр(ТЗСвДокументы);
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции

Функция СписокНомеровПартий_из_XML(batch) Экспорт
	// Номер Партии - м.б. несколько
	СпНомераПартий = Новый СписокЗначений;
	Попытка
	Если ТипЗнч(batch.batchID)<>Тип("СписокXDTO") Тогда 
		ListbatchID = Новый Массив;
		ListbatchID.Добавить(batch.batchID);
	Иначе
		ListbatchID = batch.batchID;
	КонецЕсли;
	Для Каждого batchID из ListbatchID Цикл
		СпНомераПартий.Добавить(batchID);
	КонецЦикла;
	Исключение КонецПопытки;
	Возврат ЗначениеВСтрокуВнутр(СпНомераПартий);		
КонецФункции

Функция СоздатьТзМаршрутСледования() Экспорт
	//Порядок колонок имеет значние при сохранинии в Файл => структура должна быть единообразна - это 
	
	ТЗточкиМаршрута = Новый ТаблицаЗначений;
	ТЗточкиМаршрута.Колонки.Добавить("ВыбХС",новый ОписаниеТипов("СправочникСсылка.ВСД_ХозСубъект"));
	ТЗточкиМаршрута.Колонки.Добавить("ВыбПлощадка",новый ОписаниеТипов("СправочникСсылка.ВСД_Площадка"));
	ТЗточкиМаршрута.Колонки.Добавить("Страна",новый ОписаниеТипов("СправочникСсылка.ВСД_Страна"));
	ТЗточкиМаршрута.Колонки.Добавить("Регион",новый ОписаниеТипов("СправочникСсылка.ВСД_Регион"));
	ТЗточкиМаршрута.Колонки.Добавить("Район",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("Город",новый ОписаниеТипов("СправочникСсылка.ВСД_Город"));
	ТЗточкиМаршрута.Колонки.Добавить("НасПункт",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("Улица",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("Дом",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("Строение",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("Помещение",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("Перегрузка",новый ОписаниеТипов("Число"));
	ТЗточкиМаршрута.Колонки.Добавить("ТипТранспорта",новый ОписаниеТипов("Число"));
	ТЗточкиМаршрута.Колонки.Добавить("НомерТС",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("номерАвто",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("номерКонтейнера",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("номерВагона",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("номерПрицепа",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("НазваниеСудна",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("НомерАвиарейса",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("UUID",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("НомерТочки",новый ОписаниеТипов("Число"));
	Возврат ТзТочкиМаршрута;
КонецФункции

Функция МаршрутСледования_из_XML(Routelist) Экспорт
    // Упрощенная схема - выбраны Площадки, а не ручная запись адреса
	//ТЗточкиМаршрута = СоздатьОбъект("ТаблицаЗначений");
	ТЗточкиМаршрута = СоздатьТзМаршрутСледования();
	Попытка
	    Для каждого узел из Routelist Цикл
			СтрокаТЗ = ТЗточкиМаршрута.Добавить();
            Попытка СтрокаТЗ.UUID					 = 		Узел.uuid; Исключение КонецПопытки;
            Попытка СтрокаТЗ.НомерТочки				 =		Узел.sqnId; Исключение КонецПопытки;
			Попытка Площадка_GUID = Узел.enterprise.guid; Исключение КонецПопытки;
			Попытка СтрокаТЗ.ВыбПлощадка				 =  	НайтиПлощадку( Площадка_GUID ); Исключение КонецПопытки;
			//Попытка ТЗточкиМаршрута.ПредприятиеНаименование	 =  	Узел.selectSingleNode("vd:enterprise").selectSingleNode("dt:name").text; Исключение КонецПопытки;
            Попытка СтрокаТЗ.Перегрузка				 = 		?(Узел.transshipment = "true",1,0); Исключение КонецПопытки;
            Попытка СтрокаТЗ.ТипТранспорта			 = 		Число(Узел.nextTransport.transportType); Исключение КонецПопытки;
			
			Если СтрокаТЗ.ТипТранспорта = 1 Тогда
				Попытка СтрокаТЗ.номеравто 			= Узел.nextTransport.transportNumber.vehicleNumber; Исключение КонецПопытки;
				Попытка СтрокаТЗ.номерПрицепа 	= Узел.nextTransport.transportNumber.trailerNumber; Исключение КонецПопытки;;
				Попытка СтрокаТЗ.номерКонтейнера 	= Узел.nextTransport.transportNumber.containerNumber; Исключение КонецПопытки;
			Иначеесли СтрокаТЗ.ТипТранспорта = 2 Тогда
				Попытка СтрокаТЗ.номерВагона 			= Узел.nextTransport.transportNumber.wagonNumber; Исключение КонецПопытки;
			Иначеесли СтрокаТЗ.ТипТранспорта = 3 Тогда
				Попытка СтрокаТЗ.НомерАвиарейса 			= Узел.nextTransport.transportNumber.flightNumbe; Исключение КонецПопытки;
			Иначеесли (СтрокаТЗ.ТипТранспорта = 4) или (ТЗточкиМаршрута.ТипТранспорта = 5) или (ТЗточкиМаршрута.ТипТранспорта = 6) Тогда
				Попытка СтрокаТЗ.НазваниеСудна 			= Узел.nextTransport.transportNumber.shipName; Исключение КонецПопытки;
//			Иначеесли ТЗВСД.ТипТС = "7" Тогда
//					ТЗВСД.номеравто = transportInfo.selectSingleNode("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='shipName']").text;
				
			КонецЕсли;
            СтрокаТЗ.НомерТС = СокрЛП(СтрокаТЗ.номеравто) + СокрЛП(СтрокаТЗ.номерВагона) + СокрЛП(СтрокаТЗ.НомерАвиарейса)+ СокрЛП(СтрокаТЗ.НазваниеСудна);; //Что-то тут не так
		КонецЦикла;
	Исключение КонецПопытки;
	ТЗточкиМаршрута.Сортировать("НомерТочки");
	
	Если ТЗточкиМаршрута.Количество()>0 Тогда
	    Возврат (ТЗточкиМаршрута);
	Иначе
		Возврат "";
	КонецЕсли;
    
КонецФункции

Процедура Фасовка_из_XML(packaging,ФасовкаНаименование="",ФасовкаФормаУпаковки="",ФасовкаКоличество="",ФасовкаОбъем="",ФасовкаЕдиницаИзм="") Экспорт //ЖД
	// 	Тип упаковки. 
	//Попытка	ТипФасовки = packaging.selectSingleNode("dt:packagingType").text;  Исключение КонецПопытки;
	// 	Идентификатор версии типа упаковки.
	//Попытка ФасУИД =  packaging.packagingType.uuid; Исключение КонецПопытки;
	// Наименование упаковки.
	Попытка	ФасовкаНаименование =  packaging.packagingType.name;	Исключение КонецПопытки;
	Попытка ФасовкаФормаУпаковки = НайтиФормуУпаковки( packaging.packagingType.guid, ФасовкаНаименование); Исключение КонецПопытки;
	//  	Уникальный идентификатор упаковки. 
	//Попытка	ФасУН =  packaging.packagingType.globalID;	Исключение	КонецПопытки;
	Попытка	ФасовкаКоличество = Число(packaging.quantity); Исключение КонецПопытки;
	// Объём единицы упаковки товара.
	Попытка	ФасовкаОбъем = Число(packaging.volume); Исключение КонецПопытки;
	// 	Глобальный идентификатор единицы измерения. , есть uuid и имя - <dt:name> 
	Попытка	ФасовкаЕдиницаИзм = НайтиЕдИзмерения(packaging.unit.guid); Исключение КонецПопытки;			
КонецПроцедуры

Функция ProductItem_в_XML(СтрПартии, ПроверятьВидПродукцииПартииИProductItem = 0) Экспорт
	Запрос = "
	|                    <vd:productItem>";
	Если ПустоеЗначение(СтрПартии.Продукция_Элемент.GUID) = 0 Тогда
		// ПРОИЗВОДСТВО Обязательно должно быть заполнено хотя бы одно из полей: либо UUID, либо GUID. При указании обоих полей приоритет у UUID.
		Попытка
			Если ПроверятьВидПродукцииПартииИProductItem = 1 Тогда
    	    	// При изменении Вида продукции у ProductItem возникнет ошибка при списании ранее полученной партии
				// Указанное наименование продукции относится к другому виду продукции.
				Если ЗначениеЗаполнено(СтрПартии.Партия) и (СтрПартии.Продукция_Элемент.ВидПродукции = СтрПартии.Партия.ВидПродукции) тогда
					Запрос = Запрос+ "
					|                      <bs:guid>"+ СокрЛП(СтрПартии.Продукция_Элемент.GUID) +"</bs:guid>";
				КонецЕсли;
			Иначе
				Запрос = Запрос+ "
				|                      <bs:guid>"+ СокрЛП(СтрПартии.Продукция_Элемент.GUID) +"</bs:guid>";
			КонецЕсли;
		Исключение 	КонецПопытки;
	КонецЕсли;
	Попытка
	    Запрос = Запрос+?(ПустоеЗначение(СтрПартии.GTIN)= 0,	"
		|                     <dt:globalID>"+ СокрЛП(СтрПартии.GTIN) +"</dt:globalID>","");
	Исключение КонецПопытки;
	
	//Момент ниже возможно упростить
	Попытка //Производство
	    Запрос = Запрос+?(ЗначениеЗаполнено(СтрПартии.НаименованиеПродукции),	"
		|                     <dt:name>"+ СокрЛП(СтрПартии.НаименованиеПродукции) +"</dt:name>","");
	Исключение // транзакция 
	    Запрос = Запрос+?(ЗначениеЗаполнено(СтрПартии.Продукция_Элемент),	"
		|                     <dt:name>"+ СокрЛП(СтрПартии.Продукция_Элемент.Наименование) +"</dt:name>","");
	КонецПопытки;
	
	Попытка
		Запрос = Запрос+?(ПустоеЗначение(СтрПартии.Артикул)= 0,	"
		|                     <dt:code>"+ СокрЛП(СтрПартии.КодПродукции) +"</dt:code>","");
	Исключение КонецПопытки;
	//Фасовка
	Попытка
		Если ЗначениеЗаполнено(СтрПартии.ФасовкаФормаУпаковки) Тогда
			Запрос = Запрос + "
	    	|          <dt:packaging>
	      	|            <dt:packagingType>
	        |              <bs:guid>"+ СокрЛП(СтрПартии.ФасовкаФормаУпаковки.GUID) +"</bs:guid>
	//						<dt:globalID>BE</dt:globalID> 	dt:PackingCodeType 	[0..1] 	Уникальный идентификатор упаковки. 
		    |            </dt:packagingType>
	   		|            <dt:quantity>"+ Формат(СтрПартии.ФасовкаКоличество, "ЧРД=.; ЧГ=0") +"</dt:quantity>
	        |            <dt:volume>"+ Формат(СтрПартии.ФасовкаОбъем, "ЧРД=.; ЧГ=0") +"</dt:volume>
		    |            <dt:unit>
	   		|              <bs:guid>"+ СокрЛП(СтрПартии.ФасовкаЕдиницаИзмерения.GUID) +"</bs:guid>
	        |            </dt:unit>
		    |          </dt:packaging>";		    
		КонецЕсли;		
	Исключение КонецПопытки;
	Запрос = Запрос+ "
    |        </vd:productItem>";
	Возврат Запрос;	
КонецФункции

Функция СтрокаВДату(ДатаСтрока)
	год = Лев(ДатаСтрока,4 );
	мес = Сред(ДатаСтрока,6,2);
	день = Сред(ДатаСтрока,9,2);
	возврат Дата(год, мес,день);	
КонецФункции

Функция СтрокаВДатаВремя(ДатаВремяСтрока)
	год = Лев(ДатаВремяСтрока,4 );
	мес = Сред(ДатаВремяСтрока,6,2);
	день = Сред(ДатаВремяСтрока,9,2);
	час = Число(Сред(ДатаВремяСтрока,12,2));
	мин = Сред(ДатаВремяСтрока,15,2);	
	сек = Сред(ДатаВремяСтрока,18,2);
	смещение = Число(Сред(ДатаВремяСтрока,21,2));
	Попытка результат = Дата(год, мес,день, (час+Смещение), мин, сек);	
	Исключение результат = Дата(год, мес,день);	
	КонецПопытки;
	Возврат Результат;

КонецФункции

// ************************

Функция ПолучитьИдентификаторПеречисления(ЗначПеречисления) Экспорт
	//присвоим переменной значение перечисления
	//например перечисления.ставкиНДС.НДС18 
	//или например Док.СтавкаНДС 
	//НужноеЗначение = Какое_то_Значение_Перечисления; 

	//теперь получаем как названо перечисление в конфигураторе
	ИмяПеречисления = ЗначПеречисления.Метаданные().Имя;

	//теперь получим индекс где хранится то что нам надо
	НужныйИндекс = Перечисления[ИмяПеречисления].Индекс(ЗначПеречисления);

	//и вот счастье. то что нам надо - идентификатор!!! всего-то четыре строчки кода
	//вместо Какое_то_Значение_Перечисления.Идентификатор() в 7.7
	Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[НужныйИндекс].Имя;
	
КонецФункции

Функция ПолучитьПорядковыйНомерПеречисления(ЗначПеречисления) Экспорт
	Возврат (Перечисления[ЗначПеречисления.Метаданные().Имя].Индекс(ЗначПеречисления) + 1)
КонецФункции


Функция ПолучитьВСДПродукцияЭлементПоНоменклатуре(ВыбНоменклатура)
//Вариант 1
	Запрос = Новый Запрос;
	Запрос = Новый Запрос;
	Запрос.Текст = "Выбрать ВСД_Соответсвия.ПродукцияЭлемент КАК ПродукцияЭлемент из РегистрСведений.ВСД_Соответсвия как ВСД_Соответсвия где ВСД_Соответсвия.Номенклатура = &ВыбНоменклатура";
    Запрос.УстановитьПараметр("ВыбНоменклатура", ВыбНоменклатура); 

    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать(); 
	ПродукцияЭлемент = Справочники.ВСД_Продукция_Элемент.ПустаяСсылка();
	Пока Выборка.Следующий() Цикл
		ПродукцияЭлемент = Выборка.ПродукцияЭлемент;
		Прервать;
    КонецЦикла; 
	Возврат ПродукцияЭлемент;
	
//Вариант 2	
	НаборЗаписей = РегистрыСведений.ВСДСоответсвие.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект1с.Установить(ВыбНоменклатура);
	НаборЗаписей.Прочитать();
	СписокЭлементов = НаборЗаписей.ВыгрузитьКолонку("ПродукцияЭлемент");
	Если СписокЭлементов.Количество()>0 Тогда
		ПродукцияЭлемент = СписокЭлементов[0].Значение;	
	Иначе
		ПродукцияЭлемент = Справочники.ВСД_Продукция_Элемент.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПродукцияЭлемент;
КонецФункции


Функция НайтиОшибки(ФайлXML, док="")  Экспорт
	
	//Получаем файл из хранилища
//	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
// 	ФайлXML = ПолучитьИмяВременногоФайла("xml");
// 	ДвоичныеДанные.Записать(ФайлXML);    // иначе его как бы не существует
Попытка
	
	результат = Ложь;	
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлXML);	
	
	СтрОшибки ="";
	Пока ЧтениеXML.Прочитать() Цикл
		Если (ЧтениеXML.Имя = "error") и (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
			ЧтениеXML.Прочитать();
			СтрОшибки = СтрОшибки + "ОШИБКА: "+ЧтениеXML.Значение+" ";
			Сообщить("ОШИБКА: "+ЧтениеXML.Значение,СтатусСообщения.ОченьВажное);
			результат=Истина
		ИначеЕсли  (ЧтениеXML.Имя = "faultstring") и (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
			ЧтениеXML.Прочитать();
			СтрОшибки = СтрОшибки + "ОШИБКА: "+ЧтениеXML.Значение+" ";
			Сообщить("ОШИБКА: "+ЧтениеXML.Значение,СтатусСообщения.ОченьВажное);
			результат=Истина
			
		КонецЕсли;		
	КонецЦикла;
		
	Если ЗначениеЗаполнено(Док) Тогда
		ДокОбъект = док.ПолучитьОбъект();
		ДокОбъект.Комментарий = СокрЛП(ДокОбъект.Комментарий) + СтрОшибки;
		ДокОбъект.Записать();
	КонецЕсли;	
Исключение
	Сообщить("Ошибка при чтении файла "+ФайлXML);
	Сообщить("Выполнение операции прервано");
	Сообщить("Просмотрите его содержимое, при проблемах - отправьте в Техподдержку");
	Возврат Ложь;
КонецПопытки;
	Возврат результат;
КонецФункции

Функция НайтиЕдИзмерения(guid, _uuid="")	Экспорт
	если ПустаяСтрока(guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ЕдиницыИзмерения.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ЕдиницыИзмерения КАК ВСД_ЕдиницыИзмерения
		                      |ГДЕ
		                      |	ВСД_ЕдиницыИзмерения.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_ЕдиницыИзмерения Guid "+guid+" не найдена. Выполните инициализацию");
			Ответ = Справочники.ВСД_ЕдиницыИзмерения.ПустаяСсылка();	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_ЕдиницыИзмерения");
		Ответ="";
	КонецЕсли;
	 	
	Возврат Ответ;

КонецФункции

Функция НайтиФормуУпаковки(guid, name, _uuid = "", КодУпаковки = "") Экспорт

	Ответ = "";
	Guid = СокрЛП(Guid);
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ФормыУпаковки.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ФормыУпаковки КАК ВСД_ФормыУпаковки
		                      |ГДЕ
		                      |	ВСД_ФормыУпаковки.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
			Если НЕ(Ответ.Наименование = name) Тогда
				Сообщить("ВСД_ФормыУпаковки "+ Ответ.Наименование +" изменилось Наименование на ["+name+"] перезаписано");
				текСпр = Ответ.ПолучитьОбъект();
				текСпр.Наименование = name;
				текСпр.Записать();
				Ответ = текСпр.Ссылка;
			КонецЕсли;
		Иначе
			Сообщить("ВСД_ФормыУпаковки GUID ["+guid+"] добавлена");
			//создать 
			Спр = Справочники.ВСД_ФормыУпаковки.СоздатьЭлемент();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = _uuid;
			Попытка Спр.КодУпаковки = КодУпаковки; Исключение КонецПопытки; //Нет ревизита
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_ФормыУпаковки");
	КонецЕсли;
	
	Возврат Ответ;
		
КонецФункции

Функция НайтиСтрануПоGUID(GUID, name) Экспорт

	Ответ = "";
	Guid = СокрЛП(Guid);
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Страна.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Страна КАК ВСД_Страна
		                      |ГДЕ
		                      |	ВСД_Страна.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Страна ["+name+"] GUID ["+guid+"] добавлена");
			//создать 
			Спр = Справочники.ВСД_Страна.СоздатьЭлемент();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Страна");
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция НайтиГородПоGUID(GUID, name) Экспорт

	Ответ = "";
	Guid = СокрЛП(Guid);
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Город.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Город КАК ВСД_Город
		                      |ГДЕ
		                      |	ВСД_Город.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Город ["+name+"] GUID ["+guid+"] добавлена");
			//создать 
			Спр = Справочники.ВСД_Город.СоздатьЭлемент();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Город");
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

Функция НайтиРегионПоGUID(GUID, name) Экспорт

	Ответ = "";
	Guid = СокрЛП(Guid);
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Регион.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Регион КАК ВСД_Регион
		                      |ГДЕ
		                      |	ВСД_Регион.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Регион ["+name+"] GUID ["+guid+"] добавлена");
			//создать 
			Спр = Справочники.ВСД_Регион.СоздатьЭлемент();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Регион");
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

// ******** совместимо 7.7
Функция Нашебулево(знЧисло) Экспорт
	//Булево возвращает русский, не разобрался, возможно ли по англ
	Если знЧисло=0 Тогда
		Возврат "false";
	Иначе
		Возврат "true";
	КонецЕсли;
КонецФункции

Функция ДатаГод(ВыбДата)
	возврат формат(выбДата, "ДФ=""гггг""")
КонецФункции

Функция ДатаМесяц(ВыбДата)
	возврат формат(выбДата, "ДФ=""ММ""")
КонецФункции

Функция ДатаЧисло(ВыбДата)
	возврат формат(выбДата, "ДФ=""дд""")
КонецФункции

Функция ПустоеЗначение(Зн)
	возврат Число(НЕ (ЗначениеЗаполнено(Зн)) );	
КонецФункции

Процедура СообщитьИнфо(стр)
	Если ВыводитьПодробнуюИнформацию Тогда
		Сообщить(стр, СтатусСообщения.Информация );
	КонецЕсли;	
КонецПроцедуры

Процедура СообщитьОшибку(стр)
	//Если ВыводитьПодробнуюИнформацию Тогда
		Сообщить(стр, СтатусСообщения.Внимание );
	//КонецЕсли;	
КонецПроцедуры

Процедура Сообщить83(стр)
	Сообщение=Новый СообщениеПользователю();
	Сообщение.Текст=стр;
	Сообщение.Сообщить();	
КонецПроцедуры



Функция УдалитьXML(ИмяФайла) Экспорт
	
	////стандартное поведение функции
	//Если СписокКонстант.Получить("ОтладкаЗапросовXML")=0 Тогда 
	//	Попытка
	//		ФС.УдалитьФайл(ИмяФайла);
	//	Исключение
	//		Сообщить(ОписаниеОшибки());
	//	КонецПопытки;
	//КонецЕсли;
	
КонецФункции


Функция Пауза() Экспорт
//	Состояние("Пауза "+ПаузаСек+" сек");
	
	//стандартное поведение функции
	КомпонентаНаСервере.Pause(ПаузаСек*1000); // в ms
КонецФункции

Функция  ОтправитьЗапросSoap( ЗапросXML, метод ) Экспорт
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	Сообщить("Отправляем запрос");
	appID = КомпонентаНаСервере.SendRequestSoap(метод, ЗапросXML);
	//ИмяФайлаОтвет =  КомпонентаНаКлиенте.LogFilename;   // Падает Наглухо
	Возврат appID;
КонецФункции

Функция Выбрать_ВСД2( докОснование ) Экспорт
	// Выбирает подчиненные ВСД_Транзакции документы ВСД 
	тзДок = Новый ТаблицаЗначений;
	тзДок.Колонки.Добавить("Док");
	
	Если НЕ(ЗначениеЗаполнено(докОснование)) Тогда
		Возврат тзДок;
	КонецЕсли;
 		Запрос = Новый Запрос;
    	ТекстЗапроса = 
        "ВЫБРАТЬ
        |    Ссылка
        |ИЗ
        |    Документ.ВСД КАК
        |    ВСДДокументыОснования
        |ГДЕ
        |    ВСДДокументыОснования.ДокументОснование =
        |    &ВыбВСДТранзакция";
		
		Если типЗнч(докОснование) = Тип("ДокументСсылка.ВСД2_транзакция") тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ.ВСД","Документ.ВСД2");		
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
	    Запрос.УстановитьПараметр("ВыбВСДТранзакция", докОснование);
    	
	    РезультатЗапроса = Запрос.Выполнить(); 
    	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
 
	    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
    	    ВСДРезультат = ВыборкаДетальныеЗаписи.Ссылка;
        	//Сообщить(ВСДРезультат);
			//Если НЕ(СокрЛП(ВСДРезультат.Статус = "Аннулирова")) Тогда
			СтрТЗ = тзДок.Добавить();
			СтрТЗ.Док = ВСДРезультат;
			//КонецЕсли;
		КонецЦикла;	
	Возврат тзДок;
КонецФункции

Функция НайтиВСДпоUUID( _uuid, ВидДокумента = "ВСД" ) 
		
	если ПустаяСтрока(_uuid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	"+ВидДокумента+".Ссылка
		                      |ИЗ
		                      |	Документ."+ВидДокумента+" КАК "+ВидДокумента+"
		                      |ГДЕ
		                      |	"+ВидДокумента+".UUID = &UUID");
		Запрос.УстановитьПараметр("UUID", _Uuid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			ДокОб = Результат.Ссылка.ПолучитьОбъект();		
			ДокОб.Записать( РежимЗаписиДокумента.ОтменаПроведения, );
			ДокОб.УстановитьПометкуУдаления(Ложь);
			//Док.СнятьПометкуУдаления();
			
			Сообщить("Найден "+Результат.Ссылка);
		Иначе
			ДокОб = Документы[ВидДокумента].СоздатьДокумент();
			//ДокОб.applicationId = applicationId;

			Сообщить("Создан новый "+ВидДокумента+" № "+ДокОб.Номер);
		КонецЕсли;	
		
	Иначе
		Сообщить("Пустой UUID");
	КонецЕсли;
	
	Возврат ДокОб;

КонецФункции

Функция НайтиВСДпоApplicationId(applicationId, ВидДокумента) 

	Ответ = "";
	если ПустаяСтрока(applicationId)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	"+ВидДокумента+".Ссылка
		                      |ИЗ
		                      |	Документ."+ВидДокумента+" КАК "+ВидДокумента+"
		                      |ГДЕ
		                      |	"+ВидДокумента+".applicationId = &applicationId");
		Запрос.УстановитьПараметр("applicationId", applicationId );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			//Сообщить("ВСД_Город ["+name+"] GUID ["+guid+"] добавлена");
			////создать 
			//Спр = Справочники.ВСД_Город.СоздатьЭлемент();
			////Спр.Код = ;
			//Спр.Наименование = name;
			//Спр.GUID = guid;
			//Спр.Записать();
			//Ответ = Спр.Ссылка;			
		КонецЕсли;		
	Иначе
		Сообщить("Пустой applicationId");
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции


//=================== ХозСубъекты ===================================

//Вызов с клиента с передачей файла с клиента
Функция Удалить_ХС_ЗаписатьGuid(ХС,АдресФайлаОтветаВХранилище) Экспорт
	//Получаем файл из хранилища
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаОтветаВХранилище);
 	ИмяФайлаответ = ПолучитьИмяВременногоФайла("xml");
 	ДвоичныеДанные.Записать(ИмяФайлаответ);    // иначе его как бы не существует
  	Сообщить("Загрузка XML-файла: "+ИмяФайлаответ);    
    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаответ);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Если Число(xdto.businessEntityList.total)>0 Тогда	
		// mitmond тут может быть список, если ХС задвоен 
		Если  Число(xdto.businessEntityList.total)>1 тогда
			для каждого стр из xdto.businessEntityList.businessEntity цикл
				guid = стр.guid;
				_uuid = стр.uuid;
				active = стр.active;
			конеццикла ;
		иначе
		// end
			guid = xdto.businessEntityList.businessEntity.guid;
			_uuid = xdto.businessEntityList.businessEntity.uuid;
			active = xdto.businessEntityList.businessEntity.active;
		конецесли;	//	
					
		ОбъектХС = ХС.ПолучитьОбъект();
		ОбъектХС.GUID = GUID;
		ОбъектХС.UUID = _uuid;
		ОбъектХС.Записать();
		Сообщить("Записан ХозСубъект ["+ХС+"] GUID = "+GUID);
		Возврат "SUCCESS";
	Иначе
		Возврат "REJECTED";	
	КонецЕсли;
	
	
КонецФункции

Функция ЗагрузитьХСПоGUID(GUID) Экспорт
//ЖД Потестить, прилизать
// В др процедурах не происходит связь с вновь созданным ХС - порешать

	Если НЕ(ЗначениеЗаполнено(GUID)) Тогда 
		Сообщить("Пустой GUID для поиска ХС");
		Возврат "REJECTED";
	КонецЕсли;
	
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	
	ЗапросXML = "
	|<soapenv:Envelope xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|		  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2' 
	|		  xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'>
	|<soapenv:Header/>
	|<soapenv:Body>
	|   <ws:getBusinessEntityByGuidRequest>
	|      <bs:guid>"+GUID+"</bs:guid>
	|   </ws:getBusinessEntityByGuidRequest>
	|</soapenv:Body>
	|</soapenv:Envelope>";
	
	
	метод = КомпонентаНаСервере.GetMethod();
	метод.Service = "platform/services/2.0/EnterpriseService";
	метод.Action = "GetBusinessEntityByGUID";	
	
	Сообщить(" Запрос getEnterpriseByGuid [ "+СокрЛП(GUID)+" ]");
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	
	Если НайтиОшибки(КомпонентаНаСервере.LogFilename)> 0 Тогда
		Возврат "";	
	КонецЕсли;

	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	businessEntity = xdto.Body.getBusinessEntityByGuidResponse.businessEntity;
	guid = businessEntity.guid;
	_uuid = businessEntity.uuid;
	
	//dt:type>3</dt:type - ЖД вероятно Тип ЮЛ или ИП
	
	Попытка name = businessEntity.name; Исключение name=""; КонецПопытки;
	Если name = "" тогда
		Попытка name = businessEntity.fio; Исключение name=""; КонецПопытки;	
	КонецЕсли;
	
	Попытка Fullname = businessEntity.fullname;  Исключение Fullname=""; КонецПопытки;
	active = businessEntity.active;
	Попытка ИНН =  businessEntity.inn; Исключение ИНН=""; КонецПопытки;
	Попытка КПП = businessEntity.kpp; Исключение КПП=""; КонецПопытки;
	Попытка ОГРН = businessEntity.ogrn; Исключение ОГРН=""; КонецПопытки;
	address = businessEntity.juridicalAddress.addressView;
	
	
	Спр = Новый("СправочникМенеджер.ВСД_ХозСубъект");
	Ссылка_ВСД_ХозСубъект = Спр.НайтиПоРеквизиту("GUID",Guid);
	Если Ссылка_ВСД_ХозСубъект = Справочники.ВСД_ХозСубъект.ПустаяСсылка() Тогда 
		Объект_ВСД_ХозСубъект = Справочники.ВСД_ХозСубъект.СоздатьЭлемент();
	Иначе
		Объект_ВСД_ХозСубъект = Ссылка_ВСД_ХозСубъект.ПолучитьОбъект(); 
	КонецЕсли;
	
	Объект_ВСД_ХозСубъект.Наименование = name;
	//Объект_ВСД_ХозСубъект.Адрес = address;
	Объект_ВСД_ХозСубъект.GUID = guid;
	Объект_ВСД_ХозСубъект.UUID = _uuid;	
	
	// Ищем контрагента
	Спр = Новый("СправочникМенеджер.Контрагенты");
	Ссылка_Контрагент = Спр.НайтиПоРеквизиту("ИНН",ИНН);
	Если Ссылка_Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		Сообщить("Не найден в справочнике Контрагент "+name+" ИНН "+ИНН+" ХС запишем без указания контрагента 1С");
		// Выбираем из справочника
//		ФормаВыбора = Справочники.Контрагенты.ПолучитьФормуВыбора();
//		ФормаВыбора.Заголовок	= "Выберите контрагента ИНН "+ИНН+ " "+name+ " "+address; 
//		Ссылка_Контрагент = ФормаВыбора.ОткрытьМодально();
//		Если Ссылка_Контрагент = Неопределено Тогда
			//Не выбрали - попробуем создать
//			ТекстВопроса = "Не найден и не выбран контрагент ИНН "+ИНН+ " "+name+"
//			|Создать?";
//			Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,0);
//			Если Ответ = КодВозвратаДиалога.Да Тогда
//				Объект_Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
//				Объект_Контрагент.Наименование = name;
//				Объект_Контрагент.ИНН = ИНН;
//				Объект_Контрагент.КПП = КПП;
				// Вид контрагента добавить нужно
//				Объект_Контрагент.НаименованиеПолное = fullname;
//				Объект_Контрагент.Комментарий = "ОГРН: "+ОГРН+"; "+ address;
//				Объект_Контрагент.Записать();
//				СообщитьИнфо("Записан Контрагент ИНН ["+ИНН+ " "+name+"]  Адрес: "+address);
//			Иначе			
//				Сообщить("Невозможно создать ХС, т.к. не указан контрагент");
//				Возврат "";
//			КонецЕсли;
//		Иначе
//			Объект_Контрагент = Ссылка_Контрагент.ПолучитьОбъект();
//		КонецЕсли;
	Иначе //Нашли по ИНН
		Объект_Контрагент = Ссылка_Контрагент.ПолучитьОбъект();
		Объект_ВСД_ХозСубъект.Контрагент = Объект_Контрагент.Ссылка;
	КонецЕсли;
//	Объект_ВСД_ХозСубъект.Контрагент = Объект_Контрагент.Ссылка;
	Объект_ВСД_ХозСубъект.Записать();
	СообщитьИнфо("Записан ВСД_Хозсубъект ["+Объект_ВСД_ХозСубъект+"] GUID = "+ Guid+" Адрес: "+address);		

	УдалитьXML( КомпонентаНаСервере.LogFilename);
	
	Возврат Объект_ВСД_ХозСубъект.Ссылка;
	
КонецФункции

Функция НайтиХСпоGUID(Guid) Экспорт

	Ответ = "";
	Guid = СокрЛП(Guid);
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ХозСубъект.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
		                      |ГДЕ
		                      |	ВСД_ХозСубъект.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			//СообщитьОшибку("Guid "+Guid+" не найден, создайте ХС и выполните синхронизацию");	
			Ответ = ЗагрузитьХСПоGUID(guid);
		КонецЕсли;
		
	Иначе
		СообщитьИнфо("Пустой Guid ХозСубъекта");
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция СоздатьНовыйХозСубъект(ВыбКонтрагент)
	Спр = Справочники.ВСД_ХозСубъект.СоздатьЭлемент();
	Спр.Контрагент = ВыбКонтрагент;
	Спр.Наименование = ВыбКонтрагент.Наименование;
	Спр.Записать();
	Сообщить("Создан ХозСубъект "+Спр.Ссылка);
	
	Возврат Спр.Ссылка;
КонецФункции

Функция НайтиХозСубъект(ВыбКлиент) Экспорт

	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВСД_ХозСубъект.Ссылка,
	               |	ВСД_ХозСубъект.Контрагент,
	               |	ВСД_ХозСубъект.GUID
	               |ИЗ
	               |	Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
	               |ГДЕ
	               |	ВСД_ХозСубъект.Контрагент = &Контрагент";
	Запрос.УстановитьПараметр("Контрагент", ВыбКлиент);				   
					   
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда 
		Ответ = Результат.Ссылка;
	Иначе
		Ответ = СоздатьНовыйХозСубъект(ВыбКлиент);
	КонецЕсли;

	Возврат Ответ;
КонецФункции

Функция ХС_ПолучитьGuid(ХС) Экспорт
	//стандартное поведение функции		
	ИНН = ПолучитьИНН(ХС.Контрагент);   //М.Б. Переделать на
//	СведенияоКонтрагенте = ПолучитьСведенияОКонтрагенте(ХС.Контрагент,ТекущаяДата());
//	ИНН = СведенияоКонтрагенте.ИНН;
	Если ПустаяСтрока(ИНН)=1 Тогда 
		Сообщить("Неправильно указан ИНН");
		Возврат "ERROR";
	КонецЕсли;	
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	Сообщить(" Запрос GetBusinessEntityByINN [ "+ИНН+" ]");		
	Результат = КомпонентаНаСервере.GetBusinessEntityByINN( ИНН );	
	
	Если Результат="SUCCESS" Тогда

	  	СообщитьИнфо("Загрузка XML-файла: "+КомпонентаНаСервере.LogFilename);    
	    
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
		xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		Если Число(xdto.businessEntityList.total)>0 Тогда	
			// mitmond тут может быть список, если ХС задвоен 
			Если  Число(xdto.businessEntityList.total)>1 тогда
			для каждого стр из xdto.businessEntityList.businessEntity цикл
				guid = стр.guid;
				_uuid = стр.uuid;
				active = стр.active;
			конеццикла ;
			иначе
			// end
			guid = xdto.businessEntityList.businessEntity.guid;
			_uuid = xdto.businessEntityList.businessEntity.uuid;
			active = xdto.businessEntityList.businessEntity.active;
			конецесли;	//	
					
			ОбъектХС = ХС.ПолучитьОбъект();
			ОбъектХС.GUID = GUID;
			ОбъектХС.UUID = _uuid;
			ОбъектХС.Записать();
			Сообщить("Записан ХозСубъект ["+ХС+"] GUID = "+GUID);			
		Иначе
			Сообщить("ХозСубъект ["+ХС+"] с ИНН "+ИНН+" не найден в ГИС Меркурий");			
		КонецЕсли;
		
	КонецЕсли;	
		
	Возврат Результат;
	
КонецФункции

Процедура ХС_Создать_Ответ( applicationID, ХС)
	
	Если Не (ЗначениеЗаполнено(applicationID)) Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateBusinessEntityResult [ "+СокрЛП(applicationID)+" ]");		
	Результат = КомпонентаНаСервере.CreateBusinessEntityResult( СокрЛП(applicationID));
	//Отладка();	
	
    СообщитьИнфо("Загрузка XML-файла: "+КомпонентаНаСервере.LogFilename);        
 	
	Если НайтиОшибки(КомпонентаНаСервере.LogFilename) Тогда 
		Возврат;
	КонецЕсли;
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Попытка
		be = xdto.application.result.modifyBusinessEntityResponse.businessEntity;
		guid = be.guid;
		_uuid = be.uuid;
		ОбъектХС = ХС.ПолучитьОбъект();
		ОбъектХС.GUID = guid;
		ОбъектХС.UUID = _uuid;
		ОбъектХС.Записать();
		Сообщить("Записан ХозСубъект ["+ХС+"] GUID = "+GUID);	
	Исключение
		Сообщить("ХозСубъект ["+ХС+"] неудалось записать отчет ГИС Меркурий");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	УдалитьXML( КомпонентаНаСервере.LogFilename );
КонецПроцедуры

Процедура ХС_Создать(ХС)   Экспорт
	СведенияОПлательщике = ПолучитьСведенияОКонтрагенте(ХС.Контрагент,ТекущаяДата());	// в упп нет ф-ции
	ИНН = СведенияОПлательщике.ИНН;	
	КПП = СведенияОПлательщике.КПП;	
	Попытка
		ОГРН = ?(ЗначениеЗаполнено(СведенияОПлательщике.ОГРН),СведенияОПлательщике.ОГРН,ХС.Контрагент.ОГРН);
	Исключение
		ОГРН = СокрЛП(ХС.ОГРН);
	КонецПопытки;
	Адрес = СведенияОПлательщике.ЮридическийАдрес;//ПолучитьАдрес(СведенияОПлательщике,"ЮридическийАдрес");//ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПлательщике, "ЮридическийАдрес");	
	Наименование = СведенияОПлательщике.ПолноеНаименование;//хс.Контрагент.НаименованиеПолное;
	
	Если не(ЗначениеЗаполнено(ИНН)) Тогда 
		СообщитьОшибку("Неправильно указан ИНН");
		Возврат;
	КонецЕсли;	
	Если НЕ(ЗначениеЗаполнено(ОГРН)) Тогда 
		СообщитьОшибку("Не указан ОГРН");
		Возврат;
	КонецЕсли;
	
	Если НЕ(ЗначениеЗаполнено(Адрес)) Тогда 
		Сообщить("Не указан Юридический Адрес ХС");
		Возврат;
	КонецЕсли;
	
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	
	Сообщить(" Запрос CreateBusinessEntity [ "+ИНН+" ]");		
	Результат = КомпонентаНаСервере.CreateBusinessEntity(
			Наименование, 
			Наименование, 
			ИНН, 
			КПП, 
			ОГРН, 
	        СокрЛП(Страна.GUID), 
            СокрЛП(Регион.GUID), 
            СокрЛП(Город.GUID), 
			Адрес
	);
	
	//Отладка();	
	УдалитьXML( КомпонентаНаСервере.LogFilename );
	
	Если Результат="ACCEPTED" Тогда
		//Состояние("Пауза "+ПаузаСек+" сек");
		Пауза();
		
		ХС_Создать_Ответ( КомпонентаНаСервере.ApplicationId, ХС )
		
	КонецЕсли;
	
КонецПроцедуры

//================== Площадки ===================================
Функция НайтиПлощадку(guid)
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Площадка.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Площадка КАК ВСД_Площадка
		                      |ГДЕ
		                      |	ВСД_Площадка.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Ответ = ЗагрузитьПлощадкуПоGUID(guid);	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Площадка");
	КонецЕсли;
	 	
	Возврат Ответ;
КонецФункции

Процедура СоздатьПлощадку(Площадка) Экспорт
	
	Если ПустаяСтрока(Площадка.GuidХозСубъекта)=1 Тогда
		Сообщить("Не указан Guid ХозСубъекта");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(Площадка.Адрес)=1 Тогда
		Сообщить("Не указан Адрес");
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(Страна.GUID)=1 Тогда
		Сообщить("Не указан Страна.GUID");
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(Регион.GUID)=1 Тогда
		Сообщить("Не указан Регион.GUID");
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(Город.GUID)=1 Тогда
		Сообщить("Не указан Город.GUID");
		Возврат;
	КонецЕсли;
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	Сообщить(" Запрос CreateEnterprise [ "+СокрЛП(Площадка)+" ]");		
	Результат = КомпонентаНаСервере.CreateEnterprise(
			СокрЛП(Площадка.Наименование),
			СокрЛП(Площадка.Адрес), 
	        СокрЛП(Страна.GUID),
            СокрЛП(Регион.GUID),
            СокрЛП(Город.GUID), 
			СокрЛП(Площадка.GuidХозСубъекта)
	);	
	//Отладка();	
		
	УдалитьXML( КомпонентаНаСервере.LogFilename );
	
	Если Результат="ACCEPTED" Тогда
		//Состояние("Пауза "+ПаузаСек+" сек");
		Пауза();
		
		ПолучитьОтветПлощадка( КомпонентаНаСервере.ApplicationId, Площадка )
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОтветПлощадка( applicationID , Площадка) Экспорт
	
	Если ПустаяСтрока(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateEnterpriseResult [ "+СокрЛП(applicationID)+" ]");		
	Результат = КомпонентаНаСервере.CreateEnterpriseResult( СокрЛП(applicationID));
	
    СообщитьИнфо("Загрузка XML-файла: "+КомпонентаНаСервере.LogFilename);    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Если НайтиОшибки(КомпонентаНаСервере.LogFilename) Тогда
		Возврат ;
	КонецЕсли;

	
	enterprise = xdto.application.result.modifyEnterpriseResponse.enterprise;
	guid = enterprise.guid;
	_uuid = enterprise.uuid;
	active = enterprise.active;
	Попытка 
		name = enterprise.name;
	Исключение 
		name = enterprise.fio;
	КонецПопытки;
			
	ОбъектПлощадка = Площадка.ПолучитьОбъект();
	ОбъектПлощадка.guid = guid;
	ОбъектПлощадка.uuid = _uuid;
	ОбъектПлощадка.Записать();
	Сообщить("Успешно записан ВСД_Площадка ["+Площадка+"] GUID = "+GUID);
      			
	УдалитьXML( КомпонентаНаСервере.LogFilename );
	Пауза();
	
	СоздатьСвязьХозсубъектПлощадка(Площадка);

КонецПроцедуры

Процедура СоздатьСвязьХозсубъектПлощадка(Площадка) Экспорт
	Если ПустаяСтрока(Площадка.GuidХозСубъекта)=1 Тогда 
		Сообщить("не указан GUID хоз субъекта");
		Возврат;
	КонецЕсли;
		
	Если ПустаяСтрока(Площадка.GUID)=1 Тогда 
		Сообщить("Выб площадке не указан GUID");
		Возврат;
	КонецЕсли;
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	Сообщить(" Запрос CreateActivityLocationsOperation [ "+СокрЛП(Площадка)+" ]");		
	Результат = КомпонентаНаСервере.CreateActivityLocationsOperation(
			СокрЛП(Площадка.GuidХозСубъекта),
			СокрЛП(Площадка.GUID) 
	);
	
	//Отладка();	
	УдалитьXML( КомпонентаНаСервере.LogFilename );
	
	Если Результат="ACCEPTED" Тогда
		Пауза();
		
		ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( КомпонентаНаСервере.ApplicationId)
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( applicationID )
	
	Если ПустаяСтрока(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateActivityLocationsOperationResult [ "+СокрЛП(applicationID)+" ]");		
	Результат = КомпонентаНаСервере.CreateActivityLocationsOperationResult( СокрЛП(applicationID));
	
	Если Результат="COMPLETED" Тогда			
		//objDom=СоздатьОбъект("MSXML2.DOMDocument");
		//objDom.load(ГМ.КомпонентаНаСервере.LogFilename);    	        
		//businessEntity=objDom.selectSingleNode("//merc:businessEntity") ;									
		//guid = businessEntity.selectSingleNode("base:guid").text;
		//uuid = businessEntity.selectSingleNode("base:uuid").text;			
		//active = businessEntity.selectSingleNode("base:active").text;		
		//enterprise = businessEntity.selectSingleNode("ent:activityLocation").selectSingleNode("ent:enterprise").selectSingleNode("base:guid").text;		
		Сообщить("Успешно установлена связь ВСД_Площадка ");//["+enterprise+"] ВСД_ХозСубъект ["+guid+"]");
		//рез = КомпонентаНаСервере.ResultString;
	Иначе
		//ЖД ТЕСТ покажем ошибки
		НайтиОшибки(КомпонентаНаСервере.LogFilename);	
	
	КонецЕсли;	
	
	УдалитьXML( КомпонентаНаСервере.LogFilename );
КонецПроцедуры

Функция НайтиПлощадкиПоНазванию_ЗапросXML(Регион, Название,Смещение = 0)
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' 
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <ws:getRussianEnterpriseListRequest>
	|     	<bs:listOptions>
	|            <bs:count>1000</bs:count>
	|            <bs:offset>"+СтрЗаменить( Смещение , Символы.НПП ,"")+"</bs:offset>
	|        </bs:listOptions>
	|     	<dt:enterprise>";
	Если ПустоеЗначение(Название) = 0 Тогда
	    Запрос = Запрос + "
		|            <dt:name>"+СокрЛП(Название)+"</dt:name>";	
	КонецЕсли;
	Запрос = Запрос + "
	|            <dt:address>
	|               <dt:region>
	|                  <bs:guid>"+СокрЛП(Регион.GUID)+"</bs:guid>
	|               </dt:region>
	|            </dt:address>
	|        </dt:enterprise>
	|      </ws:getRussianEnterpriseListRequest>
	|   </soapenv:Body>
	|</soapenv:Envelope>";	
	Возврат Запрос;
КонецФункции

Функция НайтиПлощадкиПоНазванию(ХС, Регион, ВыбНазвание) Экспорт
	//стандартное поведение функции	
	Если НЕ(ЗначениеЗаполнено(ХС.GUID)) Тогда
		//ЖД по идее можно подгрузить и записать все с ответом owner
		Сообщить("Не указан ХозСубъект GUID ");
		Возврат 0;
	КонецЕсли;
	
//	Стр = СокрЛП(ХС.Контрагент.НаименованиеПолное);
//	Если СтрДлина( СокрЛП(ХС.Контрагент.ИНН) )=12 Тогда 
		//ИП
//		стр = СтрЗаменить(стр, " ИП","");
//		стр = СтрЗаменить(стр, "ИП ","");
//	КонецЕсли;
	
	Если НЕ(ЗначениеЗаполнено(ВыбНазвание)) Тогда
		Сообщить("Не указно Наименование для поиска площадки");
	//	стр = ВыбНазвание;
	//	Сообщить("Уточненное название ввести на клиенте и передать в параметр");
	//	Если ВвестиЗначение(стр,"Название контрагента","Строка")=0 Тогда 
	//		Возврат 0;
	//	КонецЕсли;
	КонецЕсли;
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	Сообщить(" Запрос GetRussianEnterpriseListByName [ "+ВыбНазвание+" ] регион = ["+Регион+"]");
	ПолученоЗаписей = 1000; Смещение = 0;
	Пока ПолученоЗаписей = 1000 Цикл
		ПолученоЗаписей = 0;
		ЗапросXML = НайтиПлощадкиПоНазванию_ЗапросXML( Регион, ВыбНазвание, Смещение);

		метод = КомпонентаНаСервере.GetMethod();
		метод.Service = "platform/services/2.0/EnterpriseService";
    	метод.Action = "GetRussianEnterpriseList";	
	
		appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	
    	СообщитьИнфо("Загрузка XML-файла: "+КомпонентаНаСервере.LogFilename);    
    
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
		xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

		Если НайтиОшибки(КомпонентаНаСервере.LogFilename) Тогда
			Возврат Ложь;
		КонецЕсли;
	
		Попытка
			List = xdto.Body.getRussianEnterpriseListResponse.enterpriseList.enterprise;
		
			Если ТипЗнч(List)<>Тип("СписокXDTO") Тогда 
				enterpriseList = Новый Массив;
				enterpriseList.Добавить(List);
			Иначе
				enterpriseList = List;
			КонецЕсли;
			ПолученоЗаписей = enterpriseList.Количество();
			Для каждого enterprise из enterpriseList Цикл		
				Попытка
					guid = enterprise.guid;
				Исключение
					Сообщить("Не удалось прочитать GUID площадки из файла "+КомпонентаНаСервере.LogFilename,СтатусСообщения.Внимание);
					Продолжить;
				КонецПопытки;
				Спр = Новый("СправочникМенеджер.ВСД_Площадка");
				Ссылка_ВСД_Площадка = Спр.НайтиПоРеквизиту("GUID",Guid);
				Если Ссылка_ВСД_Площадка = Справочники.ВСД_Площадка.ПустаяСсылка() Тогда 
					Объект_ВСД_Площадка = Справочники.ВСД_Площадка.СоздатьЭлемент();
				Иначе
					Объект_ВСД_Площадка = Ссылка_ВСД_Площадка.ПолучитьОбъект(); 
				КонецЕсли;
			
				Объект_ВСД_Площадка.Наименование = enterprise.name;
				Объект_ВСД_Площадка.Адрес = enterprise.address.addressView;
				Объект_ВСД_Площадка.GUID = enterprise.guid;
				Объект_ВСД_Площадка.UUID = enterprise.uuid;	
			    Попытка ГУИДХС = enterprise.owner.guid; Исключение ГУИДХС = ХС.GUID; КонецПопытки;  //ЖД  Если есть owner то его ГУИД и пишем
				Объект_ВСД_Площадка.GUIDХозСубъекта = ГУИДХС;//ХС.GUID;
			
				Объект_ВСД_Площадка.Записать();
				Сообщить("Записан ВСД_Площадка ["+Объект_ВСД_Площадка+"] GUID = "+ Guid);				
				//ЗагрузитьПлощадкуПоGUID(guid, ХС);
						
			КонецЦикла;
		Исключение
			Сообщить("Ошибка при получении площадок, привязанных к ХозСубъекту");
		КонецПопытки;
		Смещение = Смещение + 1000;
	КонецЦикла;  // более 1000
	Сообщить("Загрузка площадок завершена");
	
	Возврат 1;
КонецФункции

Функция НайтиПлощадкиПоУсловиям_ЗапросXML(СписокУсловий, Смещение=0)

	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' 
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <ws:getRussianEnterpriseListRequest>
	|     	<bs:listOptions>
	|            <bs:count>1000</bs:count>
	|            <bs:offset>"+СтрЗаменить( Смещение , Символы.НПП ,"")+"</bs:offset>
	|        </bs:listOptions>
	|     	<dt:enterprise>";
	Если ПустоеЗначение( СписокУсловий.Получить("uuid") ) = 0 Тогда
	    Запрос = Запрос + "
		|            <dt:uuid>"+ СписокУсловий.Получить("uuid") +"</dt:uuid>";	
	КонецЕсли;
	Если ПустоеЗначение( СписокУсловий.Получить("guid") ) = 0 Тогда
	    Запрос = Запрос + "
		|            <dt:guid>"+ СписокУсловий.Получить("guid") +"</dt:guid>";	
	КонецЕсли;
	Если ПустоеЗначение( СписокУсловий.Получить("Название") ) = 0 Тогда
	    Запрос = Запрос + "
		|            <dt:name>"+ СписокУсловий.Получить("Название") +"</dt:name>";	
	КонецЕсли;
	Если ПустоеЗначение( СписокУсловий.Получить("НомерПлощадки") ) = 0 Тогда
	    Запрос = Запрос + "
		|        <dt:numberList>
		|            <dt:name>"+ СписокУсловий.Получить("НомерПлощадки") +"</dt:name>
		|        </dt:numberList> ";	
	КонецЕсли;
	Если ПустоеЗначение( СписокУсловий.Получить("Регион") ) = 0 Тогда
		Запрос = Запрос + "
		|            <dt:address>
		|               <dt:region>
		|                  <bs:guid>"+ СписокУсловий.Получить("Регион").GUID +"</bs:guid>
		|               </dt:region>
		|            </dt:address> ";
	КонецЕсли;
	Запрос = Запрос + "
	|        </dt:enterprise>
	|      </ws:getRussianEnterpriseListRequest>
	|   </soapenv:Body>
	|</soapenv:Envelope>";	
	Возврат Запрос;
КонецФункции


Функция НайтиПлощадкиПоУсловиям(СписокУсловий, Смещение=0) Экспорт
	//стандартное поведение функции	
	Если НЕ(ЗначениеЗаполнено(СписокУсловий)) Тогда
		Сообщить("Не указаны условия ");
		Возврат 0;
	КонецЕсли;
	
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	Сообщить(" Запрос GetRussianEnterpriseListByName ");
	ЗапросXML = НайтиПлощадкиПоУсловиям_ЗапросXML( СписокУсловий );

	метод = КомпонентаНаСервере.GetMethod();
	метод.Service = "platform/services/2.0/EnterpriseService";
	метод.Action = "GetRussianEnterpriseList";	

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);

	СообщитьИнфо("Загрузка XML-файла: "+КомпонентаНаСервере.LogFilename);    

	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Если НайтиОшибки(КомпонентаНаСервере.LogFilename) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Сообщить("Загрузка площадок завершена");
	
	Возврат xdto;
КонецФункции


Функция ЗагрузитьПлощадкуПоGUID(GUID, ХС="") Экспорт
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	Сообщить(" Запрос getEnterpriseByGuid [ "+СокрЛП(GUID)+" ]");		
	Результат = КомпонентаНаСервере.getEnterpriseByGuid( СокрЛП(GUID) );	
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
    
    enterprise = xdto.enterprise ;						
	guid = enterprise.guid;
	_uuid = enterprise.uuid;
	name = enterprise.name;
	active = enterprise.active;		
	Попытка address =  ?(ТипЗнч(enterprise.address.addressView) = Тип("Строка"),enterprise.address.addressView,""); Исключение address = "" ;КонецПопытки;
	
	Спр = Новый("СправочникМенеджер.ВСД_Площадка");
	Ссылка_ВСД_Площадка = Спр.НайтиПоРеквизиту("GUID",Guid);
	Если Ссылка_ВСД_Площадка = Справочники.ВСД_Площадка.ПустаяСсылка() Тогда 
		Объект_ВСД_Площадка = Справочники.ВСД_Площадка.СоздатьЭлемент();
		//Спр.УстановитьНовыйКод("00");	
	Иначе
		Объект_ВСД_Площадка = Ссылка_ВСД_Площадка.ПолучитьОбъект(); 
	КонецЕсли;
	
	Объект_ВСД_Площадка.Наименование = name;
	Объект_ВСД_Площадка.Адрес = address;
	Объект_ВСД_Площадка.GUID = guid;
	Объект_ВСД_Площадка.UUID = _uuid;	
	
	Если ХС="" Тогда
		СообщитьОшибку("Внимание: создана площадка ["+GUID+"] без указания ХозСубъекта ");
		//Возврат;
	Иначе 
		Объект_ВСД_Площадка.GUIDХозСубъекта = ХС.GUID;
	КонецЕсли;	
	
	Объект_ВСД_Площадка.Записать();
	СообщитьИнфо("Записана ВСД_Площадка ["+Объект_ВСД_Площадка+"] GUID = "+ Guid);		
	Возврат Объект_ВСД_Площадка.Ссылка;
КонецФункции

Функция ЗагрузитьПлощадки(ХС)	Экспорт
	Если ПустаяСтрока(ХС.GUID)=1 Тогда 
		ХС_ПолучитьGuid(ХС);
	КонецЕсли;
	
	Если ПустаяСтрока(ХС.GUID)=1 Тогда 
		Сообщить("В ХозСубъекте ["+ХС+"] не указан GUID");
		Возврат "";
	КонецЕсли;
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	Сообщить(" Запрос getBusinessEntityByGuid [ "+СокрЛП(ХС.GUID)+" ]");		
	Результат = КомпонентаНаСервере.GetBusinessEntityByGuid( СокрЛП(ХС.GUID) );
	
	//Отладка();
			
    СообщитьИнфо("Загрузка XML-файла: "+КомпонентаНаСервере.LogFilename);    
    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Если НайтиОшибки(КомпонентаНаСервере.LogFilename) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		List = xdto.businessEntity.activityLocation;
		
		Если ТипЗнч(List)<>Тип("СписокXDTO") Тогда 
			activityLocationList = Новый Массив;
			activityLocationList.Добавить(List);
		Иначе
			activityLocationList = List;
		КонецЕсли;
		
		Для каждого activityLocation из activityLocationList Цикл		
				
			guid = activityLocation.enterprise.guid;
			
			ЗагрузитьПлощадкуПоGUID(guid, ХС);
						
		КонецЦикла;
	Исключение
		Сообщить("Ошибка при получении площадок, привязанных к ХозСубъекту");
	КонецПопытки;
	Сообщить("Загрузка площадок завершена");
КонецФункции

Процедура ЗагрузитьПлощадкиСписком(ВыбНаименование="")  Экспорт
	
	тзСвертка = Отгрузки.Выгрузить();
	тзСвертка.Свернуть("Отметка, Грузополучатель, Площадка, Контрагент, ХозСубъект",);
	
	Для Каждого стр Из тзСвертка Цикл
		Если стр.Отметка Тогда 
			Если стр.ХозСубъект = Справочники.ВСД_ХозСубъект.ПустаяСсылка() Тогда 
				стр.ХозСубъект = НайтиХозСубъект(стр.Контрагент);
			КонецЕсли;
			
			Если ПустаяСтрока(стр.ХозСубъект.GUID) Тогда 
				ХС_ПолучитьGuid(стр.ХозСубъект);
			КонецЕсли;
			Если НЕ (ЗначениеЗаполнено(ВыбНаименование)) Тогда 
				Если НЕ(ПустаяСтрока(стр.ХозСубъект.GUID)) Тогда 
					ЗагрузитьПлощадки(стр.ХозСубъект);							
				КонецЕсли;
			Иначе
				Если НЕ(ПустаяСтрока(стр.ХозСубъект.GUID)) Тогда 
					НайтиПлощадкиПоНазванию(стр.ХозСубъект, СписокКонстант.Получить("Регион"), ВыбНаименование);						
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли
	КонецЦикла;
	РаскраситьТЧОтгрузки();
	Для каждого ДанныеСтроки из Отгрузки Цикл
		Если ЗначениеЗаполнено(ДанныеСтроки.ХозСубъект.GUID)Тогда
			ДанныеСтроки.Отметка = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//================================================================

//================ Заполнение табличной части ============================
Функция СформироватьЗапрос(Организации = Неопределено, ПлощадкаОтправителя = Неопределено, ДатаНачала, ДатаОкончания) Экспорт
	//ЖД добавлена фильтрация Реализации по Складу отправителю (=текущая ПлощадкаОтправителя.Склад)
	// м.б. при незаполненном реквизите Склад у Площадки не фильтровать по складу ????
	Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Регистраторы",				Регистраторы);
	Запрос.УстановитьПараметр("ДатаНачала",					ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",				ДатаОкончания);
	Запрос.УстановитьПараметр("ЧасНач",					Час(ДатаНачала));
	Запрос.УстановитьПараметр("ЧасКон",				Час(ДатаОкончания));
	
	Запрос.УстановитьПараметр("СписокОрганизаций",			Организации);
//	Попытка Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад",	ПлощадкаОтправителя.Склад); Исключение КонецПопытки;
	Если ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя тогда
		Попытка 
			Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад",	ПлощадкаОтправителя.Склад);
			Если НЕ(ЗначениеЗаполнено(ПлощадкаОтправителя.Склад)) Тогда
				Сообщить("Не определен Склад по Площадке "+ПлощадкаОтправителя+" привяжите склад к площадке либо отключите параметр Фильтровать Реализацию По Складу Площадки Отправителя!");	
			КонецЕсли;
		Исключение 
			Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад",	""); 
			Сообщить("Не определен Склад по Площадке для фильтрации документов!"); 
		КонецПопытки;	
	КонецЕсли;


	Попытка Запрос.УстановитьПараметр("ВыбМаршрут",	Маршрут); Исключение КонецПопытки;
	//Запрос.УстановитьПараметр("Сотрудник",					Сотрудник);
	//Запрос.УстановитьПараметр("ОтбиратьСобытияПоДокументу",	ЗначениеЗаполнено(Регистраторы));
	//Запрос.УстановитьПараметр("НеОтбиратьПоПодразделению",	Не ЗначениеЗаполнено(ПодразделениеОрганизации));
	//Запрос.УстановитьПараметр("НеОтбиратьПоСотруднику",		Не ЗначениеЗаполнено(Сотрудник));
	//Запрос.УстановитьПараметр("НеОтбиратьПоОрганизации",	Не ЗначениеЗаполнено(Организации));
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Док,";
	Если РеквизитГрузополучатель = 0 Тогда
		Запрос.Текст = 	Запрос.Текст + "
		|	РеализацияТоваровУслуг.Контрагент КАК Грузополучатель,";
	Иначе
		Запрос.Текст = 	Запрос.Текст + "
		|	ПОДСТРОКА(РеализацияТоваровУслуг.АдресДоставки, 1, 100) КАК Грузополучатель,";
	КонецЕсли;
	Если ЗначениеЗаполнено(Маршрут) = 1 Тогда
		Запрос.Текст = 	Запрос.Текст + "
		|	РеализацияТоваровУслуг.Маршрут КАК Маршрут,";
	КонецЕсли;
	//|	ПОДСТРОКА(РеализацияТоваровУслуг.АдресДоставки, 1, 100) КАК Грузополучатель,
	Запрос.Текст = 	Запрос.Текст + "
	|	РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент КАК Контрагент,
	|	СУММА(РеализацияТоваровУслугТовары.КоличествоМест) КАК КоличествоМест,";
	// ЖД ТЕСТ Расчет количества по формуле
	Запрос.Текст = 	Запрос.Текст + "
//Ошибка	|	@КоэффициентПересчета";
	|	СУММА(@КоэффициентПересчета*РеализацияТоваровУслугТовары.@Количество) КАК Количество,";
	
	Запрос.Текст = 	Запрос.Текст + "
	|	ВСД_Площадка.Ссылка КАК Площадка,
	|	ВСД_ХозСубъект.Ссылка КАК ХозСубъект,
	|	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	|	ВСД_транзакция.Ссылка КАК ВСД,
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	РеализацияТоваровУслуг.Дата КАК Дата
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВСД_транзакция КАК ВСД_транзакция
	|		ПО (ВСД_транзакция.ДокументОснование = РеализацияТоваровУслуг.Ссылка)
	|			И (ВСД_транзакция.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_Площадка КАК ВСД_Площадка";
	Если РеквизитГрузополучатель = 0 Тогда
		Запрос.Текст = 	Запрос.Текст + "
		|		ПО (РеализацияТоваровУслуг.Контрагент = ВСД_Площадка.Контрагент)
		|			И (ВСД_Площадка.ПометкаУдаления = ЛОЖЬ)";
	Иначе
		Запрос.Текст = 	Запрос.Текст + "
		|		ПО (ПОДСТРОКА(РеализацияТоваровУслуг.АдресДоставки, 1, 100) = ВСД_Площадка.Контрагент)";
	КонецЕсли;
	Запрос.Текст = 	Запрос.Текст + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
	|		ПО РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент = ВСД_ХозСубъект.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПО (РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка)
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
 	|   И ЧАС(РеализацияТоваровУслуг.Дата) МЕЖДУ &ЧасНач И &ЧасКон	
	|	И РеализацияТоваровУслугТовары.Сумма > 0
	|	И РеализацияТоваровУслуг.Организация В ИЕРАРХИИ(&СписокОрганизаций)";
	Если ЗначениеЗаполнено(Маршрут) = 1 Тогда
		Запрос.Текст = 	Запрос.Текст + "
		|	И РеализацияТоваровУслуг.Маршрут В ИЕРАРХИИ(&ВыбМаршрут)";
	КонецЕсли;
	////ЖД фильтр по Складу
	Если ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя Тогда
		Запрос.Текст = 	Запрос.Текст + "
		|	И РеализацияТоваровУслуг.Склад В ИЕРАРХИИ(&ПлощадкаОтправителяСклад)";
	КонецЕсли;
	Запрос.Текст = 	Запрос.Текст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Ссылка,";
	Если РеквизитГрузополучатель = 0 Тогда
		Запрос.Текст = 	Запрос.Текст + "
			|	РеализацияТоваровУслуг.Контрагент,
	        |	РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент,";
	Иначе
		Запрос.Текст = 	Запрос.Текст + "
		|	ПОДСТРОКА(РеализацияТоваровУслуг.АдресДоставки, 1, 100),";
	КонецЕсли;
	Запрос.Текст = 	Запрос.Текст + "
	|	ВСД_Площадка.Ссылка,
	|	ВСД_ХозСубъект.Ссылка,
	|	ВСД_транзакция.Ссылка,
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер";
//	Запрос.Текст = СтрЗаменить(Запрос.Текст,"@Количество",НазваниеРеквизитаКоличество);
	КПересчета = ПарамКоэффициентПересчетаКоличества;
	Коэфф = 0;
	Попытка
		Коэфф = Число(КПересчета);
	Исключение
		Коэфф = 0;
	КонецПопытки;
	Если НЕ(ЗначениеЗаполнено(КПересчета)) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоэффициентПересчета","1");
	ИначеЕсли Строка(Коэфф)	= КПересчета Тогда  //Это число
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоэффициентПересчета",КПересчета);
	Иначе // Не работает, если коэфф не целочисленный
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоэффициентПересчета","РеализацияТоваровУслугТовары."+КПересчета);
//Ошибка		ТЗамены = "РеализацияТоваровУслугТовары."+КПересчета;
//		ТекстПодстановки = "
//		|Выбор Когда Значение("+ТЗамены+")= 0 Тогда
//		|СУММА(РеализацияТоваровУслугТовары.@Количество) 
//		|Иначе
//		|СУММА("+Тзамены+"*РеализацияТоваровУслугТовары.@Количество)
//		|Конец
//		|КАК Количество,";
//		ТекстПодстановки = СтрЗаменить(ТекстПодстановки,"@Количество",СписокКонстант.Получить("НазваниеРеквизитаКоличество"));
//		Запрос.Текст = СтрЗаменить(Запрос.Текст,"@КоэффициентПересчета",ТекстПодстановки);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"@Количество",НазваниеРеквизитаКоличество);
	// v 2.*
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВСД_транзакция","ВСД2_транзакция");
	Попытка
		Рез = Запрос.Выполнить();
	Исключение
		Рез = Неопределено;
		Сообщить("Указан неверный параметр НазваниеРеквизитаКоличество или ПарамКоэффициентПересчетаКоличества",СтатусСообщения.Важное);
		Сообщить(Описаниеошибки());
	КонецПопытки;
		
	Возврат Рез;
	
КонецФункции // СформироватьЗапрос()

Функция СформироватьЗапросПеремещения(Организации = Неопределено, ПлощадкаОтправителя, ДатаНачала, ДатаОкончания) Экспорт
	// ЖД - В документе ПеремещениеТоваров участвуют склады ХС
	// в таком случае как в 7.7 нужно добавить реквизит Склад к спр. ВСД_Площадка
	// По Складу Получателю определяем площадку
	// ХС один и тот же -или по фирме документа определять, или берем тек параметры, т.к фирма уже определена там
	// также ищем уже созданные транзакции
	
	Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Регистраторы",				Регистраторы);
	Запрос.УстановитьПараметр("ДатаНачала",					НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",				КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("СписокОрганизаций",			Организации);
//	Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад",				ПлощадкаОтправителя.Склад);  
 	Попытка Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад",	ПлощадкаОтправителя.Склад); Исключение Запрос.УстановитьПараметр("ПлощадкаОтправителяСклад",	""); Сообщить("Не определили Склад!"); КонецПопытки;

	//Запрос.УстановитьПараметр("ПодразделениеОрганизации",	ПодразделениеОрганизации);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка КАК Док,
	|	ПеремещениеТоваров.СкладПолучатель КАК Грузополучатель,
	|	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество,
	|	СУММА(ПеремещениеТоваровТовары.КоличествоМест) КАК КоличествоМест,
	|	ВСД_Площадка.Ссылка КАК Площадка,
	|	ВСД_транзакция.Ссылка КАК ВСД,
	|	ПеремещениеТоваров.Номер КАК Номер,
	|	ПеремещениеТоваров.Дата КАК Дата
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВСД_транзакция КАК ВСД_транзакция
	|		ПО (ВСД_транзакция.ДокументОснование = ПеремещениеТоваров.Ссылка)
	|			И (ВСД_транзакция.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_Площадка КАК ВСД_Площадка
	|		ПО (ПеремещениеТоваров.СкладПолучатель = ВСД_Площадка.Склад)
	|			И (ВСД_Площадка.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|		ПО (ПеремещениеТоваровТовары.Ссылка = ПеремещениеТоваров.Ссылка)
	|ГДЕ
	|	ПеремещениеТоваров.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПеремещениеТоваров.Организация В ИЕРАРХИИ(&СписокОрганизаций)
	|	И ПеремещениеТоваров.СкладОтправитель = &ПлощадкаОтправителяСклад
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваров.Ссылка,
	|	ВСД_Площадка.Ссылка,
	|	ВСД_транзакция.Ссылка,
	|	ПеремещениеТоваров.Номер,
	|	ПеремещениеТоваров.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер";
	
	// v 2.*
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВСД_транзакция","ВСД2_транзакция");
	
	Запрос.Выполнить();
		
	Возврат Запрос.Выполнить();
КонецФункции // СформироватьЗапрос()

Процедура РаскраситьТЧОтгрузки() Экспорт
	//времТЗ = Отгрузки.Выгрузить();
	Для каждого ДанныеСтроки из Отгрузки Цикл
		Если ЗначениеЗаполнено(ДанныеСтроки.ВСД) Тогда
			ДокОб = ДанныеСтроки.ВСД.ПолучитьОбъект();
			СтатусВСД = СокрЛП(Докоб.Статус);
		Иначе
			СтатусВСД = "";	
		КонецЕсли;
		Если ПустаяСтрока(ДанныеСтроки.ХозСубъект.GUID)Тогда
			ДанныеСтроки.Сцвет = 1;   //красный
		ИначеЕсли ДанныеСтроки.Площадка = Справочники.ВСД_Площадка.ПустаяСсылка() Тогда
			ДанныеСтроки.Сцвет = 2;  //желтый
		ИначеЕсли ДанныеСтроки.ВСД = Неопределено Тогда
			//ОформлениеСтроки.ЦветФона = Новый Цвет(0, 150, 26);   //
		ИначеЕсли СтатусВСД = "COMPLETED" Тогда
			ДанныеСтроки.Сцвет = 3;   //
		ИначеЕсли СтатусВСД = "REJECTED" Тогда
			ДанныеСтроки.Сцвет = 4;   //
		ИначеЕсли СтатусВСД = "IN_PROCESS" Тогда
			ДанныеСтроки.Сцвет = 5;  
		КонецЕсли;
	КонецЦикла;
	//отгрузки.Загрузить(ВремТЗ);
КонецПроцедуры

// Заполняет т.ч. обработки документами
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Булево - Истина, если успешно выполнено заполнение, иначе Ложь
//
Функция Автозаполнение(Перемещения=False) Экспорт

	//Если НЕ ЗначениеЗаполнено(Организация) Тогда
	//	ОбщегоНазначенияЗК.СообщитьОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Необходимо указать организацию!"));
	//	Возврат Ложь;
	//КонецЕсли;
	//ЖД Тест Перемещения
	//Сообщить("Заполнение списка документов....");
	Отгрузки.Очистить();
	Если Перемещения Тогда
		РезультатЗапроса = СформироватьЗапросПеремещения(Организация, Отправитель_Площадка, ДатаНачалаОтбора, ДатаОкончанияОтбора);
	Иначе
		РезультатЗапроса = СформироватьЗапрос(Организация, Отправитель_Площадка, ДатаНачалаОтбора, ДатаОкончанияОтбора);
	КонецЕсли;
	Если РезультатЗапроса = Неопределено Тогда
		Возврат Ложь;	
	КонецЕсли;
	Отгрузки.Загрузить(РезультатЗапроса.Выгрузить());
	//Сообщить("Список заполнен");
	Если Перемещения Тогда
		//ЖД Вероятно это все можно в запросе сделать
		// ну а так возъмем из текущих параметров
		Для каждого СтрОтгрузки из Отгрузки Цикл
			СтрОтгрузки.ХозСубъект = Отправитель_Хозсубъект;
			СтрОтгрузки.Контрагент = Отправитель_Хозсубъект.Контрагент;
		КонецЦикла;
	КонецЕсли;
	//Очистим ТЗ Партий
	Партии.Очистить();
	РаскраситьТЧОтгрузки();
	Возврат Истина;
	
КонецФункции

// Работа с документами
Функция РассчитатьКоличествоДляВСД(СтрокаТЧДок, Продукция_Элемент = "") Экспорт
	Рез = 0;
	Попытка
		КПересчета = ПарамКоэффициентПересчетаКоличества;//СокрЛП(СписокКонстант.Получить("ПарамКоэффициентПересчетаКоличества"));
		Коэфф = 0;
		Попытка
			Коэфф = Число(КПересчета);
		Исключение
			Коэфф = 0;
		КонецПопытки;
					
		Если НЕ(ЗначениеЗаполнено(КПересчета)) Тогда
			Коэфф = 1;
		ИначеЕсли Строка(Коэфф)	= КПересчета Тогда
			Коэфф = Число(КПересчета);
		Иначе //реквизитСтрокиДока.
			_Точка = Найти(КПересчета,".");
			ИмяРекв = Сред(КПересчета,1,_Точка-1);
			ИмяПодРекв = Сред(КПересчета,_Точка+1);
			Коэфф = СтрокаТЧДок[ИмяРекв];
			_Точка = Найти(ИмяПодРекв,".");
			Пока _Точка > 0 Цикл
				ИмяРекв = Сред(ИмяПодРекв,1,_Точка-1);
				ИмяПодРекв = Сред(ИмяПодРекв,_Точка+1);
				Коэфф = Коэфф[ИмяРекв];
				_Точка = Найти(ИмяПодРекв,".");
			КонецЦикла;
			Если НЕ ТипЗнч(Коэфф) = Тип("Число") Тогда
				Коэфф = Коэфф[ИмяПодРекв];
			КонецЕсли;
		КонецЕсли;
		Если Коэфф = 0 Тогда
			Сообщить("Коэфф пересчета "+КПересчета+" для "+СтрокаТЧДок.Номенклатура + " равен 0 - ставлю 1" ,СтатусСообщения.Важное);
			Коэфф = 1;
		КонецЕсли;
					
		Рез = СтрокаТЧДок[НазваниеРеквизитаКоличество]*Коэфф;//СтрокаТЧДок[СписокКонстант.Получить("НазваниеРеквизитаКоличество")]*Коэфф;	
	Исключение
		Сообщить("Указан неверный параметр НазваниеРеквизитаКоличество или ПарамКоэффициентПересчетаКоличества",СтатусСообщения.Важное);
		Сообщить(ОписаниеОшибки());
		Рез = 0;
	КонецПопытки;
	
	Возврат Рез;
КонецФункции

Функция СвернутьТч(Док)
	//тзДок = Новый("Массив");
	//Док.Товары.Выгрузить(тзДок);
	
	тзРез = Новый("ТаблицаЗначений");
	тзРез.Колонки.Добавить("ВСД_Продукция_Элемент");
	тзРез.Колонки.Добавить("Количество");
	тзРез.Колонки.Добавить("КоличествоМест");
	
	//тзДок.ВыбратьСтроки();
	//Пока тзДок.ПолучитьСтроку() = 1 Цикл
	для каждого стрДок из док.Товары Цикл
		
		
		ВСДПродукцияЭлемент = ПолучитьВСДПродукцияЭлементПоНоменклатуре(стрДок.Номенклатура);
		Если (ВСДПродукцияЭлемент=Справочники.ВСД_Продукция_Элемент.ПустаяСсылка()) и НЕ(ПропускатьПустыеСвойства) Тогда
			Сообщить("["+стрДок.Номенклатура+"] -> не указан ВСД_Продукция_Элемент",СтатусСообщения.Внимание);
		ИначеЕсли (ВСДПродукцияЭлемент=Справочники.ВСД_Продукция_Элемент.ПустаяСсылка()) и (ПропускатьПустыеСвойства) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрТЧ = тзРез.Добавить();
		СтрТЧ.ВСД_Продукция_Элемент = ВСДПродукцияЭлемент;
		СтрТЧ.Количество = РассчитатьКоличествоДляВСД(стрДок);	
		СтрТЧ.КоличествоМест = стрДок.КоличествоМест;
	КонецЦикла;
		
	тзРез.Свернуть("ВСД_Продукция_Элемент","Количество, КоличествоМест");
	
	Возврат тзРез;
КонецФункции

Функция ВыгрузитьТч(Док) Экспорт
	тзРез = Новый("ТаблицаЗначений");
	тзРез.Колонки.Добавить("Номенклатура");
	тзРез.Колонки.Добавить("Продукция_Элемент");
	тзРез.Колонки.Добавить("Количество");
	тзРез.Колонки.Добавить("Упаковки");
	
	для каждого стрДок из док.Товары Цикл
		ВСДПродукцияЭлемент = ПолучитьВСДПродукцияЭлементПоНоменклатуре(стрДок.Номенклатура);
		Если (ВСДПродукцияЭлемент = Справочники.ВСД_Продукция_Элемент.ПустаяСсылка()) и НЕ(ПропускатьПустыеСвойства) Тогда
			Сообщить("["+стрДок.Номенклатура+"] -> не указан ВСД_Продукция_Элемент",СтатусСообщения.Внимание);
		ИначеЕсли (ВСДПродукцияЭлемент=Справочники.ВСД_Продукция_Элемент.ПустаяСсылка()) и (ПропускатьПустыеСвойства) Тогда
			Продолжить;
		КонецЕсли;
		СтрТЧ = тзРез.Добавить();
		СтрТЧ.Номенклатура = стрДок.Номенклатура;
		СтрТЧ.Продукция_Элемент = ВСДПродукцияЭлемент;
		СтрТЧ.Количество = РассчитатьКоличествоДляВСД(стрДок);
		Попытка
		Если ЗначениеЗаполнено(стрДок[НазваниеРеквизитаКоличествоМест]) Тогда
			СтрТЧ.Упаковки = стрДок[НазваниеРеквизитаКоличествоМест];
		КонецЕсли;
		Исключение КонецПопытки;
	КонецЦикла;
	Возврат тзРез;
КонецФункции

Процедура СохранитьСтатусЗапроса(док)
	ДокОб = док.ПолучитьОбъект();

	ДокОб.applicationID = СокрЛП(КомпонентаНаСервере.ApplicationId);
	ДокОб.Статус 		= СокрЛП(КомпонентаНаСервере.Status);
	ДокОб.Комментарий = СокрЛП(КомпонентаНаСервере.ErrorMessage);		
	ДокОб.Записать();
	Сообщить(" статус = "+ДокОб.Статус );
	Если ПустаяСтрока(СокрЛП(ДокОб.Комментарий))=0 Тогда
		Сообщить("Ошибка: "+ДокОб.Комментарий);
	КонецЕсли;	
КонецПроцедуры

//************* Создание ВСД Транзакции
Функция ПолучитьМаркировку( Единица, Покупатель)
//ТЕСТ вызов переопределения
	Обработка = ФункцияПереопределена("ПолучитьМаркировку");
	Если обработка <> Неопределено Тогда
		Возврат Обработка.ПолучитьМаркировку( Единица, Покупатель);
	КонецЕсли;	
	
	Рез = "";
	//Номенклатура = Единица.Владелец;	
	Рез = Единица.ШтрихКод;
	
	Возврат Рез;
КонецФункции

Функция ЗаполнитьРеквизитыСтрокиВСД(НоваяСтрока, СтрокаОснования, ДокСсылка)
	
//ТЕСТ вызов переопределения
	Обработка = ФункцияПереопределена("ЗаполнитьРеквизитыСтрокиВСД");
	Если обработка <> Неопределено Тогда
		Возврат Обработка.ЗаполнитьРеквизитыСтрокиВСД(ЭтотОбъект, НоваяСтрока, СтрокаОснования, ДокСсылка);
		//Возврат;
	КонецЕсли;	
	
	НоваяСтрока.Номенклатура 			= СтрокаОснования.Номенклатура;
	НоваяСтрока.Продукция_Элемент 		= СтрокаОснования.Продукция_Элемент;
	НоваяСтрока.ЕдиницаИзмерения 		= НоваяСтрока.Партия.ЕдиницаИзмерения;
//	НоваяСтрока.Продукция 				= НоваяСтрока.Партия.Продукция;
//	НоваяСтрока.ВидПродукции 			= НоваяСтрока.Партия.ВидПродукции;
//	НоваяСтрока.НаименованиеПродукции 	= НоваяСтрока.Продукция_Элемент.Наименование; 
	НоваяСтрока.GTIN 					= НоваяСтрока.Продукция_Элемент.GTIN;
	НоваяСтрока.Артикул	 				= НоваяСтрока.Продукция_Элемент.Артикул;
	Попытка
		НоваяСтрока.Цель 					= НоваяСтрока.Продукция_Элемент.ВидПродукции.Цель;
		Если ПустоеЗначение(НоваяСтрока.Цель)=1 Тогда 
			НоваяСтрока.Цель = СписокКонстант.Получить("ВСДЦель");
		КонецЕсли;
	Исключение КонецПопытки;
	// Упаковка на уровнях
	Попытка
			
		Если ЗначениеЗаполнено(СтрокаОснования.Упаковки) Тогда
			Если Цел(СтрокаОснования.Упаковки/СтрокаОснования.Количество*НоваяСтрока.Количество) = 0 Тогда
				Сообщить("Нулевое кол-во упаковки у "+СтрокаОснования.Продукция_Элемент+" в "+ДокСсылка);	
			иначе
			
				СтрокаУпак = докСсылка.УровниУпаковки.Добавить(); //Документы.ВСД2_транзакция.СоздатьДокумент().УровниУпаковки.Добавить();
				СтрокаУпак.СтрокаПродукции = НоваяСтрока.НомерСтроки;
				СтрокаУпак.Количество = Цел(СтрокаОснования.Упаковки/СтрокаОснования.Количество*НоваяСтрока.Количество); //Пропорционально Распределенному количеству
				СтрокаУпак.НомерУровня = ПарамНомерУровняУпаковкиДляВСД;//СписокПараметров.Получить("ПарамНомерУровняУпаковкиДляВСД");
				СтрокаУпак.ФормаУпаковки = ПарамФормаУпаковкиДляВСД;//СписокПараметров.Получить("ПарамФормаУпаковкиДляВСД");;
				//Маркировки
	//			СтрокаМарк = докСсылка.Маркировка.Добавить();
	//			СтрокаМарк.Строкапродукции = СтрокаУпак.СтрокаПродукции;
	//			СтрокаМарк.НомерУровня = СтрокаУпак.НомерУровня;
	//			СтрокаМарк.Класс = Перечисления.ВСД_Маркировка.BN;
	//			СтрокаМарк.Маркировка = "ТЕСТ";  //ПолучитьМаркировку( ТЗПартий.Номенклатура.ОсновнаяЕдиница, Контрагент);
			КонецЕсли;
		КонецЕсли;
			
	Исключение 
		Сообщить(ОписаниеОшибки(),СтатусСообщения.Важное);	
	КонецПопытки;
	
КонецФункции

Процедура ЗаполнитьТЧВСД(ДанныеЗаполнения = Неопределено, докСсылка, тзАктуальныхПартий = "", ПолеСортировки = "", ЗнакСортировки = Неопределено, тзЭлементыОснования = Неопределено) Экспорт
// заполняет ТЧ документа ВСД по Входящим данным , вызывается из ЗаполнитьНаосновании ВСД2_Транзакция
// ДанныеЗаполнения = Документ основание, берем из него ТЧ для расчета Кол-ва и Продэлементы для фильтра партий,
// также данные для заполнения Маркировок

// Добавлен реквизит - тзЭлементыОснования = ТЧ докоснования, для подбора Партий без Документа Основания
// Оптимизировать в дальнейшем входящие Параметры !!! ЖД

//ТЕСТ вызов переопределения
	Обработка = ФункцияПереопределена("ЗаполнитьТЧВСД");
	Если обработка <> Неопределено Тогда
		Обработка.ЗаполнитьТЧВСД(ЭтотОбъект, ДанныеЗаполнения, докСсылка, тзАктуальныхПартий, ПолеСортировки, ЗнакСортировки, тзЭлементыОснования);
		Возврат;
	КонецЕсли;	
   

	Если (тзЭлементыОснования = Неопределено) и НЕ(ДанныеЗаполнения = Неопределено) тогда
		тзЭлементыОснования = ВыгрузитьТЧ(ДанныеЗаполнения.Ссылка); 		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(тзАктуальныхПартий) Тогда
		Попытка
			тзАктуальныхПартий = ПолучитьАктуальныеПартии(тзЭлементыОснования.ВыгрузитьКолонку("Продукция_Элемент"), докСсылка.Отправитель_Площадка, докСсылка.Отправитель_ХозСубъект, ПолеСортировки , ЗнакСортировки);
		Исключение
			Сообщить("Не переданы параметры для получения Актуальных партий - ДанныеЗаполнения или тзЭлементыОснования");
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ (ТипЗнч(тзАктуальныхПартий) = Тип("ТаблицаЗначений")) и НЕ ПарамЗаполнятьТранзакциюПриОтсутствииПартий Тогда
		Сообщить("Нет актуальных партий для создания ВСД по "+ ?(ДанныеЗаполнения = Неопределено,"Переданным данным",ДанныеЗаполнения.Ссылка));
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрокаТовары Из тзЭлементыОснования Цикл
		
		Продукция_Элемент = ТекСтрокаТовары.Продукция_Элемент;
		//**** 
		СтрокиПартий = ПодобратьПартииПоПродукцияЭлемент(тзАктуальныхПартий,ТекСтрокаТовары.Продукция_Элемент,ТекСтрокаТовары.Количество);
		Если СтрокиПартий.Количество() = 0  Тогда
			Если ПарамЗаполнятьТранзакциюПриОтсутствииПартий Тогда
				НоваяСтрока = докСсылка.Товары.Добавить();			
				НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
				НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
				ЗаполнитьРеквизитыСтрокиВСД(НоваяСтрока, ТекСтрокаТовары, докСсылка);
				Продолжить;
			КонецЕсли;
			Сообщить("Нет партий для ["+ТекСтрокаТовары.Номенклатура +"] Продукция_Элемент ["+ Строка(Продукция_Элемент) +"] Пропускаем!",СтатусСообщения.Внимание);				
		   	Продолжить;
		КонецЕсли;
		
		Для каждого СтрПартии из СтрокиПартий Цикл
			НоваяСтрока = докСсылка.Товары.Добавить();
			НоваяСтрока.Партия = СтрПартии.Партия;
			НоваяСтрока.Количество = СтрПартии.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			//НоваяСтрока.ПолеСортировки 		= СтрокиПартий.ПолеСортировки;
			ЗаполнитьРеквизитыСтрокиВСД(НоваяСтрока, ТекСтрокаТовары, докСсылка);
		КонецЦикла;
		
		Если (СтрокиПартий.Итог("Количество") < ТекСтрокаТовары.Количество) и ПарамЗаполнятьТранзакциюПриОтсутствииПартий  Тогда
			//Добавим с пустыми партиями
			НоваяСтрока = докСсылка.Товары.Добавить();
			НоваяСтрока.Количество	=  ТекСтрокаТовары.Количество - СтрокиПартий.Итог("Количество") ;				
			ЗаполнитьРеквизитыСтрокиВСД(НоваяСтрока, ТекСтрокаТовары, докСсылка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено (Продукция_Элемент) Тогда
			докСсылка.ТермическоеСостояние = МИН(Продукция_Элемент.ТермическиеУсловияПеревозки,докСсылка.ТермическоеСостояние) ;
		КонецЕсли;
	КонецЦикла;
	докСсылка.ТермическоеСостояние = ?(докСсылка.ТермическоеСостояние=0,1,докСсылка.ТермическоеСостояние);
КонецПроцедуры


Функция ЗаполнитьТабЧастьЭлементовДляСозданияВСД(ДокОсн = Неопределено) Экспорт
	// Данные из таблицы Партии по недостающим к реализации
	// либо из докОснования - ВыгрузитьТЧ выполняется
	РезТаб = Новый ТаблицаЗначений;
	РезТаб.Колонки.Добавить("Номенклатура",новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	РезТаб.Колонки.Добавить("Продукция_Элемент",новый ОписаниеТипов("СправочникСсылка.ВСД_Продукция_Элемент"));
	РезТаб.Колонки.Добавить("Количество",новый ОписаниеТипов("Число"));
	РезТаб.Колонки.Добавить("Упаковки"); // для совместимости с ВыгрузитьТЧ
	Если Докосн = Неопределено Тогда
		для каждого стрПартии из Партии Цикл
			Если НЕ(ЗначениеЗаполнено(стрПартии.ВСД_Продукция_Элемент)) тогда
				Продолжить;	
			КонецЕсли;
			Если (стрПартии.КоличествоСписания - стрПартии.Количество) <= 0 Тогда 
				Продолжить; //пропустим то что есть в наличии				
			КонецЕсли;			
			стрТаб = Резтаб.Добавить();
			стрТаб.Продукция_Элемент = стрПартии.ВСД_Продукция_Элемент;
			стрТаб.Количество = стрПартии.КоличествоСписания - стрПартии.Количество;
		КонецЦикла;
	иначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.ВСД2_транзакция") Тогда		
		Для каждого строкаДок из Докосн.Товары  Цикл
			стрТаб = Резтаб.Добавить();
			стрТаб.Номенклатура = строкаДок.Номенклатура;
			стрТаб.Продукция_Элемент = ?(ЗначениеЗаполнено(строкаДок.Продукция_Элемент),строкаДок.Продукция_Элемент,ПолучитьВСДПродукцияЭлементПоНоменклатуре(строкаДок.Номенклатура));
			стрТаб.Количество = строкаДок.Количество;			
		КонецЦикла
	Иначе
		// возьмем реализацию тогда что-ли за Основу...
		Возврат ВыгрузитьТЧ(ДокОсн);
	КонецЕсли;
	
	Возврат резТаб;
КонецФункции

Функция ПолучитьДанныеДляСозданияВСДТранзакции(ДокОсн = Неопределено, Получатель_Хозсубъект = Неопределено, Получатель_Площадка = Неопределено) Экспорт
    Рез = Новый Структура;
	Рез.Вставить("Организация",Организация);
	Рез.Вставить("Отправитель_Хозсубъект",Отправитель_Хозсубъект);  // Взяли из реквизитов обработки - активные данные
	Рез.Вставить("Отправитель_Площадка",Отправитель_Площадка);
	Рез.Вставить("Получатель_Хозсубъект",Получатель_Хозсубъект); // в параметре получили
	Рез.Вставить("Получатель_Площадка",Получатель_Площадка);
	Рез.Вставить("ДокОснование",ДокОсн);
	Рез.Вставить("СтрокиВСД",ЗаполнитьТабЧастьЭлементовДляСозданияВСД(ДокОсн));
	
	Возврат Рез;
КонецФункции

Процедура ЗаполнитьСвязанныеДокументы(ДокВСД) экспорт
	Обработка = ФункцияПереопределена("ЗаполнитьСвязанныеДокументы");
	Если обработка <> Неопределено Тогда
		Обработка.ЗаполнитьСвязанныеДокументы(ДокВСД);
		Возврат;
	КонецЕсли;	
КонецПроцедуры

Процедура ЗаполнитьШапку_ВСД2_Транзакция(ДокВСД, СписокПараметров, ПараметрыОрганизации) Экспорт
//ТЕСТ вызов переопределения
	Обработка = ФункцияПереопределена("ЗаполнитьШапку_ВСД2_Транзакция");
	Если обработка <> Неопределено Тогда
		Обработка.ЗаполнитьШапку_ВСД2_Транзакция(ДокВСД, СписокПараметров, ПараметрыОрганизации);
		Возврат;
	КонецЕсли;		
	
	ДокВСД.ДокументОснование = ?(СписокПараметров.ДокОснование = неопределено,"",СписокПараметров.ДокОснование);
	ДокВСД.Организация = СписокПараметров.Организация;
	ДокВСД.Дата = ?(ЗначениеЗаполнено(ДокВСД.ДокументОснование),ДокВСД.ДокументОснование.Дата, ТекущаяДата());			
	ДокВСД.Отправитель_ХозСубъект = СписокПараметров.Отправитель_ХозСубъект;
	ДокВСД.Отправитель_Площадка = СписокПараметров.Отправитель_Площадка;			
	
	ДокВСД.Получатель_ХозСубъект = СписокПараметров.Получатель_ХозСубъект;		
	ДокВСД.Получатель_Площадка = СписокПараметров.Получатель_Площадка;					
		
	ДокВСД.Перевозчик_ХозСубъект = ПараметрыОрганизации.Получить("Перевозчик_ХозСубъект");
			
	ДокВСД.ТтнСерия = ""; //ТТН.Серия;
	ДокВСД.ТтнНомер = ПолучитьНомерДокБезПрефикса(ДокВСД.ДокументОснование);
	ДокВСД.ТтнДата = ?(ЗначениеЗаполнено(ДокВСД.ТтнНомер),ДокВСД.Дата,"");//?(ЗначениеЗаполнено(ДокВСД.ДокументОснование),ДокВСД.ДокументОснование.Дата, ТекущаяДата());
	Попытка ДокВСД.номерАвто = ПолучитьНомерАвто(ДокВСД.ДокументОснование); Исключение ДокВСД.номерАвто = "не используется"; КонецПопытки;
	
	ДокВСД.Местность 		= ПараметрыОрганизации.Получить("ВСД_Местность");
	ДокВСД.ОсобыеОтметки 	= ПараметрыОрганизации.Получить("ВСД_ОсобыеОтметки");
	ДокВСД.cargoInspected  	= истина;			
	ДокВСД.РезультатыИсследований = ПараметрыОрганизации.Получить("ВСД_РезультатыИсследований");
			
	ДокВСД.ТермическоеСостояние = 4;
	ЗаполнитьСвязанныеДокументы(ДокВСД);
КонецПроцедуры

Функция СоздатьДокумент_ВСД2_Транзакция(СписокПараметров, тзАктуальныхПартий = Неопределено) Экспорт
	//Создает ВСД по переданным параметрам
//	Если Партии.Количество()=0 Тогда
//		Сообщить("Не заполнена таблица партий.");
//		Возврат Неопределено;
//	КонецЕсли;
	Если НЕ(ЗначениеЗаполнено(СписокПараметров.Отправитель_ХозСубъект)) или НЕ(ЗначениеЗаполнено(СписокПараметров.Отправитель_Площадка)) Тогда
		СообщитьОшибку("Неизвестен ХС или Площадка получателя -> Невозможно создать ВСД2 Транзакция ");
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОрганизации = ВСД.ЗагрузитьПараметры( СписокПараметров.Организация );
					
	Если ПараметрыОрганизации = Неопределено Тогда   // Вот тут всегда будет Определено, нужно поменять условие
		Сообщить("Невозможно создать ВСД2 Транзакция, т.к. нет параметров для " + СписокПараметров.Организация);
		Возврат Неопределено;
	КонецЕсли;
	
	Если тзАктуальныхПартий = Неопределено тогда
		СзПродэлементов = СписокПараметров.СтрокиВСД.ВыгрузитьКолонку("Продукция_Элемент");
		тзАктуальныхПартий = ПолучитьАктуальныеПартии(СзПродэлементов, СписокПараметров.Отправитель_Площадка, СписокПараметров.Отправитель_ХозСубъект);
	КонецЕсли;
	
	Если НЕ (ТипЗнч(тзАктуальныхПартий) = Тип("ТаблицаЗначений")) и НЕ ПараметрыОрганизации.Получить("ПарамЗаполнятьТранзакциюПриОтсутствииПартий") Тогда
		Сообщить("Нет актуальных партий для создания Документов ");
		Возврат Неопределено;
	КонецЕсли;
			
	ДокВСД = Документы.ВСД2_транзакция.СоздатьДокумент();
	ЗаполнитьШапку_ВСД2_Транзакция(ДокВСД, СписокПараметров, ПараметрыОрганизации);
	
//	ДокВСД.ДокументОснование = ?(СписокПараметров.ДокОснование = неопределено,"",СписокПараметров.ДокОснование);
//	ДокВСД.Организация = СписокПараметров.Организация;
//	ДокВСД.Дата = ?(ЗначениеЗаполнено(ДокВСД.ДокументОснование),ДокВСД.ДокументОснование.Дата, ТекущаяДата());			
//	ДокВСД.Отправитель_ХозСубъект = СписокПараметров.Отправитель_ХозСубъект;
//	ДокВСД.Отправитель_Площадка = СписокПараметров.Отправитель_Площадка;			
	
//	ДокВСД.Получатель_ХозСубъект = СписокПараметров.Получатель_ХозСубъект;		
//	ДокВСД.Получатель_Площадка = СписокПараметров.Получатель_Площадка;					
		
//	ДокВСД.Перевозчик_ХозСубъект = ПараметрыОрганизации.Получить("Перевозчик_ХозСубъект");
			
//	ДокВСД.ТтнСерия = ""; //ТТН.Серия;
//	ДокВСД.ТтнНомер = ПолучитьНомерДокБезПрефикса(ДокВСД.ДокументОснование);
//	ДокВСД.ТтнДата = ?(ЗначениеЗаполнено(ДокВСД.ТтнНомер),ДокВСД.Дата,"");//?(ЗначениеЗаполнено(ДокВСД.ДокументОснование),ДокВСД.ДокументОснование.Дата, ТекущаяДата());
//	Попытка ДокВСД.номерАвто = ПолучитьНомерАвто(ДокВСД.ДокументОснование); Исключение ДокВСД.номерАвто = "не используется"; КонецПопытки;
//	ДокВСД.ФормаВСД = 1;			
//	ДокВСД.Местность 		= ПараметрыОрганизации.Получить("ВСД_Местность");
//	ДокВСД.ОсобыеОтметки 	= ПараметрыОрганизации.Получить("ВСД_ОсобыеОтметки");
//	ДокВСД.cargoInspected  	= истина;			
//	ДокВСД.РезультатыИсследований = ПараметрыОрганизации.Получить("ВСД_РезультатыИсследований");
			
//	ДокВСД.ТермическоеСостояние = 4;
//	ПропускатьПустыеСвойства = ПараметрыОрганизации.Получить("ПропускатьПустыеСвойства");
		
	// заполняет ТЧ документа ВСД по Входящим данным , вызывается из ЗаполнитьНаосновании ВСД2_Транзакция
	ЗаполнитьТЧВСД(СписокПараметров.ДокОснование, ДокВСД, тзАктуальныхПартий,,,СписокПараметров.СтрокиВСД);

	//ЖД Контроль
	Если ДокВСД.Товары.Количество() = 0 Тогда
		Сообщить("Нет данных (пустая таб часть) для создания ВСД2_Транзакция ",СтатусСообщения.Внимание);
		Возврат Неопределено;	
	КонецЕсли;
		
	ДокВСД.Записать();
	Сообщить(" Создан документ "+докВСД);
		
	Возврат докВСД.Ссылка;
КонецФункции

Процедура СоздатьВСД2() Экспорт
	//Создает ВСД по списку из тч Отгрузки
 	// С учетом актуальных Партий (за минусом неотправленных ВСД изи списка ГО
	Если Партии.Количество()=0 Тогда
		Сообщить("Не заполнена таблица партий.");
		Возврат;
	КонецЕсли;
	
	тзАктуальныхПартий = ПолучитьАктуальныеПартии(Партии.ВыгрузитьКолонку("ВСД_Продукция_Элемент"), Отправитель_Площадка, Отправитель_ХозСубъект);
	
	Если НЕ (ТипЗнч(тзАктуальныхПартий) = Тип("ТаблицаЗначений")) и НЕ ПарамЗаполнятьТранзакциюПриОтсутствииПартий Тогда
		Сообщить("Нет актуальных партий для создания Документов ");
		Возврат;
	КонецЕсли;
	
	УменьшитьАктуальныеПартииНаРаспределенные(тзАктуальныхПартий);
	
	Для Каждого СтрОтгрузки Из Отгрузки Цикл
		Если НЕ(СтрОтгрузки.Отметка) Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(СтрОтгрузки.ВСД=Документы.ВСД2_транзакция.ПустаяСсылка()) Тогда       
			Если СтрОтгрузки.ВСД.Проведен Тогда
				СообщитьОшибку("Для "+СтрОтгрузки.Док+" уже отправлен "+СтрОтгрузки.ВСД+", Статус:"+СтрОтгрузки.ВСД.Статус);
				Продолжить;
			КонецЕсли;
			Если (ПустаяСтрока(СтрОтгрузки.ВСД.Статус) = 1) Тогда 
				СообщитьОшибку("Для "+СтрОтгрузки.Док+" ВСД уже создан, но не отправлен");
				Продолжить;
			КонецЕсли;		
		КонецЕсли;		
		
		Если НЕ(ЗначениеЗаполнено(СтрОтгрузки.Площадка)) или НЕ(ЗначениеЗаполнено(СтрОтгрузки.ХозСубъект)) Тогда
			СообщитьОшибку("Для "+СтрОтгрузки.Док+" неизвестен ХС или Площадка получателя ");
			Продолжить;
		КонецЕсли;
		// Доп контроль Переходный Период с 1.4 на 2.*
		ДокВСД = ВСД.НайтиВСД(СтрОтгрузки.Док);
		Если ЗначениеЗаполнено(ДокВСД) Тогда
				Сообщить("Уже создан "+ДокВСД +" для "+СтрОтгрузки.Док);
			Продолжить;
		КонецЕсли;
		//Состояние("Заполнение создание ВСД2_транзакция ");
				
		ХС = СтрОтгрузки.ХозСубъект;
		Площадка = СтрОтгрузки.Площадка;
		
		//ТЕСТ
		
		ДокВСД = СоздатьДокумент_ВСД2_Транзакция(ПолучитьДанныеДляСозданияВСДТранзакции(СтрОтгрузки.Док, ХС, СтрОтгрузки.Площадка));
		Если ЗначениеЗаполнено(ДокВСД) тогда
			СтрОтгрузки.ВСД = ДокВСД.Ссылка;		
			Сообщить("["+СтрОтгрузки.Грузополучатель+"] создан документ "+СтрОтгрузки.ВСД);		
		КонецЕсли;
		Продолжить;
		
		
		// Ниже Убрать после тестирования
		
		ДокВСД = Документы.ВСД2_транзакция.СоздатьДокумент();
		ДокВСД.ДокументОснование = СтрОтгрузки.Док;
		ДокВСД.Организация = ДокВСД.ДокументОснование.Организация;
		ДокВСД.Дата = ДокВСД.ДокументОснование.Дата;			
		ДокВСД.Отправитель_ХозСубъект = Отправитель_ХозСубъект;
		ДокВСД.Отправитель_Площадка = Отправитель_Площадка;			
		ДокВСД.Получатель_ХозСубъект = ХС;		
		ДокВСД.Получатель_Площадка = Площадка;					
		ДокВСД.Перевозчик_ХозСубъект = Перевозчик_ХозСубъект;
			
		ДокВСД.ТтнСерия = ""; //ТТН.Серия;
		ДокВСД.ТтнНомер = ПолучитьНомерДокБезПрефикса(СтрОтгрузки.Док); //СтрОтгрузки.Док.Номер;
		ДокВСД.ТтнДата = СтрОтгрузки.Док.Дата;
		Попытка ДокВСД.номерАвто = ПолучитьНомерАвто(СтрОтгрузки.Док); Исключение ДокВСД.номерАвто = "не используется"; КонецПопытки;
		ДокВСД.ФормаВСД = 1;			
		ДокВСД.Местность 		= ВСД_Местность;
		ДокВСД.ОсобыеОтметки 	= ВСД_ОсобыеОтметки;
		ДокВСД.cargoInspected  	= истина;			
		ДокВСД.РезультатыИсследований = ВСД_РезультатыИсследований;//СписокКонстант.Получить("ВСД_РезультатыИсследований");
			
		ДокВСД.ТермическоеСостояние = 4;
		ПропускатьПустыеСвойства = ПропускатьПустыеСвойства;//СписокКонстант.Получить("ПропускатьПустыеСвойства");
// заполняет ТЧ документа ВСД по Входящим данным , вызывается из ЗаполнитьНаосновании ВСД2_Транзакция
		ЗаполнитьТЧВСД(СтрОтгрузки.Док, ДокВСД, тзАктуальныхПартий);

		//ЖД Контроль
		Если ДокВСД.Товары.Количество() = 0 Тогда
			Сообщить("Нет данных для создания ВСД по "+СтрОтгрузки.Док,СтатусСообщения.Внимание);
			Продолжить;	
		КонецЕсли;
		
		ДокВСД.Записать();
		
		СтрОтгрузки.ВСД = ДокВСД.Ссылка;		
		Сообщить("["+СтрОтгрузки.Грузополучатель+"] создан документ "+СтрОтгрузки.ВСД);		

	КонецЦикла;								

КонецПроцедуры
//
//************* Смена Владельца

Функция ПолучитьДанныеДляСозданияВСДПеремещения(ДокОсн = Неопределено) Экспорт
    Рез = Новый Структура;
	Рез.Вставить("Организация",ПарамПоставщикОрганизация);
	Рез.Вставить("Отправитель_Хозсубъект",ПарамПоставщикХозСубъект);
	Рез.Вставить("Отправитель_Площадка",ПарамПоставщикПлощадка);
	Рез.Вставить("Получатель_Хозсубъект",Отправитель_Хозсубъект);
	Рез.Вставить("Получатель_Площадка",Отправитель_Площадка);
	Рез.Вставить("ДокОснование",Неопределено);
	Рез.Вставить("СтрокиВСД",ЗаполнитьТабЧастьЭлементовДляСозданияВСД(ДокОсн));
	
	Возврат Рез;
КонецФункции

Функция АвтоГашениеПеремещения(ВСДОтправителя, ФайлОтвета)
	НетОшибки = ложь;
	ФлНеЗагружать = Истина;
	ВСДВходящие.Очистить();
	ЗагрузитьXML_ВСД2(ФайлОтвета ,ВСДВходящие,Истина);
	
	Если ВСДВходящие.Количество() = 0 Тогда
		Сообщить("Нет вход данных для гашения");
		Возврат ложь;
	КонецЕсли;
	
	для Каждого стрВход из ВСДВходящие Цикл
		стрВход.Отметка = Истина;	
	КонецЦикла;
	Сообщить("Отправляем запросы на гашение...");
	Попытка	
		ОтправкаЗапросовНаГашение();
		НетОшибки = истина;
		для Каждого стрВход из ВСДВходящие Цикл
			Если Не (СокрЛП(стрВход.Статус) = "COMPLETED") Тогда
				НетОшибки = ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	исключение
		Возврат ложь;	
	КонецПопытки;
	
	Возврат НетОшибки;
КонецФункции

Функция СменаВладельцаВызовИзФормы(ДокОсн = Неопределено) Экспорт
	// Переработать/проверить под вызов извне - т.е. при инициализацииОбработки
	
	//Контрользаполненности параметров Поставщика
	Если (НЕ ЗначениеЗаполнено(ПарамПоставщикОрганизация)) или
		(НЕ ЗначениеЗаполнено(ПарамПоставщикХозСубъект)) или
		(НЕ ЗначениеЗаполнено(ПарамПоставщикПлощадка)) Тогда
		Сообщить("Не заполнен Параметр Основной Постащик");
		Возврат "НЕТПАРАМЕТРОВ";
	КонецЕсли;
	
	
	СписокПараметров = ПолучитьДанныеДляСозданияВСДПеремещения(Докосн);
	
	ДокВСД = СоздатьДокумент_ВСД2_Транзакция(СписокПараметров);
	Если ДокВСД = Неопределено Тогда
		Сообщить("Нас постигла неудача при создании ВСД на смену владельца");
		Возврат "ОШИБКАСОЗДАНИЯ";
	КонецЕсли;
	// Сохраним текущее состояние переменных
	ТекОрганизация = Организация;
	ТекПлощадка = Отправитель_Площадка;
	
	Сообщить("Отправляем запрос на Перемещение...");
	appID = Отправить_ВСД2_транзакция( ДокВСД );
	//СтрИмяФайла = КомпонентаНаСервере.LogFileName; - здесь невидна???
	//мы его записали в Реквизит модуля при ПолучитьРезультат_ВСД2()
	
	//Восстановим Параметры до отправки
	
	Организация = ТекОрганизация;
	Инициализация();
	
	Отправитель_Площадка = ТекПлощадка;
	СписокКонстант.Вставить("Отправитель_Площадка", ТекПлощадка);
	Результ = ложь;
	
	Если ДокВСД.Статус = "COMPLETED" Тогда
		Результ = АвтоГашениеПеремещения(ДокВСД, СтрИмяФайла);
	Иначе		
		Сообщить("Неудача автоотправки ВСД на смену Владельца "+ДокВСД);
		Сообщить("Отправьте вручную, погасите у Получателя.",СтатусСообщения.ОченьВажное);
		//ОткрытьФорму("Документ.ВСД2_транзакция.ФормаОбъекта", Новый Структура("Ключ", ДокВСД));
		Возврат "ОШИБКАОТПРАВКИВСД";   //МБ док вернуть?
	КонецЕсли;
	
	Если Не Результ Тогда
		Сообщить("Возникли ошибки при автогашении",СтатусСообщения.ОченьВажное);
		//Вот тут наверное не проканает на сервере
		Возврат "ОШИБКААВТОГАШЕНИЯ";
	иначе
		//Все пучком прошло
		// партии оприходовались
		Сообщить("Перемещенные партии успешно оприходованы на "+Организация+", Площадка - "+Отправитель_Площадка);
		Возврат "ОК";
	КонецЕсли
КонецФункции

//************** Смена Владельца = Перемещения, окончание

Функция ЗагрузитьXML_ВСД2(имяФайла, докОснование="", ЭтоТЗ = Ложь) Экспорт
	Если НЕ ЭтоТЗ Тогда
		Если НайтиОшибки(имяФайла, докОснование)>0 Тогда 
			Возврат "";
		КонецЕсли;		
	КонецЕсли;
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
//	ТермическиеУсловияПеревозки2 = Новый("СписокЗначений");
//	ТермическиеУсловияПеревозки2.Добавить("FROZEN","1");
//	ТермическиеУсловияПеревозки2.Добавить("CHILLED","2");
//	ТермическиеУсловияПеревозки2.Добавить("COOLED","3");
//	ТермическиеУсловияПеревозки2.Добавить("VENTILATED","4");	
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(имяфайла);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	applicationId = xdto.application.applicationId;
	  
	//варианты ответов на разные операции
	Попытка	seList = xdto.application.result.prepareOutcomingConsignmentResponse.vetDocument;	Исключение	seList = ""; КонецПопытки;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		//Транзакция
		Попытка seList = xdto.application.result.prepareOutgoingConsignmentResponse.vetDocument; Исключение 	seList = ""; КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		//Гашение
		Попытка	seList = xdto.application.result.processIncomingConsignmentResponse.vetDocument; Исключение	seList = ""; КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		// Выпуск
		Попытка	seList = xdto.application.result.registerProductionOperationResponse.vetDocument; Исключение seList = ""; КонецПопытки;
	КонецЕсли;
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		// Аннулирование
		Попытка	seList = xdto.application.result.withdrawVetDocumentResponse.vetDocument; Исключение seList = ""; КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		// Входящие
		Попытка seList = xdto.application.result.getVetDocumentListResponse.vetDocumentList.vetDocument;Исключение	seList = "";	КонецПопытки;	
	КонецЕсли;
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		// Инвентаризация
		Попытка seList = xdto.application.result.resolveDiscrepancyResponse.vetDocumentList.vetDocument;Исключение	seList = "";	КонецПопытки;	
	КонецЕсли;
	
	//*** тут еще варианты
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		Сообщить("Не далось прочитать ВСД из "+имяФайла);
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		vetDocumentList = Новый Массив;
		vetDocumentList.Добавить(seList);
	Иначе
		vetDocumentList = seList;
	КонецЕсли;
	
	Для каждого vetDocument из vetDocumentList Цикл
		Попытка	forma 	 = vetDocument.vetDForm;	Исключение	forma = ""; КонецПопытки;//Это привязанный к партии ВСД	Продолжить
		
		_uuid = vetDocument.uuid;
		Если ЭтоТЗ Тогда
			докОбъект = ВСДВходящие.Добавить();// ДокОснование.Добавить();
			докОбъект.НомерДок = докОбъект.НомерСтроки;
		Иначе
			докОбъект = НайтиВСДпоUUID( _uuid, "ВСД2" );	
		КонецЕсли;
				
		докОбъект.ФормаВСД 	 = forma;
		докОбъект.UUID = _uuid;
		
		докОбъект.applicationId = applicationId;
		Попытка докОбъект.Статус = vetDocument.vetDStatus; Исключение КонецПопытки;
		//Попытка докОбъект.Дата = СтрокаВДату(vetDocument.issueDate); Исключение КонецПопытки;
		докОбъект.Дата = СтрокаВДатаВремя( vetDocument.lastUpdateDate );
		Попытка докОбъект.ВСДДата = СтрокаВДату(vetDocument.issueDate); Исключение КонецПопытки; //реквизит в док ?
		
		
		Попытка	докОбъект.Организация = Организация; Исключение КонецПопытки;

		Попытка	докОбъект.ТипВСД = vetDocument.vetDType; Исключение КонецПопытки;
		
//		Попытка	Завершен = vetDocument.finalized; Исключение	Завершен=""; КонецПопытки;
//		Попытка	Lastupd = vetDocument.lastUpdateDate; Исключение Lastupd=""; КонецПопытки; // дата время посл изменения
		Если НЕ ЭтоТЗ Тогда
			Если НЕ(ЗначениеЗаполнено(докОбъект.ДокументОснование)) Тогда
				докОбъект.ДокументОснование = докОснование;
			КонецЕсли;
		КонецЕсли;
		// Бумажный ВСД
		Попытка докОбъект.всдсерия =vetDocument.issueSeries;  Исключение КонецПопытки;
		Попытка докОбъект.всдномер =vetDocument.issueNumber;  Исключение КонецПопытки; 
		Попытка докОбъект.ВидВСД = ?(ЗначениеЗаполнено(докОбъект.ВСДНомер),1,2); Исключение КонецПопытки;
//		ВидДокумента = ВыбратьВидДокументаВСД(type);
		
		ЭтоТранспортныйВСД=0;
		Попытка
			batch = vetDocument.certifiedBatch.batch;  //Продуктивный ВСД
		Исключение
			Попытка
				//Сертифицированная партия.
				//Сведения о партии продукции. 
				batch = vetDocument.certifiedConsignment.batch;  //ЖД Транспортный ВСД -другая структура ответа буду делать отдельно
				ЭтоТранспортныйВСД=1;
			Исключение
				batch="";
			КонецПопытки;
		КонецПопытки; 
		
		Если ЭтоТранспортныйВСД = 1 Тогда
			Попытка докОбъект.Отправитель_ХозСубъект = НайтиХСпоGUID(vetDocument.certifiedConsignment.consignor.businessEntity.guid); Исключение КонецПопытки;
			Попытка докОбъект.Отправитель_Площадка 	= НайтиПлощадку(vetDocument.certifiedConsignment.consignor.enterprise.guid); Исключение КонецПопытки;
			Попытка докОбъект.Получатель_ХозСубъект = НайтиХСпоGUID(vetDocument.certifiedConsignment.consignee.businessEntity.guid); Исключение КонецПопытки;
			Попытка докОбъект.Получатель_Площадка 	= НайтиПлощадку(vetDocument.certifiedConsignment.consignee.enterprise.guid); Исключение КонецПопытки;
			Попытка докОбъект.ВладелецХС = НайтиХСпоGUID(batch.owner.guid);	Исключение КонецПопытки;
			Попытка
				Если НЕ(ЗначениеЗаполнено(докОбъект.ВладелецХС)) Тогда
					докОбъект.ВладелецХС = докОбъект.Отправитель_ХозСубъект;	
				КонецЕсли;
			Исключение КонецПопытки;
	        Попытка докОбъект.Перевозчик_ХозСубъект 	= НайтиХСпоGUID(vetDocument.certifiedConsignment.broker.guid); Исключение КонецПопытки;
			
			Попытка
				transportInfo = vetDocument.certifiedConsignment.transportInfo;
				ТипТС = transportInfo.transportType;//("*[local-name()='transportType'] ").text;
				Если ТипТС = "1" Тогда
					докОбъект.номеравто = transportInfo.transportNumber.vehicleNumber;//("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='vehicleNumber']").text; 
					Попытка докОбъект.номерПолуприцепа = transportInfo.transportNumber.trailerNumber; Исключение КонецПопытки;
					Попытка докОбъект.номерКонтейнера = transportInfo.transportNumber.containerNumber; Исключение КонецПопытки;
					Попытка докОбъект.номерПолуприцепа = ?(докОбъект.номерПолуприцепа = "ОбъектXDTO","",докОбъект.номерПолуприцепа); Исключение КонецПопытки;
					Попытка докОбъект.номерКонтейнера = ?(докОбъект.номерКонтейнера = "ОбъектXDTO","",докОбъект.номерКонтейнера); Исключение КонецПопытки;
				Иначеесли ТипТС = "2" Тогда
					докОбъект.номеравто = transportInfo.transportNumber.wagonNumber;
				Иначеесли ТипТС = "3" Тогда
					докОбъект.номеравто = transportInfo.transportNumber.flightNumber;
				Иначеесли (ТипТС = "4") или (ТипТС = "5") или (ТипТС = "6") Тогда
					докОбъект.номеравто = transportInfo.transportNumber.shipName;
	//			Иначеесли ТЗВСД.ТипТС = "7" Тогда
				
				КонецЕсли;
				Попытка докОбъект.ТипТС = ТипТС; Исключение КонецПопытки;
			исключение	КонецПопытки;
			Попытка докОбъект.термическоесостояние = Число(ТермическиеУсловияПеревозки2.НайтиПоЗначению(vetDocument.certifiedConsignment.transportStorageType).Представление); 	Исключение 	КонецПопытки;
			
			Попытка МаршрутСледования = МаршрутСледования_из_XML(vetDocument.certifiedConsignment.shipmentRoute.routePoint); Исключение	МаршрутСледования = ""; КонецПопытки;
			Попытка
				ТочкиМаршрута = МаршрутСледования;
				// ЖД При гашении Нужно указать Тип и № последнего ТС в Маршруте Следования - запишем данные в соотв реквизиты.
				Если ТипЗнч(ТочкиМаршрута) = Тип("ТаблицаЗначений") Тогда
					ТочкиМаршрута.Сортировать("НомерТочки Убыв"); // Возьмем № последнего ТС в точке где была перегрузка, т.е. № Авто сменился
					для каждого стрТочкаМаршрута из ТочкиМаршрута Цикл
						Если стрТочкаМаршрута.Перегрузка = 1 Тогда
							докОбъект.ТипТС				= Строка(стрТочкаМаршрута.ТипТранспорта);
							докОбъект.номерКонтейнера 	= стрТочкаМаршрута.номерКонтейнера;
							докОбъект.номеравто			= СокрЛП(стрТочкаМаршрута.номеравто) + СокрЛП(стрТочкаМаршрута.номерВагона) + СокрЛП(стрТочкаМаршрута.НомерАвиарейса)+ СокрЛП(стрТочкаМаршрута.НазваниеСудна);
							докОбъект.номерПолуприцепа	= стрТочкаМаршрута.номерПрицепа;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					//Передадим ТЗ маршрутов в обработку Гашение
//					Если ЭтоТЗ Тогда 
//						Попытка докОбъект.МаршрутСледования = ЗначениеВСтрокуВнутр(МаршрутСледования); Исключение	КонецПопытки;
//					КонецЕсли;
				КонецЕсли;
			Исключение	КонецПопытки;
		КонецЕсли; // транспортный ВСД
		
		Попытка докОбъект.Продукция 	= НайтиПродукцию(batch.product.guid); Исключение КонецПопытки;
		Попытка докОбъект.ВидПродукции 	= НайтиВидПродукции(batch.subProduct.guid); Исключение КонецПопытки;
		//Попытка productItemUuid = batch.productItem.uuid; Исключение productItemUuid = "" КонецПопытки;
		//Попытка productItemGuid = batch.productItem.guid; Исключение productItemGuid = "" КонецПопытки;
		//докОбъект.Продукция_Элемент = Найти_Продукция_Элемент(докОбъект.НаименованиеПродукции, productItemGuid,productItemUuid, докОбъект.Продукция, докОбъект.ВидПродукции);
		докОбъект.Продукция_Элемент = Найти_Продукция_Элемент2(batch.productItem, докОбъект.Продукция, докОбъект.ВидПродукции);
		Попытка	докОбъект.НаименованиеПродукции = batch.productItem.name; Исключение докОбъект.НаименованиеПродукции = докОбъект.Продукция_Элемент.Наименование; КонецПопытки;
		//Trade Identification Number (GTIN) - идентификационный номер продукции производителя.
		Попытка докОбъект.GTIN = batch.productItem.globalID;	Исключение 	КонецПопытки;
        //Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
		Попытка	докОбъект.Артикул = batch.productItem.code;	Исключение	КонецПопытки;
		
		//<dt:packaging> Фасовка.  
		// Параметры фасовки привязаны к ВСД_ПродукцияЭлемент
		Попытка Фасовка_из_XML(batch.productItem.packaging,докОбъект.ФасовкаНаименование,докОбъект.ФасовкаФормаУпаковки,докОбъект.ФасовкаКоличество,докОбъект.ФасовкаОбъем,докОбъект.ФасовкаЕдиницаИзмерения); Исключение КонецПопытки;
		
		// Объем продукции
		Попытка	докОбъект.Количество 		= Число(batch.volume); Исключение КонецПопытки;
		Попытка	докОбъект.ЕдиницаИзмерения	= НайтиЕдИзмерения( batch.unit.guid ); Исключение КонецПопытки;
		
		ДатаИзготовления1="";	ДатаИзготовления=""; ДатаИзготовления2="";		
		Дата_из_XML(batch.dateOfProduction, ДатаИзготовления1, ДатаИзготовления2, ДатаИзготовления );
		докОбъект.ДатаИзготовления1=ДатаИзготовления1;
		докОбъект.ДатаИзготовления2=ДатаИзготовления2; 
		Попытка докОбъект.ДатаИзготовления = ДатаИзготовления;  Исключение КонецПопытки;
		
		ДатаСрокГодности1=""; ДатаСрокГодности2=""; ДатаСрокГодности="";
		Дата_из_XML(batch.expiryDate, ДатаСрокГодности1, ДатаСрокГодности2, ДатаСрокГодности );
		докОбъект.ДатаСрокГодности1 = ДатаСрокГодности1;
		Попытка докОбъект.ДатаСрокГодности = ДатаСрокГодности; Исключение КонецПопытки;
		докОбъект.ДатаСрокГодности2 = ДатаСрокГодности2;
		Попытка докОбъект.НомерПартии =  СписокНомеровПартий_из_XML(batch); Исключение	КонецПопытки; //В спр нет реквизита
		//Попытка докОбъект.НомерПартии =  batch.batchID; Исключение	КонецПопытки; // нет реквизита
        //<vd:batchID> 	bs:String255 	[1..*] 	Уникальный идентификатор производственной партии продукции. 	<vd:batchID>ПП64219</vd:batchID> 
		Попытка докОбъект.Скоропортящийся = ?(batch.perishable="true",1,0); Исключение	КонецПопытки;
		Попытка докОбъект.Некачественный =  ?(batch.lowGradeCargo="true",1,0); Исключение	КонецПопытки;
		
		//Информация о предприятие-производителе продукции.
		//возможен список предприятий
		Попытка ПроизводителиСписок = СписокПроизводителей_из_XML(batch.origin.producer);Исключение КонецПопытки;
		//Запишем одного из производителей в Реквизит
		Попытка
			СЗПроизводители = ЗначениеИзСтрокиВнутр(ПроизводителиСписок);			
			докОбъект.Производитель_Площадка = СЗПроизводители[0].Площадка;	
		Исключение КонецПопытки;
		Попытка докОбъект.ПроизводителиСписок = ПроизводителиСписок;Исключение КонецПопытки; // Если есть Реквизит или в ТЧ 
		Попытка докОбъект.Страна_ГУИД = batch.origin.country.guid; Исключение КонецПопытки;

		Попытка	докОбъект.УровниУпаковки = УровниУпаковки_из_XML(batch.packageList.package);	Исключение 	КонецПопытки;
		
		Попытка	докОбъект.cargoInspected = ?(vetDocument.authentication.cargoInspected="true",1,0);	Исключение	КонецПопытки;
        Попытка	cargoExpertized = vetDocument.authentication.cargoExpertized;Исключение	cargoExpertized =""; КонецПопытки;
		докОбъект.РезультатыИсследований = Перечисления.ВСД_РезультатИсследования[cargoExpertized]; 
		Попытка	докОбъект.особыеотметки = vetDocument.authentication.specialMarks; 	Исключение	КонецПопытки;
		Попытка	докОбъект.Местность = vetDocument.authentication.locationProsperity;	Исключение  КонецПопытки; //В гашении ВСДМестность
        // след блок Сделать ЖД Если Нужен
		//·······<vd:laboratoryResearch> 	vd:LaboratoryResearchEvent 	[0..*] 	Сведения о проведенных лабораторных исследованиях. 
		Попытка СвязанныеДокументы = СвязанныеДокументы_из_XML(vetDocument.referencedDocument); Исключение  КонецПопытки;
		// Получим ТТН
		Попытка
			ТЗДоков = ЗначениеИзСтрокиВнутр(СвязанныеДокументы);
			СтрокаТЗ = ТЗДоков.Найти(1, "ТипДокумента");
			Если СтрокаТЗ  = Неопределено Тогда
				СтрокаТЗ = ТЗДоков.Найти(2, "ТипДокумента");
				Если СтрокаТЗ  = Неопределено Тогда
					СтрокаТЗ = ТЗДоков.Найти(3, "ТипДокумента");
					Если СтрокаТЗ  = Неопределено Тогда
						СтрокаТЗ = ТЗДоков.Найти(4, "ТипДокумента");
						Если СтрокаТЗ  = Неопределено Тогда
							СтрокаТЗ = ТЗДоков.Найти(5, "ТипДокумента");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ(СтрокаТЗ = Неопределено) Тогда
				докОбъект.ттнСерия = СтрокаТЗ.СерияДокумента;
				докОбъект.ттнномер = СтрокаТЗ.НомерДокумента;
				докОбъект.ттндата = СтрокаВДату(СтрокаТЗ.ДатаДокумента);
				Попытка докОбъект.ттнТип = СтрокаТЗ.ТипДокумента; Исключение КонецПопытки;
			КонецЕсли;
		Исключение КонецПопытки;
		Попытка докОбъект.СвязанныеДокументы = СвязанныеДокументы; Исключение КонецПопытки; //Если есть такой реквизит или в ТЧ
		Если НЕ ЭтоТЗ Тогда
			докОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить("Записан "+докОбъект+" "+докОбъект.Номер+" от "+докОбъект.Дата+" ["+_uuid+"]");
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(докОснование) и НЕ(ЭтоТЗ) Тогда
		докОснованиеОбъект = докОснование.ПолучитьОбъект();
		докОснованиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;	
		
	
	Возврат "";	
КонецФункции

Процедура ЗагрузитьXML_Партии2(имяФайла, докОснование="") Экспорт 
	
	Если НайтиОшибки(имяФайла, докОснование)>0 Тогда 
		Возврат;
	КонецЕсли;
	
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	
    СообщитьИнфо("Загрузка XML-файла: "+ИмяФайла);    
	ЧтениеXML = новый ЧтениеXML;
//	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	ЧтениеXML.ОткрытьФайл(имяФайла);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	//Вариации загрузки партий при разных запросах 
	Попытка	seList = xdto.application.result.prepareOutcomingConsignmentResponse.StockEntry; Исключение	seList = ""; КонецПопытки;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		//Транзакция
		Попытка	seList = xdto.application.result.prepareOutgoingConsignmentResponse.StockEntry;	Исключение seList = ""; КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		//Гашение
		Попытка	seList = xdto.application.result.processIncomingConsignmentResponse.StockEntry;	Исключение	seList = ""; КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		// Выпуск 
		Попытка seList = xdto.application.result.registerProductionOperationResponse.stockEntryList.StockEntry; Исключение	seList = ""; КонецПопытки;
	КонецЕсли;
		
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		// Анулирование
		Попытка	seList = xdto.application.result.withdrawVetDocumentResponse.StockEntry; Исключение seList = ""; КонецПопытки;
	КонецЕсли;
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		// Инвентаризация
		Попытка seList = xdto.application.result.resolveDiscrepancyResponse.stockEntryList.StockEntry;Исключение	seList = "";	КонецПопытки;	
	КонецЕсли;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		// Объединение Партий
		Попытка seList = xdto.application.result.mergeStockEntriesResponse.stockEntryList.StockEntry;Исключение	seList = "";	КонецПопытки;	
	КонецЕсли;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		// Лаб исследования 
		Попытка seList = xdto.application.result.updateVeterinaryEventsResponse.StockEntry; Исключение	seList = "";	КонецПопытки;	
	КонецЕсли;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		Сообщить("Не далось прочитать Партии из "+имяФайла);
		Возврат;
	КонецЕсли;
	
	
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		stockEntryList = Новый Массив;
		stockEntryList.Добавить(seList);
	Иначе
		stockEntryList = seList;
	КонецЕсли;
			
	//Сообщить("Получено "+seList.length+" записей","i");
	Для каждого stockEntry из stockEntryList Цикл		
					
		Партия = ЗаписатьПартию2(Отправитель_Площадка, stockEntry);
		
		Если докОснование<>"" Тогда 
			Партия.ДокОснование = докОснование;
			Партия.Записать();
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьРезультат_ВСД2(applicationID, докСсылка, Пауза = Истина ) Экспорт
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	Если Пауза Тогда		
		Пауза( );
	КонецЕсли;	
	
	Сообщить("Отправляем запрос ["+докСсылка+"]" );
	Результат = КомпонентаНаСервере.SendRequestResult( applicationID );

	Если НайтиОшибки(КомпонентаНаСервере.LogFilename, докСсылка)>0 Тогда
		Если ЗначениеЗаполнено(докСсылка) Тогда
			Попытка
				СохранитьСтатусЗапроса(докСсылка);
			Исключение
				Сообщить(ОписаниеОшибки());	
			КонецПопытки;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;		
	
	СтрИмяФайла = КомпонентаНаСервере.LogFilename; // на форму гашения
	ЭтоТЗ = ?(строка(типЗнч(докСсылка)) = "Внешняя обработка табличная часть: ВСДВходящие",Истина,Ложь);
	//Сообщить(строка(типЗнч(докСсылка)));
	Если ЗначениеЗаполнено(докСсылка) или ЭтоТЗ Тогда 
		Если НЕ ЭтоТЗ Тогда
			СохранитьСтатусЗапроса(докСсылка);
		КонецЕсли;
		ВидДок = типЗнч(докСсылка);
		Если НЕ( (ВидДок = Тип("ДокументСсылка.ВСД2_Инвентаризация")) или (ВидДок = Тип("ДокументСсылка.ВСД2_ОбъединениеПартий"))) Тогда
			ЗагрузитьXML_ВСД2( КомпонентаНаСервере.LogFilename, докСсылка, ЭтоТЗ);
		КонецЕсли;
	КонецЕсли;

	ЗагрузитьXML_Партии2( КомпонентаНаСервере.LogFilename );
		
	УдалитьXML( КомпонентаНаСервере.LogFilename );
	
	Возврат Результат;
КонецФункции

Процедура ПолучитьОтветыПоСпискуВСД(сзДокументыКОтправке) Экспорт
	Для каждого Стрдок Из сзДокументыКОтправке Цикл
		_ВСД = Стрдок.Значение;
		Попытка
			ПолучитьРезультат_ВСД2(СокрЛП(_ВСД.ApplicationID), _ВСД);
		исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

// ***** Продукция v2
Функция ПолучитьРезультат_Список_Продукции(имяФайла,продукцияЭлемент="") Экспорт
	// ЖД Добавить реквизиты в справочник для api 2.0 - Фасовка, GTIN, (Вероятно список площадок производителей))
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(имяФайла);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	
	//Вариации загрузки при разных запросах ЖД 
	//Получение списка по площадке
	Попытка pIList = xdto.Body.getProductItemListResponse.productItemList.productItem; Исключение pIList = ""; КонецПопытки;
	
	Если (ТипЗнч(pIList)<>Тип("СписокXDTO"))и (ТипЗнч(pIList)<>Тип("ОбъектXDTO")) Тогда
		// Изменение  / добавление
		Попытка	pIList = xdto.application.result.modifyProducerStockListResponse.productItemList.productItem; Исключение pIList = "";	КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(pIList)<>Тип("СписокXDTO"))и (ТипЗнч(pIList)<>Тип("ОбъектXDTO")) Тогда
		Попытка	pIList = xdto.Body.getProductItemByGuidResponse.productItem;	Исключение	pIList = ""; КонецПопытки;
	КонецЕсли;	
	
	Если (ТипЗнч(pIList)<>Тип("СписокXDTO"))и (ТипЗнч(pIList)<>Тип("ОбъектXDTO")) Тогда
		Сообщить("Не далось прочитать продукцию из "+имяФайла);
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(pIList)<>Тип("СписокXDTO") Тогда 
		productItemList = Новый Массив;
		productItemList.Добавить(pIList);
	Иначе
		productItemList = pIList;
	КонецЕсли;
	
	Для каждого productItem из productItemList Цикл		
		
		active 	 = productItem.active;
		
		Если active="false" Тогда
		//	Продолжить;
		// если у нас имеется - нужно удалить
		КонецЕсли;
		name = productItem.name;
		guid  	 = productItem.guid;
		_uuid  	 = productItem.uuid;
	
		Если ЗначениеЗаполнено(продукцияЭлемент) Тогда
			СпрОбъект = ПродукцияЭлемент.ПолучитьОбъект();
		Иначе
			СпрСсылка = Справочники.ВСД_Продукция_Элемент.НайтиПоРеквизиту("GUID", guid);
			Если СпрСсылка = Справочники.ВСД_Продукция_Элемент.ПустаяСсылка() Тогда
				СпрСсылка = Справочники.ВСД_Продукция_Элемент.НайтиПоНаименованию(name);
				Если СпрСсылка = Справочники.ВСД_Продукция_Элемент.ПустаяСсылка() Тогда
					Если active = "true" тогда //можем создать новый
						СпрОбъект = Справочники.ВСД_Продукция_Элемент.СоздатьЭлемент();
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					СпрОбъект = СпрСсылка.ПолучитьОбъект();
				КонецЕсли;
			Иначе
				СпрОбъект = СпрСсылка.ПолучитьОбъект();
			КонецЕсли;
		КонецЕсли;
		
		СпрОбъект.UUID = _uuid;
		СпрОбъект.GUID = guid;		
		Попытка СпрОбъект.Наименование = name;  Исключение КонецПопытки;
		Попытка СпрОбъект.Продукция = НайтиПродукцию(productItem.product.guid); Исключение КонецПопытки;
		Попытка СпрОбъект.ВидПродукции = НайтиВидПродукции(productItem.subProduct.guid); Исключение КонецПопытки;
		Попытка СпрОбъект.Артикул = productItem.code; Исключение КонецПопытки;
		Попытка СпрОбъект.GTIN = productItem.globalID; Исключение КонецПопытки;
		Попытка СпрОбъект.СоответствуетГОСТу = ?(productItem.correspondsToGost="true",1,0);	Исключение СпрОбъект.СоответствуетГОСТу = 0; КонецПопытки;
		Попытка СпрОбъект.Гост = ?(типзнч(productItem.gost) = Тип("Строка"),productItem.gost,"");	Исключение СпрОбъект.Гост = "";	КонецПопытки;

		// Фасовка
		Попытка packaging = productItem.packaging Исключение packaging=""	КонецПопытки; 	
		Попытка ФасовкаНаименование = packaging.packagingType.name;	Исключение ФасовкаНаименование=""	КонецПопытки;
		Попытка СпрОбъект.ФасовкаФормаУпаковки = НайтиФормуУпаковки( packaging.packagingType.guid,ФасовкаНаименование );	Исключение 	КонецПопытки;
		Попытка	СпрОбъект.ФасовкаКоличество = Число(packaging.quantity);	Исключение	КонецПопытки;
		Попытка	СпрОбъект.ФасовкаОбъем = Число(packaging.volume); Исключение	КонецПопытки;
		Попытка	СпрОбъект.ФасовкаЕдиницаИзмерения = НайтиЕдИзмерения(packaging.unit.guid);	Исключение 	КонецПопытки;			
		
		Если СпрОбъект.ТермическиеУсловияПеревозки = 0 Тогда СпрОбъект.ТермическиеУсловияПеревозки = СписокКонстант.Получить("ТермУсловияПеревозки"); КонецЕсли; 
		//productItem.producer.guid - ХС Производитель
		//productItem.producing.location.guid - Площадка-Производитель  - возможен список
		Попытка СпрОбъект.Площадка = НайтиПлощадку(productItem.producing.location.guid);  Исключение	КонецПопытки; 
//		st  	 = productItem.status;
//		prodType = productItem.productType;		
		СпрОбъект.Записать();
		Если active="false" Тогда
			СпрОбъект.УстановитьПометкуУдаления(истина);
			Сообщить("Помечен на удаление ["+name+"] uuid =["+_uuid+"], т.к. статус = НЕАКТИВЕН");
		Иначе	
			Сообщить("Записан ["+name+"] uuid =["+_uuid+"]");
			Если СпрОбъект.ПометкаУдаления Тогда
				СпрОбъект.УстановитьПометкуУдаления(ложь);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
				
	УдалитьXML( КомпонентаНаСервере.LogFilename );

	Возврат "";
КонецФункции

Функция Получить_Список_Продукции_ЗапросXML(Площадка)
	
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
    |<soapenv:Header/>
    |<soapenv:Body>
    |   <ws:getProductItemListRequest>
    |      <bs:listOptions>
    |         <bs:count>1000</bs:count>
    |         <bs:offset>0</bs:offset>
    |      </bs:listOptions>
    |      <dt:enterprise>
    |         <bs:guid>"+ СокрЛП(Площадка.GUID) +"</bs:guid>
    |      </dt:enterprise>
    |   </ws:getProductItemListRequest>
    |</soapenv:Body>
	|</soapenv:Envelope>	
	|";
	Возврат Запрос;	
КонецФункции

Функция Получить_Список_Продукции( Площадка ) Экспорт
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	ЗапросXML = Получить_Список_Продукции_ЗапросXML( Площадка );

	метод = КомпонентаНаСервере.GetMethod();
	
	метод.Service = "platform/services/2.0/ProductService";//"platform/services/ProductService";
    метод.Action = "GetProductItemList";		
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	
	Если НайтиОшибки(КомпонентаНаСервере.LogFilename)>0 Тогда 
		Возврат "";
	КонецЕсли;		
	ПолучитьРезультат_Список_Продукции(КомпонентаНаСервере.LogFilename);
	УдалитьXML( КомпонентаНаСервере.LogFilename);	
	Возврат appID;
		
КонецФункции

Функция  ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID) Экспорт

	Если ПустоеЗначение(appID)=1 Тогда
		Сообщить("Пустая ссылка applicationID");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	Пауза( );
	
	Сообщить("Отправляем запрос ["+продукцияЭлемент+"]" );
	Результат = КомпонентаНаСервере.SendRequestResult( appID );

	Если НайтиОшибки(КомпонентаНаСервере.LogFilename)>0 Тогда 
		Возврат Результат;
	КонецЕсли;		

	ПолучитьРезультат_Список_Продукции(КомпонентаНаСервере.LogFilename,продукцияЭлемент);	
	УдалитьXML( КомпонентаНаСервере.LogFilename );
  
	Возврат Результат;
КонецФункции

Функция Изменить_Продукцию_ЗапросXML(продукцияЭлемент,RegisterModificationType)

	Запрос ="<SOAP-ENV:Envelope 
		|      xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
		|      xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|      xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
		|      xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
		|      xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
		|      xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
		|      xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
		|  <SOAP-ENV:Header/>
		|  <SOAP-ENV:Body>
		|    <apldef:submitApplicationRequest>
		|      <apldef:apiKey>"+ СокрЛП( СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
		|      <apl:application>
		|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
		|        <apl:issuerId>"+ СокрЛП( СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
		|        <apl:issueDate>" + ДатаXML(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
		|        <apl:data>
		|          <merc:modifyProducerStockListRequest>
		|            <merc:localTransactionId>" + "Id1" + "</merc:localTransactionId>
		|            <merc:initiator>
		|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
		|            </merc:initiator>
		|            <merc:modificationOperation>
	    |          <vd:type>"+RegisterModificationType+"</vd:type>";
		Если RegisterModificationType = "DELETE" Тогда
		    Запрос = Запрос + "
	        |      <vd:affectedList>
    	    |        <dt:productItem>
        	|          <bs:uuid>"+СокрЛП(продукцияЭлемент.UUID)+"</bs:uuid>
	        |        </dt:productItem>
    	    |      </vd:affectedList>";		
		Иначе
		    Запрос = Запрос + "
		    |          <vd:resultingList>
		    |            <dt:productItem>";
		    Если ЗначениеЗаполнено(продукцияЭлемент.UUID) Тогда
				Запрос = Запрос + "
	    		|              <bs:uuid>"+СокрЛП(продукцияЭлемент.UUID)+"</bs:uuid>";
			КонецЕсли;
		    Если ЗначениеЗаполнено(продукцияЭлемент.GTIN) Тогда
				Запрос = Запрос + "
	    		|              <dt:globalID>"+СокрЛП(продукцияЭлемент.GTIN)+"</dt:globalID>";
			КонецЕсли;
			
			Запрос = Запрос + "
		    |              <dt:name>"+СокрЛП(продукцияЭлемент.Наименование)+"</dt:name>";
		    Если ЗначениеЗаполнено(продукцияЭлемент.Артикул) Тогда
				Запрос = Запрос + "
	    		|              <dt:code>"+СокрЛП(продукцияЭлемент.Артикул)+"</dt:code>";
			КонецЕсли;
			
			Запрос = Запрос + "
		    |              <dt:productType>"+продукцияЭлемент.Продукция.Тип+"</dt:productType>
	    	|              <dt:product>
		    |                <bs:guid>"+Сокрлп(продукцияЭлемент.Продукция.GUID)+"</bs:guid>		
	    	|              </dt:product>
		    |              <dt:subProduct>
	    	|                <bs:guid>"+Сокрлп(продукцияЭлемент.ВидПродукции.GUID)+"</bs:guid>
		    |              </dt:subProduct>
			|              <dt:correspondsToGost>"+НашеБулево(продукцияЭлемент.СоответствуетГОСТу)+"</dt:correspondsToGost>";
		    Если продукцияЭлемент.СоответствуетГОСТу = 1 Тогда
				Запрос = Запрос + "
		    	|              <dt:gost>"+СокрЛП(продукцияЭлемент.Гост)+"</dt:gost>";
			КонецЕсли;
			// ХС Производитель и владелец ТМ		
			Запрос = Запрос + "
		    |              <dt:producer>
	    	|                <bs:guid>"+Сокрлп(СписокКонстант.Получить("Отправитель_ХозСубъект").GUID)+"</bs:guid>
		    |              </dt:producer>
		    |              <dt:tmOwner>
	    	|                <bs:guid>"+Сокрлп(СписокКонстант.Получить("Отправитель_ХозСубъект").GUID)+"</bs:guid>
		    |              </dt:tmOwner>";
			

	//45 	·········<dt:producing> 	dt:ProductItemProducing 	[0..*] 	Список площадок, на которых выпускается данная продукция. 	
	//46 	············<dt:location> 	dt:Enterprise 	[1..1] 	Площадка, осуществляющая выпуск продукции. 	
	//47 	···············<bs:uuid> 	bs:UUID 	[1..1] 	Идентификатор версии предприятия. 	<bs:uuid>9c706614-b995-4bdd-bda3-8fa9de70803a</bs:uuid>
	//48 	···············<bs:guid> 	bs:UUID 	[1..1] 	Глобальный идентификатор предприятия. 	<bs:guid>12f04ea3-e236-4b71-b427-e04d41b26de4</bs:guid>
	//49 	············</dt:location> 				
	//50 	·········</dt:producing> 			
			Запрос = Запрос + "
		    |              <dt:producing>
			|                <dt:location>
	    	|                   <bs:guid>"+Сокрлп(продукцияЭлемент.Площадка.GUID)+"</bs:guid>
		    |                </dt:location>
		    |              </dt:producing>";
			// ЖД ФАСОВКА
			Если ЗначениеЗаполнено(продукцияЭлемент.ФасовкаФормаУпаковки) и  ЗначениеЗаполнено(продукцияЭлемент.ФасовкаЕдиницаИзмерения) Тогда
				Запрос = Запрос + "
				|              <dt:packaging>
			    |                <dt:packagingType>
	    		|                  <bs:guid>"+Сокрлп(продукцияЭлемент.ФасовкаФормаУпаковки.GUID)+"</bs:guid>
			    |                </dt:packagingType>
	    		|                <dt:quantity>"+продукцияЭлемент.ФасовкаКоличество+"</dt:quantity>
		    	|                <dt:volume>"+Формат(продукцияЭлемент.ФасовкаОбъем, "ЧРД=.; ЧГ=0")+"</dt:volume>
		    	|                <dt:unit>
			    |                  <bs:guid>"+Сокрлп(продукцияЭлемент.ФасовкаЕдиницаИзмерения.GUID)+"</bs:guid>
	    		|                </dt:unit>
			    |              </dt:packaging>";
			КонецЕсли;
			Запрос = Запрос + "
			|            </dt:productItem>
		    |          </vd:resultingList>";
		КонецЕсли;
		Запрос = Запрос + "
	    |        </merc:modificationOperation>
	    |      </merc:modifyProducerStockListRequest>
	    |    </apl:data>
	    |  </apl:application>
	    |</apldef:submitApplicationRequest>
		|</SOAP-ENV:Body>
		|</SOAP-ENV:Envelope>";	
	
	
	Возврат Запрос;	
КонецФункции

Функция  Изменить_Продукцию( продукцияЭлемент , RegisterModificationType) Экспорт
	//Если ПустоеЗначение(ВыбПлощадка)=1 Тогда 
	//	Предупреждение("Выберите Площадку");
	//	Возврат;
	//КонецЕсли;
	Если НЕ ЗначениеЗаполнено(продукцияЭлемент) Тогда
		Сообщить("Укажите Продукцию для обработки в Меркурий");
		Возврат "REJECTED";
	КонецЕсли;	
	Если НЕ(ЗначениеЗаполнено(продукцияЭлемент.Площадка.GUID)) Тогда 
		Сообщить("В продукцияЭлемент.Площадка пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;

	Если (RegisterModificationType = "DELETE") и (НЕ(ЗначениеЗаполнено(продукцияЭлемент.UUID))) Тогда
		Сообщить("Невозможно выполнить операцию удаления "+продукцияЭлемент+" т.к. не указан ее UUID");
		Возврат "REJECTED";
	КонецЕсли;
	                 
	ЗапросXML = Изменить_Продукцию_ЗапросXML(продукцияЭлемент, RegisterModificationType);
	
	метод = КомпонентаНаСервере.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";	
    метод.Action = "submitApplicationRequest";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	
	УдалитьXML( КомпонентаНаСервере.LogFilename);
	Результат = "";
	Если ЗначениеЗаполнено(appID) Тогда
		Результат = ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID);
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_Изменить_Продукцию(продукцияЭлемент, appID);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	УдалитьXML( КомпонентаНаСервере.LogFilename);
	
	Возврат Результат;
	
КонецФункции

Функция Продукция_Инфо_ЗапросXML( продукция )
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' 
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2' 
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getProductItemByGuidRequest>
	|      <base:guid>"+ СокрЛП(продукция.GUID) +"</base:guid>
	|    </ws:getProductItemByGuidRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	
	Возврат запрос;
КонецФункции

Процедура Получить_Инфо_Продукции( Продукция ) Экспорт
	Если НЕ ЗначениеЗаполнено(Продукция) Тогда
		Сообщить("Укажите Продукцию для получения информации о ней");
		Возврат;
	КонецЕсли;
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	
	ЗапросXML = Продукция_Инфо_ЗапросXML( Продукция );

	метод = КомпонентаНаСервере.GetMethod();
	метод.Service = "platform/services/2.0/ProductService";//"platform/services/ProductService";
	//метод.Service = "platform/services/ProductService";
    метод.Action = "GetProductItemByGuid";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
		
	Результат = ПолучитьРезультат_Список_Продукции( КомпонентаНаСервере.LogFilename, Продукция);
	
	УдалитьXML( КомпонентаНаСервере.LogFilename);
	
КонецПроцедуры

// ***** Продукция v2  окончание


Функция НайтиПродукцию(guid)
	если ПустаяСтрока(guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Продукция.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Продукция КАК ВСД_Продукция
		                      |ГДЕ
		                      |	ВСД_Продукция.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Продукция Guid "+guid+" не найдена. Выполните инициализацию");
			Ответ = Справочники.ВСД_Продукция.ПустаяСсылка();	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Продукция");
	КонецЕсли;
	 	
	Возврат Ответ;

КонецФункции

Функция НайтиВидПродукции(guid)
	если ПустаяСтрока(guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ВидПродукции.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ВидПродукции КАК ВСД_ВидПродукции
		                      |ГДЕ
		                      |	ВСД_ВидПродукции.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_ВидПродукции Guid "+guid+" не найдена. Выполните инициализацию");
			Ответ = Справочники.ВСД_ВидПродукции.ПустаяСсылка();	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_ВидПродукции");
		Ответ = "";
	КонецЕсли;
	 	
	Возврат Ответ;
	
КонецФункции

Функция Найти_Продукция_Элемент2(productItem, ВСД_Продукция, ВСД_ВидПродукции) Экспорт
	Попытка productItemName = productItem.name; Исключение	productItemName = ""; КонецПопытки;
	Попытка	productItemGuid = productItem.guid; Исключение	productItemGuid="";	КонецПопытки;
	Попытка productItemUuid = productItem.uuid; Исключение	productItemUuid=""; КонецПопытки;
	
	Ответ = "";
	если ЗначениеЗаполнено(productItemGuid) Тогда			
		Запрос = Новый Запрос;
		ТекстЗапроса = "	  ВЫБРАТЬ
		                      |	ВСД_Продукция_Элемент.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Продукция_Элемент КАК ВСД_Продукция_Элемент
		                      |ГДЕ
		                      |	ВСД_Продукция_Элемент.GUID = &GUID";
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("GUID", productItemGuid );
		Результат = Запрос.Выполнить().Выбрать();		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Продукция_Элемент Guid "+productItemGuid+" не найдена. Создан новый элемент");
			Спр = Справочники.ВСД_Продукция_Элемент.СоздатьЭлемент();
			Спр.Наименование = productItemName;
			Спр.guid = productItemGuid;
			Спр.Uuid = productItemUuid;
			Спр.Продукция = ВСД_Продукция;
			Спр.ВидПродукции = ВСД_ВидПродукции;
			Спр.ТермическиеУсловияПеревозки = СписокКонстант.Получить("ТермУсловияПеревозки");
			Спр.Записать();	
			Получить_Инфо_Продукции(спр.Ссылка);
			Ответ = спр.Ссылка;
		КонецЕсли;
	Иначе //Если нет ГУИД			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Продукция_Элемент.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Продукция_Элемент КАК ВСД_Продукция_Элемент
		                      |ГДЕ
		                      |	ВСД_Продукция_Элемент.Наименование = &Название
		                      |	И ВСД_Продукция_Элемент.GUID = &GUID");
		Запрос.УстановитьПараметр("Название", Лев(productItemName,150) );    //ЖД до размера реквизита 1с8
		Запрос.УстановитьПараметр("GUID", productItemGuid ); // Обязательно пустой GUID
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Продукция_Элемент  "+productItemName+" не найдена. Создан новый элемент");
			Спр = Справочники.ВСД_Продукция_Элемент.СоздатьЭлемент();
			Спр.Наименование = productItemName;
			Спр.guid = productItemGuid;
			Спр.Uuid = productItemUuid;
			Спр.Продукция = ВСД_Продукция;
			Спр.ВидПродукции = ВСД_ВидПродукции;
			Спр.ТермическиеУсловияПеревозки = ТермУсловияПеревозки;//СписокКонстант.Получить("ТермУсловияПеревозки");
			Спр.Записать();	
			Ответ = спр.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

//**************************ВСД Партии v2 ****************************

Функция НайтиПартиюПоGUID(Guid)
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Партия.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Партия КАК ВСД_Партия
		                      |ГДЕ
		                      |	ВСД_Партия.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка.ПолучитьОбъект();
		Иначе
			Ответ = Справочники.ВСД_Партия.СоздатьЭлемент();	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Партия");
		Ответ = Справочники.ВСД_Партия.СоздатьЭлемент();	
	КонецЕсли;
	 	
	Возврат Ответ;
КонецФункции

Функция ПолучитьПартии2_ЗапросXML(Предприятие , ПартииСмещение, НачПериода = "", КонПериода = "", Ненулевые = 0)

	Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.1</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:getStockEntryListRequest>
	|            <merc:localTransactionId>a1</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|            <bs:listOptions>
	|              <bs:count>1000</bs:count>
	|              <bs:offset>"+СтрЗаменить( ПартииСмещение , Символы.НПП ,"")+"</bs:offset>
	|            </bs:listOptions>
	|            <dt:enterpriseGuid>"+ СокрЛП(Предприятие.GUID) +"</dt:enterpriseGuid>";
	Если (ЗначениеЗаполнено(НачПериода)) или (НеНулевые = 1) Тогда
		Запрос = Запрос +"
		|             <merc:searchPattern>";
		Если НеНулевые = 1 Тогда
			Запрос = Запрос +"
	    	|               <vd:blankFilter>NOT_BLANK</vd:blankFilter>";
		КонецЕсли;
		Если ЗначениеЗаполнено(НачПериода) Тогда
			Запрос = Запрос +"
	    	|              <vd:receiptDateInterval>
			|                 <bs:beginDate>"+ ДатаXML(НачПериода, "T00:00:00") +"</bs:beginDate>
			|                 <bs:endDate>"+ ДатаXML(КонПериода, "T23:59:59") +"</bs:endDate>
		    |              </vd:receiptDateInterval>";
		КонецЕсли;
		
		Запрос = Запрос +"	
    	|             </merc:searchPattern>";
	КонецЕсли;
	Запрос = Запрос +"
	|          </merc:getStockEntryListRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";
	Возврат Запрос;
КонецФункции

Функция ЗаписатьПартию2(Предприятие, stockEntry)
//ЖД Доработать справочник ВСД_Партии под версию 2:
// Фасовка, уровниупаковки и маркировки, список производителей
	active = stockEntry.active;		
	guid = stockEntry.guid;	
	
	Партия = НайтиПартиюПоGUID(guid);
	
	Если active="false" Тогда 
		СообщитьИнфо("Изменения в партию "+Партия+" guid ["+guid+"] не внесены. Признак партии = не активна");
		Партия.УстановитьПометкуУдаления(истина);
		Возврат Партия;
	КонецЕсли;
	
	Партия.Статус = stockEntry.status;		
	Партия.GUID = guid;
	Партия.UUID = stockEntry.uuid;
	Партия.НомерЗаписи = stockEntry.entryNumber;
	Партия.ДатаИзменения = СтрокаВДату( stockEntry.updateDate );
	Партия.ВсдДата = СтрокаВДату(stockEntry.createDate);	

	Сообщить(" ВСД_Партия от "+Партия.ВсдДата+" # "+Партия.НомерЗаписи);	
	
	
	batch = stockEntry.batch;
	Партия.Продукция 	= НайтиПродукцию(batch.product.guid);
	Партия.ВидПродукции = НайтиВидПродукции(batch.subProduct.guid);
		
	//Попытка НаименованиеПродукции = batch.productItem.name; Исключение	НаименованиеПродукции = ""; КонецПопытки;
	//Попытка	productItemUuid = batch.productItem.uuid; Исключение productItemUuid=""; КонецПопытки;
	//Попытка productItemGuid = batch.productItem.guid; Исключение productItemGuid = "" КонецПопытки;
	//Партия.Продукция_Элемент = Найти_Продукция_Элемент(НаименованиеПродукции, productItemGuid, productItemUuid, Партия.Продукция, Партия.ВидПродукции);
	Партия.Продукция_Элемент = Найти_Продукция_Элемент2(batch.productItem, Партия.Продукция, Партия.ВидПродукции);
	Партия.НаименованиеПродукции = Партия.Продукция_Элемент.Наименование;//НаименованиеПродукции;
	//Если НЕ(ПустаяСтрока(НаименованиеПродукции)) Тогда 
	//	Партия.Наименование = НаименованиеПродукции;
	//Иначе
	Партия.Наименование = Партия.Продукция_Элемент.Наименование;
	//КонецЕсли;
	
	
	//Trade Identification Number (GTIN) - идентификационный номер продукции производителя.
//	Попытка	GTIN = batch.productItem.globalID;	Исключение	GTIN="";	КонецПопытки;
    //Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
//	Попытка	Артикул = batch.productItem.code;	Исключение	Артикул="";	КонецПопытки;
		
	//<dt:packaging> Фасовка. - в партии НЕ НУЖНА	
	// Объем продукции
	
	Партия.Количество 	= Число(batch.volume);
	Партия.ЕдиницаИзмерения = НайтиЕдИзмерения( batch.unit.guid );
	
	ДатаИзготовления1="";	ДатаИзготовления=""; ДатаИзготовления2="";		
	Попытка Дата_из_XML(batch.dateOfProduction, ДатаИзготовления1, ДатаИзготовления2, ДатаИзготовления ); Исключение Сообщить("Нет сведений о дате изготовления партии "); КонецПопытки;
	Партия.ДатаИзготовления1 = ДатаИзготовления1;
	Партия.ДатаИзготовления2 = ДатаИзготовления2;
	Партия.ДатаИзготовления =  ДатаИзготовления;
		
	ДатаСрокГодности1=""; ДатаСрокГодности2=""; ДатаСрокГодности="";
	Попытка Дата_из_XML(batch.expiryDate, ДатаСрокГодности1, ДатаСрокГодности2, ДатаСрокГодности ); Исключение Сообщить("Нет сведений о сроке годности партии "); КонецПопытки;
	Партия.ДатаСрокГодности = ДатаСрокГодности;
	Партия.ДатаСрокГодности1 = ДатаСрокГодности1;
	Партия.ДатаСрокГодности2 = ДатаСрокГодности2;
	// Номер Партии - м.б. несколько
	ВремНомерПартии = ""; 
	Попытка
	Если ТипЗнч(batch.batchID)<>Тип("СписокXDTO") Тогда 
		ListbatchID = Новый Массив;
		ListbatchID.Добавить(batch.batchID);
	Иначе
		ListbatchID = batch.batchID;
	КонецЕсли;
	к=0;
	Для Каждого batchID из ListbatchID Цикл
		Если к>0 Тогда
			ВремНомерПартии = ВремНомерПартии+"; ";	
		КонецЕсли;
		ВремНомерПартии = ВремНомерПартии+batchID;
		к = к+1;	
	КонецЦикла;
	Исключение КонецПопытки;
	Попытка Партия.НомерПартии =  ВремНомерПартии; Исключение	КонецПопытки; //В спр нет реквизита
	//<vd:batchID> 	bs:String255 	[1..*] 	Уникальный идентификатор производственной партии продукции. 	<vd:batchID>ПП64219</vd:batchID> 
	//Попытка	Скоропортящийся = batch.perishable; Исключение	КонецПопытки;

	Попытка ПроизводителиСписок = СписокПроизводителей_из_XML(batch.origin.producer);Исключение КонецПопытки;
	//Запишем одного из производителей в Реквизит
	Попытка
		СЗПроизводители = ЗначениеИзСтрокиВнутр(ПроизводителиСписок);			
		Партия.Производитель_Площадка = СЗПроизводители[0].Площадка;	
	Исключение КонецПопытки;
	Попытка Партия.ПроизводителиСписок = ПроизводителиСписок;Исключение КонецПопытки; //Если есть реквизит либо в Табчасть
	
//	Попытка	Страна_ГУИД = batch.origin.country.guid;	Исключение	КонецПопытки;
//	Попытка	Некачественный = batch.lowGradeCargo; Исключение	КонецПопытки;
	Попытка	Партия.УровниУпаковки = УровниУпаковки_из_XML(batch.packageList.package, Партия);	Исключение 	КонецПопытки;	
		
	Попытка	Партия.Получатель_ХозСубъект = НайтиХСпоGUID(batch.owner.guid); Исключение КонецПопытки;
		
	Партия.Получатель_Площадка = Предприятие;//Отправитель_Площадка;

	Если Партия.Количество=0 Тогда 
		
		Если ( Партия.ЭтоНовый()=0 ) Тогда
			СообщитьИнфо("Количество партии guid ["+Партия.guid+"] uuid ["+Партия.uuid+"] = 0. Партия удалена. ");
			Партия.Записать();
			Партия.УстановитьПометкуУдаления(истина);
		Иначе
			СообщитьИнфо("Количество партии guid ["+Партия.guid+"] uuid ["+Партия.uuid+"] = 0. Партия пропущена. ");
			Возврат "";
		КонецЕсли;
	Иначе
		Партия.Записать();
		Партия.УстановитьПометкуУдаления(ложь);
	КонецЕсли;
	
	Возврат Партия;	
	
	
КонецФункции

Процедура ЗагрузитьXML_ВсеПартии2Ответ(Предприятие, имяФайла, ПартииСмещение, ПартияНачПериода, ПартияКонПериода, ПартияНеНулевые) Экспорт
	//Проверка на ошибки
	Если НайтиОшибки(имяФайла)> 0 Тогда
		Возврат;	
	КонецЕсли;
	
    СообщитьИнфо("Загрузка XML-файла: "+ИмяФайла);    
    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	// ЖД посмотрим, сколько пришло партий
	Попытка ПришлоПартий = Число(xdto.application.result.getStockEntryListResponse.stockEntryList.count); исключение ПришлоПартий = 1; КонецПопытки;
	Сообщить("Получено партий по запросу -> "+ПришлоПартий+" текущее смещение: "+ПартииСмещение);
	//Всего записей Число(xdto.application.result.getStockEntryListResponse.stockEntryList.total)
	Попытка
		seList = xdto.application.result.getStockEntryListResponse.stockEntryList.StockEntry;	
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		stockEntryList = Новый Массив;
		stockEntryList.Добавить(seList);
	Иначе
		stockEntryList = seList;
	КонецЕсли;
	Для каждого stockEntry из stockEntryList Цикл		
		
		Партия = ЗаписатьПартию2(Предприятие, stockEntry);
					
	КонецЦикла;
	//ЖД Рекурсивный Вызов
	Если ПришлоПартий = 1000 Тогда
		//Площадку берем из Констант, либо передавать в параметрах функции
		ПолучитьПартии2(Предприятие , ПартииСмещение+1000, 0, ПартияНачПериода, ПартияКонПериода, ПартияНеНулевые);	
	КонецЕсли;
	
	Сообщить("Загрузка партий завершена");
    
КонецПроцедуры

Функция  ПолучитьПартии2_ОтветXML(Предприятие, appID, ПартииСмещение, УдалятьПартии=0, ПартияНачПериода = "", ПартияКонПериода = "", ПартияНеНулевые = 1)

	//стандартное поведение функции
	Если НЕ(ЗначениеЗаполнено(appID)) Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	Пауза( );
	
	Сообщить("Отправляем запрос " );
	Результат = КомпонентаНаСервере.SendRequestResult( appID );
	
	Если Результат="COMPLETED" Тогда
		
		//При объединении партий в Меркурии - старые партии пропадают, появляются новые
		// поэтому в 1С остаются "остатки", которые нужно удалять
		//Если ОчищатьСправочникВСД_Партии Тогда
		Если УдалятьПартии=1 Тогда
			Сообщить("Плановая очистка справочника ВСД_Партии");
			//Отправитель_Площадка = СписокКонстант.Получить("Отправитель_Площадка"); 
//			Если ПартииСмещение = 0 Тогда  //ЖД это первый проход рекурсии (возможно и нет)
				Выборка = Справочники.ВСД_Партия.Выбрать();
				Пока Выборка.Следующий() Цикл			
					// ЖД Не стираем партии другой площадки
					Если Выборка.Получатель_Площадка = Предприятие Тогда
						Если ЗначениеЗаполнено(ПартияНачПериода) Тогда
							Если (Выборка.ДатаИзменения < ПартияНачПериода) или (Выборка.ДатаИзменения > ПартияКонПериода) Тогда
								Продолжить;	
							КонецЕсли;
						КонецЕсли;
						СпрОбъект = Выборка.ПолучитьОбъект();
						СпрОбъект.УстановитьПометкуУдаления(истина);
					КонецЕсли;				
				КонецЦикла;
//			КонецЕсли;
		КонецЕсли;
		Сообщить("Загрузка справочника ВСД_Партии...");
		
		ЗагрузитьXML_ВсеПартии2Ответ(Предприятие, КомпонентаНаСервере.LogFilename, ПартииСмещение,ПартияНачПериода, ПартияКонПериода, ПартияНеНулевые );
	Иначе
		//ЖД покажем ошибки
		НайтиОшибки(КомпонентаНаСервере.LogFilename);	
	КонецЕсли;		
	
	УдалитьXML( КомпонентаНаСервере.LogFilename);
		
	Возврат Результат;
КонецФункции

Функция  ПолучитьПартии2(Предприятие, ПартииСмещение=0, УдалятьПартии=1, ПартияНачПериода = "", ПартияКонПериода = "", ПартияНеНулевые = 1) Экспорт

	Если НЕ(ЗначениеЗаполнено(Предприятие.GUID)) Тогда 
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	                 
	ЗапросXML = ПолучитьПартии2_ЗапросXML(Предприятие, ПартииСмещение, ПартияНачПериода, ПартияКонПериода, ПартияНеНулевые);
	
	метод = КомпонентаНаСервере.GetMethod();
	метод.Service = "platform/services/2.1/ApplicationManagementService";
	//метод.Service = "platform/services/2.0/ApplicationManagementService";
	метод.Action = "submitApplicationRequest";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	Если НайтиОшибки(КомпонентаНаСервере.LogFilename)>0 Тогда 
		Возврат "REJECTED";
	КонецЕсли;		
	//appID = Получить_ApplicationID(КомпонентаНаСервере.LogFilename);
	
	УдалитьXML( КомпонентаНаСервере.LogFilename);
	Результат = "";
	Если ЗначениеЗаполнено(appID) Тогда
		Результат = ПолучитьПартии2_ОтветXML(Предприятие, appID, ПартииСмещение, УдалятьПартии, ПартияНачПериода, ПартияКонПериода, ПартияНеНулевые ); 
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьПартии2_ОтветXML(Предприятие, appID, ПартииСмещение,УдалятьПартии, ПартияНачПериода, ПартияКонПериода, ПартияНеНулевые );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	УдалитьXML( КомпонентаНаСервере.LogFilename);
	
	Возврат Результат;
	
КонецФункции

//**************************ВСД Партии v2  окончание****************************

// ***************** Транзакция v2
Функция Проверка_ВСД2_транзакция(док)
	Если НЕ(ЗначениеЗаполнено(Док)) тогда
		Возврат 0;	
	КонецЕсли;
	Результат = 1; //все в порядке
	Если СокрЛП(Док.Статус) = "COMPLETED" Тогда		
		Сообщить("Документ "+Док+" уже отправлен ");
		Возврат  0;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Док.Организация) Тогда
		Сообщить("Не указана Организация в документе "+Док);
		Результат = 0;
	КонецЕсли;
		
	Если ПустаяСтрока(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников "+Док);
		Результат = 0;
	КонецЕсли;

	Если ПустаяСтрока(док.Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников "+Док);
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников "+док);
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Получатель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников "+док);
		Результат = 0;
	КонецЕсли;
//	Если ПустаяСтрока(док.Перевозчик_ХозСубъект.GUID)=1 Тогда 
//		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников");
//		Результат = 0;
//	КонецЕсли;
	Если Не(ЗначениеЗаполнено(док.ТермическоеСостояние)) Тогда
		Сообщить("Не указаны Термические условия перемещения товаров в "+Док);
		Результат = 0;
	КонецЕсли;

	Если Не(ЗначениеЗаполнено(док.РезультатыИсследований)) Тогда
		Сообщить("Не указаны Результаты исследований в "+Док);
		Результат = 0;
	КонецЕсли;
	
	Для А=0 по Док.Товары.Количество()-1 Цикл
		ТекСтр = Док.Товары[А];
		
		// Не обязательное условие
		//Если ПустаяСтрока(док.Партия.Производитель_Площадка.GUID)=1 Тогда 
		//	Сообщить("Не указан док.Партия.Производитель_Площадка.GUID Выполните синхронизацию справочников");
		//	Результат = 0;
		//КонецЕсли;		
	
		Если ПустаяСтрока(ТекСтр.Партия.GUID)=1 Тогда 
			Сообщить("Не указан Партия.GUID в " + Док);
			Результат = 0;
		КонецЕсли;
		Если ПустаяСтрока(ТекСтр.Партия.ВсдДата)=1 Тогда 
			Сообщить("Не указан Партия.ВсдДата");
			Результат = 0;
		КонецЕсли;
		//Если ПустаяСтрока(док.Партия.ФормаУпаковки)=1 Тогда 
		//	Сообщить("Не указан Партия.ФормаУпаковки");
		//	Результат = 0;
		//КонецЕсли;
		//Если ПустаяСтрока(док.ФормаУпаковки)=1 Тогда 
		//	Сообщить("Не указан ФормаУпаковки");
		//	Результат = 0;
		//КонецЕсли;
		Если  ТекСтр.Количество=0 Тогда 
			Сообщить("не указано Количество "+док);
			Результат = 0;
		КонецЕсли;
		//Если док.КоличествоМест =0 Тогда 
		//	Сообщить("не указано Количество коробов"+док);
		//	Результат = 0;
		//КонецЕсли;
	
		Если ПустаяСтрока(ТекСтр.Партия.Продукция.Тип)=1 Тогда 
			Сообщить("Не указан Партия.Продукция.Тип");
			Результат = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	//Если ПустаяСтрока(док.applicationID)=0 Тогда 
	//	Сообщить("ВСД уже отправлен "+док);
	//	Результат = 0;
	//КонецЕсли;
	//Если ПустаяСтрока( СокрЛП(док.UUID) )=0 Тогда 
	//	Сообщить("ВСД уже отправлен "+док);
	//	Результат = 0;
	//КонецЕсли;
	//Если док.ФормаВСД=0 Тогда 
	//	Сообщить("Не указана форма ВСД "+док);
	//	Результат = 0;
	//КонецЕсли;

	
	Возврат Результат;
КонецФункции

Функция ВСД2_транзакция_ЗапросXML(док)
	
	Запрос_Шапка = "<SOAP-ENV:Envelope
	| xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
  	|<SOAP-ENV:Header/>
  	|<SOAP-ENV:Body>
    |<apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(док.Дата, "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:prepareOutgoingConsignmentRequest>
	|            <merc:localTransactionId>" + СокрЛП(док.Номер) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|";
	
//************************
	// Есть/нет ТТН
	ДатаДоставки = ?(ЗначениеЗаполнено(док.ТтнДата),док.ТтнДата,док.Дата);

    delivery = "
    |       <merc:delivery>
    |          <vd:deliveryDate>" + ДатаXML(ДатаДоставки, "T00:00:00") + "</vd:deliveryDate>
    |          <vd:consignor>
    |            <dt:businessEntity>
    |              <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
    |            </dt:businessEntity>
    |            <dt:enterprise>
    |              <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
    |            </dt:enterprise>
    |          </vd:consignor>
    |          <vd:consignee>
    |            <dt:businessEntity>
    |              <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
    |            </dt:businessEntity>
    |            <dt:enterprise>
    |              <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
    |            </dt:enterprise>";
	
	//<dt:globalID>4607009526782</dt:globalID> 	dt:GLNType 	[0..*]  [ ... ] Global Location Number - уникальный номер площадки
	delivery = delivery+"
    |          </vd:consignee>";
	
	consignment="";
	
	тз = Док.Товары.Выгрузить();
	Для А=0 По тз.Количество()-1 Цикл
		СтрокаДокумента = тз[А];
//        |      <vd:consignment id='id1'>
		consignment = consignment+ "
		|       <vd:consignment id='_" + (А+1) + "'>";
		
	 	consignment = consignment + ProductItem_в_XML(СтрокаДокумента,1); 
		consignment = consignment+ "
		|        <vd:volume>"+ Формат(СтрокаДокумента.Количество, "ЧРД=.; ЧГ=0") +"</vd:volume>
        |        <vd:unit>
        |          <bs:guid>"+ СокрЛП(СтрокаДокумента.ЕдиницаИзмерения.GUID) +"</bs:guid>
        |        </vd:unit>
        |";
		
		тзУпаковка = Док.УровниУпаковки.Выгрузить();
		тзМаркировка = Док.Маркировка.Выгрузить();
		consignment = consignment+  УровниУпаковки_в_XML(СтрокаДокумента.НомерСтроки,тзУпаковка,тзМаркировка);
		
		consignment = consignment+ "	
		|        <vd:sourceStockEntry>
        |          <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.GUID) +"</bs:guid>
        |        </vd:sourceStockEntry>
        |      </vd:consignment>
		|";
	КонецЦикла; //по строкам документа		  
	
	ЗапросПодвал = "";
	Если ЗначениеЗаполнено(док.Перевозчик_ХозСубъект) Тогда
	ЗапросПодвал = "		  
        |      <vd:broker>
        |        <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
        |      </vd:broker>";
	КонецЕсли;
	
	
	ЗапросПодвал = ЗапросПодвал+"		  
        |      <vd:transportInfo>
        |        <vd:transportType>1</vd:transportType>
        |        <vd:transportNumber>
        |          <vd:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</vd:vehicleNumber>
        |        </vd:transportNumber>
        |      </vd:transportInfo>
        |      <vd:transportStorageType>"+ ТермическиеУсловияПеревозки.Получить( док.ТермическоеСостояние-1 ) +"</vd:transportStorageType>
        |      <vd:accompanyingForms>";
	Если ЗначениеЗаполнено(док.ТтнДата) тогда
	//Тип товарно-транспортной накладной.
    //Допустимые типы для waybill: 1, 2, 3, 4, 5
		ЗапросПодвал = ЗапросПодвал+"		  
       	|        <vd:waybill>
        |          <vd:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</vd:issueSeries>
   	    |          <vd:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:issueNumber>
       	|          <vd:issueDate>"+ ДатаXML(док.ТтнДата) +"</vd:issueDate>
        |          <vd:type>1</vd:type>      
   	    |        </vd:waybill>";
	КонецЕсли;
	ЗапросПодвал = ЗапросПодвал+"		  
        |        <vd:vetCertificate>
        |          <vd:authentication>
        |            <vd:purpose>
        |              <bs:guid>"+ СокрЛП( СписокКонстант.Получить("ВСДЦель").Guid ) +"</bs:guid>		
        |            </vd:purpose>
        |            <vd:cargoInspected>"+ НашеБулево(док.cargoInspected) +"</vd:cargoInspected>";
		
//Регионализация  - ДОРАБОТКА по ВИДУ ПРОДУКЦИИ
		тзУсловияПеревозки = Док.УсловияПеревозки.Выгрузить();
		Если ЗначениеЗаполнено(тзУсловияПеревозки) Тогда
			ЗапросПодвал = ЗапросПодвал+ "		  
			|            <vd:locationProsperity>"+ СокрЛП(док.Местность) +"</vd:locationProsperity>";
			
			Для каждого стрУсловия из тзУсловияПеревозки Цикл
				Если стрУсловия.Отметка Тогда
					ЗапросПодвал=ЗапросПодвал+"
					|<vd:r13nClause>
					|<vd:condition>
					|<bs:guid>" + стрУсловия.GUID + "</bs:guid>
					|</vd:condition>
					|</vd:r13nClause>
					|";	
				КонецЕсли;
			КонецЦикла;		
		Иначе
	//				cargoExpertized = Проводилась ли ветсанэкспертиза.
	//				Возможные значения: VSEFULL, VSERAW, UNFULFILLED 
			
			ЗапросПодвал = ЗапросПодвал+ "
			|             <vd:cargoExpertized>"+ПолучитьИдентификаторПеречисления(док.РезультатыИсследований)+"</vd:cargoExpertized>
			|            <vd:locationProsperity>"+ СокрЛП(док.Местность) +"</vd:locationProsperity>
			|";
			
		КонецЕсли;
		ЗапросПодвал = ЗапросПодвал+ ?(ЗначениеЗаполнено(док.особыеотметки) , "            <vd:specialMarks>"+ СокрЛП(док.особыеотметки) +"</vd:specialMarks>","");	
		
	ЗапросПодвал = ЗапросПодвал+ "
        |          </vd:authentication>
        |        </vd:vetCertificate>";

	
		// Связанные документы
		// тип 16 = Заказ, 6 = ТОРГ12,  1 = ТрН
//        |          <vd:issueSeries>А</vd:issueSeries>
//        |          <vd:issueDate>2017-09-26</vd:issueDate>

		СвязанныеДокументы = "";
		Если ЗначениеЗаполнено(Док.НомерЗаказаПокупателя) Тогда
			СвязанныеДокументы = "
			|        <vd:relatedDocument>
    	    |          <vd:issueNumber>"+СокрЛП(док.НомерЗаказаПокупателя)+"</vd:issueNumber>
			|          <vd:issueDate>"+ ДатаXML(док.ДатаЗаказаПокупателя) +"</vd:issueDate>
    	    |          <vd:type>16</vd:type>
        	|          <vd:relationshipType>1</vd:relationshipType>
	        |	     </vd:relatedDocument>";		    
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Док.ТОРГ12Номер) Тогда
	        СвязанныеДокументы = СвязанныеДокументы+ "
	        |        <vd:relatedDocument>
    	    |          <vd:issueNumber>"+СокрЛП(док.ТОРГ12Номер)+"</vd:issueNumber>
	        |          <vd:issueDate>"+ ДатаXML(док.ТОРГ12Дата) +"</vd:issueDate>
    	    |          <vd:type>6</vd:type>
        	|          <vd:relationshipType>1</vd:relationshipType>
	        |        </vd:relatedDocument>";
        КонецЕсли;
		
		Если ЗначениеЗаполнено(СвязанныеДокументы) Тогда
			ЗапросПодвал = ЗапросПодвал+СвязанныеДокументы;	
		КонецЕсли;
		
	ЗапросПодвал = ЗапросПодвал+ "
		|      </vd:accompanyingForms>
        |    </merc:delivery>
		|          </merc:prepareOutgoingConsignmentRequest>
		|        </apl:data>
		|      </apl:application>
		|    </apldef:submitApplicationRequest>
		|  </SOAP-ENV:Body>
		|</SOAP-ENV:Envelope>
		|";

	Запрос = Запрос_Шапка+
		delivery+
		consignment+
		ЗапросПодвал;
	
	Возврат Запрос;
КонецФункции

Функция Отправить_ВСД2_транзакция(док) Экспорт
	
	Если Проверка_ВСД2_транзакция(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;
	Организация = док.Организация;//док.ДокументОснование.Организация;
	Инициализация();
	Если НЕ ЗначениеЗаполнено(СписокКонстант.Получить("ВСДЦель")) Тогда
		Сообщить("Заполните параметр ВСД Цель",СтатусСообщения.Важное);
		Возврат "";
	КонецЕсли;
	
	Отправитель_Площадка = Док.Отправитель_Площадка;
	//Если док.ПеревозкаРазрешена = 3 Тогда
	//	Сообщить("По условиям регионализации Перевозка Запрещена!!! "+док);
	//	Возврат 0;
	//КонецЕсли;
	ЗапросXML = ВСД2_транзакция_ЗапросXML(док); 
	
	метод = КомпонентаНаСервере.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	
	УдалитьXML( КомпонентаНаСервере.LogFilename);

	Если ЗначениеЗаполнено(appID) Тогда
		Результат = ПолучитьРезультат_ВСД2(appID, док );
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда
				Результат = ПолучитьРезультат_ВСД2(appID, док );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;
	
	
КонецФункции

Процедура ОтправитьСписокВСД(сзДокументыКОтправке) Экспорт
		
	//Состояние("Меркурий: отправка ВСД исходящие");
	Сообщить("Начало отправки документов");
	
	Для каждого Стрдок Из сзДокументыКОтправке Цикл
		_ВСД = Стрдок.Значение;
		Отправить_ВСД2_транзакция( _ВСД );
	КонецЦикла;
	РаскраситьТЧОтгрузки();
	Сообщить("Отправка документов завершена");
КонецПроцедуры

// ************************************************

//================== Версия 1.4 =============================== **************************************
Функция ВыбратьВидДокументаВСД(type)
	
    //{ VetDocumentType 
    //    TRANSPORT, = 1	= Транспортный ВСД.	
    //    PRODUCTIVE, = 2 	= Производственный ВСД.
    //    RETURNABLE, = 3 	= Возвратный ВСД.
    //    INCOMING, = 4  	= Входящий ВСД.
    //    OUTGOING, = 5  	= Исходящий ВСД.
    //}
	
	рез = "";
	Если type="TRANSPORT" Тогда
		рез = "ВСД";
	ИначеЕсли type="PRODUCTIVE" Тогда
		рез = "ВСД_Производство";
	ИначеЕсли type="INCOMING" Тогда
		рез = "ВСД_входящий";
	ИначеЕсли type="RETURNABLE" Тогда
		рез = "ВСД_возвратный";
	ИначеЕсли type="OUTGOING" Тогда
		// проверить !!!
		рез = "ВСД";
	Иначе
		Сообщить("Неопределенный вид ВСД ["+type+"]");
	КонецЕсли;
	
	Возврат рез;
КонецФункции

Процедура ЗагрузитьXML_ВСД(имяФайла, докОснование)
	
	Если НайтиОшибки(имяФайла, докОснование)>0 Тогда 
		Возврат;
	КонецЕсли;		
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	applicationId = xdto.application.applicationId;
	
	Попытка
		seList = xdto.application.result.prepareOutcomingConsignmentResponse.vetDocument;	
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		vetDocumentList = Новый Массив;
		vetDocumentList.Добавить(seList);
	Иначе
		vetDocumentList = seList;
	КонецЕсли;
	
	Для каждого vetDocument из vetDocumentList Цикл		
		uuid = vetDocument.uuid;
		st 	 = vetDocument.status;
		type = vetDocument.type;
		
		ВидДокумента = ВыбратьВидДокументаВСД(type);
		
		createDate = vetDocument.issueDate;
		lastUpdateDate = vetDocument.lastUpdateDate;
		
		consignorBusinessEntity = vetDocument.consignor.businessEntity.guid;
		consignorEnterprise 	= vetDocument.consignor.enterprise.guid;
		
		Попытка
			consigneeBusinessEntity = vetDocument.consignee.businessEntity.guid;
		Исключение
			consigneeBusinessEntity ="";
		КонецПопытки;
		Попытка
			consigneeEnterprise 	= vetDocument.consignee.enterprise.guid;
		Исключение
			consigneeEnterprise = "";
		КонецПопытки;
		
		batch = vetDocument.batch;
		
		product 	= batch.product.guid;
		subProduct 	= batch.subProduct.guid;

		Попытка
			productItemName = batch.productItem.name;
		Исключение
			СообщитьИнфо("Не удалось получить элемент [productItem]");
			productItemName = "";
		КонецПопытки;
		
		Попытка
			productItemGuid = batch.productItem.guid;
		Исключение			
			productItemGuid="";
		КонецПопытки;		
		Попытка
			productItemUuid = batch.productItem.uuid;
		Исключение
			productItemUuid="";
		КонецПопытки;
		volume 		= batch.volume;
		unitGuid	= batch.unit.guid;
		
		Попытка
			packingFormUuid	= batch.packingList.packingForm.uuid;			
		Исключение
			СообщитьИнфо("Не удалось получить элемент [packingForm] [uuid]");
			packingFormUuid = "";			
		КонецПопытки;
		Попытка
			packingFormName	= batch.packingList.packingForm.name;	
		Исключение
			packingFormName="";
			СообщитьИнфо("Не удалось получить элемент [packingForm] [name]");
		КонецПопытки;

		packingAmount = batch.packingAmount;
						
		//Попытка			
		//	producer = batch.producerList.producer.enterprise.guid;
		//Исключение
		//	producer = "";
		//КонецПопытки;
		ДатаИзготовления1="";
		ДатаИзготовления="";
		попытка			
			год = batch.dateOfProduction.firstDate.year;
			мес = batch.dateOfProduction.firstDate.month;
			день = batch.dateOfProduction.firstDate.day;
			ДатаИзготовления1 = Дата(год, мес, день);
		Исключение
			Попытка
				ДатаИзготовления = batch.dateOfProduction.informalDate;
			Исключение				
			КонецПопытки;
		КонецПопытки;				
		ДатаИзготовления2="";
		попытка
			год = batch.dateOfProduction.secondDate.year;
			мес = batch.dateOfProduction.secondDate.month;
			день = batch.dateOfProduction.secondDate.day;
			ДатаИзготовления2 = Дата(год, мес, день);
		Исключение			
		КонецПопытки;
		
		//ДатаСрокГодности
		попытка			
			год = batch.expiryDate.firstDate.year;
			мес = batch.expiryDate.firstDate.month;
			день = batch.expiryDate.firstDate.day;
			ДатаСрокГодности1 = Дата(год, мес, день);
		Исключение
			Попытка
				ДатаСрокГодности = batch.expiryDate.informalDate;
			Исключение				
			КонецПопытки;
		КонецПопытки;				
		ДатаСрокГодности2="";
		попытка
			год = batch.expiryDate.secondDate.year;
			мес = batch.expiryDate.secondDate.month;
			день = batch.expiryDate.secondDate.day;
			ДатаСрокГодности2 = Дата(год, мес, день);
		Исключение			
		КонецПопытки;
		
		owner = batch.owner.guid; //ХозСубъект
		ВладелецХС = НайтиХСпоGUID(owner);
				
		//Если ТипЗнч(докОснование) = Тип("ДокументСсылка.ВСД_транзакция") Тогда 
		//	докОбъект = НайтиВсд(applicationId, uuid, ВидДокумента, 1);
		//Иначе			
		//	докОбъект = НайтиВсд(applicationId, uuid, ВидДокумента);
		//КонецЕсли;
		докОбъект = НайтиВСДпоUUID( uuid );
		докОбъект.UUID = uuid;
		докОбъект.applicationId = applicationId;
		//Если докОбъект.ТекущийДокумент() <> докОснование Тогда 
			докОбъект.ДокументОснование = докОснование;
		//КонецЕсли;
		//док.UUID = Компонента.DocUUID;					
		
		Попытка 
			докОбъект.Отправитель_ХозСубъект 	= НайтиХСпоGUID(consignorBusinessEntity);
		Исключение			
		КонецПопытки;
		Попытка			
			докОбъект.Отправитель_Площадка 		= НайтиПлощадку(consignorEnterprise);
		Исключение			
		КонецПопытки;

		Попытка
			докОбъект.Получатель_ХозСубъект 	= НайтиХСпоGUID(consigneeBusinessEntity);
		Исключение			
		КонецПопытки;

		Попытка			
			докОбъект.Получатель_Площадка 		= НайтиПлощадку(consigneeEnterprise);
		Исключение			
		КонецПопытки;
			
		//докОбъект.Производитель_Площадка 	= НайтиПлощадку(producer);
		//Попытка
		//	докОбъект.Производитель_ХозСубъект = докОбъект.Производитель_Площадка.Контрагент;
		//Исключение
		//	Сообщить(ОписаниеОшибки());
		//КонецПопытки;		
		//ДокПартия.Перевозчик_ХозСубъект = ;
		докОбъект.Продукция 	= НайтиПродукцию(product);
		докОбъект.ВидПродукции 	= НайтиВидПродукции(subProduct);
		
		//докОбъект.Продукция_Элемент = Найти_Продукция_Элемент(productItemName, "", productItemUuid, докОбъект.Продукция, докОбъект.ВидПродукции);
		докОбъект.Продукция_Элемент = Найти_Продукция_Элемент2(batch.productItem, докОбъект.Продукция, докОбъект.ВидПродукции);
		//докОбъект.СвойствоНоменклатурыЗначение = докОбъект.Продукция_Элемент.СвойствоНоменклатурыЗначение;
		
		докОбъект.Количество 	= Число(volume);
		докОбъект.КоличествоМест = Число(packingAmount);
		ФормаУпаковки 			= НайтиФормуУпаковки( packingFormUuid, packingFormName);
		докОбъект.ФормаУпаковки = ФормаУпаковки;	

		докОбъект.ЕдиницаИзмерения = НайтиЕдИзмерения( unitGuid );;
		
		докОбъект.ДатаИзготовления1 = ДатаИзготовления1;
		докОбъект.ДатаИзготовления2 = ДатаИзготовления2;
		докОбъект.ДатаИзготовления =  ДатаИзготовления;
		докОбъект.ДатаСрокГодности = ДатаСрокГодности;
		докОбъект.ДатаСрокГодности1 = ДатаСрокГодности1;
		докОбъект.ДатаСрокГодности2 = ДатаСрокГодности2;
		
		докОбъект.Статус = st;		
		докОбъект.НаименованиеПродукции = докОбъект.Продукция_Элемент.Наименование;
		//докОбъект.Фирма = глПользователь.ОсновнаяФирма;
		//докОбъект.Автор = глПользователь;	
		  		
		//докОбъект.Дата = СтрокаВДату(createDate);
		докОбъект.Дата = СтрокаВДатаВремя(lastUpdateDate);
				
		докОбъект.Записать(РежимЗаписиДокумента.Проведение);

		Сообщить("Записан "+ВидДокумента+" "+докОбъект.Номер+" от "+докОбъект.Дата+" ["+uuid+"]");
	КонецЦикла;

	Если ПустоеЗначение(докОснование)=0 Тогда
		докОснованиеОбъект = докОснование.ПолучитьОбъект();
		докОснованиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;		
КонецПроцедуры

Процедура ЗагрузитьXML_Партии(имяФайла, докОснование="") 
	
	Если НайтиОшибки(имяФайла, докОснование)>0 Тогда 
		Возврат;
	КонецЕсли;	
	
    СообщитьИнфо("Загрузка XML-файла: "+ИмяФайла);    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Попытка
		seList = xdto.application.result.prepareOutcomingConsignmentResponse.StockEntry;	
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		stockEntryList = Новый Массив;
		stockEntryList.Добавить(seList);
	Иначе
		stockEntryList = seList;
	КонецЕсли;
			
	//Сообщить("Получено "+seList.length+" записей","i");
	Для каждого stockEntry из stockEntryList Цикл		
					
		Партия = ЗаписатьПартию(stockEntry);
		
		Если докОснование<>"" Тогда 
			Партия.ДокОснование = докОснование;
			Партия.Записать();
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьРезультат_ВСД(applicationID, докСсылка, Пауза = Истина ) Экспорт
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	Если Пауза Тогда		
		Пауза( );
	КонецЕсли;	
	
	Сообщить("Отправляем запрос ["+докСсылка+"]" );
	Результат = КомпонентаНаСервере.SendRequestResult( applicationID );

	Если НайтиОшибки(КомпонентаНаСервере.LogFilename, докСсылка)>0 Тогда 
		Возврат Результат;
	КонецЕсли;		
	
	Если ПустоеЗначение(докСсылка)=0 Тогда 
		СохранитьСтатусЗапроса(докСсылка);
		ЗагрузитьXML_ВСД( КомпонентаНаСервере.LogFilename, докСсылка);
	КонецЕсли;

	ЗагрузитьXML_Партии( КомпонентаНаСервере.LogFilename );
		
	УдалитьXML( КомпонентаНаСервере.LogFilename );
	
	Возврат Результат;
КонецФункции

Функция  ОтправитьЗапросXML(ЗапросXML, док="") Экспорт
	Если ПустоеЗначение(док)=0 Тогда 
		Сообщить("Отправляем запрос "+ТипЗнч(док)+" ["+док+"]");
	Иначе
		Сообщить("Отправляем запрос");
	КонецЕсли;
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	
	результат = КомпонентанаСервере.SendRequestXML(ЗапросXML);

	appID = КомпонентанаСервере.ApplicationId;
	
	УдалитьXML( КомпонентанаСервере.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьРезультат_ВСД(appID, док ); //ДокОб.ТекущийДокумент()
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД(appID, док ); //ДокОб.ТекущийДокумент()
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;
	
КонецФункции

// ----------- исход 1.4
Функция Проверка_ВСД_Исходящий(док)
	Если НЕ(ЗначениеЗаполнено(Док)) тогда
		Возврат 0;	
	КонецЕсли;
	
	Результат = 1; //все в порядке
	
	Если ПустаяСтрока(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;

	Если ПустаяСтрока(док.Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Получатель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Партия.Производитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан док.Партия.Производитель_Площадка.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Перевозчик_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Партия.GUID)=1 Тогда 
		Сообщить("Не указан Партия.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Партия.ВсдДата)=1 Тогда 
		Сообщить("Не указан Партия.ВсдДата");
		Результат = 0;
	КонецЕсли;
	//Если ПустаяСтрока(док.Партия.ФормаУпаковки)=1 Тогда 
	//	Сообщить("Не указан Партия.ФормаУпаковки");
	//	Результат = 0;
	//КонецЕсли;
	Если ПустаяСтрока(док.Продукция)=1 Тогда 
		Сообщить("Не указан Продукция");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.ВидПродукции)=1 Тогда 
		Сообщить("Не указан ВидПродукции");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.НаименованиеПродукции)=1 Тогда 
		Сообщить("Не указан НаименованиеПродукции");
		Результат = 0;
	КонецЕсли;
	//Если ПустаяСтрока(док.ЕдиницаИзмерения)=1 Тогда 
	//	Сообщить("Не указан ЕдиницаИзмерения");
	//	Результат = 0;
	//КонецЕсли;
	//Если ПустаяСтрока(док.ФормаУпаковки)=1 Тогда 
	//	Сообщить("Не указан ФормаУпаковки");
	//	Результат = 0;
	//КонецЕсли;

//	Если ПустаяСтрока(док.applicationID)=0 Тогда 
//		Сообщить("ВСД уже отправлен "+док);
//		Результат = 0;
//	КонецЕсли;
	Если ПустаяСтрока( СокрЛП(док.UUID) )=0 Тогда 
		Сообщить("ВСД уже отправлен "+док);
		Результат = 0;
	КонецЕсли;
	//Если док.ФормаВСД=0 Тогда 
	//	Сообщить("Не указана форма ВСД "+док);
	//	Результат = 0;
	//КонецЕсли;
	Если  док.Количество=0 Тогда 
		Сообщить("не указано Количество "+док);
		Результат = 0;
	КонецЕсли;
	//Если док.КоличествоМест =0 Тогда 
	//	Сообщить("не указано Количество коробов"+док);
	//	Результат = 0;
	//КонецЕсли;

	Если ПустаяСтрока(док.Партия.Продукция.Тип)=1 Тогда 
		Сообщить("Не указан Партия.Продукция.Тип");
		Результат = 0;
	КонецЕсли;

	
	Возврат Результат;
КонецФункции

Функция ПолучитьРезультат_ВСД_Исходящий( докСсылка ) Экспорт	

	applicationID = СокрЛП(докСсылка.applicationID);
	Если ПустаяСтрока(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;

	Сообщить("Отправляем запрос ВСД_Исходящий_Результат ["+докСсылка+"]" );
	Результат = КомпонентаНаСервере.Send_VSD_OUT_Result( applicationID );

	СохранитьСтатусЗапроса(докСсылка);

	Если Результат="COMPLETED" Тогда

		ЗагрузитьXML_Партии( КомпонентаНаСервере.LogFilename );
		
		//Если докСсылка.Вид()="ВСД_исходящий" Тогда 
		//	ДокОснование = докСсылка.ДокОснование;
		//Иначе
			ДокОснование = докСсылка;
		//КонецЕсли;
		//
		ЗагрузитьXML_ВСД( КомпонентаНаСервере.LogFilename, ДокОснование);
		
	Иначе
		Сообщить(докСсылка.Комментарий);		
	КонецЕсли;
			
	УдалитьXML( КомпонентаНаСервере.LogFilename );
	
	Возврат Результат;
КонецФункции

Функция Отправить_ВСД_Исходящий(док) Экспорт
	
	Если Проверка_ВСД_Исходящий(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	
	Сообщить("Отправляем запрос ВСД_Исходящий ["+док+"]");
	Результат = КомпонентаНаСервере.Send_VSD_OUT( док );
	
	//Отладка();
	УдалитьXML( КомпонентаНаСервере.LogFilename );
	
	Попытка
		СохранитьСтатусЗапроса(док);
		
		Если Результат="ACCEPTED" Тогда 
			//ВСД отправлен успешно, осталось получить ответ				
			Пауза();			
			
			Результат = ПолучитьРезультат_ВСД_Исходящий( док );
			Сообщить("Результат = "+Результат);
			Для А=1 По 10 Цикл
				Если (Результат="IN_PROCESS") Тогда 
					Пауза();
					Результат = ПолучитьРезультат_ВСД_Исходящий( док );
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		Сообщить("Не удалось записать ApplicationID в документ ВСД "+ОписаниеОшибки());
	КонецПопытки;		

	Возврат 1;
	
КонецФункции


//------------ ВСД_транзакция 1.4

Функция Проверка_ВСД_транзакция(док)
	Если НЕ(ЗначениеЗаполнено(Док)) тогда
		Возврат 0;	
	КонецЕсли;
	Результат = 1; //все в порядке
	Если СокрЛП(Док.Статус) = "COMPLETED" Тогда		
		Сообщить("Документ "+Док+" уже отправлен ");
		Возврат  0;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Док.Организация) Тогда
		Сообщить("Не указана Организация в документе "+Док);
		Результат = 0;
	КонецЕсли;
		
	Если ПустаяСтрока(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников "+Док);
		Результат = 0;
	КонецЕсли;

	Если ПустаяСтрока(док.Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников "+Док);
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников "+док);
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Получатель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников "+док);
		Результат = 0;
	КонецЕсли;
//	Если ПустаяСтрока(док.Перевозчик_ХозСубъект.GUID)=1 Тогда 
//		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников");
//		Результат = 0;
//	КонецЕсли;
	Если Не(ЗначениеЗаполнено(док.ТермическоеСостояние)) Тогда
		Сообщить("Не указаны Термические условия перемещения товаров в "+Док);
		Результат = 0;
	КонецЕсли;
	
	
	Для А=0 по Док.Товары.Количество()-1 Цикл
		ТекСтр = Док.Товары[А];
		
		// Не обязательное условие
		//Если ПустаяСтрока(док.Партия.Производитель_Площадка.GUID)=1 Тогда 
		//	Сообщить("Не указан док.Партия.Производитель_Площадка.GUID Выполните синхронизацию справочников");
		//	Результат = 0;
		//КонецЕсли;		
	
		Если ПустаяСтрока(ТекСтр.Партия.GUID)=1 Тогда 
			Сообщить("Не указан Партия.GUID в " + Док);
			Результат = 0;
		КонецЕсли;
		Если ПустаяСтрока(ТекСтр.Партия.ВсдДата)=1 Тогда 
			Сообщить("Не указан Партия.ВсдДата");
			Результат = 0;
		КонецЕсли;
		//Если ПустаяСтрока(док.Партия.ФормаУпаковки)=1 Тогда 
		//	Сообщить("Не указан Партия.ФормаУпаковки");
		//	Результат = 0;
		//КонецЕсли;
		//Если ПустаяСтрока(док.ФормаУпаковки)=1 Тогда 
		//	Сообщить("Не указан ФормаУпаковки");
		//	Результат = 0;
		//КонецЕсли;
		Если  ТекСтр.Количество=0 Тогда 
			Сообщить("не указано Количество "+док);
			Результат = 0;
		КонецЕсли;
		//Если док.КоличествоМест =0 Тогда 
		//	Сообщить("не указано Количество коробов"+док);
		//	Результат = 0;
		//КонецЕсли;
	
		Если ПустаяСтрока(ТекСтр.Партия.Продукция.Тип)=1 Тогда 
			Сообщить("Не указан Партия.Продукция.Тип");
			Результат = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	//Если ПустаяСтрока(док.applicationID)=0 Тогда 
	//	Сообщить("ВСД уже отправлен "+док);
	//	Результат = 0;
	//КонецЕсли;
	//Если ПустаяСтрока( СокрЛП(док.UUID) )=0 Тогда 
	//	Сообщить("ВСД уже отправлен "+док);
	//	Результат = 0;
	//КонецЕсли;
	//Если док.ФормаВСД=0 Тогда 
	//	Сообщить("Не указана форма ВСД "+док);
	//	Результат = 0;
	//КонецЕсли;

	
	Возврат Результат;
КонецФункции

Функция ВСД_транзакция_ЗапросXML(док)
	
	Запрос_Шапка = "
	|<prepareOutcomingConsignmentRequest 
	|xmlns:sch='http://www.w3.org/2001/XMLSchema' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document' 
	|xmlns:sh='http://api.vetrf.ru/schema/cdm/argus/shipment' 
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:app='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:co='http://api.vetrf.ru/schema/cdm/argus/common' 
	|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' 
	|xmlns:pr='http://api.vetrf.ru/schema/cdm/argus/production' 
	|xmlns:ik='http://api.vetrf.ru/schema/cdm/ikar' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns='http://api.vetrf.ru/schema/cdm/mercury/applications'>
	|        <localTransactionId>[GUID]</localTransactionId>
	|        <initiator>
	|          <co:login>"+СокрЛП( СписокКонстант.Получить("param_intiator_login") )+"</co:login>
	|        </initiator>
	|";
	
	delivery = "
	|        <delivery>
	|          <vd:deliveryDate>" + ДатаXML(док.ТтнДата, "T00:00:00") + "</vd:deliveryDate>
	|          <vd:consignor>
	|            <ent:businessEntity>
	|              <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
	|            </ent:businessEntity>
	|            <ent:enterprise>
	|              <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
	|            </ent:enterprise>
	|          </vd:consignor>
	|          <vd:consignee>
	|            <ent:businessEntity>
	|              <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
	|            </ent:businessEntity>
	|            <ent:enterprise>
	|              <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
	|            </ent:enterprise>
	|          </vd:consignee>
	|";
	
	consignment=""; vetCertificate ="";
	тз = Док.Товары.Выгрузить();
	//тз.ВыбратьСтроки()
	Для А=0 По тз.Количество()-1 Цикл
		СтрокаДокумента = тз[А];
		consignment = consignment+ "
		|          <vd:consignment id='id"+ А +"'>
		|            <vd:productType>"+ СтрокаДокумента.Партия.Продукция.Тип +"</vd:productType>
		|            <vd:product>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.Продукция.GUID) +"</bs:guid>
		|            </vd:product>
		|            <vd:subProduct>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.ВидПродукции.GUID) +"</bs:guid>
		|            </vd:subProduct>
		|            <vd:productItem>
		|";
		Если ПустоеЗначение(СтрокаДокумента.Партия.Продукция_Элемент.GUID)=0 Тогда
			consignment = consignment+ "
			|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.Продукция_Элемент.GUID) +"</bs:guid>
			|";
		КонецЕсли;
		consignment = consignment+ "
		|              <pr:name>"+ СокрЛП(СтрокаДокумента.Партия.Продукция_Элемент.Наименование) +"</pr:name>
		|            </vd:productItem>
		|            <vd:volume>"+ Формат(СтрокаДокумента.Количество, "ЧРД=.; ЧГ=0") +"</vd:volume>
		|            <vd:unit>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.ЕдиницаИзмерения.GUID) +"</bs:guid>
		|            </vd:unit>
		|";
		
		Если СтрокаДокумента.КоличествоМест>0 Тогда 
			consignment = consignment+ "
			|            <vd:packingList>
			|              <co:packingForm>
			|                <bs:uuid>"+ СокрЛП(СтрокаДокумента.ФормаУпаковки.GUID) +"</bs:uuid>
			|              </co:packingForm>
			|            </vd:packingList>
			|            <vd:packingAmount>"+ СтрокаДокумента.КоличествоМест +"</vd:packingAmount>
			|";
		КонецЕсли;
		consignment = consignment+ "
		|            <vd:dateOfProduction>
		|";
		Если (ПустоеЗначение(СтрокаДокумента.Партия.ДатаИзготовления1)=0) Тогда
			consignment = consignment+ "
		|              <vd:firstDate>
		|                <bs:year>"+ДатаГод(СтрокаДокумента.Партия.ДатаИзготовления1)+"</bs:year>
		|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаИзготовления1) +"</bs:month>
		|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаИзготовления1) +"</bs:day>
		|                <bs:hour>0</bs:hour>
		|              </vd:firstDate>
		|";
	КонецЕсли;
		Если ((ПустоеЗначение(СтрокаДокумента.Партия.ДатаИзготовления2)=0) и 
				(СтрокаДокумента.Партия.ДатаИзготовления2 > СтрокаДокумента.Партия.ДатаИзготовления1)) Тогда
			consignment=consignment+"		
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(СтрокаДокумента.Партия.ДатаИзготовления2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаИзготовления2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаИзготовления2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		consignment=consignment+"
		|              <vd:informalDate />
		|            </vd:dateOfProduction>
		|            <vd:expiryDate>
		|";
		
		Если (ПустоеЗначение(СтрокаДокумента.Партия.ДатаСрокГодности1)=0) Тогда
			consignment=consignment+"
			|              <vd:firstDate>
			|                <bs:year>"+ ДатаГод(СтрокаДокумента.Партия.ДатаСрокГодности1) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаСрокГодности1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаСрокГодности1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(СтрокаДокумента.Партия.ДатаСрокГодности2)=0) и 
				(СтрокаДокумента.Партия.ДатаСрокГодности2 > СтрокаДокумента.Партия.ДатаСрокГодности1)) Тогда
			consignment=consignment+"				
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(СтрокаДокумента.Партия.ДатаСрокГодности2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаСрокГодности2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаСрокГодности2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		consignment=consignment+"
		|              <vd:informalDate />
		|            </vd:expiryDate>
		|            <vd:perishable>false</vd:perishable>
		|            <vd:countryOfOrigin>
		|              <bs:uuid>"+ СокрЛП( СписокКонстант.Получить("Страна").UUID) +"</bs:uuid>
		|            </vd:countryOfOrigin>
		|            <vd:producerList />
		|            <vd:productMarkingList />
		|            <vd:lowGradeCargo>false</vd:lowGradeCargo>
		|            <vd:productName>"+ СокрЛП(СтрокаДокумента.Партия.НаименованиеПродукции) +"</vd:productName>
		|            <vd:productCode />
		|            <vd:sourceStockEntry>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.GUID) +"</bs:guid>
		|            </vd:sourceStockEntry>
		|          </vd:consignment>
		|";
			
		vetCertificate  = vetCertificate + "
		|            <vd:vetCertificate for='id"+ А +"'>
		|              <vd:issueSeries />
		|              <vd:issueNumber />
		|              <vd:issueDate>"+ ДатаXML(док.Дата) +"</vd:issueDate>
		|              <vd:form>LIC2</vd:form>
		|          <vd:consignor>
		|            <ent:businessEntity>
		|              <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
		|            </ent:businessEntity>
		|            <ent:enterprise>
		|              <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
		|            </ent:enterprise>
		|          </vd:consignor>
		|          <vd:consignee>
		|            <ent:businessEntity>
		|              <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
		|            </ent:businessEntity>
		|            <ent:enterprise>
		|              <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
		|            </ent:enterprise>
		|          </vd:consignee>
		|              <vd:batch>
		|            <vd:productType>"+ СтрокаДокумента.Партия.Продукция.Тип +"</vd:productType>
		|            <vd:product>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.Продукция.GUID) +"</bs:guid>
		|            </vd:product>
		|            <vd:subProduct>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.ВидПродукции.GUID) +"</bs:guid>
		|            </vd:subProduct>
		|            <vd:productItem>
		|";
		Если ПустоеЗначение(СтрокаДокумента.Партия.Продукция_Элемент.GUID)=0 Тогда
			vetCertificate=vetCertificate+"	
			|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.Продукция_Элемент.GUID) +"</bs:guid>
			|";
		КонецЕсли;
		vetCertificate=vetCertificate+"		
		|              <pr:name>"+ СокрЛП(СтрокаДокумента.Партия.Продукция_Элемент.Наименование) +"</pr:name>
		|            </vd:productItem>
		|            <vd:volume>"+ Формат(СтрокаДокумента.Количество, "ЧРД=.; ЧГ=0") +"</vd:volume>
		|            <vd:unit>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.ЕдиницаИзмерения.GUID) +"</bs:guid>
		|            </vd:unit>
		|";
		Если СтрокаДокумента.КоличествоМест>0 Тогда 
			vetCertificate=vetCertificate+"	
			|            <vd:packingList>
			|              <co:packingForm>
			|                <bs:uuid>"+ СокрЛП(СтрокаДокумента.ФормаУпаковки.GUID) +"</bs:uuid>
			|              </co:packingForm>
			|            </vd:packingList>
			|            <vd:packingAmount>"+ СтрокаДокумента.КоличествоМест +"</vd:packingAmount>
			|";
		КонецЕсли;
		vetCertificate=vetCertificate+"	
		|            <vd:dateOfProduction>
		|";
		
		Если (ПустоеЗначение(СтрокаДокумента.Партия.ДатаИзготовления1)=0) Тогда
			vetCertificate=vetCertificate+"				
			|              <vd:firstDate>
			|                <bs:year>"+ДатаГод(СтрокаДокумента.Партия.ДатаИзготовления1)+"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаИзготовления1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаИзготовления1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(СтрокаДокумента.Партия.ДатаИзготовления2)=0) и 
				(СтрокаДокумента.Партия.ДатаИзготовления2 > СтрокаДокумента.Партия.ДатаИзготовления1)) Тогда
			vetCertificate=vetCertificate+"		
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(СтрокаДокумента.Партия.ДатаИзготовления2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаИзготовления2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаИзготовления2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		vetCertificate=vetCertificate+"
		|              <vd:informalDate />
		|            </vd:dateOfProduction>
		|            <vd:expiryDate>
		|";
		Если (ПустоеЗначение(СтрокаДокумента.Партия.ДатаСрокГодности1)=0) Тогда
			vetCertificate=vetCertificate+"						
			|              <vd:firstDate>
			|                <bs:year>"+ ДатаГод(СтрокаДокумента.Партия.ДатаСрокГодности1) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаСрокГодности1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаСрокГодности1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(СтрокаДокумента.Партия.ДатаСрокГодности2)=0) и 
				(СтрокаДокумента.Партия.ДатаСрокГодности2 > СтрокаДокумента.Партия.ДатаСрокГодности1)) Тогда
			vetCertificate=vetCertificate+"				
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(СтрокаДокумента.Партия.ДатаСрокГодности2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаСрокГодности2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаСрокГодности2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		vetCertificate=vetCertificate+"
		|              <vd:informalDate />
		|            </vd:expiryDate>
		|            <vd:perishable>false</vd:perishable>
		|            <vd:countryOfOrigin>
		|              <bs:uuid>"+ СокрЛП( СписокКонстант.Получить("Страна").UUID) +"</bs:uuid>
		|            </vd:countryOfOrigin>
		|            <vd:productMarkingList />
		|            <vd:lowGradeCargo>false</vd:lowGradeCargo>
		//|                <vd:producerList>
		//|                  <ent:producer>
		//|                    <ent:enterprise>
		//|                      <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.Производитель_Площадка.GUID) +"</bs:guid>
		//|                    </ent:enterprise>
		//|                  </ent:producer>
		//|                </vd:producerList>
		|              </vd:batch>
		|              <vd:productName>"+ СокрЛП(СтрокаДокумента.НаименованиеПродукции) +"</vd:productName>
		|              <vd:productCode />
		|              <vd:purpose>
		|                <bs:guid>"+ СокрЛП( СписокКонстант.Получить("ВСДЦель").Guid ) +"</bs:guid>
		|              </vd:purpose>";
		Если ЗначениеЗаполнено(док.Перевозчик_ХозСубъект) Тогда		
			vetCertificate=vetCertificate+"
			|              <vd:broker>
			|                <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
			|              </vd:broker>";
		КонецЕсли;
		vetCertificate=vetCertificate+"
		|              <vd:transportInfo>
		|                <sh:transportType>1</sh:transportType>
		|                <sh:transportNumber>
		|                  <sh:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</sh:vehicleNumber>
		|                </sh:transportNumber>
		|              </vd:transportInfo>
		|              <vd:cargoReloadingPointList />
		|              <vd:cargoInspected>"+ Число(док.cargoInspected) +"</vd:cargoInspected>
		|              <vd:cargoExpertized>"+  Число(док.cargoExpertized) +"</vd:cargoExpertized>
		|              <vd:expertiseInfo>"+ СокрЛП(док.Экспертиза) +"</vd:expertiseInfo>
		|              <vd:confirmedBy>
		|                <co:login>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_login")) +"</co:login>
		|              </vd:confirmedBy>
		|              <vd:locationProsperity>"+ СокрЛП(док.Местность) +"</vd:locationProsperity>
		|              <vd:importPermit />
		|              <vd:transferPermit />
		|              <vd:specialMarks>"+ СокрЛП(док.ОсобыеОтметки) +"</vd:specialMarks>
		|              <vd:withdrawedBy />
		|              <vd:utilizedBy />
		|            </vd:vetCertificate>
		|";
	
	КонецЦикла;
	
	
	accompanyingForms_Шапка = "
	|          <vd:accompanyingForms>
	|            <vd:waybill>
	|              <sh:issueSeries />
	|              <sh:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</sh:issueNumber>
	|              <sh:issueDate>"+ ДатаXML(док.ТтнДата) +"</sh:issueDate>
	|              <sh:type>1</sh:type>
	|              <sh:consignor>
	|                <ent:businessEntity />
	|                <ent:enterprise />
	|              </sh:consignor>
	|              <sh:consignee>
	|                <ent:businessEntity />
	|                <ent:enterprise />
	|              </sh:consignee>";
	Если ЗначениеЗаполнено(док.Перевозчик_ХозСубъект) Тогда
		accompanyingForms_Шапка = accompanyingForms_Шапка+ "
		|              <sh:broker>
		|                <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
		|              </sh:broker>";
	КонецЕсли;
	accompanyingForms_Шапка = accompanyingForms_Шапка+ "
	|              <sh:transportInfo>
	|                <sh:transportType>1</sh:transportType>
	|                <sh:transportNumber>
	|                  <sh:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</sh:vehicleNumber>
	|                </sh:transportNumber>
	|              </sh:transportInfo>
	|              <sh:transportStorageType>"+ ТермическиеУсловияПеревозки.Получить( док.ТермическоеСостояние-1 ) +"</sh:transportStorageType>
	|              <sh:cargoReloadingPointList />
	|            </vd:waybill>
	|";
	
	
	ЗапросПодвал = "
	|          </vd:accompanyingForms>
	|        </delivery>
	|      </prepareOutcomingConsignmentRequest>
	|";

	Запрос = Запрос_Шапка+
		delivery+
		consignment+
		accompanyingForms_Шапка+
		vetCertificate+
		ЗапросПодвал;
	
	Возврат Запрос;
КонецФункции

Функция Отправить_ВСД_транзакция(док) Экспорт
	
	Если Проверка_ВСД_транзакция(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Организация = док.Организация;//док.ДокументОснование.Организация;
	Инициализация();
	Если НЕ ЗначениеЗаполнено(СписокКонстант.Получить("ВСДЦель")) Тогда
		Сообщить("Заполните параметр ВСД Цель",СтатусСообщения.Важное);
		Возврат "";
	КонецЕсли;
	Отправитель_Площадка = Док.Отправитель_Площадка;
	
	Сообщить("Отправляем запрос Send_VSD ["+док+"]" );
	ЗапросXML = ВСД_транзакция_ЗапросXML(док);
	
	appID = ОтправитьЗапросXML(ЗапросXML, док);

	Возврат appID;
	
КонецФункции
// ************ Транзакция 1.4 окончание

// *********  Партии 1.4

Функция ЗаписатьПартию(stockEntry)
	//t = stockEntry.text;	
	active = stockEntry.active;		
	uuid = stockEntry.uuid;
	guid = stockEntry.guid;
	st = stockEntry.status;
	entryNumber = stockEntry.entryNumber;
	updateDate = stockEntry.updateDate;
	createDate = stockEntry.createDate;
	
	batch = stockEntry.batch;
	
	product 	= batch.product.guid;
	subProduct 	= batch.subProduct.guid;

	Попытка
		productItemName = batch.productItem.name;
	Исключение
		СообщитьИнфо("Не удалось получить элемент [productItem]");
		productItemName = "";
	КонецПопытки;
	Попытка
		productItemGuid = batch.productItem.guid;
	Исключение			
		productItemGuid="";
	КонецПопытки;	
	Попытка
		productItemUuid = batch.productItem.uuid;
	Исключение			
		productItemUuid="";
	КонецПопытки;
	
	volume 		= batch.volume;
	unit		= batch.unit.guid;

	Попытка
		unitGuid	= batch.unit.guid;			
	Исключение
		unitGuid = "";			
	КонецПопытки;
	Попытка
		unitUuid	= batch.unit.uuid;			
	Исключение
		unitUuid = "";			
	КонецПопытки;
	
	Попытка
		packingFormUuid	= batch.packingList.packingForm.uuid;
	Исключение
		СообщитьИнфо("Не удалось получить элемент [packingForm] [uuid]");
		packingFormUuid = "";			
	КонецПопытки;
	Попытка
		packingFormName	= batch.packingList.packingForm.name;
	Исключение
		packingFormName="";
		СообщитьИнфо("Не удалось получить элемент [packingForm] [name]");
	КонецПопытки;

	packingAmount = batch.packingAmount;
		
	// dateOfProduction 1
	ДатаИзготовления1="";
	ДатаИзготовления="";
	попытка			
		год = batch.dateOfProduction.firstDate.year;
		мес = batch.dateOfProduction.firstDate.month;
		день = batch.dateOfProduction.firstDate.day;
		ДатаИзготовления1 = Дата(год, мес, день);
	Исключение
		Попытка
			ДатаИзготовления = batch.dateOfProduction.informalDate;
		Исключение				
		КонецПопытки;
	КонецПопытки;				
	ДатаИзготовления2="";
	попытка
		год = batch.dateOfProduction.secondDate.year;
		мес = batch.dateOfProduction.secondDate.month;
		день = batch.dateOfProduction.secondDate.day;
		ДатаИзготовления2 = Дата(год, мес, день);
	Исключение			
	КонецПопытки;
	
	//ДатаСрокГодности
	попытка			
		год = batch.expiryDate.firstDate.year;
		мес = batch.expiryDate.firstDate.month;
		день = batch.expiryDate.firstDate.day;
		ДатаСрокГодности1 = Дата(год, мес, день);
	Исключение
		Попытка
			ДатаСрокГодности = batch.expiryDate.informalDate;
		Исключение				
		КонецПопытки;
	КонецПопытки;				
	ДатаСрокГодности2="";
	попытка
		год = batch.expiryDate.secondDate.year;
		мес = batch.expiryDate.secondDate.month;
		день = batch.expiryDate.secondDate.day;
		ДатаСрокГодности2 = Дата(год, мес, день);
	Исключение			
	КонецПопытки;
	
	producer = "";
	Попытка			
		спПроизводителей = batch.producerList.producer;
		Если ТипЗнч(спПроизводителей)=Тип("СписокXDTO") Тогда
			Для Каждого ЭлСписка Из спПроизводителей Цикл
				producer = ЭлСписка.enterprise.guid;
			КонецЦикла;
		Иначе	
			Попытка
				producer = batch.producerList.producer.enterprise.guid;
			Исключение
				producerName = batch.producerList.producer.enterprise.name;
			КонецПопытки;			
		КонецЕсли;
	Исключение		
	КонецПопытки;
	
	Попытка				
		owner = batch.owner.guid; //ХозСубъект
		ВладелецХС = НайтиХСпоGUID(owner);
	Исключение
		ВладелецХС = "";
	КонецПопытки;

	Партия = НайтиПартиюПоGUID(guid);
	
	Если active="false" Тогда 
		СообщитьИнфо("Изменения в партию "+Партия+" uuid ["+uuid+"] не внесены. Признак партии = не активна");
		Партия.УстановитьПометкуУдаления(истина);
		//ЖД Партия.Удалить(0);
		Возврат Партия;
	КонецЕсли;
	
	Сообщить(" ВСД_Партия от "+updateDate+" # "+entryNumber);
	
	Партия.ДатаИзменения = СтрокаВДатаВремя( updateDate );
					
	Партия.Получатель_ХозСубъект = ВладелецХС;
	Партия.Получатель_Площадка = Отправитель_Площадка; 
	Партия.Производитель_Площадка = НайтиПлощадку(producer);
	//Попытка
	//	Партия.Производитель_ХозСубъект = Партия.Производитель_Площадка.Контрагент;
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
	Партия.Продукция 	= НайтиПродукцию(product);
	Партия.ВидПродукции = НайтиВидПродукции(subProduct);
	
	//Партия.Продукция_Элемент = Найти_Продукция_Элемент(productItemName, productItemGuid, productItemUuid, Партия.Продукция, Партия.ВидПродукции);
	Партия.Продукция_Элемент = Найти_Продукция_Элемент2(batch.productItem, Партия.Продукция, Партия.ВидПродукции);
	
	//Партия.СвойствоНоменклатурыЗначение = Партия.Продукция_Элемент.СвойствоНоменклатурыЗначение;
	
	Партия.Количество 	= Число(volume);
	Партия.КоличествоМест = Число(packingAmount);
	Партия.ФормаУпаковки = НайтиФормуУпаковки( packingFormUuid, packingFormName);;

	Партия.ЕдиницаИзмерения = НайтиЕдИзмерения( unitGuid, unitUUID );
	
	Партия.ДатаИзготовления1 = ДатаИзготовления1;
	Партия.ДатаИзготовления2 = ДатаИзготовления2;
	Партия.ДатаИзготовления =  ДатаИзготовления;
	Партия.ДатаСрокГодности = ДатаСрокГодности;
	Партия.ДатаСрокГодности1 = ДатаСрокГодности1;
	Партия.ДатаСрокГодности2 = ДатаСрокГодности2;
	Партия.Статус = st;		
	Партия.GUID = guid;
	Партия.UUID = uuid;
	//Партия.ДатаИзменения = updateDate;
	Партия.НомерЗаписи = entryNumber;
	Партия.НаименованиеПродукции = productItemName;
	Если НЕ(ПустаяСтрока(productItemName)) Тогда 
		Партия.Наименование = productItemName;
	Иначе
		Партия.Наименование = Партия.Продукция_Элемент.Наименование;
	КонецЕсли;
	//Партия.Фирма = глПользователь.ОсновнаяФирма;
	//Если ПустаяСтрока(Партия.Автор)=1 Тогда
	//	Партия.Автор = глПользователь;
	//КонецЕсли;
	
	Партия.ВсдДата = СтрокаВДатаВремя(createDate);
			
	Если Партия.Количество=0 Тогда 
		
		Если ( Партия.ЭтоНовый()=0 ) Тогда
			СообщитьИнфо("Количество партии guid ["+guid+"] uuid ["+uuid+"] = 0. Партия удалена. ");
			Партия.Записать();
			Партия.УстановитьПометкуУдаления(истина);
		Иначе
			СообщитьИнфо("Количество партии guid ["+guid+"] uuid ["+uuid+"] = 0. Партия пропущена. ");
			Возврат "";
		КонецЕсли;
	Иначе
		Партия.Записать();
		Партия.УстановитьПометкуУдаления(ложь);
	КонецЕсли;		
	Возврат Партия;	
КонецФункции

Процедура ЗагрузитьXML_ВсеПартииОтвет(имяФайла) Экспорт
    
    СообщитьИнфо("Загрузка XML-файла: "+ИмяФайла);    
    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Попытка
		seList = xdto.application.result.getStockEntryListResponse.stockEntryList.StockEntry;	
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		stockEntryList = Новый Массив;
		stockEntryList.Добавить(seList);
	Иначе
		stockEntryList = seList;
	КонецЕсли;
	Для каждого stockEntry из stockEntryList Цикл		
		
		Партия = ЗаписатьПартию(stockEntry);
					
	КонецЦикла;
	
	Сообщить("Загрузка партий завершена");
    
КонецПроцедуры

Функция  ПолучитьПартииОтветXML(appID) Экспорт
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	
	Результат = КомпонентаНаСервере.GetStockListResult(СокрЛП(appID));

	Если Результат="COMPLETED" Тогда
		
		//При объединении партий в Меркурии - старые партии пропадают, появляются новые
		// поэтому в 1С остаются "остатки", которые нужно удалять
		//Если ОчищатьСправочникВСД_Партии Тогда
			Сообщить("Очистка справочника ВСД_Партии");
			//Отправитель_Площадка = СписокКонстант.Получить("Отправитель_Площадка"); 
			
			//ЖД Вот тут удалятся партии по всем ХС и Площадкам, а загрузятся только по 1-ой !!!
			//Убираю закомметированное условие Выборка.Получатель_Площадка = Отправитель_Площадка
			Выборка = Справочники.ВСД_Партия.Выбрать();
			Пока Выборка.Следующий() Цикл			
				Если Выборка.Получатель_Площадка = Отправитель_Площадка Тогда 
					СпрОбъект = Выборка.ПолучитьОбъект();
					СпрОбъект.УстановитьПометкуУдаления(истина);
				КонецЕсли;				
			КонецЦикла;
		//КонецЕсли;
		Сообщить("Загрузка справочника ВСД_Партии...");
		
		ЗагрузитьXML_ВсеПартииОтвет( КомпонентаНаСервере.LogFilename );
				
		УдалитьXML( КомпонентаНаСервере.LogFilename);
	Иначе
		//ЖД ТЕСТ покажем ошибки
		НайтиОшибки(КомпонентаНаСервере.LogFilename);
		УдалитьXML( КомпонентаНаСервере.LogFilename);		
	КонецЕсли;		
		
	Возврат Результат;
КонецФункции

Функция  ПолучитьПартии() Экспорт
	
	Если ПустаяСтрока(Отправитель_Площадка.GUID) Тогда 
		СообщитьОшибку("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;
	
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	
	Результат = КомпонентаНаСервере.GetStockList(СокрЛП(Отправитель_Площадка.GUID), Смещение);

	appID = КомпонентаНаСервере.ApplicationId;
	//Отладка();
	
	УдалитьXML( КомпонентаНаСервере.LogFilename);

	Результат = ПолучитьПартииОтветXML(appID);
	Пока Результат="IN_PROCESS" Цикл
		Пауза();				
		Результат = ПолучитьПартииОтветXML(appID);
	КонецЦикла;		
	
	//УдалитьXML( КомпонентаНаСервере.LogFilename);
	
	Возврат Результат;
	
КонецФункции
// Партии 1.4 окончание

// Версия 1.4 Окончание **************************************************

// Распределение Партий для ВСД2_Транзакция
Процедура РаскраситьТЧПартий() Экспорт
	Для каждого ДанныеСтроки из Партии Цикл
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ВСД_Продукция_Элемент) Тогда
			 ДанныеСтроки.сЦвет = 1;   //красный
		ИначеЕсли ДанныеСтроки.Партия = Справочники.ВСД_Партия.ПустаяСсылка() Тогда
			ДанныеСтроки.сЦвет = 2;   //желтый
		ИначеЕсли ДанныеСтроки.Количество < ДанныеСтроки.КоличествоСписания Тогда
			ДанныеСтроки.сЦвет = 1;   //красный
		ИначеЕсли ДанныеСтроки.Количество >= ДанныеСтроки.КоличествоСписания Тогда
			ДанныеСтроки.сЦвет = 3;  //зеленый
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеСтроки.ВСД_Производство) Тогда
			ДокОбъект = ДанныеСтроки.ВСД_Производство.ПолучитьОбъект();
			Если ЗначениеЗаполнено(ДокОбъект.ApplicationID) и НЕ(СокрЛП(ДокОбъект.Статус = "COMPLETED")) Тогда
				ДанныеСтроки.сЦвет = 1;   //красный
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УменьшитьАктуальныеПартииНаРаспределенные(тзАктуальныхПартий)
	//Уменьшаем Акт партии на Неотправленные ВСД
	// Подберем уже заполненнные, но не отправленные ВСД, 
	// Выбираем ВСЕ документы, т.к. они м.б. не отмечены, но в них есть эти партии к отправке!!!
	//тзАктуальныхПартий.ВыбратьСтроку(); ТЕСТ
	тз = Отгрузки.Выгрузить();
	тз.Свернуть("ВСД","");
	//	тз.Сортировать("ВСД");
	для каждого Строкатз из Тз Цикл
		Если НЕ ЗначениеЗаполнено(Строкатз.ВСД) Тогда
		    Продолжить;
		КонецЕсли;
		Если (Строкатз.ВСД.Проведен) или (СокрЛП(Строкатз.ВСД.Статус) = "COMPLETED") Тогда
		    Продолжить;
		КонецЕсли;
		
		тзДокВСД = Строкатз.ВСД.Товары.Выгрузить();
		тзДокВСД.Свернуть("Партия","Количество");
		
		Для каждого СтрокаВСД из тзДокВСД Цикл
		    Если НЕ ЗначениеЗаполнено(СтрокаВСД.Партия) Тогда
		        Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока = ТзАктуальныхПартий.Найти(СтрокаВСД.Партия,"Партия");

			Если НайденнаяСтрока = Неопределено Тогда
    			//Предупреждение("Товар не найден!");
			Иначе
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - СтрокаВСД.Количество;
				Если НайденнаяСтрока.Количество < 0  Тогда
					Сообщить("В заполненных ранее ВСД на отправку обнаружено ПРЕВЫШЕНИЕ количества имеющейся партии по "+НайденнаяСтрока.Продукция_Элемент+"; (№ записи : "+СокрЛП(НайденнаяСтрока.Партия.НомерЗаписи)+") ; документ "+Строкатз.ВСД,СтатусСообщения.Внимание);
					НайденнаяСтрока.Количество = 0;    
				КонецЕсли;
				//Сообщить("Есть в документах на отправку "+ТзАктуальныхПартий.ВСД_Партия+ ", уменьшаем на " + тздокСтр.Количество)
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	//Совсем выкинем уже распределенные Партии из списка Актуальных
	НайденнаяСтрока = ТзАктуальныхПартий.Найти(0,"Количество");
	Пока НЕ(НайденнаяСтрока = Неопределено) Цикл
		ТзАктуальныхПартий.Удалить(НайденнаяСтрока);
		НайденнаяСтрока = ТзАктуальныхПартий.Найти(0,"Количество");
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьАктуальныеПартии(ВыбПродукция_Элемент, ВыбПлощадка,ВыбХозСубъект, ПолеСортировки = "", ЗнакСортировки = неопределено) Экспорт
	//Получает ТЗ Актуальных Партий
     Если НЕ ЗначениеЗаполнено(ВыбПлощадка) Тогда
         Сообщить("Не указана площадка Отправителя!");
         Возврат "";
     КонецЕсли;
     Если НЕ ЗначениеЗаполнено(ВыбХозСубъект) Тогда
         Сообщить("Не указан ХС Отправителя!");
         Возврат "";
     КонецЕсли;
	 Если НЕ(ЗначениеЗаполнено(ПолеСортировки)) Тогда
		ПолеСортировки = ?(ЗначениеЗаполнено(ПарамКолонкаСортировкиПартииСписания),СокрЛП(ПарамКолонкаСортировкиПартииСписания),"ДатаИзменения"); 
	КонецЕсли;
	Если ЗнакСортировки = Неопределено Тогда
		ЗнакСортировки = ПарамЗнакСортировкиУбывание;		
	КонецЕсли;
	ПорядокСортировки = ?(ЗнакСортировки,"ПолеСортировки УБЫВ","ПолеСортировки");
	
     Запрос = Новый Запрос;
       Запрос.Текст = "ВЫБРАТЬ
                    |	ВСД_Партия.Ссылка КАК Партия,
                    |	ВСД_Партия.Количество,
                    |	ВСД_Партия.Продукция_Элемент КАК Продукция_Элемент,
                    |	ВСД_Партия.@ПолеСортировки КАК ПолеСортировки
                    |ИЗ
                    |	Справочник.ВСД_Партия КАК ВСД_Партия
                    |ГДЕ
                    |	ВСД_Партия.Получатель_Площадка = &Отправитель_Площадка
                    |	И ВСД_Партия.Получатель_ХозСубъект.GUID = &ВыбХС
                    |	И ВСД_Партия.Продукция_Элемент В ИЕРАРХИИ(&Продукция_Элемент)
                    |	И ВСД_Партия.Количество > 0
                    |	И ВСД_Партия.ПометкаУдаления = ЛОЖЬ
                    |
                    |УПОРЯДОЧИТЬ ПО
                    |	Продукция_Элемент,
  //                  |	Партия,
                    |	@ПорядокПоляСортировки";

	 Запрос.Текст = СтрЗаменить(Запрос.Текст,"@ПолеСортировки",ПолеСортировки);
	 Запрос.Текст = СтрЗаменить(Запрос.Текст,"@ПорядокПоляСортировки",ПорядокСортировки);
     Запрос.УстановитьПараметр("Отправитель_Площадка"  ,ВыбПлощадка);
	 Запрос.УстановитьПараметр("ВыбХС", ВыбХозСубъект.GUID);
     Запрос.УстановитьПараметр("Продукция_Элемент" , ВыбПродукция_Элемент);

     //Выборка = Запрос.Выполнить().Выбрать();
	Попытка
    	Возврат Запрос.Выполнить().Выгрузить();
	Исключение
		Сообщить("Указано неверное название реквизита сортировки Партий в Параметрах -> "+ПолеСортировки+" исправьте!!",СтатусСообщения.ОченьВажное);
		Сообщить(ОписаниеОшибки());
		Возврат "";
	КонецПопытки;

КонецФункции

Функция ПодобратьПартииПоПродукцияЭлемент(ТзПартий,ПродукцияЭлемент,КолвоСписания) Экспорт
	// Подбираем партии под нужное количество списания
	//возвращает ТЗ - Партия и Вес для указанного ПродукцияЭлемент
	// ТзПартий уже отсортирована нужным образом
	// Мы должны вернуть ее с уменьшенным количеством, что необходимо при групповой обработке
	
    Рез = Новый ТаблицаЗначений;
	Рез.Колонки.Добавить("Партия");
	Рез.Колонки.Добавить("Количество");
	Рез.Колонки.Добавить("Упаковки");  // Не нужен похоже тут
	Рез.Колонки.Добавить("ПолеСортировки"); // Не исп-ся в документе
	
	ОсталосьСписать = КолвоСписания;
	Если значениеЗаполнено(ТзПартий) Тогда
		НайденнаяСтрока = ТзПартий.Найти(ПродукцияЭлемент, "Продукция_Элемент");
	Иначе
		НайденнаяСтрока = Неопределено;
	КонецЕсли;

	Если НайденнаяСтрока = Неопределено Тогда
    	//Предупреждение("Товар не найден!");
	Иначе
		стр = ТзПартий.Индекс(НайденнаяСтрока);
		Пока (ТзПартий.Количество() >= стр) и (НайденнаяСтрока.Продукция_Элемент = ПродукцияЭлемент) Цикл
			//ТзПартий.ПолучитьСтрокуПоНомеру(стр);
			Если осталосьСписать = 0 Тогда
				Прервать;    
			КонецЕсли;
			Если НайденнаяСтрока.Количество = 0 Тогда
				// Уже выбрали из этой партии все
				стр = стр + 1;
				Попытка НайденнаяСтрока = ТзПартий[стр]; Исключение Прервать; КонецПопытки;
			    Продолжить;
			КонецЕсли;
			СтрРез = рез.Добавить();
			СтрРез.Партия = НайденнаяСтрока.Партия;
			СтрРез.ПолеСортировки = НайденнаяСтрока.ПолеСортировки;
			Если ОсталосьСписать >= НайденнаяСтрока.Количество Тогда
				СтрРез.Количество = НайденнаяСтрока.Количество;
			Иначе
				СтрРез.Количество = ОсталосьСписать;
			КонецЕсли;
		
			НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - СтрРез.Количество;
			ОсталосьСписать = ОсталосьСписать - СтрРез.Количество; 
		
			стр = стр + 1;
			Попытка НайденнаяСтрока = ТзПартий[стр]; Исключение Прервать; КонецПопытки; 
		КонецЦикла;
	КонецЕсли;
	
	Если ОсталосьСписать > 0 Тогда
	    Сообщить("Недостаточно партий для списания "+ПродукцияЭлемент + ", Нужно списать "+КолвоСписания+ ", списываю "+Рез.Итог("Количество"));
	КонецЕсли;
	
	Возврат рез;
КонецФункции

Процедура ЗаполнитьТаблицуПартий() Экспорт
	// Заполняем Партии на форме с Распределением
	Партии.Очистить();
	ВремПартии = Новый ТаблицаЗначений;   // Вся Реализация
	ВремПартии.Колонки.Добавить("Номенклатура");
	ВремПартии.Колонки.Добавить("ВСД_Продукция_Элемент");
	//ВремПартии.Колонки.Добавить("Количество");
	ВремПартии.Колонки.Добавить("КоличествоСписания");
	
	РаспределеннаяПартии = Новый ТаблицаЗначений; // итоговая ТЗ
	РаспределеннаяПартии.Колонки.Добавить("Номенклатура");
	РаспределеннаяПартии.Колонки.Добавить("ВСД_Продукция_Элемент");
	РаспределеннаяПартии.Колонки.Добавить("Партия");
	РаспределеннаяПартии.Колонки.Добавить("Количество");
	РаспределеннаяПартии.Колонки.Добавить("КоличествоСписания");
	РаспределеннаяПартии.Колонки.Добавить("ПолеСортировки");
	Сообщить("Заполнение списка партий ВСД ");
	Для Каждого СтрОтгрузки Из Отгрузки Цикл
		Если НЕ(СтрОтгрузки.Отметка) Тогда
			Продолжить;
		КонецЕсли;
		//ЖД Контроль уже отправленного/удаленного ВСД
		Если ЗначениеЗаполнено(СтрОтгрузки.ВСД) Тогда
			Сообщить("Для "+СтрОтгрузки.Док+" уже создан "+СтрОтгрузки.ВСД+" ->Пропускаю");
			//Если (СтрОтгрузки.ВСД.Проведен) или (СтрОтгрузки.ВСД.ПометкаУдаления)  Тогда 
				продолжить;
			//КонецЕсли;
		КонецЕсли;
		
		тз = ВыгрузитьТЧ(СтрОтгрузки.Док);
		Для Каждого стрТЗ из ТЗ Цикл
	        СтрПартий = Времпартии.Добавить();
			СтрПартий.Номенклатура = стрТЗ.Номенклатура;
			СтрПартий.ВСД_Продукция_Элемент = стрТЗ.Продукция_Элемент;
			СтрПартий.КоличествоСписания = стрТЗ.Количество;
		КонецЦикла;
	КонецЦикла;
	ВремПартии.Свернуть("ВСД_Продукция_Элемент","КоличествоСписания");
	ВремПартии.Сортировать("ВСД_Продукция_Элемент");

	Если ВремПартии.Количество() = 0 Тогда
		Сообщить("Нет документов к созданию ВСД ->");
		Возврат;
	КонецЕсли;
	//Выбрали Реализацию, Свернули по ВСД_Продукция_Элемент  - Получим Актуальные Партии
	тзАктуальныхПартий = ПолучитьАктуальныеПартии(ВремПартии.ВыгрузитьКолонку("ВСД_Продукция_Элемент"), Отправитель_Площадка, Отправитель_ХозСубъект);
	
	Если НЕ (ТипЗнч(тзАктуальныхПартий) = Тип("ТаблицаЗначений")) и НЕ ПарамЗаполнятьТранзакциюПриОтсутствииПартий Тогда
		Сообщить("Нет актуальных партий для создания Документов ");
		Возврат;
	КонецЕсли;
	
	УменьшитьАктуальныеПартииНаРаспределенные(тзАктуальныхПартий);
	
	Для каждого стрНужныеПартии из ВремПартии Цикл
		// Код из ЗаполнитьТЧВСД, только с отключенным Условием ПарамЗаполнятьТранзакциюПриОтсутствииПартий - покажем недостающие партии
		СтрокиПартий = ПодобратьПартииПоПродукцияЭлемент(тзАктуальныхПартий,стрНужныеПартии.ВСД_Продукция_Элемент,стрНужныеПартии.КоличествоСписания);
		Если СтрокиПартий.Количество() = 0  Тогда
			//Если ПарамЗаполнятьТранзакциюПриОтсутствииПартий Тогда
				НоваяСтрока = РаспределеннаяПартии.Добавить();
				НоваяСтрока.ВСД_Продукция_Элемент = стрНужныеПартии.ВСД_Продукция_Элемент;
				НоваяСтрока.КоличествоСписания = стрНужныеПартии.КоличествоСписания;
				НоваяСтрока.Количество = 0;
			//	Продолжить;
			//КонецЕсли;
			Сообщить("Нет партий для ["+стрНужныеПартии.ВСД_Продукция_Элемент +"]");// Продукция_Элемент ["+ Строка(Продукция_Элемент) +"] Пропускаем!","!");				
		   	Продолжить;
		КонецЕсли;
		
		Для каждого СтрПартии из СтрокиПартий Цикл
			НоваяСтрока = РаспределеннаяПартии.Добавить();
			НоваяСтрока.Партия = СтрПартии.Партия;
			НоваяСтрока.ВСД_Продукция_Элемент = стрНужныеПартии.ВСД_Продукция_Элемент;
			НоваяСтрока.Количество = СтрПартии.Количество; 
			НоваяСтрока.КоличествоСписания = СтрПартии.Количество;
			НоваяСтрока.ПолеСортировки 		= СтрПартии.ПолеСортировки;
		КонецЦикла;
		
		Если (СтрокиПартий.Итог("Количество") < стрНужныеПартии.КоличествоСписания) Тогда // и ПарамЗаполнятьТранзакциюПриОтсутствииПартий  Тогда
			//Добавим с пустыми партиями
			НоваяСтрока = РаспределеннаяПартии.Добавить();
			НоваяСтрока.ВСД_Продукция_Элемент = стрНужныеПартии.ВСД_Продукция_Элемент;
			НоваяСтрока.КоличествоСписания	=  стрНужныеПартии.КоличествоСписания - СтрокиПартий.Итог("Количество") ;
			НоваяСтрока.Количество = 0; //Нет Партий, нет кол-ва
		КонецЕсли;
	КонецЦикла;
	Партии.Загрузить(РаспределеннаяПартии);
	РаскраситьТЧПартий();
КонецПроцедуры
// ***************** Транзакция окончание v2

// **************** Аннулирование ВСД Транспортного v2
Функция ВСД2_Аннулирование_ЗапросXML(док)
	Запрос = "
	|<SOAP-ENV:Envelope 
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СписокКонстант.Получить("param_api_key") + "</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+СписокКонстант.Получить("param_issuer_id")+"</apl:issuerId>
	|        <apl:issueDate>"+ ДатаXML(ТекущаяДата(), "T00:00:00") +"</apl:issueDate>
	|        <apl:data>
	|          <merc:withdrawVetDocumentRequest>
	|            <merc:localTransactionId>[GUID]</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+СписокКонстант.Получить("param_intiator_login")+"</vd:login>
	|            </merc:initiator>
	|            <merc:vetDocumentId>"+ СокрЛП(док.UUID) +"</merc:vetDocumentId>
	|            <merc:withdrawReason>Неверно указан объём продукции</merc:withdrawReason>
	|            <merc:withdrawDate>"+ ДатаXML(док.Дата, "T23:59:59") +"</merc:withdrawDate>
	|            <merc:specifiedPerson>
	|              <vd:login>"+ СписокКонстант.Получить("param_vetdoctor_login")+"</vd:login>
	|            </merc:specifiedPerson>
	|          </merc:withdrawVetDocumentRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";	
	
	Возврат Запрос;
КонецФункции

Функция Отправить_ВСД2_Аннулирование( док ) Экспорт
	Если НЕ(ЗначениеЗаполнено(док)) Тогда
		Возврат 0;
	КонецЕсли;	
	Если НЕ(ЗначениеЗаполнено(док.uuid)) Тогда
		Сообщить("В документе "+док+" не указан uuid, аннулирование невозможно");
		Возврат "";
	КонецЕсли;
	
	Если СокрЛП(док.Статус) = "Аннулирова" Тогда
		Сообщить("Документ "+док+" уже аннулирован");
		Возврат "";
	КонецЕсли;
	
	Организация = док.Организация;//док.ДокументОснование.Организация;
	Инициализация();
	
	Отправитель_Площадка = Док.Отправитель_Площадка;
	
	ЗапросXML = ВСД2_Аннулирование_ЗапросXML(док);

	метод = КомпонентаНаСервере.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	
	УдалитьXML( КомпонентаНаСервере.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда
		Результат = ПолучитьРезультат_ВСД2(appID,док); 
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД2( appID,док); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//условие на ответ - вдруг покупатель уже погасил, либо ошибка аннулирования
	Если СокрЛП(док.Статус)= "WITHDRAWN" Тогда
		докОбъект = док.ПолучитьОбъект();
		докОбъект.Статус = "Аннулирова"; // н не умещается в 10 симв
		докОбъект.Записать( РежимЗаписиДокумента.ОтменаПроведения, );
		докОбъект.УстановитьПометкуУдаления(Истина);
	КонецЕсли;
	Возврат appID;		
КонецФункции

Процедура Аннулировать_ВСД2_транзакция( док ) Экспорт
	Если НЕ(ЗначениеЗаполнено(док)) Тогда
		Возврат;
	КонецЕсли;
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	ОшибкаАннулирования = true;
	тзВСД = Выбрать_ВСД2(док);
	Для Каждого строкаВСД из тзВСД Цикл
		Если СокрЛП(строкаВСД.Док.ТипВСД) = "PRODUCTIVE" Тогда
			//Сообщить("Производственный не аннулируем");
			Продолжить;	
		КонецЕсли;
		Отправить_ВСД2_Аннулирование(строкаВСД.Док);
		Если НЕ(Сокрлп(строкаВСД.Док.Статус) = "Аннулирова") Тогда
			ОшибкаАннулирования = true;
			Сообщить("Не удалось Аннулировать "+строкаВСД.Док+" для "+док);
		Иначе
			ОшибкаАннулирования = false;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ(ОшибкаАннулирования) Тогда
		докОбъект = Док.ПолучитьОбъект();
		докОбъект.Статус = "Аннулирова";
		докОбъект.Записать( РежимЗаписиДокумента.ОтменаПроведения, );
		докОбъект.УстановитьПометкуУдаления(Истина);
	КонецЕсли;
КонецПроцедуры

Процедура Отправить_ВСД2_АннулированиеВыбранные(ЭтоПеремещения = false) Экспорт
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	Для Каждого стр из Отгрузки Цикл				
		Если НЕ(ЗначениеЗаполнено(стр.ВСД)) или НЕ(стр.Отметка) Тогда
			Продолжить;
		КонецЕсли;
		Аннулировать_ВСД2_транзакция(стр.ВСД);
	КонецЦикла;
	//Перерисуем
	Автозаполнение(ЭтоПеремещения);
КонецПроцедуры

// **************** Аннулирование ВСД Транспортного окончание v2
// ************* Регионализация v2
Функция РегионализацияМаршрута_2_ЗапросXML(док)
	//СокрЛП(док.Партия.Продукция.GUID)
	//СокрЛП(док.Партия.ВидПродукции.GUID)
	//СокрЛП(док.Партия.Продукция_Элемент.GUID) 
Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(док.Дата, "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:checkShipmentRegionalizationRequest>
	|            <merc:localTransactionId>" + СокрЛП(док.Номер) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|";
	
	тз = Док.Товары.Выгрузить();
	Для А=0 По тз.Количество()-1 Цикл
		СтрокаДокумента = тз[А];
		ГУИДПродукции = ?(ЗначениеЗаполнено(СтрокаДокумента.Партия.ВидПродукции.GUID),СокрЛП(СтрокаДокумента.Партия.ВидПродукции.GUID),СокрЛП(СтрокаДокумента.Продукция_Элемент.ВидПродукции.GUID));
		Запрос = Запрос+"
		|            <dt:cargoType>
		|              <bs:guid>"+ ГУИДПродукции +"</bs:guid>       
		|            </dt:cargoType>";	    
	КонецЦикла;
	//<vd:sqnId>1</vd:sqnId>
	//Порядовый номер точки маршрута.
    //Не обязателен для заполнения, будет сгенерирован автоматически в ответе	
	
	// <vd:enterprise>
	//Сведения о предприятии, которое является точкой маршрута.
    //Указывается в случае, если не указано значение location 	
	
	Запрос = Запрос+"
	|            <vd:shipmentRoute>
	|              <vd:routePoint>
	|                <vd:sqnId>1</vd:sqnId>
	|                <vd:enterprise>
	|                  <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
	|                </vd:enterprise>
	|              </vd:routePoint>
	|              <vd:routePoint>
	|                <vd:sqnId>2</vd:sqnId>
	|                <vd:enterprise>
	|                  <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
	|                </vd:enterprise>
	|              </vd:routePoint>
//	|              <vd:routePoint>
//	|                <vd:sqnId>2</vd:sqnId>
//	|                <vd:location>
//	|                  <dt:address>
//	|                    <dt:country>
//	|                      <bs:guid>74a3cbb1-56fa-94f3-ab3f-e8db4940d96b</bs:guid>
//	|                    </dt:country>
//	|                    <dt:region>
//	|                      <bs:guid>d00e1013-16bd-4c09-b3d5-3cb09fc54bd8</bs:guid>
//	|                    </dt:region>
//	|                    <dt:district>
//	|                      <bs:guid>f4ab6f10-4f56-4ebd-a881-4b767dbf4473</bs:guid>
//	|                    </dt:district>
//	|                    <dt:locality>
//	|                      <bs:guid>6f039940-2e3b-4857-a30e-c142865d859e</bs:guid>
//	|                    </dt:locality>
//	|                  </dt:address>
//	|                </vd:location>
//	|              </vd:routePoint>
	|            </vd:shipmentRoute>
	|          </merc:checkShipmentRegionalizationRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";
	Возврат Запрос;	
КонецФункции

Функция ЗагрузитьXML_ПеревозкаРазрешена_2(имяФайла, Решение="") Экспорт 
	//<dt:decision> 	dt:RegionalizationDecision
	//1 	Перемещение разрешено.
	//2 	Перемещение разрешено при обязательном соблюдении условий.
	//3 	Перемещение запрещено. 
	Если НайтиОшибки(имяФайла)>0 Тогда 
		Возврат "";
	КонецЕсли;	
	
    СообщитьИнфо("Загрузка XML-файла: "+ИмяФайла);    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Попытка	seList = xdto.application.result.checkShipmentRegionalizationResponse.r13nRouteSection; Исключение	seList = ""; КонецПопытки;
	

//                  <vd:r13nRouteSection>
//                     <vd:sqnId>1</vd:sqnId>
//                     <vd:appliedR13nRule>
//                        <dt:cargoType>
//                           <bs:guid>55d3c8dc-432d-58c8-151f-cda720795add</bs:guid>
//                        </dt:cargoType>
//                        <dt:decision>1</dt:decision>
//                     </vd:appliedR13nRule>
//                  </vd:r13nRouteSection>
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		Сообщить("Не далось прочитать условия перевозки из "+имяФайла);
		Возврат "";
	КонецЕсли;

	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		RouteSectionList = Новый Массив;
		RouteSectionList.Добавить(seList);
	Иначе
		RouteSectionList = seList;
	КонецЕсли;
	тзРез = Новый("ТаблицаЗначений");
	тзРез.Колонки.Добавить("Отметка");
	тзРез.Колонки.Добавить("UUID");
	тзРез.Колонки.Добавить("GUID");
	тзРез.Колонки.Добавить("ВидПродукции");
	тзРез.Колонки.Добавить("Название");
	тзРез.Колонки.Добавить("Решение");
			
	Для каждого RouteSection из RouteSectionList Цикл
		
		Попытка RList = RouteSection.appliedR13nRule; Исключение RList=""; КонецПопытки; 
		Если ТипЗнч(RList)<>Тип("СписокXDTO") Тогда 
			RuleList = Новый Массив;
			RuleList.Добавить(RList);
		Иначе
			RuleList = RList;
		КонецЕсли;
		
		Для каждого appliedR13nRule из RuleList Цикл 
			Решение = Число(appliedR13nRule.decision);
			Попытка ВидПродукции = НайтиВидПродукции(appliedR13nRule.cargoType.guid); Исключение ВидПродукции=""; КонецПопытки;		
			Попытка reqlist = appliedR13nRule.requirement; Исключение Продолжить; КонецПопытки;
		
			Если ТипЗнч(reqlist)<>Тип("СписокXDTO") Тогда 
				requirementsList = Новый Массив;
				requirementsList.Добавить(reqlist);
			Иначе
				requirementsList = reqlist;
			КонецЕсли;
		
			Для каждого requirements  из requirementsList Цикл
				Попытка cGroupList = requirements.conditionGroup;Исключение Продолжить; КонецПопытки;
				Если ТипЗнч(cGroupList)<>Тип("СписокXDTO") Тогда 
					conditionGroupList = Новый Массив;
					conditionGroupList.Добавить(cGroupList);
				Иначе
					conditionGroupList = cGroupList;
				КонецЕсли; 			
			
				Для каждого conditionGroup из conditionGroupList Цикл 
					Попытка cList = conditionGroup.condition;Исключение Продолжить; КонецПопытки;
					Если ТипЗнч(cList)<>Тип("СписокXDTO") Тогда 
						conditionList = Новый Массив;
						conditionList.Добавить(cList);
					Иначе
						conditionList = cList;
					КонецЕсли; 			
					Для каждого condition из conditionList Цикл 
						//condition = conditionGroup.condition;
						УсловияПеревозки = тзРез.Добавить();
						УсловияПеревозки.Отметка = true;
						УсловияПеревозки.ВидПродукции = ВидПродукции;
						УсловияПеревозки.Решение = Решение;
						УсловияПеревозки.Название = condition.text;
						УсловияПеревозки.UUID = condition.uuid;
						УсловияПеревозки.GUID = condition.guid;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Возврат тзРез;
	
КонецФункции

Функция ПолучитьРезультат_Регион_2(applicationID, докСсылка ) Экспорт
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	Пауза( );
	
	Сообщить("Отправляем запрос ["+докСсылка+"]" );
	Результат = КомпонентаНаСервере.SendRequestResult( applicationID );
	
	тзУсловия = ЗагрузитьXML_ПеревозкаРазрешена_2( КомпонентаНаСервере.LogFilename ); 
	
	УдалитьXML( КомпонентаНаСервере.LogFilename );
	Если ЗначениеЗаполнено(тзУсловия) и (ПустоеЗначение(докСсылка)=0) Тогда
		докОбъект = докСсылка.ПолучитьОбъект();
		докОбъект.УсловияПеревозки.Очистить();
		докОбъект.УсловияПеревозки.Загрузить(тзУсловия);
		//докОбъект.ПеревозкаРазрешена = МожноВезти;
		докОбъект.Комментарий = "Условия перевозки заполнены";
		докОбъект.Записать();
		Сообщить("Условия перевозки записаны в "+докСсылка);
	КонецЕсли;	
	Возврат Результат;
КонецФункции

Функция ПроверитьВозможностьПеремещения(док) Экспорт

	Организация = док.Организация;//док.ДокументОснование.Организация;
	Инициализация();
	
	Отправитель_Площадка = Док.Отправитель_Площадка;
	
	ЗапросXML = РегионализацияМаршрута_2_ЗапросXML(док);

	метод = КомпонентаНаСервере.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	
	УдалитьXML( КомпонентаНаСервере.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьРезультат_Регион_2(appID,док); 
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_Регион_2(appID,док); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;
КонецФункции

Функция ПроверитьВозможностьПеремещенияВСДПоСписку() Экспорт
	//Сообщить("Выполняется запрос условий перевозки для выделенных документов ВСД");
	тзОтгрузки = Отгрузки.Выгрузить();
	Для каждого строкаТЗ из тзОтгрузки Цикл
		ВыбВСД = строкаТЗ.ВСД;
		Если НЕ (ЗначениеЗаполнено(ВыбВСД)) или НЕ(строкаТЗ.Отметка) Тогда
			Продолжить;	
		КонецЕсли;
		Если (СокрЛП(ВыбВСД.Статус) = "COMPLETED") или (СокрЛП(ВыбВСД.Статус) = "IN_PROCESS") Тогда
			Продолжить;	
		КонецЕсли;
		Сообщить("Выполняется проверка условий перевозки для "+ВыбВСД);
		Попытка
			ПроверитьВозможностьПеремещения(ВыбВСД);
		Исключение
		    Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	Сообщить("-> Проверка условий перевозки Завершена ");
КонецФункции

// ************* Регионализация v2 окончание

//*************** Лабораторные исследования v2

Функция ВСД2_ЛабораторныеИсследования_ЗапросXML(док)    
	
	Запрос ="
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>"+ ДатаXML(док.Дата, "T00:00:00") +"</apl:issueDate>
	|        <apl:data>
	|          <merc:updateVeterinaryEventsRequest>
	|            <merc:localTransactionId>" + СокрЛП(док.Номер) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|            <merc:enterprise>
	|              <bs:guid>"+ СокрЛП(док.Партия.Получатель_Площадка.GUID) +"</bs:guid>
//	|              <bs:guid>"+ СокрЛП(Отправитель_Площадка.GUID) +"</bs:guid>
	|            </merc:enterprise>
	|            <vd:stockEntry>
	|              <bs:guid>"+ СокрЛП( док.Партия.GUID ) +"</bs:guid>
	|              <vd:vetEventList>
	|                <vd:laboratoryResearch>
	|                  <vd:actualDateTime>"+ ДатаXML(док.ДатаРезультата, "T00:00:00") +"</vd:actualDateTime>
	|                  <vd:operator>
	|                    <dt:name>" + СокрЛП(док.НаименованиеЛаборатории) + "</dt:name>
	|                  </vd:operator>
	|                  <vd:referencedDocument>
	|                    <vd:issueNumber>"+ СокрЛП(док.НомерАктаОтбораПроб) +"</vd:issueNumber>
	|                    <vd:issueDate>"+ ДатаXML(док.ДатаОтбораПроб) +"</vd:issueDate>
	|                    <vd:type>9</vd:type> 
	//|                    <vd:relationshipType>6</vd:relationshipType>
	|                  </vd:referencedDocument>
	|                  <vd:expertiseID>"+ СокрЛП(док.НомерЭкспертизы) +"</vd:expertiseID>
	|                  <vd:disease>
	|                    <dt:name>"+ СокрЛП(док.НаименованиеПоказателя) +"</dt:name>
	|                  </vd:disease>
	|                  <vd:method>
	|                    <dt:name>"+ СокрЛП(док.МетодИсследования) +"</dt:name>
	|                  </vd:method>
						//Допустимые значения: UNKNOWN, POSITIVE, NEGATIVE
	|                  <vd:result>"+ ПолучитьИдентификаторПеречисления(док.РезультатИсследования) +"</vd:result>
	|                  <vd:conclusion>"+ СокрЛП(док.Заключение)  +"</vd:conclusion>
	|                </vd:laboratoryResearch>
	|              </vd:vetEventList>
	|            </vd:stockEntry>
	|          </merc:updateVeterinaryEventsRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";
	
	Возврат Запрос;
КонецФункции

Функция Проверка_ВСД2_ЛабораторныеИсследования(ДокСсылка)
    Рез = 1;
	
	Если НЕ(ЗначениеЗаполнено(ДокСсылка)) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если (СокрЛП(ДокСсылка.Статус)="COMPLETED") Тогда
		Сообщить(""+ДокСсылка+" статус "+ДокСсылка.Статус+" НЕ отправляем");
		Возврат 0;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокСсылка.Партия) Тогда
	    Сообщить("Не указана исследуемая партия");
		Возврат 0;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДокСсылка.РезультатИсследования) Тогда
	    Сообщить("Нет результатов исследования");
		Возврат 0;
	КонецЕсли;

    Возврат Рез;
КонецФункции

Функция Отправить_ВСД2_ЛабораторныеИсследования( док ) Экспорт
	
	Если Проверка_ВСД2_ЛабораторныеИсследования(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;
	Организация = док.Организация;//док.ДокументОснование.Организация;
	Инициализация();
	
	ЗапросXML = ВСД2_ЛабораторныеИсследования_ЗапросXML(док);
	
	метод = КомпонентаНаСервере.GetMethod(); 
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	
	УдалитьXML( КомпонентаНаСервере.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьРезультат_ВСД2(appID, док );
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД2(appID, док );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;	
КонецФункции
//*************** Лабораторные исследования v2 окончание

// **************** Инвентаризация v2

Функция ВСД2_инвентаризация_ЗапросXML(док)

	Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
  	|<SOAP-ENV:Header/>
  	|<SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СписокКонстант.Получить("param_api_key") + "</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+СписокКонстант.Получить("param_issuer_id")+"</apl:issuerId>
	|        <apl:issueDate>"+ ДатаXML(ТекущаяДата(), "T00:00:00") +"</apl:issueDate>
	|        <apl:data>
	|          <merc:resolveDiscrepancyRequest>
	|            <merc:localTransactionId>" + СокрЛП(док.Номер) + "</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|            <merc:enterprise>
	|              <bs:guid>"+ СокрЛП(док.Владелец_Площадка.GUID) +"</bs:guid>
	|            </merc:enterprise>
	|            <merc:inventoryDate>" + ДатаXML(док.Дата, "T00:00:00") + "</merc:inventoryDate>
	|            <merc:responsible>
	|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:responsible>
	|            <merc:stockDiscrepancy id='test1'>
	|              <vd:resultingList>";
	тзПартии = док.Продукция.Выгрузить();
	Для каждого СтрПартии из тзПартии Цикл
		Запрос = Запрос + "	
		|                <vd:stockEntry>";
	    Если ПустоеЗначение(СтрПартии.Партия)=0 Тогда // изменяем конкретную партию
			Запрос = Запрос + "
			|                <bs:uuid>" + СокрЛП(СтрПартии.Партия.uuid) + "</bs:uuid>";	        
		КонецЕсли;
		
		Запрос = Запрос + "
		|                 <vd:batch>
		|                    <vd:productType>"+ СтрПартии.Продукция.Тип +"</vd:productType>
		|                    <vd:product>
		|                      <bs:guid>"+ СокрЛП(СтрПартии.Продукция.GUID) +"</bs:guid>
		|                    </vd:product>
		|                    <vd:subProduct>
		|                      <bs:guid>"+ СокрЛП(СтрПартии.ВидПродукции.GUID) +"</bs:guid>
		|                    </vd:subProduct>";
		
		Запрос = Запрос + ProductItem_в_XML(СтрПартии);
		
		Запрос = Запрос +"
		|                    <vd:volume>"+ Формат(СтрПартии.Количество, "ЧРД=.; ЧГ=0;ЧН=0") +"</vd:volume>
		|                    <vd:unit>
		|                      <bs:uuid>"+ СокрЛП(СтрПартии.ЕдиницаИзмерения.UUID) +"</bs:uuid>
		|                    </vd:unit>";
		
		Запрос = Запрос + Изготовление_СрокГодности_в_XML(СтрПартии); //Тест вместо ниже

		Запрос=Запрос+"
//		|                    <vd:batchID>123</vd:batchID>
		|                    <vd:perishable>"+ Нашебулево(СтрПартии.Скоропортящийся)+"</vd:perishable>";
        // Добавляем Партию
//		Если (ПустоеЗначение(СтрПартии.Партия) = 1) и (ПустоеЗначение(СтрПартии.Производитель_Площадка.GUID) = 0) и (ПустоеЗначение(СтрПартии.Производитель_Страна) = 0)Тогда
			Запрос=Запрос+"
			|                    <vd:origin>";
		Если ЗначениеЗаполнено(СтрПартии.Производитель_Страна) Тогда
			Запрос=Запрос+"
			|                    <vd:country>
			|                        <bs:uuid>"+СокрЛП(СтрПартии.Производитель_Страна.uuid)+"</bs:uuid>
			|                      </vd:country>";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрПартии.Производитель_Площадка.GUID) Тогда
			Запрос=Запрос+"
			|                       <vd:producer>
			|                      	<dt:enterprise>
			|                      	  <bs:guid>"+ СокрЛП(СтрПартии.Производитель_Площадка.GUID) +"</bs:guid>
			|                      	</dt:enterprise>
			|                      </vd:producer>";
		КонецЕсли;
		Запрос=Запрос+"	
			|                    </vd:origin>";
//		КонецЕсли;
		
		Запрос=Запрос+"
		|                    <vd:lowGradeCargo>"+ НашеБулево(СтрПартии.Некачественный)+"</vd:lowGradeCargo>";
        
		//УРОВНИ УПАКОВКИ
		тзУпаковка = Док.УровниУпаковки.Выгрузить();
		тзМаркировка = Док.Маркировка.Выгрузить();
		
		Запрос=Запрос+УровниУпаковки_в_XML(СтрПартии.НомерСтроки,тзУпаковка,тзМаркировка);
		
		Запрос=Запрос+"
		|                    <vd:owner>
		|                      <bs:guid>"+ СокрЛП(док.Владелец_Площадка.GUID) +"</bs:guid>
		|                    </vd:owner>
		|                  </vd:batch>
		|                </vd:stockEntry>";
	КонецЦикла;
	Запрос = Запрос + "
	|              </vd:resultingList>
	|            </merc:stockDiscrepancy>
	|            <merc:discrepancyReport for='test1'>
//	|              <vd:issueSeries>777</vd:issueSeries>
	|              <vd:issueNumber>"+ Док.Номер +"</vd:issueNumber>
	|              <vd:issueDate>" + ДатаXML(док.Дата) + "</vd:issueDate>
	|              <vd:reason>
	|                <vd:name>"+СокрЛП(док.ПричинаРасхождения)+"</vd:name>
	|              </vd:reason>
	|              <vd:description>"+СокрЛП(док.ОписаниеНесоответствия)+"</vd:description>
	|            </merc:discrepancyReport>
	|          </merc:resolveDiscrepancyRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";
    
	Возврат Запрос;
КонецФункции

Функция Проверка_ВСД2_Инвентаризация(ДокСсылка)
	// дата изготовления и срок годности обязательны
	// при добавлении партии обязательны Страна и Производитель_Площадка
	Если НЕ(ЗначениеЗаполнено(ДокСсылка)) Тогда
		Возврат 0;
	КонецЕсли;
	Если (СокрЛП(ДокСсылка.Статус)="COMPLETED") Тогда
		Сообщить(""+ДокСсылка+" статус "+ДокСсылка.Статус+" НЕ отправляем");
		Возврат 0;
	КонецЕсли;
	
	Рез = 1;
	Если ПустоеЗначение(ДокСсылка.Владелец_ХозСубъект) = 1 Тогда
	    Сообщить("Не указан владелец ХС");
		Возврат 0;
	КонецЕсли;
	Если ПустоеЗначение(ДокСсылка.Владелец_Площадка) = 1 Тогда
	    Сообщить("Не указана Площадка владельца");
		Возврат 0;
	КонецЕсли;
	тзПартии = ДокСсылка.Продукция.Выгрузить();
	Для каждого СтрПартии из тзПартии Цикл		
        Если (ПустоеЗначение(СтрПартии.Продукция)=1) или (ПустоеЗначение(СтрПартии.ВидПродукции)=1) или (ПустоеЗначение(СтрПартии.Продукция_Элемент)=1) Тогда
        	Сообщить("Не указаны Продукция, Вид Продукции или Продукция_Элемент");
			Возврат 0;
        КонецЕсли;
        
		Если (ПустоеЗначение(СтрПартии.ЕдиницаИзмерения)=1) Тогда
        	Сообщить("Не указана Единица измерения");
			Возврат 0;
        КонецЕсли;
		
        Если (ПустоеЗначение(СтрПартии.ДатаИзготовления1)=1) и (ПустоеЗначение(СтрПартии.ДатаИзготовления2)=1) Тогда
        	Сообщить("Не указана Дата изготовления");
			Возврат 0;
        КонецЕсли;
        Если (ПустоеЗначение(СтрПартии.ДатаСрокГодности1)=1) и (ПустоеЗначение(СтрПартии.ДатаСрокГодности2)=1) Тогда
        	Сообщить("Не указан срок годности");
			Возврат 0;
        КонецЕсли;
	    Если ПустоеЗначение(СтрПартии.Партия) = 1 Тогда
	        Если (ПустоеЗначение(СтрПартии.Производитель_Страна)=1) и (ПустоеЗначение(СтрПартии.Производитель_Площадка)=1) Тогда
    	    	Сообщить("Не указана Страна производителя или его Площадка");
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
    Возврат Рез;
КонецФункции

Функция Отправить_ВСД2_Инвентаризация(док) Экспорт

	//стандартное поведение функции	
	
	Если Проверка_ВСД2_инвентаризация(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
	Организация = док.Организация;//док.ДокументОснование.Организация;
	Инициализация();
	Отправитель_Площадка = Док.Владелец_Площадка;

	ЗапросXML = ВСД2_инвентаризация_ЗапросXML(док);
	
	метод = КомпонентаНаСервере.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	
	УдалитьXML( КомпонентаНаСервере.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда
	// по идее партии нужно получить	
		Результат = ПолучитьРезультат_ВСД2(appID, док);
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД2( appID, док);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	докОбъект = Док.ПолучитьОбъект();//"";//СоздатьОбъект("Документ");
	Если СокрЛП(докОбъект.Статус) = "COMPLETED" Тогда
		докОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	Возврат appID;
	
КонецФункции

// **************** Инвентаризация v2 окончание

//**************************ВСД_Производство v2 ****************************

Функция ПроверитьВСД2_Производство(ВСДСсылка)
	Если НЕ(ЗначениеЗаполнено(ВСДСсылка)) Тогда
		Возврат 0;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВСДСсылка.Организация) Тогда
		Сообщить("Не указана Организация в документе "+ВСДСсылка);
		Результат = 0;
	КонецЕсли;
	Если (СокрЛП(ВСДСсылка.Статус)="COMPLETED") Тогда
		Сообщить(""+ВСДСсылка+" статус "+ВСДСсылка.Статус+" НЕ отправляем");
		Возврат 0;
	КонецЕсли;
	//Проверить Отправителя ХС
	Если НЕ(ВСДСсылка.Производитель_ХозСубъект = Отправитель_Хозсубъект) Тогда
		Сообщить("Другой ХС Производитель - Выберите в Параметрах организацию для  "+ВСДСсылка.Производитель_ХозСубъект);
		Возврат 0;
	КонецЕсли;
//	Если НЕ(ВСДСсылка.ЗавершитьОперацию) и НЕ(ЗначениеЗаполнено(ВСДСсылка.operationId)) Тогда
//		Сообщить("При НЗП необходимо указать в документе № операции. Документ  "+ВСДСсылка);
//		Возврат 0;
//	КонецЕсли;
	Если НЕ(ЗначениеЗаполнено(ВСДСсылка.РезультатыИсследований)) Тогда
		Сообщить("Не указаны Результаты Исследований. Документ  "+ВСДСсылка);
		Возврат 0;
	КонецЕсли;
	
	ЕстьОшибки = false;
	Для каждого стрПродукция из ВСДСсылка.Продукция Цикл
		Если НЕ(ЗначениеЗаполнено(стрПродукция.Продукция_Элемент)) Тогда
			Сообщить("Не указан Продукция_Элемент в документе "+ВСДСсылка+" не отправлен!");
			ЕстьОшибки = true;
			Прервать;
		КонецЕсли;
		Если НЕ(ЗначениеЗаполнено(стрПродукция.Продукция_Элемент.ЕдиницаИзмерения)) Тогда
			Сообщить("Не указана Единица измерения у Продукция_Элемент "+стрПродукция.Продукция_Элемент+" в документе "+ВСДСсылка+" не отправлен!");
			ЕстьОшибки = true;
			Прервать;
		КонецЕсли;
		Если НЕ(ЗначениеЗаполнено(стрПродукция.ЕдиницаИзмерения)) Тогда
			Сообщить("Не указана Единица измерения у Продукции "+стрПродукция.Продукция_Элемент+" в документе "+ВСДСсылка+" не отправлен!");
			ЕстьОшибки = true;
			Прервать;
		КонецЕсли;
		// Возможно несколько производителей
		Если НЕ(стрПродукция.Продукция_Элемент.Площадка = ВСДССылка.Производитель_Площадка) Тогда
			Сообщить(""+ВСДССылка.Производитель_Площадка+" Не является производителем "+стрПродукция.Продукция_Элемент+" не отправлен!");
			ЕстьОшибки = true;
			Прервать;
		КонецЕсли;
		Если НЕ(ЗначениеЗаполнено(стрПродукция.Продукция_Элемент.GUID)) и НЕ(ЗначениеЗаполнено(стрПродукция.Продукция_Элемент.UUID)) Тогда
			ЕстьОшибки = true;
			Сообщить("Не указан GUID или UUID Продукция_Элемент для  "+стрПродукция.Продукция_Элемент+" в документе "+ВСДСсылка+" не отправлен!");
			Прервать;
		КонецЕсли;
		Если НЕ(ЗначениеЗаполнено(стрПродукция.ДатаИзготовления1)) или НЕ(ЗначениеЗаполнено(стрПродукция.ДатаСрокГодности1)) Тогда
			ЕстьОшибки = true;
			Сообщить("Не указаны Дата Изготовления и/или Срок годности  "+стрПродукция.Продукция_Элемент+" в документе "+ВСДСсылка+" не отправлен!");
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Для каждого СтрСписания из ВСДСсылка.ПартииСписания Цикл
		Если НЕ ЗначениеЗаполнено(СтрСписания.Партия) тогда
			ЕстьОшибки = true;
			Сообщить("Не указана Партия списания   в документе "+ВСДСсылка+" не отправлен!");
			Прервать;
		КонецЕсли;
		Если СтрСписания.Партия.Количество < СтрСписания.Количество тогда
			ЕстьОшибки = true;
			Сообщить("Попытка списать больше, чем имеется в партии ["+СтрСписания.Партия+"] Документ"+ВСДСсылка+" не отправлен!");
			Прервать;
		КонецЕсли;
		
		
	КонецЦикла;

	Если ЕстьОшибки Тогда
		Возврат 0;
	Иначе
		Возврат 1;
	КонецЕсли;
КонецФункции

Функция ВСД2_производство_ЗапросXML(док)    
	//ЖД нужны ли УровнямУпаковки и Маркировкам
	
	Запрос ="<SOAP-ENV:Envelope 
		|      xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
		|      xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
		|      xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
		|      xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
		|      xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
		|      xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
		|      xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
		|  <SOAP-ENV:Header/>
		|  <SOAP-ENV:Body>
		|    <apldef:submitApplicationRequest>
		|      <apldef:apiKey>"+ СокрЛП( СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
		|      <apl:application>
		|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
		|        <apl:issuerId>"+ СокрЛП( СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
		|        <apl:issueDate>" + ДатаВремяXML(док.Дата) + "</apl:issueDate>
		|        <apl:data>
		|          <merc:registerProductionOperationRequest>
		|            <merc:localTransactionId>" + СокрЛП(док.Номер) + "</merc:localTransactionId>
		|            <merc:initiator>
		|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
		|            </merc:initiator>
		|            <merc:enterprise>
		|              <bs:guid>"+ СокрЛП(док.Производитель_Площадка.GUID) +"</bs:guid>
		|            </merc:enterprise>
		|            <merc:productionOperation> ";
	
// НЗП
		Если ЗначениеЗаполнено(Док.operationId) Тогда 
			Запрос=Запрос+"
			|        <vd:operationId>"+ СокрЛП(Док.operationId) +"</vd:operationId>
			|";
		КонецЕсли;
		тз = Док.ПартииСписания.Выгрузить();
		Для А=0 По тз.Количество()-1 Цикл
			СтрокаДокумента = тз[А];
			// 1. rawBatch = списание
			// Уровни упаковки можно использовать, пока без упаковки
			Запрос=Запрос+"
			| <vd:rawBatch>
			|    <vd:sourceStockEntry>
			|       <bs:guid>" + СокрЛП(СтрокаДокумента.Партия.guid) + "</bs:guid>
			|    </vd:sourceStockEntry>
			|    <vd:volume>"+ Формат(СтрокаДокумента.Количество, "ЧРД=.; ЧГ=0") +"</vd:volume>
			|    <vd:unit>
			|       <bs:guid>"+ СокрЛП(СтрокаДокумента.ЕдиницаИзмерения.Guid) +"</bs:guid>
			|    </vd:unit>
			| </vd:rawBatch>
			|";
		КонецЦикла;		
		тз = Док.Продукция.Выгрузить();
		
	Для А=0 По тз.Количество()-1 Цикл
		СтрокаДокумента = тз[А];
		
	Запрос=Запрос+"		
		|              <vd:productiveBatch>
		|                <vd:productType>"+ СтрокаДокумента.Продукция.Тип +"</vd:productType>
		|                <vd:product>
		|                  <bs:guid>"+ СокрЛП(СтрокаДокумента.Продукция.GUID) +"</bs:guid>
		|                </vd:product>
		|                <vd:subProduct>
		|                  <bs:guid>"+ СокрЛП(СтрокаДокумента.ВидПродукции.GUID) +"</bs:guid>
		|                </vd:subProduct>";
	
	 	Запрос = Запрос + ProductItem_в_XML(СтрокаДокумента);
		
		Запрос=Запрос+"	
		|                <vd:volume>"+ Формат(СтрокаДокумента.Количество, "ЧРД=.; ЧГ=0") +"</vd:volume>
		|                <vd:unit>
		|                  <bs:uuid>"+ СокрЛП(СтрокаДокумента.ЕдиницаИзмерения.UUID) +"</bs:uuid>
		|                </vd:unit>";
		Запрос = Запрос + Изготовление_СрокГодности_в_XML(СтрокаДокумента); 
		Если ЗначениеЗаполнено(Док.НомерПартии) Тогда
			Попытка
			Запрос=Запрос+"
			|                <vd:batchID>"+ СокрЛП(Док.НомерПартии) +"</vd:batchID>";
			Исключение Сообщить("Обновите конфигурацию!!!"); КонецПопытки;
		КонецЕсли;
		Запрос=Запрос+"
		|                <vd:perishable>"+ Нашебулево(СтрокаДокумента.Скоропортящийся)+"</vd:perishable>
		|                <vd:lowGradeCargo>"+ Нашебулево(СтрокаДокумента.Некачественный)+"</vd:lowGradeCargo>
		|";
		
//   Уровни <dt:level>
		тзУпаковка = Док.УровниУпаковки.Выгрузить();
		тзМаркировка = Док.Маркировка.Выгрузить();
		Запрос=Запрос + УровниУпаковки_в_XML(СтрокаДокумента.НомерСтроки,тзУпаковка,тзМаркировка);

		Запрос=Запрос+"
		|              </vd:productiveBatch>"; 
	КонецЦикла;   // По строкам документа
    // завершение операции
	Если ЗначениеЗаполнено(Док.operationId) Тогда
		Запрос=Запрос+"
		|          <vd:finalizeOperation>"+Нашебулево(док.ЗавершитьОперацию)+"</vd:finalizeOperation>";
    КонецЕсли;
	Запрос=Запрос+"
	|            </merc:productionOperation>
	|            <merc:vetDocument>
	|              <vd:authentication>
	|              <vd:cargoInspected>"+ Нашебулево(док.cargoInspected) +"</vd:cargoInspected>";
	//				cargoExpertized = Проводилась ли ветсанэкспертиза.
	//				Возможные значения: VSEFULL, VSERAW, UNFULFILLED
	Запрос=Запрос+"
	|                <vd:cargoExpertized>"+ПолучитьИдентификаторПеречисления(док.РезультатыИсследований)+"</vd:cargoExpertized>";

	Запрос=Запрос+"
	|              </vd:authentication>
	|            </merc:vetDocument>
	|          </merc:registerProductionOperationRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";
			
	Возврат Запрос;
КонецФункции

Функция Отправить_ВСД2_Производство(док) Экспорт
	
	Если НЕ(ПроверитьВСД2_Производство(док)) Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Организация = док.Организация;//док.ДокументОснование.Организация;
	Инициализация();
	
	Отправитель_Площадка = Док.Производитель_Площадка;
	
	ЗапросXML = ВСД2_производство_ЗапросXML(док);
	
	метод = КомпонентаНаСервере.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    //метод.Service = "platform/services/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
		
	//appID = Получить_ApplicationID(КомпонентаНаСервере.LogFilename);
	
	УдалитьXML( КомпонентаНаСервере.LogFilename);

	Если ЗначениеЗаполнено(appID) Тогда
		Результат = ПолучитьРезультат_ВСД2(appID, док );
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда
				Результат = ПолучитьРезультат_ВСД2(appID, док );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;
	
	
КонецФункции

Функция ОтправитьВсе_ВСД2_Производство(СписокВСД="",НачДата, КонДата) Экспорт
	//стандартное поведение функции		
	//Состояние("Меркурий: отправка ВСД Производство");
	Сообщить("Начало отправки документов");
	
	Если НЕ(ЗначениеЗаполнено(СписокВСД)) тогда 
		//Выберем документы производства  - запросом
		СписокВСД = Новый СписокЗначений;
 		Запрос = Новый Запрос;
    	Запрос.Текст = 
        "ВЫБРАТЬ
        |	ВСД_Производство.Ссылка
        |ИЗ
        |	Документ.ВСД_Производство КАК ВСД_Производство
        |ГДЕ
        |	ВСД_Производство.Производитель_ХозСубъект = &ВыбХС
        |	И ВСД_Производство.ПометкаУдаления = ЛОЖЬ
        |	И ВСД_Производство.Дата МЕЖДУ &ДатаН И &ДатаК
        |	И ВСД_Производство.Проведен = ЛОЖЬ";
 
	    Запрос.УстановитьПараметр("ДатаН", НачалоДня(НачДата));
		Запрос.УстановитьПараметр("ДатаК", КонецДня(КонДата));
    	Запрос.УстановитьПараметр("ВыбХС", Отправитель_Хозсубъект);
	    //МассивВСД = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		СписокВСД.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		Сообщить("отправляются ВСД производство за период "+ПредставлениеПериода(НачДата,КонецДня(КонДата),"ФП=ИСТИНА")+ "в количестве "+СписокВСД.Количество());//ПериодСтр(НачДата, КонДата));
	Иначе
		Сообщить("отправляются ВСД производство "+СписокВСД.Количество()+" документов");
	КонецЕсли;
		
	Для Каждого стрСпискаВСД из СписокВСД Цикл
		ВСДСсылка = стрСпискаВСД.Значение ;
	
		Если ВСДСсылка.Проведен Тогда 
			продолжить;
		КонецЕсли;
		Если ВСДСсылка.ПометкаУдаления Тогда 
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВСДСсылка.applicationID) Тогда
			Сообщить("Разработчик - > Диалог на сервере ОтправитьВсе_ВСД2_Производство - Нужно решить!!!");
			//Ответ = Вопрос("Документ ["+ВСДСсылка+"] статус=["+СокрЛП(ВСДСсылка.Статус)+"] уже был отправлен, отправить ПОВТОРНО?",РежимДиалогаВопрос.ДаНет,0);
			//Если Ответ = КодВозвратаДиалога.Нет Тогда
    			Продолжить;
			//КонецЕсли;
		КонецЕсли;		
	
		Отправить_ВСД2_производство( ВСДСсылка );

	КонецЦикла;
	
	Сообщить("Отправка документов завершена");
КонецФункции

Процедура Создать_ВСД2_Производство(ДатаВыпуска = "") Экспорт
	//ЖД не решены вопросы по УровнямУпаковки и маркировкам, методом хранения РезультатыИсследований в Документе - ( временно строкой )
	Если НЕ(ЗначениеЗаполнено(ДатаВыпуска)) тогда
		ДатаВыпуска = ДатаНачалаОтбора;	
	КонецЕсли;
	
	Для каждого стрПартий из Партии Цикл
		Если НЕ(ЗначениеЗаполнено(стрПартий.ВСД_Продукция_Элемент)) Тогда
			Сообщить("В строке партий № "+стрПартий.НомерСтроки+"  не указан ВСД_Продукция_Элемент. Пропускаем...");
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стрПартий.ВСД_Производство) Тогда
			Продолжить;	
		КонецЕсли;
		Если ЗначениеЗаполнено(стрПартий.Партия) Тогда
			Сообщить("В строке партий № "+стрПартий.НомерСтроки+" указана партия. Пропускаем...");
			Продолжить;
		КонецЕсли;
		Если СтрПартий.КоличествоСписания <= СтрПартий.Количество Тогда
			Продолжить;	
		КонецЕсли;
		
		Если НЕ(ЗначениеЗаполнено(стрПартий.ВСД_Продукция_Элемент.ЕдиницаИзмерения)) Тогда
			Сообщить("В строке партий № "+стрПартий.НомерСтроки+" у "+СокрЛП(стрПартий.ВСД_Продукция_Элемент.Наименование)+" не указана Единица измерения. Пропускаем...");
			Продолжить;
		КонецЕсли;
		
		Если НЕ(ЗначениеЗаполнено(стрПартий.ВСД_Продукция_Элемент.СрокГодности)) Тогда
			Сообщить("В строке партий № "+стрПартий.НомерСтроки+" у "+СокрЛП(стрПартий.ВСД_Продукция_Элемент.Наименование)+" не указан Срок годности. Пропускаем...");
			Продолжить;
		КонецЕсли;
		// Возможно несколько производителей-площадок  / продумать
		Если НЕ(стрПартий.ВСД_Продукция_Элемент.Площадка = Отправитель_Площадка)  Тогда
			Сообщить("В строке партий № "+стрПартий.НомерСтроки+" у "+СокрЛП(стрПартий.ВСД_Продукция_Элемент.Наименование)+" Производителем является "+стрПартий.ВСД_Продукция_Элемент.Площадка+". Пропускаем...");
			Продолжить;
		КонецЕсли;
		
		
		//Состояние("Создание ВСД_Производство ");
		
		ДокВСД = Документы.ВСД2_Производство.СоздатьДокумент(); 
		ДокВСД.Дата = ДатаВыпуска;//ДатаНачалаОтбора;			
		ДокВСД.Организация = Организация;
		ДокВСД.Производитель_ХозСубъект = Отправитель_ХозСубъект;
		ДокВСД.Производитель_площадка = Отправитель_Площадка;
		
		Попытка				
			//ДокВСД.Автор = глПользователь;
		Исключение
		КонецПопытки;
		Попытка				
			//ДокВСД.Филиал = глПользователь.Филиал;
		Исключение
		КонецПопытки;
			
		//ДокВСД.Экспертиза 		= ВСД_Экспертиза;
		//ДокВСД.Местность 		= ВСД_Местность;
		//ДокВСД.ОсобыеОтметки 	= ВСД_ОсобыеОтметки;
			
		ДокВСД.РезультатыИсследований = ВСД_РезультатыИсследований;//СписокКонстант.Получить("ВСД_РезультатыИсследований");//Перечисления.ВСД_РезультатИсследования.VSEFULL;
		ДокВСД.cargoInspected	= 1;
		ДокВСД.НомерПартии = Формат(ДатаВыпуска, "ДЛФ=Д");				
		СтрПродукция = ДокВСД.Продукция.Добавить();
		СтрПродукция.Продукция_Элемент 	= стрПартий.ВСД_Продукция_Элемент;
		СтрПродукция.Количество 			= стрПартий.КоличествоСписания - стрПартий.Количество; //ЖД вероятно не нужно - Количество 
		//Попытка СтрПродукция.КоличествоМест 		= стрПартий.КоличествоМестСписания;Исключение КонецПопытки;					
		СтрПродукция.ЕдиницаИзмерения 	= СтрПродукция.Продукция_Элемент.ЕдиницаИзмерения;
		//СтрПродукция.ФормаУпаковки 		= СтрПродукция.Продукция_Элемент.ФормаУпаковки;
		СтрПродукция.Продукция 			= СтрПродукция.Продукция_Элемент.Продукция;
		СтрПродукция.ВидПродукции 		= СтрПродукция.Продукция_Элемент.ВидПродукции;
		//СтрПродукция.Приход				= true;
		СтрПродукция.НаименованиеПродукции = СтрПродукция.Продукция_Элемент.Наименование;
		СтрПродукция.ДатаИзготовления1 = ДатаВыпуска;
//		Если ДатаОкончанияОтбора>ДатаНачалаОтбора Тогда
//			СтрПродукция.ДатаИзготовления2 = ДатаОкончанияОтбора;
//			СтрПродукция.ДатаСрокГодности2 = СтрПродукция.ДатаИзготовления2+60*60*24*СтрПродукция.Продукция_Элемент.СрокГодности;
//		КонецЕсли;
		СтрПродукция.ДатаСрокГодности1 = СтрПродукция.ДатаИзготовления1+60*60*24*СтрПродукция.Продукция_Элемент.СрокГодности;
		
		
		ДокВСД.ЗавершитьОперацию = true;
			
		
		ДокВСД.Записать();
		ДокументСсылка = ДокВСД.Ссылка;
		стрПартий.ВСД_Производство = ДокументСсылка;
		
		Сообщить(" создан документ "+стрПартий.ВСД_Производство);		
	КонецЦикла;
	РаскраситьТЧПартий();
КонецПроцедуры


//*************************ВСД_Производство Окончание*********************
// ************** Гашение
Функция Проверка_ВСД2_Входящий(док) 

	//стандартное поведение функции	
	Результат = 1; //все в порядке
	
	Если НЕ(ЗначениеЗаполнено(док.Отправитель_ХозСубъект.GUID)) Тогда 
		СообщитьОшибку("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников");
		результат = 0;
	КонецЕсли;

	Если НЕ(ЗначениеЗаполнено(док.Отправитель_Площадка.GUID)) Тогда 
		СообщитьОшибку("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников");
		результат = 0;
	КонецЕсли;
	Если НЕ(ЗначениеЗаполнено(док.Получатель_ХозСубъект.GUID)) Тогда 
		СообщитьОшибку("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников");
		результат = 0;
	КонецЕсли;
	Если НЕ(ЗначениеЗаполнено(док.Получатель_Площадка.GUID)) Тогда 
		СообщитьОшибку("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников");
		результат = 0;
	КонецЕсли;
	Если НЕ(ЗначениеЗаполнено(Док.ПроизводителиСписок)) Тогда 
		СообщитьОшибку("Не указан Производитель_Площадка.GUID Выполните синхронизацию справочников");
		результат = 0;
	КонецЕсли;

	Если док.ВидВСД = 1 Тогда 
		//бумажный
		Если НЕ(ЗначениеЗаполнено(док.ВсдНомер)) Тогда 
			СообщитьОшибку("Не указан ВсдНомер ");
			результат = 0;
		КонецЕсли;
		Если НЕ(ЗначениеЗаполнено(док.ВсдДата)) Тогда 
			СообщитьОшибку("Не указан ВсдДата ");
			результат = 0;
		КонецЕсли;
	Иначе
		//электронный
		Если НЕ(ЗначениеЗаполнено(док.UUID)) Тогда 
			СообщитьОшибку("Не указан UUID ");
			результат = 0;
		КонецЕсли;
		
	КонецЕсли;
		
	Если НЕ(ЗначениеЗаполнено(док.ЕдиницаИзмерения)) Тогда 
		СообщитьОшибку("Не указана ЕдиницаИзмерения ");
		результат = 0;
	КонецЕсли;	
	
	Возврат результат;
КонецФункции

Функция ВСД2_ВходящийБумажныйГашение_ЗапросXML(док)
//	ТермическиеУсловияПеревозки2 = Новый("СписокЗначений");
//	ТермическиеУсловияПеревозки2.Добавить("FROZEN","1");
//	ТермическиеУсловияПеревозки2.Добавить("CHILLED","2");
//	ТермическиеУсловияПеревозки2.Добавить("COOLED","3");
//	ТермическиеУсловияПеревозки2.Добавить("VENTILATED","4");	
	
	Запрос = "
    |              <vd:issueSeries>"+СокрЛП(док.ВСДСерия)+"</vd:issueSeries>
    |              <vd:issueNumber>"+СокрЛП(док.ВСДномер)+"</vd:issueNumber>
    |              <vd:issueDate>"+ ДатаXML(док.ВсдДата) +"</vd:issueDate>
    |              <vd:vetDForm>"+СокрЛП(док.ФормаВСД)+"</vd:vetDForm>
    |              <vd:certifiedConsignment>
	|              <vd:consignor>
	|                <dt:businessEntity>
	|                  <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
	|                </dt:businessEntity>
	|                </dt:businessEntity>";
	Если ЗначениеЗаполнено(док.Отправитель_Площадка) Тогда // У импортных ВСД отсутствует
		Запрос = запрос +"
		|                <dt:enterprise>
		|                  <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
		|                </dt:enterprise>";
	КонецЕсли;
	// У импортных ВСД может отсутствовать
	ВремПолучатель_Площадка = ?(ЗначениеЗаполнено(док.Получатель_Площадка) ,док.Получатель_Площадка,СписокКонстант.Получить("Отправитель_Площадка")); // возьмем из Парметров
   Запрос = запрос +"
	|              </vd:consignor>
	|              <vd:consignee>
	|                <dt:businessEntity>
	|                  <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
	|                </dt:businessEntity>
	|                <dt:enterprise>
	|                  <bs:guid>"+ СокрЛП(ВремПолучатель_Площадка.GUID) +"</bs:guid>
	|                </dt:enterprise>
	|              </vd:consignee>";

	
	Если ЗначениеЗаполнено(СокрЛП(док.Перевозчик_ХозСубъект)) Тогда  
			Запрос=Запрос+"			
			|        <vd:broker>
			|          <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
			|        </vd:broker>";
		КонецЕсли;
		Если ЗначениеЗаполнено(СокрЛП(док.ТипТС)) Тогда  
			Запрос=Запрос+"			
			|        <vd:transportInfo>
			|          <vd:transportType>"+СокрЛП(док.ТипТС)+"</vd:transportType>
			|          <vd:transportNumber>";
//			|"; 
	
			Если СокрЛП(Док.ТипТС) = "1" Тогда
				Попытка
					// Странный важный момент - контейнер д.б. первым !
				Если ЗначениеЗаполнено(док.номерКонтейнера) Тогда
			    	Запрос = Запрос+"
					|            <vd:containerNumber>"+ СокрЛП(док.номерКонтейнера) +"</vd:containerNumber>
					|";
				КонецЕсли;
				Исключение КонецПопытки;

				Запрос = Запрос+"
				|            <vd:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</vd:vehicleNumber>
				|"; 
				Попытка
				Если ЗначениеЗаполнено(док.номерПолуприцепа) Тогда
			    	Запрос = Запрос+"
					|            <vd:trailerNumber>"+ СокрЛП(док.номерПолуприцепа) +"</vd:trailerNumber>
					|";
				КонецЕсли;
				Исключение КонецПопытки;
			иначеЕсли СокрЛП(Док.ТипТС) = "2" Тогда
		    Запрос = Запрос+"
			|            <vd:wagonNumber>"+ СокрЛП(док.номерАвто) +"</vd:wagonNumber>
			|"; 
			иначеЕсли СокрЛП(Док.ТипТС) = "3" Тогда
		    Запрос = Запрос+"
			|            <vd:flightNumber>"+ СокрЛП(док.номерАвто) +"</vd:flightNumber>
			|";
			иначеЕсли (СокрЛП(Док.ТипТС) = "4") или (СокрЛП(Док.ТипТС) = "5") или (СокрЛП(Док.ТипТС) = "6") Тогда
		    Запрос = Запрос+"
			|            <vd:shipName>"+ СокрЛП(док.номерАвто) +"</vd:shipName>
			|";
			
			КонецЕсли;	
			Запрос=Запрос+"
			|          </vd:transportNumber>
			|        </vd:transportInfo>";
	КонецЕсли;
	Если ЗначениеЗаполнено(док.ТермическоеСостояние) Тогда
		Запрос=Запрос+"			
		|              <vd:transportStorageType>"+ ТермическиеУсловияПеревозки2.Получить( док.ТермическоеСостояние - 1).Значение +"</vd:transportStorageType>";
	КонецЕсли;
	Запрос=Запрос+"			
	|              <vd:batch>
	|                <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
	|                <vd:product>
	|                  <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
	|                </vd:product>
	|                <vd:subProduct>
	|                  <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
	|                </vd:subProduct>
	|                <vd:productItem>"; 
	
// <dt:globalID> 	dt:GTINType 	[0..1] 	Trade Identification Number (GTIN) - идентификационный номер продукции производителя. Уникальность не проверяется. 	<dt:globalID>85672854</dt:globalID>
//·<dt:name> 	bs:String255 	[0..1] 	Наименование продукции. 	<dt:name>Наименование</dt:name>
// <dt:code> 	bs:String255 	[0..1] 	Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
// Артикул должен быть уникален в пределах одного производителя 	<dt:code>12</dt:code> 	

	Если ЗначениеЗаполнено(док.Продукция_Элемент.GUID) Тогда
		Запрос = Запрос + "
		|              <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>";
	КонецЕсли;
	Попытка
		Запрос = Запрос + "
		|              <dt:name>"+ СокрЛП(док.НаименованиеПродукции) +"</dt:name>";
	Исключение
		Запрос = Запрос + "
		|              <dt:name>"+ СокрЛП(док.Продукция_Элемент.Наименование) +"</dt:name>";
	КонецПопытки;


//	Если ЗначениеЗаполнено(док.GTIN) Тогда
//		Запрос = Запрос + "
//		|              <dt:globalID>"+ СокрЛП(док.GTIN) +"</dt:globalID>";
//	КонецЕсли;
//	Если ЗначениеЗаполнено(док.Артикул)  Тогда
//		Запрос = Запрос + "
//		|              <dt:code>"+ СокрЛП(док.Артикул) +"</dt:code>";
//	КонецЕсли;
	
// сведения о фасовке
	Если ЗначениеЗаполнено(док.ФасовкаФормаУпаковки) Тогда
		Запрос = Запрос + "
		|             <dt:packaging>
		|               <dt:packagingType>
		|                  <bs:guid>"+ СокрЛП(док.ФасовкаФормаУпаковки.GUID) +"</bs:guid>
		|               </dt:packagingType>
		|               <dt:quantity>"+ Формат(док.ФасовкаКоличество, "ЧРД=.; ЧГ=0") +"</dt:quantity>
		|               <dt:volume>"+ Формат(док.ФасовкаОбъем, "ЧРД=.; ЧГ=0") +"</dt:volume>
		|               <dt:unit>
		|                  <bs:guid>"+ СокрЛП(док.ФасовкаЕдиницаИзм.GUID) +"</bs:guid>
		|               </dt:unit>
		|             </dt:packaging>";
	КонецЕсли;
	
	Запрос = Запрос + "
			|            </vd:productItem>
			|            <vd:volume>"+ Формат(Док.Количество, "ЧРД=.; ЧГ=0") +"</vd:volume>
			|            <vd:unit>
			|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
			|            </vd:unit>";
		Если (ЗначениеЗаполнено(док.ДатаИзготовления1)) или (ЗначениеЗаполнено(док.ДатаИзготовления2)) или (ЗначениеЗаполнено(док.ДатаИзготовления)) Тогда
			Запрос = Запрос + "
        				|                <vd:dateOfProduction>"; 

			Если (ЗначениеЗаполнено(док.ДатаИзготовления1)) Тогда
				Запрос = Запрос + "
				|              <vd:firstDate>
				|                <dt:year>"+ДатаГод(док.ДатаИзготовления1)+"</dt:year>
				|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</dt:month>
				|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</dt:day>
				|                <dt:hour>0</dt:hour>
				|              </vd:firstDate>";
			КонецЕсли;
			Если ((ЗначениеЗаполнено(док.ДатаИзготовления2)) и 
					(док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
				Запрос = Запрос + "
				|              <vd:secondDate>
				|                <dt:year>"+ ДатаГод(док.ДатаИзготовления2) +"</dt:year>
				|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</dt:month>
				|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</dt:day>
				|                <dt:hour>0</dt:hour>
				|              </vd:secondDate>";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(док.ДатаИзготовления) Тогда
				Запрос = Запрос + "
				|              <vd:informalDate>"+ СокрЛП(док.ДатаИзготовления) +"</vd:informalDate>";
			КонецЕсли;
			Запрос = Запрос + "
			|                </vd:dateOfProduction>"; 
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(док.ДатаСрокГодности1) ) или (ЗначениеЗаполнено(док.ДатаСрокГодности2) ) или (ЗначениеЗаполнено(док.ДатаСрокГодности)) Тогда
			Запрос = Запрос + "
				|                <vd:expiryDate>";
			Если (ЗначениеЗаполнено(док.ДатаСрокГодности1)) Тогда
				Запрос = Запрос + "
				|              <vd:firstDate>
				|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</dt:year>
				|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</dt:month>
				|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</dt:day>
				|                <dt:hour>0</dt:hour>
				|              </vd:firstDate>";
			КонецЕсли;
			Если ((ЗначениеЗаполнено(док.ДатаСрокГодности2)) и 
					(док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
				Запрос = Запрос + "
				|              <vd:secondDate>
				|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</dt:year>
				|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</dt:month>
				|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</dt:day>
				|                <dt:hour>0</dt:hour>
				|              </vd:secondDate>";
			КонецЕсли; 
			Если ЗначениеЗаполнено(док.ДатаСрокГодности) Тогда
				Запрос = Запрос + "
				|              <vd:informalDate>"+ СокрЛП(док.ДатаСрокГодности) +"</vd:informalDate>";
			КонецЕсли;
			
			Запрос = Запрос + "
				|            </vd:expiryDate>";
		КонецЕсли;
		Попытка
			Если ЗначениеЗаполнено(док.НомерПартии) Тогда
				Запрос = Запрос + "
				|			<vd:batchID>"+СокрЛП(док.НомерПартии)+"</vd:batchID>";
			КонецЕсли;	
		Исключение КонецПопытки;	

//			|           <vd:batchID>BN-875999954</vd:batchID>    Уникальный идентификатор производственной партии продукции.
		Попытка ГУИДСтраны = СокрЛП( док.Страна_Гуид); Исключение ГУИДСтраны = СокрЛП( СписокКонстант.Получить("Страна").GUID); КонецПопытки;

		Запрос = Запрос + "
			|			<vd:perishable>"+НашеБулево(док.скоропортящийся)+"</vd:perishable>
			|			<vd:origin>
			|            <vd:country>
			|              <bs:guid>"+ ГУИДСтраны +"</bs:guid>
			|            </vd:country>";


			
		Если ЗначениеЗаполнено(Док.ПроизводителиСписок) Тогда  
			СпПроизводители = ЗначениеИзСтрокиВнутр(Док.ПроизводителиСписок);
			Для Каждого Производитель из СпПроизводители Цикл
				Запрос=Запрос+"
				|        		<vd:producer>
				|          			<dt:enterprise>
				|            			<bs:guid>"+ СокрЛП(Производитель.Площадка.GUID) +"</bs:guid>
				|          			</dt:enterprise>
				|					<dt:role>"+ СокрЛП(Производитель.Роль) +"</dt:role>
				|        		</vd:producer>";
			КонецЦикла;
		КонецЕсли;
			
			
		Запрос = Запрос + "
	|                </vd:origin>
	|                <vd:lowGradeCargo>"+НашеБулево(док.некачественный)+"</vd:lowGradeCargo>"; 
//<vd:packageList> 	dt:PackageList 	[0..1] 	Список физической упаковки. ЖД Уровни упаковки
	Если ЗначениеЗаполнено(док.УровниУпаковки) Тогда 
    	ТЗУровни = ЗначениеИзСтрокиВнутр(док.УровниУпаковки);
	Иначе
		ТЗУровни = "";
	КонецЕсли;
	Если ТипЗнч(ТЗУровни) = Тип("ТаблицаЗначений") Тогда
		Запрос=Запрос+"
		|                <vd:packageList>";

		Для каждого стрУровня из ТЗУровни Цикл 
			Запрос=Запрос+"
			|                  <dt:package>
			|                    <dt:level>"+стрУровня.НомерУровня+"</dt:level>";
			Если ЗначениеЗаполнено(ТЗУровни.Упаковка.GUID) Тогда
				Запрос=Запрос+"
				|                    <dt:packingType>
				|                      <bs:guid>"+ СокрЛП(стрУровня.Упаковка.GUID) +"</bs:guid>
				|                    </dt:packingType>";
			КонецЕсли;
			Запрос=Запрос+"
			|                    <dt:quantity>"+ Формат(стрУровня.Колво,"ЧРД=.; ЧГ=0") +"</dt:quantity>";
			Попытка
				СзМаркировок = ЗначениеИзСтрокиВнутр(стрУровня.Маркировки);
			исключение
				СзМаркировок = "";
			КонецПопытки;
			Если ТипЗнч(СзМаркировок) = Тип("СписокЗначений") Тогда
				для каждого стрМаркировки из СзМаркировок Цикл				
					стрМарк = стрМаркировки.Представление;
					ЗнМарк = стрМаркировки.Значение;
					
					Запрос=Запрос+"
					|                    <dt:productMarks class='"+стрМарк+"'>"+знМарк+"</dt:productMarks>";
				КонецЦикла;
			КонецЕсли;
			Запрос=Запрос+"
       		|                  </dt:package>";

		КонецЦикла;
		Запрос=Запрос+"
		|                </vd:packageList>";

	КонецЕсли;

//		ТЗВСД.cargoInspected = ?(cargoInspected="true",1,0);//cargoInspected;
//		ТЗВСД.РезультатыИсследований = Перечисление.ВСД2_РезультатИсследований.ЗначениеПоИдентификатору(cargoExpertized); 

		Запрос=Запрос+"
	|              </vd:batch>
	|              </vd:certifiedConsignment>
    |              <vd:authentication>
    |                <vd:purpose>
    |                  <bs:guid>"+ СокрЛП( СписокКонстант.Получить("Цель").Guid ) +"</bs:guid>
    |                </vd:purpose>
    |                <vd:cargoInspected>"+ НашеБулево(док.cargoInspected) +"</vd:cargoInspected>
    |                <vd:cargoExpertized>"+док.РезультатыИсследований.Идентификатор()+"</vd:cargoExpertized>
    |                <vd:locationProsperity>"+СокрЛП(Док.Местность)+"</vd:locationProsperity>
    |                <vd:specialMarks>"+СокрЛП(док.ОсобыеОтметки)+"</vd:specialMarks>
    |              </vd:authentication>";
//    |              <vd:precedingVetDocuments>ВСД №5891</vd:precedingVetDocuments> 



	//ЖД не факт, что в Бумажном это нужно, оставлю только ТТН 
//	Если ЗначениеЗаполнено(док.СвязанныеДокументы) Тогда 
//    	ТЗДокументов = ЗначениеИзСтрокиВнутр(док.СвязанныеДокументы);
//	Иначе
//		ТЗДокументов = "";
//	КонецЕсли;
	Если ЗначениеЗаполнено(док.ТтнНомер) Тогда
		Запрос=Запрос+"
    	|              <vd:referencedDocument>
		|                <vd:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</vd:issueSeries>
		|                <vd:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:issueNumber>
	    |                <vd:issueDate>"+ ДатаXML(док.ТтнДата) +"</vd:issueDate>
    	|                <vd:type>1</vd:type>
	    |                <vd:relationshipType>1</vd:relationshipType>
    	|              </vd:referencedDocument>";
	КонецЕсли;
	
		
		Запрос=Запрос+"
    |              <vd:statusChange>
    |                <vd:status>CONFIRMED</vd:status>
    |                <vd:specifiedPerson>
    |                  <vd:fio>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_fio")) +"</vd:fio>
    |                  <vd:post>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_post")) +"</vd:post>
    |                </vd:specifiedPerson>
    |                <vd:actualDateTime>"+ ДатаXML(док.ДатаДок,"T00:00:00") +"</vd:actualDateTime>
    |              </vd:statusChange>";
                
	
	Возврат Запрос;
КонецФункции

// Запрос на гашение ВСД входящего ЖД 08/08/2018
Функция ВСД2_входящийГашение_ЗапросXML(док)
//	ТермическиеУсловияПеревозки2 = Новый("СписокЗначений");
//	ТермическиеУсловияПеревозки2.Добавить("FROZEN","1");
//	ТермическиеУсловияПеревозки2.Добавить("CHILLED","2");
//	ТермическиеУсловияПеревозки2.Добавить("COOLED","3");
//	ТермическиеУсловияПеревозки2.Добавить("VENTILATED","4");
	
		Запрос="
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>  
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:processIncomingConsignmentRequest>
	|            <merc:localTransactionId>"+СокрЛП(док.НомерДок)+"</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>";
   Запрос = запрос +"
	|            <merc:delivery>
	|              <vd:deliveryDate>" + ДатаXML(?(ЗначениеЗаполнено(док.ТтнДата),док.ТтнДата,ТекущаяДата()), "T00:00:00") + "</vd:deliveryDate>
	|              <vd:consignor>
	|                <dt:businessEntity>
	|                  <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
	|                </dt:businessEntity>";
	Если ЗначениеЗаполнено(док.Отправитель_Площадка) Тогда // У импортных ВСД отсутствует
		Запрос = запрос +"
		|                <dt:enterprise>
		|                  <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
		|                </dt:enterprise>";
	КонецЕсли;
	// У импортных ВСД может отсутствовать
	ВремПолучатель_Площадка = ?(ЗначениеЗаполнено(док.Получатель_Площадка) ,док.Получатель_Площадка,СписокКонстант.Получить("Отправитель_Площадка")); // возьмем из Парметров
   Запрос = запрос +"
	|              </vd:consignor>
	|              <vd:consignee>
	|                <dt:businessEntity>
	|                  <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
	|                </dt:businessEntity>
	|                <dt:enterprise>
	|                  <bs:guid>"+ СокрЛП(ВремПолучатель_Площадка.GUID) +"</bs:guid>
	|                </dt:enterprise>
	|              </vd:consignee>
	|              <vd:consignment>
	|                <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
	|                <vd:product>
	|                  <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
	|                </vd:product>
	|                <vd:subProduct>
	|                  <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
	|                </vd:subProduct>
	|                <vd:productItem>"; 
	
// <dt:globalID> 	dt:GTINType 	[0..1] 	Trade Identification Number (GTIN) - идентификационный номер продукции производителя. Уникальность не проверяется. 	<dt:globalID>85672854</dt:globalID>
//·<dt:name> 	bs:String255 	[0..1] 	Наименование продукции. 	<dt:name>Наименование</dt:name>
// <dt:code> 	bs:String255 	[0..1] 	Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
// Артикул должен быть уникален в пределах одного производителя 	<dt:code>12</dt:code> 	

	Если ЗначениеЗаполнено(док.Продукция_Элемент.GUID) Тогда
		Запрос = Запрос + "
		|              <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>";
	КонецЕсли;
	Попытка
		Запрос = Запрос + "
		|              <dt:name>"+ СокрЛП(док.НаименованиеПродукции) +"</dt:name>";
	Исключение
		Запрос = Запрос + "
		|              <dt:name>"+ СокрЛП(док.Продукция_Элемент.Наименование) +"</dt:name>";
	КонецПопытки;
	
//	ЖД Ошибка при указании ГТИН - Element 'globalID' not expected
//	Если ЗначениеЗаполнено(док.GTIN)  Тогда
//		Запрос = Запрос + "
//		|              <dt:globalID>"+ СокрЛП(док.GTIN) +"</dt:globalID>";
//	КонецЕсли;
// ЖД На наличие Артикула Меркурий никак не реагирует
//	Если ЗначениеЗаполнено(док.Артикул)  Тогда
//		Запрос = Запрос + "
//		|              <dt:code>"+ СокрЛП(док.Артикул) +"</dt:code>";
//	КонецЕсли;
	
// сведения о фасовке
	Если ЗначениеЗаполнено(док.ФасовкаФормаУпаковки)  Тогда
		Запрос = Запрос + "
		|             <dt:packaging>
		|               <dt:packagingType>
		|                  <bs:guid>"+ СокрЛП(док.ФасовкаФормаУпаковки.GUID) +"</bs:guid>
		|               </dt:packagingType>
		|               <dt:quantity>"+ Формат(док.ФасовкаКоличество, "ЧРД=.; ЧГ=0") +"</dt:quantity>
		|               <dt:volume>"+ Формат(док.ФасовкаОбъем, "ЧРД=.; ЧГ=0") +"</dt:volume>
		|               <dt:unit>
		|                  <bs:guid>"+ СокрЛП(док.ФасовкаЕдиницаИзм.GUID) +"</bs:guid>
		|               </dt:unit>
		|             </dt:packaging>";
	КонецЕсли;


	Запрос = Запрос + "
			|            </vd:productItem>
			|            <vd:volume>"+ Формат(Док.Количество, "ЧРД=.; ЧГ=0") +"</vd:volume>
			|            <vd:unit>
			|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
			|            </vd:unit>";
	
		Если (ЗначениеЗаполнено(док.ДатаИзготовления1)) или (ЗначениеЗаполнено(док.ДатаИзготовления2)) или (ЗначениеЗаполнено(док.ДатаИзготовления)) Тогда
			Запрос = Запрос + "
        				|                <vd:dateOfProduction>"; 

			Если (ЗначениеЗаполнено(док.ДатаИзготовления1)) Тогда
				Запрос = Запрос + "
				|              <vd:firstDate>
				|                <dt:year>"+ДатаГод(док.ДатаИзготовления1)+"</dt:year>
				|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</dt:month>
				|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</dt:day>
				|                <dt:hour>0</dt:hour>
				|              </vd:firstDate>";
			КонецЕсли;
			Если ((ЗначениеЗаполнено(док.ДатаИзготовления2)) и 
					(док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
				Запрос = Запрос + "
				|              <vd:secondDate>
				|                <dt:year>"+ ДатаГод(док.ДатаИзготовления2) +"</dt:year>
				|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</dt:month>
				|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</dt:day>
				|                <dt:hour>0</dt:hour>
				|              </vd:secondDate>";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(док.ДатаИзготовления) Тогда
				Запрос = Запрос + "
				|              <vd:informalDate>"+ СокрЛП(док.ДатаИзготовления) +"</vd:informalDate>";
			КонецЕсли;
			Запрос = Запрос + "
			|                </vd:dateOfProduction>"; 
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(док.ДатаСрокГодности1) ) или (ЗначениеЗаполнено(док.ДатаСрокГодности2) ) или (ЗначениеЗаполнено(док.ДатаСрокГодности)) Тогда
			Запрос = Запрос + "
				|                <vd:expiryDate>";
			Если (ЗначениеЗаполнено(док.ДатаСрокГодности1)) Тогда
				Запрос = Запрос + "
				|              <vd:firstDate>
				|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</dt:year>
				|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</dt:month>
				|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</dt:day>
				|                <dt:hour>0</dt:hour>
				|              </vd:firstDate>";
			КонецЕсли;
			Если ((ЗначениеЗаполнено(док.ДатаСрокГодности2)) и 
					(док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
				Запрос = Запрос + "
				|              <vd:secondDate>
				|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</dt:year>
				|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</dt:month>
				|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</dt:day>
				|                <dt:hour>0</dt:hour>
				|              </vd:secondDate>";
			КонецЕсли; 
			Если ЗначениеЗаполнено(док.ДатаСрокГодности) Тогда
				Запрос = Запрос + "
				|              <vd:informalDate>"+ СокрЛП(док.ДатаСрокГодности) +"</vd:informalDate>";
			КонецЕсли;
			
			Запрос = Запрос + "
				|            </vd:expiryDate>";
		КонецЕсли;
		Попытка
			Если ЗначениеЗаполнено(док.НомерПартии) Тогда
				Попытка
					спНомераПартий = ЗначениеИзСтрокиВнутр(Док.НомерПартии);
					Для Каждого СтрокаНомера из спНомераПартий Цикл
						Запрос = Запрос + "
						|			<vd:batchID>"+СокрЛП(СтрокаНомера.Значение)+"</vd:batchID>";
					КонецЦикла;
				Исключение
				 	Сообщить("Не удалось преобразовать номера партий");
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;	
		Исключение КонецПопытки;	

		// По идее страну мы загрузили в ТЗ, вот только в документе ее нет
		Попытка ГУИДСтраны = СокрЛП( док.Страна_Гуид); Исключение ГУИДСтраны = СокрЛП( СписокКонстант.Получить("Страна").GUID); КонецПопытки;
		Запрос = Запрос + "
			|			<vd:perishable>"+НашеБулево(док.скоропортящийся)+"</vd:perishable>
			|			<vd:origin>
			|            <vd:country>
			|              <bs:guid>"+ ГУИДСтраны +"</bs:guid>
			|            </vd:country>";
			
		Если ЗначениеЗаполнено(Док.ПроизводителиСписок) Тогда    
			СпПроизводители = ЗначениеИзСтрокиВнутр(Док.ПроизводителиСписок);
			Для Каждого Производитель из СпПроизводители Цикл
				Запрос=Запрос+"
				|        		<vd:producer>
				|          			<dt:enterprise>";
				Если ЗначениеЗаполнено(Производитель.Площадка) Тогда
					Запрос=Запрос+"	
					|            			<bs:guid>"+ СокрЛП(Производитель.Площадка.GUID) +"</bs:guid>";
				КонецЕсли;
				Если ЗначениеЗаполнено(Производитель.Имя) Тогда
					Запрос=Запрос+"	
					|            			<dt:name>"+ СокрЛП(Производитель.Имя) +"</dt:name>";
				КонецЕсли;
				Запрос=Запрос+"
				|          			</dt:enterprise>
				|					<dt:role>"+ СокрЛП(Производитель.Роль) +"</dt:role>
				|        		</vd:producer>";
			КонецЦикла;
		КонецЕсли;
			
			
		Запрос = Запрос + "
	|                </vd:origin>
	|                <vd:lowGradeCargo>"+НашеБулево(док.некачественный)+"</vd:lowGradeCargo>"; 
//<vd:packageList> 	dt:PackageList 	[0..1] 	Список физической упаковки. ЖД Уровни упаковки
	Если ЗначениеЗаполнено(док.УровниУпаковки) Тогда 
    	ТЗУровни = ЗначениеИзСтрокиВнутр(док.УровниУпаковки);
	Иначе
		ТЗУровни = "";
	КонецЕсли;
	Если ТипЗнч(ТЗУровни) = Тип("ТаблицаЗначений") Тогда
		Запрос=Запрос+"
		|                <vd:packageList>";
		
		для каждого стрУровня из ТЗУровни Цикл 		
			Запрос=Запрос+"
			|                  <dt:package>
			|                    <dt:level>"+стрУровня.НомерУровня+"</dt:level>";
			Если ЗначениеЗаполнено(стрУровня.Упаковка.GUID) Тогда
				Запрос=Запрос+"
				|                    <dt:packingType>
				|                      <bs:guid>"+ СокрЛП(стрУровня.Упаковка.GUID) +"</bs:guid>
				|                    </dt:packingType>";
			КонецЕсли;
			Запрос=Запрос+"
			|                    <dt:quantity>"+ Формат(стрУровня.Колво,"ЧРД=.; ЧГ=0") +"</dt:quantity>";
			Попытка	СзМаркировок = ЗначениеИзСтрокиВнутр(стрУровня.Маркировки); исключение СзМаркировок = ""; КонецПопытки;
			Если ТипЗнч(СзМаркировок) = Тип("СписокЗначений") Тогда
				для каждого стрМаркировки из СзМаркировок Цикл				
					стрМарк=стрМаркировки.Представление;
					ЗнМарк = стрМаркировки.Значение;					
					Запрос=Запрос+"
					|                    <dt:productMarks class='"+стрМарк+"'>"+знМарк+"</dt:productMarks>";
				КонецЦикла;
			КонецЕсли;
			Запрос=Запрос+"
       		|                  </dt:package>";
		КонецЦикла;
		Запрос=Запрос+"
		|                </vd:packageList>";
	КонецЕсли;


		Запрос=Запрос+"
	|              </vd:consignment>";
		Если ЗначениеЗаполнено(СокрЛП(док.Перевозчик_ХозСубъект)) Тогда  
			Запрос=Запрос+"			
			|        <vd:broker>
			|          <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
			|        </vd:broker>";
		КонецЕсли;
		Если ЗначениеЗаполнено(СокрЛП(док.ТипТС)) Тогда  
			Запрос=Запрос+"			
			|        <vd:transportInfo>
			|          <vd:transportType>"+СокрЛП(док.ТипТС)+"</vd:transportType>
			|          <vd:transportNumber>";
	
			Если СокрЛП(Док.ТипТС) = "1" Тогда
				Попытка
					// Странный важный момент - контейнер д.б. первым !
				Если ЗначениеЗаполнено(док.номерКонтейнера) Тогда
			    	Запрос = Запрос+"
					|            <vd:containerNumber>"+ СокрЛП(док.номерКонтейнера) +"</vd:containerNumber>
					|";
				КонецЕсли;
				Исключение КонецПопытки;

				Запрос = Запрос+"
				|            <vd:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</vd:vehicleNumber>
				|"; 
				Попытка
				Если ЗначениеЗаполнено(док.номерПолуприцепа) Тогда
			    	Запрос = Запрос+"
					|            <vd:trailerNumber>"+ СокрЛП(док.номерПолуприцепа) +"</vd:trailerNumber>
					|";
				КонецЕсли;
				Исключение КонецПопытки;
			иначеЕсли СокрЛП(Док.ТипТС) = "2" Тогда
		    Запрос = Запрос+"
			|            <vd:wagonNumber>"+ СокрЛП(док.номерАвто) +"</vd:wagonNumber>
			|"; 
			иначеЕсли СокрЛП(Док.ТипТС) = "3" Тогда
		    Запрос = Запрос+"
			|            <vd:flightNumber>"+ СокрЛП(док.номерАвто) +"</vd:flightNumber>
			|";
			иначеЕсли (СокрЛП(Док.ТипТС) = "4") или (СокрЛП(Док.ТипТС) = "5") или (СокрЛП(Док.ТипТС) = "6") Тогда
		    Запрос = Запрос+"
			|            <vd:shipName>"+ СокрЛП(док.номерАвто) +"</vd:shipName>
			|";
			
			КонецЕсли;	
			Запрос=Запрос+"
			|          </vd:transportNumber>
			|        </vd:transportInfo>";
		КонецЕсли;
		Если ЗначениеЗаполнено(док.ТермическоеСостояние) Тогда		
			Запрос=Запрос+"			
			|              <vd:transportStorageType>"+ ТермическиеУсловияПеревозки2.Получить( док.ТермическоеСостояние - 1 ).Значение +"</vd:transportStorageType>";
		КонецЕсли;	
//	Запрос=Запрос+"			
//	|              <vd:transportStorageType>"+ Док.ТермическоеСостояние +"</vd:transportStorageType>";
// сложный вариант с перегрузками Пример
//              <vd:shipmentRoute>
//                <vd:routePoint>
//                  <vd:sqnId>1</vd:sqnId>
//                  <vd:enterprise>
//                    <bs:guid>ac264dc6-a3eb-4b0f-a86a-9c9577209d6f</bs:guid>
//                  </vd:enterprise>
//                  <vd:nextTransport>
//                    <vd:transportType>1</vd:transportType>
//                    <vd:transportNumber>
//                      <vd:vehicleNumber>в206кв58</vd:vehicleNumber>
//                    </vd:transportNumber>
//                  </vd:nextTransport>
//                </vd:routePoint>
//              </vd:shipmentRoute>

// ЖД в тестовой для гашения достаточно только ТТН, связанных доков не нужно !!!!
//	Если ТипЗнч(ТЗДокументов) = Тип("ТаблицаЗначений") Тогда
//		Для каждого СтрДокумент из ТЗДокументов Цикл
//		КонецЦикла;
//	КонецЕсли;

	Запрос=Запрос+"			
	|              <vd:accompanyingForms>";
 // Для гашения нужен только ТТН, при "Без ТТН" - waybill не нужен
 	Если ЗначениеЗаполнено(док.ТтнНомер) Тогда
		Запрос=Запрос+"			
		|                <vd:waybill>  
		|                  <vd:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</vd:issueSeries>
		|                  <vd:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:issueNumber>
		|                  <vd:issueDate>"+ ДатаXML(док.ТтнДата) +"</vd:issueDate>";
		Попытка
			Запрос=Запрос+"			
			|                  <vd:type>"+ док.ТтнТип +"</vd:type>";
		Исключение
			//Добавить Реквизит ттнТип в документ ВСД2_входящий
			Сообщить("Добавьте Реквизит ттнТип (число 1.0) в документ ВСД2_входящий");
			Сообщить("Отправляю с типом 1 - Товарно транспортная накладная");
			Запрос=Запрос+"			
			|                  <vd:type>1</vd:type>";
		КонецПопытки;
		Запрос=Запрос+"			
		|                </vd:waybill>";
	КонецЕсли;	
		
	Запрос=Запрос+"		
	|                <vd:vetCertificate>";
	Если док.ВидВСД=1 Тогда
		Запрос = Запрос + ВСД2_ВходящийБумажныйГашение_ЗапросXML(док);
	Иначе	
		Запрос=Запрос+"
		|                  <bs:uuid>"+ СокрЛП(док.UUID) +"</bs:uuid>";
	КонецЕсли;
	
	Запрос=Запрос+"			
	|                </vd:vetCertificate>
	|              </vd:accompanyingForms>
	|            </merc:delivery>
	|            <merc:deliveryFacts>";
	Если док.ВидВСД=1 Тогда
		Запрос=Запрос+"			
		|              <vd:vetCertificatePresence>PAPER</vd:vetCertificatePresence>";
	Иначе
		Запрос=Запрос+"			
		|              <vd:vetCertificatePresence>ELECTRONIC</vd:vetCertificatePresence>";
	КонецЕсли;
	
//	|";
//<vd:docInspection> 	vd:DeliveryInspection 	[1..1] 	Соответствуют ли сведения о партии, указанной в ВСД, фактическим. 	
//<vd:responsible> 	dt:User 	[1..1] 	Пользователь, указавший результат соответствия. 	
//<vd:login> 	xs:NCName 	[0..1] 	Логин пользователя, зарегистрированного в системе Меркурий. 	<vd:login>user_ab_150101</vd:login>
//</vd:responsible> 				
//·<vd:result> 	vd:DeliveryInspectionResult 	[1..1] 	Результат соответствия. 	<vd:result>CORRESPONDS</vd:result>
//</vd:docInspection> 

	Запрос=Запрос+"			
	|              <vd:docInspection>
	|                <vd:responsible>
	|                  <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_login")) +"</vd:login>
	|                </vd:responsible>
	|                <vd:result>CORRESPONDS</vd:result>
	|              </vd:docInspection>
	|              <vd:vetInspection>
	|                <vd:responsible>
	|                  <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_login")) +"</vd:login>
	|                </vd:responsible>
	|                <vd:result>CORRESPONDS</vd:result>
	|              </vd:vetInspection>
	|              <vd:decision>ACCEPT_ALL</vd:decision>
	|            </merc:deliveryFacts>";
	
	// Акт несоотв.
   	Если ФлАктНесоответствия = 1 Тогда
	Запрос = Запрос+"
	|            <merc:discrepancyReport>
//	|              <vd:issueSeries>S1624387448</vd:issueSeries>  Для электронного акта несоответствия серия генерируется автоматически
//	|              <vd:issueNumber>N1584929183</vd:issueNumber>
	|              <vd:issueDate>"+ ДатаXML(док.ТтнДата) +"</vd:issueDate>
	|              <vd:reason>
	|                <vd:name>"+СокрЛП(тПричинаАкта)+"</vd:name>
	|              </vd:reason>
	|              <vd:description>"+?(НЕ(ЗначениеЗаполнено(тОписаниеНесоответствия)),"Описание несоответствия",СокрЛП(тОписаниеНесоответствия)) +"</vd:description>
	|            </merc:discrepancyReport>";
    КонецЕсли;

	Запрос = Запрос+"
	|          </merc:processIncomingConsignmentRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";	
	

	Возврат Запрос;
КонецФункции

Функция ПолучитьРезультат_ГашениеВСД2(applicationID, докСсылка="" ) Экспорт
	
	//стандартное поведение функции
	Если НЕ(ЗначениеЗаполнено(applicationID)) Тогда
		Сообщить("Пустая ссылка applicationID","!");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	Пауза( );
	
	Сообщить("Отправляем запрос ["+докСсылка+"]" );
	Результат = КомпонентаНаСервере.SendRequestResult( applicationID );

	Если ЗначениеЗаполнено(докСсылка) Тогда 
		докСсылка.applicationID = СокрЛП(КомпонентаНаСервере.ApplicationId);
		докСсылка.Статус 		= СокрЛП(КомпонентаНаСервере.Status);
		докСсылка.Комментарий = СокрЛП(КомпонентаНаСервере.ErrorMessage);		
		Сообщить(" статус = "+докСсылка.Статус );
		Если ЗначениеЗаполнено(СокрЛП(докСсылка.Комментарий)) Тогда
			Сообщить("Ошибка: "+докСсылка.Комментарий);
		КонецЕсли;
		Если ТипЗнч(докСсылка) = Тип("ДокументСсылка.ВСД_Входящий") Тогда
		// Если допилить при необходимости код 7.7
//			СохранитьСтатусЗапроса(докСсылка);
//			Если (СокрЛП(докСсылка.Статус)="COMPLETED") Тогда
//				ДокОб = СоздатьОбъект("Документ");
//				ДокОб.НайтиДокумент(докСсылка);			
//				ДокОб.Провести();
//			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	ЗагрузитьXML_Партии2(КомпонентаНаСервере.LogFilename, "")	;
		
	УдалитьXML( КомпонентаНаСервере.LogFilename );
	
	Возврат Результат;
КонецФункции

Функция Отправить_ВСД2_ВходящийГашение(док)

	Если Проверка_ВСД2_Входящий(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;
	
	Если (КомпонентаНаСервере = Неопределено) и ЗначениеЗаполнено(АдресКомпонентыНаСервере) тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	
	ЗапросXML = ВСД2_входящийГашение_ЗапросXML(док);
	метод = КомпонентаНаСервере.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    //метод.Service = "platform/services/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	
	УдалитьXML( КомпонентаНаСервере.LogFilename);
	Если ЗначениеЗаполнено(appID) Тогда
		
		Результат = ПолучитьРезультат_ГашениеВСД2(appID, док );
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ГашениеВСД2(appID, док );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;
	
КонецФункции 

Процедура ОтправкаЗапросовНаГашение() Экспорт
	Отправлено = 0;
	Для каждого СтрокаТЗ из ВСДВходящие Цикл 
		Если НЕ(СтрокаТЗ.Отметка) Тогда
		    Продолжить;
		КонецЕсли;

		Если ФлНеЗагружать = 0 Тогда
			Если НЕ(ЗначениеЗаполнено(СтрокаТЗ.ДокВСД)) Тогда
			    Продолжить;
			КонецЕсли;
			Если СтрокаТЗ.ДокВСД.Проведен() = 1 Тогда
			    Продолжить;
			КонецЕсли;
			Рез = Отправить_ВСД2_ВходящийГашение(СтрокаТЗ.ДокВСД);			
		Иначе
			Если СокрЛП(СтрокаТЗ.Статус) = "COMPLETED" Тогда
				Сообщить("Партия уже оформлена. uuid "+СтрокаТЗ.uuid);
		    	Продолжить;
			КонецЕсли;
			Рез = Отправить_ВСД2_ВходящийГашение(СтрокаТЗ); // не создаем документ ВСД2_Входящий в 1с
		КонецЕсли;
		Отправлено = Отправлено + 1;
		СтрокаТЗ.Отметка = 0;
	КонецЦикла;
	
	Если Отправлено>0 Тогда
    	//ВремТЗ.Выгрузить(ВСДВходящие); 
		//РаскраситьСписокДокументов();    
	КонецЕсли;
	
КонецПроцедуры // Отправка()

Функция ПолучитьСписокВСД2_ЗапросXML(ГУИД_Площадки, vetDocumentType, vetDocumentStatus, Смещение)

	Запрос = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+ СокрЛП( СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+ СокрЛП( СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:getVetDocumentListRequest>
	|            <merc:localTransactionId>a1</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
	|            </merc:initiator>
	|            <bs:listOptions>
	|              <bs:count>1000</bs:count>
	|              <bs:offset>"+Смещение+"</bs:offset>
	|            </bs:listOptions>
	|            <vd:vetDocumentType>"+ vetDocumentType +"</vd:vetDocumentType>
	|            <vd:vetDocumentStatus>"+ vetDocumentStatus +"</vd:vetDocumentStatus>
	|            <dt:enterpriseGuid>"+ ГУИД_Площадки +"</dt:enterpriseGuid>
	|          </merc:getVetDocumentListRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>	
	|";
	Возврат Запрос;
КонецФункции

Функция  ПолучитьСписокВСД(Предприятие, vetDocumentType	= "INCOMING", vetDocumentStatus = "CONFIRMED", Смещение) Экспорт
	ВСДВходящие.Очистить();
	Если НЕ(ЗначениеЗаполнено(Предприятие.GUID)) Тогда 
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;
	
	Если (КомпонентаНаСервере = Неопределено) и ЗначениеЗаполнено(АдресКомпонентыНаСервере) тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	
	ЗапросXML = ПолучитьСписокВСД2_ЗапросXML(СокрЛП(Предприятие.GUID), vetDocumentType, vetDocumentStatus, Смещение);
	
	метод = КомпонентаНаСервере.GetMethod();
	метод.Service = "platform/services/2.0/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";	
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
		
//	appID = Получить_ApplicationID(Компонента.LogFilename);
	
	УдалитьXML( КомпонентаНаСервере.LogFilename);
	Результат = "";
	
	Если ФлНеЗагружать = 0 Тогда  // - решается передачей параметра  в ПолучитьРезультат_ВСД2
//		СоздатьВСД2Входящие();    
	КонецЕсли;

	Если ЗначениеЗаполнено(appID) Тогда
		Результат = ПолучитьРезультат_ВСД2(appID, ВСДВходящие);//ПолучитьСписокВСД2_ОтветXML(appID ); 
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД2(appID, ВСДВходящие);//ПолучитьСписокВСД2_ОтветXML( appID );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	УдалитьXML( КомпонентаНаСервере.LogFilename);
//	РаскраситьСписокДокументов();

	Возврат Результат;
	
КонецФункции

// ***************** Гашение окончание

// ***************** Классификаторы Меркурий
Функция ЗаполнитьФормыУпаковки() Экспорт
	//http://help.vetrf.ru/wiki/PackingForm
// Соответствие между старым справочником упаковок и новым классификатором. 
 НайтиФормуУпаковки("fedf3e32-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
 НайтиФормуУпаковки("fedf401c-053c-11e1-99b4-d8d385fbc9e8","Мешок большой");
 НайтиФормуУпаковки("fedf412a-053c-11e1-99b4-d8d385fbc9e8","Бочка");
 НайтиФормуУпаковки("fedf422e-053c-11e1-99b4-d8d385fbc9e8","Банка, жестяная (консервная)");
 НайтиФормуУпаковки("fedf4328-053c-11e1-99b4-d8d385fbc9e8","Коробка, картонная");
 НайтиФормуУпаковки("fedf4422-053c-11e1-99b4-d8d385fbc9e8","Мешок бумажный многослойный");
 НайтиФормуУпаковки("fedf451c-053c-11e1-99b4-d8d385fbc9e8","Мешок");
 НайтиФормуУпаковки("fedf4616-053c-11e1-99b4-d8d385fbc9e8","Мешок из полимерной ткани");
 НайтиФормуУпаковки("fedf46fc-053c-11e1-99b4-d8d385fbc9e8","Неупакованный или нерасфасованный");
 НайтиФормуУпаковки("fedf47ec-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
 НайтиФормуУпаковки("fedf48dc-053c-11e1-99b4-d8d385fbc9e8","Пакет");
 НайтиФормуУпаковки("fedf49cc-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
 НайтиФормуУпаковки("fedf55e8-053c-11e1-99b4-d8d385fbc9e8","Коробка, пенопластовая");
 НайтиФормуУпаковки("fedf56f6-053c-11e1-99b4-d8d385fbc9e8","Поддон");
 НайтиФормуУпаковки("fedf57f0-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
 НайтиФормуУпаковки("fedf58e0-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
 НайтиФормуУпаковки("fedf59da-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
 НайтиФормуУпаковки("fedf5ad4-053c-11e1-99b4-d8d385fbc9e8","Коробка");
 НайтиФормуУпаковки("fedf5bc4-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
 НайтиФормуУпаковки("fedf5cb4-053c-11e1-99b4-d8d385fbc9e8","Корзина");
 НайтиФормуУпаковки("fedf5d9a-053c-11e1-99b4-d8d385fbc9e8","Цистерна контейнер универсальный");
 НайтиФормуУпаковки("fedf5e80-053c-11e1-99b4-d8d385fbc9e8","Мешок, бумажный");
 НайтиФормуУпаковки("fedf5f70-053c-11e1-99b4-d8d385fbc9e8","Коробка, пенопластовая");
 НайтиФормуУпаковки("fedf606a-053c-11e1-99b4-d8d385fbc9e8","Контейнер средней грузоподъемности для массовых грузов");
 НайтиФормуУпаковки("fedf615a-053c-11e1-99b4-d8d385fbc9e8","Поддон");
 НайтиФормуУпаковки("fedf6240-053c-11e1-99b4-d8d385fbc9e8","Крюк");
 НайтиФормуУпаковки("fedf6344-053c-11e1-99b4-d8d385fbc9e8","Упаковка не определена");
 НайтиФормуУпаковки("a99ecd22-d2e8-11e4-8109-d89d67148660","Упаковка не определена");
 НайтиФормуУпаковки("dae4571f-d2e8-11e4-8109-d89d67148660","Коробка, пластмассовая");

//Новый классификатор упаковок	
	
 НайтиФормуУпаковки("5ad138ef-2493-4117-bf83-b76e4e5f609d","Ампула, защищенная");
 НайтиФормуУпаковки("1f9a9273-be63-4e4b-b29b-dfee1f0da370","Ампула, незащищенная");
 НайтиФормуУпаковки("975160ee-6cb0-4501-a821-9e3574f09446","Аэрозольная упаковка");
 НайтиФормуУпаковки("ec29a5a8-17fa-480c-a1d5-333a4411e393","Багаж");
 НайтиФормуУпаковки("0f4cc0b5-af48-4571-a06b-96504ec89012","Бадья");
 НайтиФормуУпаковки("93bdc740-0f32-4019-a3fd-ed661f2bc3b9","Бак");
 НайтиФормуУпаковки("bc29f22a-6086-4438-acd2-1f40a3b00a66","Балка");
 НайтиФормуУпаковки("491e8863-7850-4b06-8abc-52c09dd05d0d","Балка в пакете/пачке/связке");
 НайтиФормуУпаковки("6a10e7ae-b8ff-4249-a23d-1dec8128c4a1","Баллон, газовый");
 НайтиФормуУпаковки("0fdf7f98-6595-480b-8988-5544d8ff40b3","Баллон, защищенный");
 НайтиФормуУпаковки("49e8e70e-e539-4ce1-8d20-5a49ae276f77","Баллон, незащищенный");
 НайтиФормуУпаковки("8a9c1190-aeeb-498d-8e80-5ddfbc3f7df2","Бандероль");
 НайтиФормуУпаковки("0cc66f67-3111-4e77-9dcc-c9a9df725bed","Банка (емкостью менее 5 л) жестяная прямоугольная");
 НайтиФормуУпаковки("18a67ab0-21a3-4e8c-9058-d8f42820938d","Банка (емкостью менее 5 л) жестяная с ручкой и выпускным отверстием");
 НайтиФормуУпаковки("54ed0793-c32e-41c1-9321-608c1a224edc","Банка (емкостью менее 5 л) жестяная цилиндрическая");
 НайтиФормуУпаковки("91f360ff-5731-4c1c-bf11-7ea3d6d1a3ca","Банка жестяная для сухих продуктов (массой до 2,2 кг)");
 НайтиФормуУпаковки("c1f40234-bff1-42c8-8e19-d6cad7f00fce","Банка широкогорлая (емкостью около 4,5 литров)");
 НайтиФормуУпаковки("fedf422e-053c-11e1-99b4-d8d385fbc9e8","Банка, жестяная (консервная)");
 НайтиФормуУпаковки("13f13e66-adf4-431a-9cff-22cfd839047b","Барабан");
 НайтиФормуУпаковки("2e53354c-4023-434b-926f-bbdd1af00a37","Барабан алюминиевый с несъемным днищем");
 НайтиФормуУпаковки("970e40fd-3436-48ed-ac99-e78802f57119","Барабан алюминиевый со съемным днищем");
 НайтиФормуУпаковки("eec09740-2c4c-460b-94ed-c4d4ef437f1b","Барабан пластмассовый с несъемным днищем");
 НайтиФормуУпаковки("d565dd82-5fc1-4303-a55d-495c35ac22ec","Барабан пластмассовый со съемным днищем");
 НайтиФормуУпаковки("02f1c682-8f53-47f8-b8dc-72404d986e66","Барабан стальной");
 НайтиФормуУпаковки("c113fb0c-23eb-4ce5-ad44-8250598f173e","Барабан стальной с несъемным днищем");
 НайтиФормуУпаковки("1852b14d-39a0-4712-9e55-90a7005d5469","Барабан стальной со съемным днищем");
 НайтиФормуУпаковки("e5f7f98d-6a9c-4866-8cac-4819f71e41b3","Барабан фанерный");
 НайтиФормуУпаковки("6bf25be3-0cf7-4dd8-a383-049a02862968","Барабан фибровый");
 НайтиФормуУпаковки("ed90911b-d130-4d3b-ae0b-2f0754d23fd4","Барабан, алюминиевый");
 НайтиФормуУпаковки("0ef53349-5258-4efc-ac2a-23d1e33f387b","Барабан, деревянный");
 НайтиФормуУпаковки("bbe136bd-0da4-42fd-800a-79435f4dd2c0","Барабан, железный");
 НайтиФормуУпаковки("dd7c7ba0-dbc3-435d-94f7-5b758ca36898","Барабан, пластмассовый");
 НайтиФормуУпаковки("ae0b5e58-8771-48f7-8c3c-11dfdb17ebad","Без клети");
 НайтиФормуУпаковки("34e245a7-cd7c-4d8b-a436-482dcbcf1f38","Бидон");
 НайтиФормуУпаковки("41e9ff79-b6c4-46e7-a2d4-6f5bf3ee1002","Бобина");
 НайтиФормуУпаковки("fedf412a-053c-11e1-99b4-d8d385fbc9e8","Бочка");
 НайтиФормуУпаковки("3630beae-fe03-49ff-9264-93925ca7ce80","Бочка (емкостью около 164 л)");
 НайтиФормуУпаковки("5623e14a-903b-48e4-8afa-07db65991173","Бочка (емкостью около 164 л) деревянная");
 НайтиФормуУпаковки("3c78e2e1-d19a-40d3-b970-4fe6d2b722d0","Бочка (емкостью около 164 л) деревянная со съемным днищем");
 НайтиФормуУпаковки("021bc2d9-f514-4491-b21a-ffe63023236f","Бочка (емкостью около 164 л) деревянная шпунтованная");
 НайтиФормуУпаковки("37495e99-e19f-4221-97e8-39565c0192b8","Бочка деревянная (емкостью около 200 л)");
 НайтиФормуУпаковки("c8066a6e-5f19-4429-85e1-9b2df548afa1","Бочка для вина или пива");
 НайтиФормуУпаковки("f1d48fb7-8536-4b99-8668-bd6a55167306","Бочка для вина или пива большая (емкостью около 1146 л) (тан)");
 НайтиФормуУпаковки("6583f8bf-8317-4ba4-bf4b-fafcd1d13bc1","Бочка емкостью 238 л (хогсхед)");
 НайтиФормуУпаковки("8915e7eb-4f39-48aa-8171-7a629c95b69e","Бочонок (емкостью около 41 л)");
 НайтиФормуУпаковки("8fe0727a-b2ed-4040-9df5-a14e4ad7f6a8","Бочонок (емкостью около 46 л)");
 НайтиФормуУпаковки("07f35ce7-6d5a-49e7-a7e2-659b6cf74def","Бревно");
 НайтиФормуУпаковки("0e0ccdf4-8779-4d65-84e2-d9e689314630","Бревно в пакете/пачке/связке");
 НайтиФормуУпаковки("d9afec35-b224-404f-a3ff-74a0496c128d","Брезент");
 НайтиФормуУпаковки("0ed01082-9c8e-49fa-8ba4-a91879d4b192","Брус (брусок)");
 НайтиФормуУпаковки("086a3064-ab16-4d38-a7fa-3a28ee66b58b","Брус (брусок) в пакете/пачке/связке");
 НайтиФормуУпаковки("d2ed24d1-c72a-4dc6-b3a8-ff8ca179c5c4","Бункер");
 НайтиФормуУпаковки("a23634f3-9e71-4c80-abc5-e4c77ac70c88","Бутылка оплетенная");
 НайтиФормуУпаковки("f7183d0a-5cee-4de8-9d08-bd5c7512ea7c","Бутылка с выпуклыми стенками защищенная");
 НайтиФормуУпаковки("883a32f4-984e-43c1-8e03-ad02929cbfe4","Бутылка с выпуклыми стенками незащищенная");
 НайтиФормуУпаковки("9adfe441-f411-4fcc-9568-8274ec2a0697","Бутылка цилиндрическая защищенная");
 НайтиФормуУпаковки("1b986c7e-dcff-452f-b9c5-bc47afa6ccdc","Бутылка цилиндрическая незащищенная");
 НайтиФормуУпаковки("3e311a74-00dd-4554-b656-748aa45cc069","Бутыль оплетенная большая (емкостью от 9 до 54 л) защищенная");
 НайтиФормуУпаковки("b654b00e-7601-408e-b059-783ab0371b35","Бутыль оплетенная большая (емкостью от 9 до 54 л) незащищенная");
 НайтиФормуУпаковки("fc881dea-5868-43ea-8b84-768aad44bc39","Бутыль оплетенная защищенная");
 НайтиФормуУпаковки("f8552b0c-1de2-4509-8de9-06284d01bdff","Бутыль оплетенная незащищенная");
 НайтиФормуУпаковки("87cff419-7bd1-4a2a-b52e-3f6c358138c8","Бухта");
 НайтиФормуУпаковки("04735711-516d-4331-92c6-b55e5f8e3710","В вакуумной упаковке");
 НайтиФормуУпаковки("b49dbb7b-56b9-48e3-9fd3-74a328dbcea3","В термоусадочной пленке");
 НайтиФормуУпаковки("165fd412-0bfa-4bb5-8993-bcfaa5d82e1b","Ведро");
 НайтиФормуУпаковки("657fad4d-71a4-4939-90a4-3fb0c9aea7f7","Гильза");
 НайтиФормуУпаковки("a423d25a-2a14-40b8-bf13-f6a85b8fc887","Гнездо (ячейка)");
 НайтиФормуУпаковки("4a7ea673-c3ac-40b5-836f-cfdd066b8020","Горшок");
 НайтиФормуУпаковки("668e236b-70b0-4afc-8ab3-3fb9335f909e","Грейферный ковш");
 НайтиФормуУпаковки("17f78e53-8978-4b58-9be5-d919c049a239","Гроб");
 НайтиФормуУпаковки("d2612f44-ca2a-4146-986d-6650e6fe9194","Грузовая партия (лот)");
 НайтиФормуУпаковки("af4d4677-3ea7-46ba-9fe0-504ba81ebea7","Дозатор");
 НайтиФормуУпаковки("b8d3ee58-c120-4c4e-bd31-0e1d3451f5de","Доска");
 НайтиФормуУпаковки("c84cb473-a0cc-4433-8b56-c7beb88fc59b","Доска в пакете/пачке/связке");
 НайтиФормуУпаковки("3dca7c38-3a10-4fb6-9c1f-0c64ab79d63b","Доска толстая в пакете/пачке/связке");
 НайтиФормуУпаковки("4d5772a0-9fa4-47ab-8c32-9a07729740ad","Доска, толстая");
 НайтиФормуУпаковки("5e5f4afb-d5f8-483a-999e-cb985af7580b","Единица");
 НайтиФормуУпаковки("207dccd8-7a12-44c3-a77b-7dd945a7b0bd","Кадка");
 НайтиФормуУпаковки("6046383e-9e59-40bc-a70b-a0538ef536ca","Кадка с крышкой");
 НайтиФормуУпаковки("4d9bd778-5ce4-411c-8d78-a1959ac55590","Канистра пластмассовая с несъемным днищем");
 НайтиФормуУпаковки("ba61904f-f946-448a-958b-518655d8f567","Канистра пластмассовая со съемным днищем");
 НайтиФормуУпаковки("a2110164-70b4-49f6-afaa-f3abde1be0f1","Канистра стальная с несъемным днищем");
 НайтиФормуУпаковки("72896fbf-b156-4c7b-868d-ac13c5a85c7e","Канистра стальная со съемным днищем");
 НайтиФормуУпаковки("12829e8e-7983-4745-8d01-5425d0244df6","Канистра, пластмассовая");
 НайтиФормуУпаковки("a17e05ea-2fd6-485f-8db6-5aed1606f851","Канистра, прямоугольная");
 НайтиФормуУпаковки("315646b0-01b2-4728-ab20-39911b080c26","Канистра, стальная");
 НайтиФормуУпаковки("a7eb10cf-5a71-4cd2-97eb-c7369a407ccf","Канистра, цилиндрическая");
 НайтиФормуУпаковки("8bcdee71-cca5-4536-ae2e-8a423d7dab60","Капсула");
 НайтиФормуУпаковки("0f402761-1d53-45dc-9566-d709cd1ccb4d","Кардная лента");
 НайтиФормуУпаковки("8211a6d5-11ea-4a5e-96dd-b52c3fe0a801","Кассета");
 НайтиФормуУпаковки("c7ee807d-56a9-47c5-95d7-72021f303167","Кассета с пленкой (фильмпак)");
 НайтиФормуУпаковки("4b3478b2-bd43-4fe1-85bd-77a457a1cd72","Катушка");
 НайтиФормуУпаковки("31ff0ebc-8b93-4ab4-9e6f-04dcab641eb2","Кипа, неспрессованная");
 НайтиФормуУпаковки("90ae449d-76c3-47a2-a0ec-39febdc0c965","Кипа, спрессованная");
 НайтиФормуУпаковки("6da6c216-abc1-4534-825c-821a41b2dbc2","Клеть");
 НайтиФормуУпаковки("09f4ec10-6101-4c3d-b57a-251aa11e7752","Клеть (многооборотная) Общего фонда транспортировочного оборудования EC");
 НайтиФормуУпаковки("4770cd27-c22b-4da6-bba5-c69dcd601b74","Клеть, роликовая");
 НайтиФормуУпаковки("538f0705-e05d-4154-bfb5-0e63ab30122b","Кольцо");
 НайтиФормуУпаковки("d0416c04-368d-48bf-b5fb-d3fe21f3977c","Комбинированная упаковка: пластмассовый сосуд");
 НайтиФормуУпаковки("858efe47-f7d6-4f6e-9408-79b8e3d9ae83","Комбинированная упаковка: пластмассовый сосуд в барабане алюминиевом");
 НайтиФормуУпаковки("b95eb3b6-d08a-441e-9a3a-6d3f9501cc99","Комбинированная упаковка: пластмассовый сосуд в барабане пластмассовом");
 НайтиФормуУпаковки("6b8efc02-9611-451c-b215-503bc29301cd","Комбинированная упаковка: пластмассовый сосуд в барабане стальном");
 НайтиФормуУпаковки("21246938-dd6f-49aa-8e2a-d1cb13b0be17","Комбинированная упаковка: пластмассовый сосуд в барабане фибровом");
 НайтиФормуУпаковки("05e4976b-9504-44ac-8645-06bf6a24ad59","Комбинированная упаковка: пластмассовый сосуд в деревянной коробке");
 НайтиФормуУпаковки("5e8755cb-a874-499d-bb4d-34e465df0978","Комбинированная упаковка: пластмассовый сосуд в коробке из твердой пластмассы");
 НайтиФормуУпаковки("eb55f088-06cc-4bab-9f84-49f2f999f428","Комбинированная упаковка: пластмассовый сосуд в коробке из фибрового картона");
 НайтиФормуУпаковки("ab579955-759f-4de1-b8b9-460ad80facfb","Комбинированная упаковка: пластмассовый сосуд в коробке фанерной");
 НайтиФормуУпаковки("95307257-321c-4dd1-9a30-e30cbcffcfb1","Комбинированная упаковка: пластмассовый сосуд в ящике решетчатом (или обрешетке) из алюминия");
 НайтиФормуУпаковки("43c6ad00-832f-42c6-8e2a-fe2273814b66","Комбинированная упаковка: пластмассовый сосуд в ящике решетчатом (или обрешетке) из стали");
 НайтиФормуУпаковки("380c561e-749a-4408-88de-ad5399c8a53f","Комбинированная упаковка: стеклянный сосуд");
 НайтиФормуУпаковки("2e460cc7-7c38-4bf4-aa19-7768cb14d234","Комбинированная упаковка: стеклянный сосуд в барабане алюминиевом");
 НайтиФормуУпаковки("fa1d17e8-e12d-4544-9461-db80f49cfe4b","Комбинированная упаковка: стеклянный сосуд в барабане фанерном");
 НайтиФормуУпаковки("40c8a0db-74c9-4190-9449-6f3f8ac2eaa7","Комбинированная упаковка: стеклянный сосуд в барабане фибровом");
 НайтиФормуУпаковки("32936c38-e9fa-439b-8108-5b7e3c482f6c","Комбинированная упаковка: стеклянный сосуд в корзине плетеной с крышкой");
 НайтиФормуУпаковки("4195a944-7c45-44e9-9cf9-d366386ad86e","Комбинированная упаковка: стеклянный сосуд в коробке деревянной");
 НайтиФормуУпаковки("eabbfb7f-b3ea-4858-981a-201a18be8a0a","Комбинированная упаковка: стеклянный сосуд в коробке из фибрового картона");
 НайтиФормуУпаковки("5a349e4c-ce4c-485e-81db-beec4aa09fa4","Комбинированная упаковка: стеклянный сосуд в пакете из твердой пластмассы");
 НайтиФормуУпаковки("ce9f36bf-2f90-424c-b34f-e8715dd15e02","Комбинированная упаковка: стеклянный сосуд в пакете пенопластовом");
 НайтиФормуУпаковки("57eeeadf-7c4b-4614-9731-6e47d4b273a9","Комбинированная упаковка: стеклянный сосуд в стальном барабане");
 НайтиФормуУпаковки("6355c3ee-6d1c-4bc5-a6ff-2a808274f222","Комбинированная упаковка: стеклянный сосуд в ящике решетчатом (или обрешетке) из алюминия");
 НайтиФормуУпаковки("5893d315-48c8-49f7-9dc4-2dde43e090b9","Комбинированная упаковка: стеклянный сосуд в ящике решетчатом (или обрешетке) из стали");
 НайтиФормуУпаковки("b5cd2c76-152f-4d8f-a5c2-d196dd920426","Комплект");
 НайтиФормуУпаковки("3cb38979-51da-44a5-8bdc-8f549bb0aa68","Конверт");
 НайтиФормуУпаковки("dddd429e-0376-4030-bb9e-2ad9cba0f3c4","Конверт, стальной");
 НайтиФормуУпаковки("d90e17f4-8bed-46be-a1d1-9bb7f0f4d736","Консоль для оборудования, помещающаяся в минифургон");
 НайтиФормуУпаковки("5d753d93-c512-4f55-8fc8-0c0f1461d6a0","Контейнер для пищевых продуктов");
 НайтиФормуУпаковки("9ef6b142-22e7-4a1c-bc5f-7945dc5a654f","Контейнер металлический");
 НайтиФормуУпаковки("d273dbfd-c8ed-4637-9ad2-5e40d7ecbf3a","Контейнер наружный");
 НайтиФормуУпаковки("fedf606a-053c-11e1-99b4-d8d385fbc9e8","Контейнер средней грузоподъемности для массовых грузов");
 НайтиФормуУпаковки("b86afba4-7492-4910-b266-6ab67235095c","Контейнер средней грузоподъемности для массовых грузов алюминиевый");
 НайтиФормуУпаковки("6505c314-3e58-496e-becc-9ee71c08eacc","Контейнер средней грузоподъемности для массовых грузов алюминиевый герметизированный свыше 10 КПа");
 НайтиФормуУпаковки("caeda84d-f591-4ca8-888f-2b0857d6d66a","Контейнер средней грузоподъемности для массовых грузов бумажный многослойный");
 НайтиФормуУпаковки("566c12fc-5fc1-4189-8fc4-f4ff072c4897","Контейнер средней грузоподъемности для массовых грузов бумажный многослойный влагонепроницаемый");
 НайтиФормуУпаковки("800fc586-864c-4c29-ae15-d0d405e5d82a","Контейнер средней грузоподъемности для массовых грузов герметизированный 10 Кпа");
 НайтиФормуУпаковки("3a762c62-7b9e-4ccc-95e7-50fed26da877","Контейнер средней грузоподъемности для массовых грузов герметизированный свыше 10 КПа");
 НайтиФормуУпаковки("1061b465-9f46-48ba-8939-e4e14afd6270","Контейнер средней грузоподъемности для массовых грузов гибкий");
 НайтиФормуУпаковки("e143c99a-f5c3-4e66-a50b-52a5cabc6325","Контейнер средней грузоподъемности для массовых грузов из древесного материала");
 НайтиФормуУпаковки("828064d7-80be-4ba4-a13c-7a17476e763e","Контейнер средней грузоподъемности для массовых грузов из древесного материала с внутренним вкладышем");
 НайтиФормуУпаковки("057ea6ec-aab1-4e2c-be58-f976fd3bbb37","Контейнер средней грузоподъемности для массовых грузов из естественной древесины");
 НайтиФормуУпаковки("c5f0a52e-2496-45f0-9c5d-0cca7c1643a1","Контейнер средней грузоподъемности для массовых грузов из естественной древесины с внутренним вкладышем");
 НайтиФормуУпаковки("5cea30bc-bd13-4c2a-af79-90a2e1804b07","Контейнер средней грузоподъемности для массовых грузов из жесткой пластмассы");
 НайтиФормуУпаковки("e729238b-88ff-4991-a67e-8ec66cded23c","Контейнер средней грузоподъемности для массовых грузов из жесткой пластмассы автономный герметизированный");
 НайтиФормуУпаковки("2b58bc8f-b007-4ef4-808b-a4eedc9df54c","Контейнер средней грузоподъемности для массовых грузов из жесткой пластмассы с конструкционным оснащением герметизированный");
 НайтиФормуУпаковки("c159513f-dcf5-4402-ab16-8a1970e7b9d4","Контейнер средней грузоподъемности для массовых грузов из пластикового волокна с покрытием и вкладышем");
 НайтиФормуУпаковки("92765566-620c-4877-a58f-4107c3c6d468","Контейнер средней грузоподъемности для массовых грузов из полимерной пленки");
 НайтиФормуУпаковки("9c415e68-6f34-4e5c-81c2-696e994a77cc","Контейнер средней грузоподъемности для массовых грузов из полимерной ткани без покрытия/вкладыша");
 НайтиФормуУпаковки("fed6b6cb-60b7-4df5-b81e-37b7a2b2a24e","Контейнер средней грузоподъемности для массовых грузов из полимерной ткани с вкладышем");
 НайтиФормуУпаковки("3d3bf9e3-12bb-4f0c-82ab-c79df71fcfdf","Контейнер средней грузоподъемности для массовых грузов из полимерной ткани с покрытием");
 НайтиФормуУпаковки("778afe34-03a9-4255-89ce-78229c9d233c","Контейнер средней грузоподъемности для массовых грузов из прочего металла, кроме стали");
 НайтиФормуУпаковки("5a86d172-8b82-4992-b88c-8b1f80765ff5","Контейнер средней грузоподъемности для массовых грузов из фибрового картона");
 НайтиФормуУпаковки("769f3e00-3bc6-4b59-b201-8972cd649ccc","Контейнер средней грузоподъемности для массовых грузов металлический");
 НайтиФормуУпаковки("fab06db6-977d-48df-8822-fb5ef954434c","Контейнер средней грузоподъемности для массовых грузов составной");
 НайтиФормуУпаковки("a3ee4967-a24f-4815-8f07-9d49ffe1de53","Контейнер средней грузоподъемности для массовых грузов составной из гибкой пластмассы герметизированный");
 НайтиФормуУпаковки("fee9277d-adb9-4af6-aae9-3117412de104","Контейнер средней грузоподъемности для массовых грузов составной из жесткой пластмассы герметизированный");
 НайтиФормуУпаковки("a14e9f47-e745-4fb5-861e-642b8da576d9","Контейнер средней грузоподъемности для массовых грузов стальной");
 НайтиФормуУпаковки("cb247727-4eaf-49dd-85cf-6e2dd7f2a3ab","Контейнер средней грузоподъемности для массовых грузов текстильный без покрытия/вкладыша");
 НайтиФормуУпаковки("5c416509-50d7-464b-9455-9439604c2479","Контейнер средней грузоподъемности для массовых грузов текстильный с вкладышем");
 НайтиФормуУпаковки("111583f5-39e6-4b45-a941-b67d41ef4cae","Контейнер средней грузоподъемности для массовых грузов текстильный с покрытием");
 НайтиФормуУпаковки("0d51ebba-b636-4a01-9a3a-e1f10fcc73df","Контейнер средней грузоподъемности для массовых грузов текстильный с покрытием и вкладышем");
 НайтиФормуУпаковки("6bc17666-63d7-49fd-9a82-fd98ff408dff","Контейнер средней грузоподъемности для массовых грузов фанерный");
 НайтиФормуУпаковки("8015c596-6a81-40bc-bfca-f5961327bca4","Контейнер средней грузоподъемности для массовых грузов фанерный с внутренним вкладышем");
 НайтиФормуУпаковки("a41e2a9a-d9f8-43f7-8781-15da3e5713d8","Контейнер средней грузоподъемности для наливных грузов алюминиевый");
 НайтиФормуУпаковки("4dfaab91-aacd-4a1b-a052-f40f873e6a46","Контейнер средней грузоподъемности для наливных грузов из жесткой пластмассы автономный");
 НайтиФормуУпаковки("5389a88d-8a7d-4fc6-9758-4205df09bd30","Контейнер средней грузоподъемности для наливных грузов из жесткой пластмассы с конструкционным оснащением");
 НайтиФормуУпаковки("ceb9b05c-6a68-4663-ae9a-72c1f38e1ef8","Контейнер средней грузоподъемности для наливных грузов металлический");
 НайтиФормуУпаковки("dd97947e-4e78-41df-a4ef-1f34346db79e","Контейнер средней грузоподъемности для наливных грузов составной из гибкой пластмассы");
 НайтиФормуУпаковки("f9c0a4b5-0576-4aeb-9822-0a85f59b4c7f","Контейнер средней грузоподъемности для наливных грузов составной из жесткой пластмассы");
 НайтиФормуУпаковки("517d28bb-afa9-4a66-87e7-b707121a70fb","Контейнер средней грузоподъемности для наливных грузов стальной");
 НайтиФормуУпаковки("690e086c-89b8-4c17-8838-4478d4c2e4eb","Контейнер средней грузоподъемности для твердых навалочных/насыпных грузов из жесткой пластмассы автономный");
 НайтиФормуУпаковки("c979e057-03e8-4dda-8fcd-3dba27e4dfc5","Контейнер средней грузоподъемности для твердых навалочных/насыпных грузов из жесткой пластмассы с конструкционным оснащением");
 НайтиФормуУпаковки("9eba63f1-0e89-47a1-b75a-8c0cb099af3d","Контейнер средней грузоподъемности для твердых навалочных/насыпных грузов составной из гибкой пластмассы");
 НайтиФормуУпаковки("3850fb20-746c-4001-827c-5825630f7ce7","Контейнер средней грузоподъемности для твердых навалочных/насыпных грузов составной из жесткой пластмассы");
 НайтиФормуУпаковки("4258d946-8f37-43ac-90c2-ab29814daaeb","Контейнер, галлон");
 НайтиФормуУпаковки("0239b3d5-ec19-498f-9379-013e4df8c882","Контейнер, гибкий");
 НайтиФормуУпаковки("8f20bf8f-afd5-4e30-9e6b-b664f3973c16","Контейнер, прочее транспортировочное оборудование, кроме поименованного");
 НайтиФормуУпаковки("fedf5cb4-053c-11e1-99b4-d8d385fbc9e8","Корзина");
 НайтиФормуУпаковки("2bbef079-d872-469a-9a38-37101bba2e07","Корзина из шпона для ягод и фруктов");
 НайтиФормуУпаковки("4be2b716-28a4-4d33-8d3e-266ce1e34942","Корзина с крышкой");
 НайтиФормуУпаковки("497050a3-b994-4ba4-badd-8b7fd98426ac","Корзина с ручкой из древесины");
 НайтиФормуУпаковки("02684a03-6f18-43d0-b79d-3ce05d562435","Корзина с ручкой, картонная");
 НайтиФормуУпаковки("ecd94698-e572-4b54-91a8-54bccd9f5644","Корзина с ручкой, пластмассовая");
 НайтиФормуУпаковки("e3c233ff-30d4-4ee1-89ac-c19062f1a09d","Корзина, рыбацкая");
 НайтиФормуУпаковки("2b91c7f0-2705-40a1-a180-64e20626a2a0","Короб деревянный (лифтван) размером около 220 см (длина) x 115 см (ширина) x 220 см (высота)");
 НайтиФормуУпаковки("fedf5ad4-053c-11e1-99b4-d8d385fbc9e8","Коробка");
 НайтиФормуУпаковки("5a5960a3-121e-4da1-8437-130b3cbc55c6","Коробка (многооборотная) из Общего фонда транспортировочного оборудования ЕС, Еврокоробка");
 НайтиФормуУпаковки("ff3bfc50-0b9f-47cc-ada2-ac40a4a18cc0","Коробка деревянная из естественной древесины обыкновенная");
 НайтиФормуУпаковки("fddc5698-8738-460f-b603-f49c7053b473","Коробка деревянная из естественной древесины с плотно пригнанными стенками");
 НайтиФормуУпаковки("77b8f79a-6a69-4b4f-b0b2-a8a9f0f4ca12","Коробка для жидкостей");
 НайтиФормуУпаковки("9f0f9e11-cce0-4484-9a50-bc4fed7ee1e9","Коробка из древесного материала");
 НайтиФормуУпаковки("89f4e420-504e-4b2e-9291-ae483d7e9bdd","Коробка из естественной древесины");
 НайтиФормуУпаковки("8b1ffe26-1485-477f-8d2d-8050397beab2","Коробка из твердой пластмассы");
 НайтиФормуУпаковки("aa308c04-0fe0-4a87-ab8c-7527b3f261f4","Коробка из фибрового картона");
 НайтиФормуУпаковки("56e38905-209b-43cc-ac8f-3657f5ec2bdc","Коробка, алюминиевая");
 НайтиФормуУпаковки("fedf4328-053c-11e1-99b4-d8d385fbc9e8","Коробка, картонная");
 НайтиФормуУпаковки("50c21cb9-3e09-4cc7-a30f-c724d248e996","Коробка, пенопластовая");
 НайтиФормуУпаковки("dae4571f-d2e8-11e4-8109-d89d67148660","Коробка, пластмассовая");
 НайтиФормуУпаковки("9c0e3d26-e6c5-4b8e-bb47-0a4ecf8867a3","Коробка, стальная");
 НайтиФормуУпаковки("2c76df5b-bdf1-4c36-b136-41240961deb0","Коробка, фанерная");
 НайтиФормуУпаковки("890d2d2d-9ed5-40a5-8d6f-bad8546bfee4","Кофр");
 НайтиФормуУпаковки("fedf6240-053c-11e1-99b4-d8d385fbc9e8","Крюк");
 НайтиФормуУпаковки("3ae14a0a-3970-45ef-bd53-f278e217bf4f","Кувшин, большой");
 НайтиФормуУпаковки("548062b8-8f49-4fe2-8e93-d6c5103a9113","Кувшин, маленький");
 НайтиФормуУпаковки("5444b894-aa2b-456f-aa27-e1f470568338","Кулек");
 НайтиФормуУпаковки("62120ab7-da8c-46f5-8d06-8cb3f9376a13","Лента");
 НайтиФормуУпаковки("b9dec3d6-c0d8-4170-8b57-2f79042b9a8d","Лист");
 НайтиФормуУпаковки("b883ff05-483d-4e82-be5f-c1b90d004d1c","Лист в пакете/пачке/связке");
 НайтиФормуУпаковки("a2e60b9e-ee4d-47b5-956b-690bda852392","Лист с пластмассовым покрытием");
 НайтиФормуУпаковки("d6831ad1-3dc9-48d0-8c92-402db32c4031","Лист, металлический");
 НайтиФормуУпаковки("e49e5e21-09f1-4194-b637-655959ce5510","Лист, прокладной");
 НайтиФормуУпаковки("3d72e4ec-f771-4c0d-a9b9-452dd7a08406","Лоток");
 НайтиФормуУпаковки("ea504ad8-c159-449f-a752-1ab2eecc8fe1","Лоток");
 НайтиФормуУпаковки("a5c9db95-0858-401c-a0f8-f1e17f44c156","Лоток с двумя настилами без покрытия деревянный");
 НайтиФормуУпаковки("816aecc8-f89d-4bce-add3-bcea3782ebfa","Лоток с двумя настилами без покрытия картонный");
 НайтиФормуУпаковки("2834ba2d-8030-4b5d-8812-186ff267f89c","Лоток с двумя настилами без покрытия пластмассовый");
 НайтиФормуУпаковки("d5122def-d46e-4989-b845-9ed0754c2a07","Лоток с одним настилом без покрытия деревянный");
 НайтиФормуУпаковки("b6b93b6c-286a-4c49-b646-bef408d4cf8b","Лоток с одним настилом без покрытия картонный");
 НайтиФормуУпаковки("3614ce14-9970-453c-81df-9645c4c5fe2c","Лоток с одним настилом без покрытия пластмассовый");
 НайтиФормуУпаковки("9c27dc4c-875d-4de5-af1f-d6d066e0d88f","Лоток с одним настилом без покрытия полистироловый");
 НайтиФормуУпаковки("fedf451c-053c-11e1-99b4-d8d385fbc9e8","Мешок");
 НайтиФормуУпаковки("c8bc51d4-de57-44ee-9492-85360eada3a5","Мешок");
 НайтиФормуУпаковки("803b1dd4-ea8b-464e-9f7e-1bfa573c90bc","Мешок (куль)");
 НайтиФормуУпаковки("a71f0123-63c4-440b-bce8-eb46d7a854e2","Мешок (куль) многослойный");
 НайтиФормуУпаковки("fedf401c-053c-11e1-99b4-d8d385fbc9e8","Мешок большой");
 НайтиФормуУпаковки("933312a8-dc11-43ee-9daa-abb240bf9e3f","Мешок большой для крупноразмерных навалочных грузов");
 НайтиФормуУпаковки("fedf4422-053c-11e1-99b4-d8d385fbc9e8","Мешок бумажный многослойный");
 НайтиФормуУпаковки("9f15aaba-d9e1-43ea-8cc7-0f0a29ed7be8","Мешок бумажный многослойный влагонепроницаемый");
 НайтиФормуУпаковки("87da1e8c-2d92-4de6-8448-6ab233f3847e","Мешок из мешковины");
 НайтиФормуУпаковки("5080bd27-e2b5-4c27-9cb0-7004109f362f","Мешок из полимерной пленки");
 НайтиФормуУпаковки("fedf4616-053c-11e1-99b4-d8d385fbc9e8","Мешок из полимерной ткани");
 НайтиФормуУпаковки("c088e3b0-4d1f-4079-8ce3-eca7486da24f","Мешок из полимерной ткани без внутреннего покрытия/вкладыша");
 НайтиФормуУпаковки("8d2b467f-d19a-49ad-9d4d-9769fc8adb68","Мешок из полимерной ткани влагонепроницаемый");
 НайтиФормуУпаковки("c311b4f0-1f83-47ff-b5eb-085aa296a443","Мешок из полимерной ткани, плотный");
 НайтиФормуУпаковки("f8296670-1b9b-42fa-9e29-76dc5ba0a8c0","Мешок текстильный");
 НайтиФормуУпаковки("e50c3c66-a104-46d2-bf1c-b1fb6f649698","Мешок текстильный без внутреннего покрытия/вкладыша");
 НайтиФормуУпаковки("84b62344-fe4f-4585-bdf2-efb3bc68d982","Мешок текстильный влагонепроницаемый");
 НайтиФормуУпаковки("c97033bd-2cf6-4029-a570-0a59b238e68b","Мешок текстильный плотный");
 НайтиФормуУпаковки("8bb62b02-1b8b-4d1e-8886-93c9484fa5c2","Мешок, большой");
 НайтиФормуУпаковки("fedf5e80-053c-11e1-99b4-d8d385fbc9e8","Мешок, бумажный");
 НайтиФормуУпаковки("fdbf9ad8-68d8-49ee-814f-b7d76d806545","Мешок, гибкий контейнер");
 НайтиФормуУпаковки("198ddc36-88da-4659-a5a6-d9acb8416d9d","Мешок, джутовый");
 НайтиФормуУпаковки("501e2c46-d364-44f5-9f7f-c9697115e4fd","Мешок, пластмассовый");
 НайтиФормуУпаковки("e806470b-dcf2-447e-8394-b4144b9138df","Мешок, рогожный");
 НайтиФормуУпаковки("577431f6-7f08-4f20-af71-7ede3ac2a564","Мягкий мешок, Гибкая цистерна");
 НайтиФормуУпаковки("d2aeda76-b593-42c6-b6b0-dc1c8338dc54","Набор");
 НайтиФормуУпаковки("3050ca0a-7e39-4cd4-a762-253b981bad21","Навалом металлолом");
 НайтиФормуУпаковки("a521f8b3-eeeb-4027-941c-45928d0ecb16","Наливом газ (при 1031 мБар и 15°C)");
 НайтиФормуУпаковки("791bd3df-24eb-466f-b575-57d9dd1f95b7","Наливом газ сжиженный (при температуре/давлении, отличающихся от нормальных)");
 НайтиФормуУпаковки("22f90a6e-6872-4bd5-a143-063761da6e1a","Наливом жидкость");
 НайтиФормуУпаковки("f8ca4252-9ca3-45bd-9a95-8b6a5b538208","Насыпью твердые гранулированные частицы (гранулы)");
 НайтиФормуУпаковки("df053993-cf00-43c9-97ea-4c2fa0d07f96","Насыпью твердые крупные частицы (мелкие куски)");
 НайтиФормуУпаковки("efb4b760-611d-4f20-80a8-273c315f4db0","Насыпью твердые мелкие частицы (порошки)");
 НайтиФормуУпаковки("0e254eeb-d882-425d-85cf-ae68b8e50980","Нет сведений");
 НайтиФормуУпаковки("fedf46fc-053c-11e1-99b4-d8d385fbc9e8","Неупакованный или нерасфасованный");
 НайтиФормуУпаковки("3fd40265-127d-4fc6-9999-1cdf62f25faf","Неупакованный или нерасфасованный многоместный груз");
 НайтиФормуУпаковки("2def57e9-6280-4d7d-8765-840aa86e45e1","Неупакованный или нерасфасованный одноместный груз");
 НайтиФормуУпаковки("ed9473f1-647c-4dfc-8ac2-3cba09217165","Октабин");
 НайтиФормуУпаковки("fedf48dc-053c-11e1-99b4-d8d385fbc9e8","Пакет");
 НайтиФормуУпаковки("cd449f46-29f4-42af-8d36-046f0954ae63","Пакет (мешочек)");
 НайтиФормуУпаковки("f0b0ec9b-8341-4e95-bc0e-80898be598cb","Пакет (пачка/связка)");
 НайтиФормуУпаковки("6fddb358-43dd-4030-a1a7-a1a3c8c489ad","Пакет бумажный многослойный");
 НайтиФормуУпаковки("cf45058e-1f10-42fa-ae97-b2afefac9489","Пакетик");
 НайтиФормуУпаковки("63c5ba04-a314-4d41-9a0f-d328fba0144a","Пачка (пакет/связка)");
 НайтиФормуУпаковки("aeba3537-a7ed-4c11-8cfc-a05de5280f73","Пачка деревянная");
 НайтиФормуУпаковки("240ef107-fad5-4fca-bad1-ae65ab388ac6","Плита");
 НайтиФормуУпаковки("4b2de153-2c3e-499e-91f8-a7ce1926157a","Плиты в пакете/пачке/связке");
 НайтиФормуУпаковки("a8e05c09-1c89-46a8-8362-b2388f820fdb","По взаимному определению");
 НайтиФормуУпаковки("fedf615a-053c-11e1-99b4-d8d385fbc9e8","Поддон");
 НайтиФормуУпаковки("fedf56f6-053c-11e1-99b4-d8d385fbc9e8","Поддон");
 НайтиФормуУпаковки("83ee9a1e-5c1c-438b-bb63-48ed654e63ef","Поддон 100 x 110 см");
 НайтиФормуУпаковки("280069cf-3cff-4cb3-a96d-5632944e3f9c","Поддон в термоусадочной пленке");
 НайтиФормуУпаковки("d520e4b3-dd9b-4f34-9148-ccac220b9c84","Поддон деревянный");
 НайтиФормуУпаковки("82286818-b97d-42ef-b5e2-d1a1ac1c18cf","Поддон модульный с обечайкой 80 x 100 см");
 НайтиФормуУпаковки("d1d65e12-85c6-4492-8407-de44d792ac1f","Поддон модульный с обечайкой 80 x 60 см");
 НайтиФормуУпаковки("d79600b3-7498-4a9b-a873-d58fce2a667d","Поддон модульный с обечайкой 80 х 120 см");
 НайтиФормуУпаковки("d9d55e79-0ba6-4c11-9761-0e10dc1c6c8e","Поддон, ящичный");
 НайтиФормуУпаковки("81b74091-f9db-436f-b6a9-2438f3fbba32","Прут");
 НайтиФормуУпаковки("cfc437d8-9bfe-4d56-8d0e-4f35e5ae3af6","Прут в пакете/пачке/связке");
 НайтиФормуУпаковки("c91b91dc-6dff-49f6-90eb-19824f81b675","Пульверизатор");
 НайтиФормуУпаковки("770d2025-1d5e-463a-82bc-ce7bceb3cc90","Рама");
 НайтиФормуУпаковки("2d523fde-44a2-4c21-891b-4bccdcb1a33e","Рулон (обивочного или настилочного материала)");
 НайтиФормуУпаковки("f65e0788-1ba1-46f5-b677-d7590cc6c745","Рулон (полосового материала)");
 НайтиФормуУпаковки("07aa7b0e-2a80-45ba-b3bd-6060eef8376b","Связка");
 НайтиФормуУпаковки("ed7372ee-8b55-4e69-aa90-956a68b836ae","Сетка");
 НайтиФормуУпаковки("5f3d0b50-196e-498d-8994-7dfd1d9661cc","Сетка типа используемой для овощей или фруктов");
 НайтиФормуУпаковки("fe9cc400-101e-4dee-a90f-705c71bb560e","Сетка трубчатая пластмассовая");
 НайтиФормуУпаковки("1943c156-b96c-4b64-8935-dfd11e95d495","Сетка трубчатая текстильная");
 НайтиФормуУпаковки("29f1456b-e328-4f1b-b855-41eda829a9e1","Слитки в пакете/пачке/связке");
 НайтиФормуУпаковки("c954a839-e145-40f0-8945-de8e4faad748","Слиток");
 НайтиФормуУпаковки("000000f8-8e27-4cb0-9e34-6d99fd90d7df","Сляб");
 НайтиФормуУпаковки("322566af-9e46-4f63-bf22-041d4d2d9c58","Сосуд с пластмассовым покрытием");
 НайтиФормуУпаковки("bc592630-266f-425c-be8b-911425c04ccf","Сосуд, бумажный");
 НайтиФормуУпаковки("a7a51764-3c6d-4dec-997d-c5b08d8e2d74","Сосуд, деревянный");
 НайтиФормуУпаковки("0509b85d-01ca-4a62-bc40-283eff6ead2d","Сосуд, металлический");
 НайтиФормуУпаковки("876203e4-1352-455a-8c97-92c3460acc3a","Сосуд, пластмассовый");
 НайтиФормуУпаковки("251a4096-c3d6-4b0c-8534-65b31d41f633","Сосуд, стеклянный");
 НайтиФормуУпаковки("ef542239-f46a-4552-a332-db330f73b646","Сосуд, фибровый");
 НайтиФормуУпаковки("6bcddbae-2d7b-455c-83b3-6a65731d4e9f","Спичечный коробок");
 НайтиФормуУпаковки("2f2ba5e2-c9ab-41af-83d8-592f65c01db4","Стеллаж");
 НайтиФормуУпаковки("2d3b2408-d028-42e1-bc72-941b7fa149b5","Стойка");
 НайтиФормуУпаковки("28f26068-5294-4c8a-b409-c0a7ae10efd9","Стойка, вешалка для одежды");
 НайтиФормуУпаковки("ed6ec9a4-fb93-420a-9e1d-884aa58849c4","Сундук");
 НайтиФормуУпаковки("bf12e4f9-56be-4b62-a0d6-22f01585db25","Сундук, дорожный");
 НайтиФормуУпаковки("022887ce-8f39-4b81-b26e-785f114c7ac7","Сундук, морской");
 НайтиФормуУпаковки("dbff7b51-2571-451e-bf15-66e2ceed2fcb","Сундучок");
 НайтиФормуУпаковки("730968d5-30e1-4cc8-b413-d5997e8898a5","Таблетка");
 НайтиФормуУпаковки("7c585ad5-34f3-4975-a0aa-a78229e71808","Труба");
 НайтиФормуУпаковки("f5144819-a94a-486d-91d7-eb38a074c6c1","Труба в пакете/пачке/связке");
 НайтиФормуУпаковки("06eb9e3a-d6a8-49c3-809a-b4150b90e210","Трубка или туба");
 НайтиФормуУпаковки("54d1cc31-f51c-4e2a-9230-009c57aaa517","Трубка или туба в пакете/пачке/связке");
 НайтиФормуУпаковки("0c009153-57e0-4dfa-8e5f-ece82ae4dfef","Трубка или туба с насадкой");
 НайтиФормуУпаковки("6858e1ff-229f-43e0-9b3b-dd6ac0b41485","Трубка или туба, складывающаяся");
 НайтиФормуУпаковки("eb23a947-4fd9-46e6-8a6f-f258433500e7","Упаковка");
 НайтиФормуУпаковки("7ca4b4f3-fcac-4c00-8d7a-b258acaa97f0","Упаковка в оберточной бумаге");
 НайтиФормуУпаковки("b5dd6d4d-b99e-4245-8a92-abc119e1889f","Упаковка демонстрационная деревянная");
 НайтиФормуУпаковки("67129e5f-36d2-4397-8122-0c18747d2344","Упаковка демонстрационная картонная");
 НайтиФормуУпаковки("add23067-88c7-4cc0-a251-8c67953d00ce","Упаковка демонстрационная металлическая");
 НайтиФормуУпаковки("dfe5cf21-dbc5-4f51-b7fd-ad45259f9677","Упаковка демонстрационная пластмассовая");
 НайтиФормуУпаковки("c2645eda-085d-4ae7-bfc2-641fc380ebae","Упаковка картонная с отверстиями для бутылок");
 НайтиФормуУпаковки("9b0b180a-7cbb-4d9a-ba41-fd08b0eae3ba","Упаковка, выпрессованная");
 НайтиФормуУпаковки("ec874c34-8d51-4e04-bd2c-9ec9642d1e0e","Упаковка, выставочная");
 НайтиФормуУпаковки("a283d481-0a41-4d0a-9c38-e386caac0d70","Флакон");
 НайтиФормуУпаковки("2ca9172d-edad-4d6f-a4b8-e4fbaae098cb","Фляга");
 НайтиФормуУпаковки("07c59e7c-4a8c-4035-8048-2847491c88ea","Цилиндр");
 НайтиФормуУпаковки("fedf5d9a-053c-11e1-99b4-d8d385fbc9e8","Цистерна контейнер универсальный");
 НайтиФормуУпаковки("a5e4fb2f-f40b-40ab-bd2d-f6ddabbd4460","Цистерна, прямоугольная");
 НайтиФормуУпаковки("6fd54b8c-d35a-4655-b2f2-2491429b0931","Цистерна, цилиндрическая");
 НайтиФормуУпаковки("59eac884-a3ee-4c87-86ef-2508d1328ee6","Чайная коробка");
 НайтиФормуУпаковки("6eb46a7f-f1c0-49fd-b38c-47c8177aa9e1","Чан");
 НайтиФормуУпаковки("bfbecab2-acff-4791-8f4f-b03d435d00c8","Чаша");
 НайтиФормуУпаковки("8f4c7cbd-7d4a-48d6-873f-9f4a37bd576c","Чемодан");
 НайтиФормуУпаковки("354aee98-06a3-4780-bc9a-00a57edd8ca7","Чехол");
 НайтиФормуУпаковки("62f322c4-ce6d-4584-ba3f-4c771406f54d","Шар");
 НайтиФормуУпаковки("0bf57833-4b9d-4d99-96a3-53c7263e01e6","Шина");
 НайтиФормуУпаковки("dd7b8b5b-fcf3-46bf-9955-e2c5f9cc25f6","Шпиндель");
 НайтиФормуУпаковки("969bfad0-be8f-43fe-84d8-32ebfe32d37d","Шпулька");
 НайтиФормуУпаковки("25b9eab3-0f9f-42c1-912b-10f78bc63901","Штабель");
 НайтиФормуУпаковки("6090531d-d038-4f6c-a8df-77ba92267ec4","Штука");
 НайтиФормуУпаковки("bd8a4719-4595-4e82-a2e6-9ea20afcbf6e","Ящик");
 НайтиФормуУпаковки("7c29a864-e469-4c64-89e7-153000939d61","Ящик");
 НайтиФормуУпаковки("563fadd5-faa2-4d28-9139-1f23e08ae0af","Ящик автомобильный");
 НайтиФормуУпаковки("61079f21-ef62-44bc-97a7-817029f4d251","Ящик деревянный");
 НайтиФормуУпаковки("3d01bd9f-6629-4ec1-9ebe-532d82379a14","Ящик деревянный");
 НайтиФормуУпаковки("d8f7a02c-5076-41a2-9258-cca3427993b4","Ящик металлический");
 НайтиФормуУпаковки("668f1a9f-3b4c-496a-8c01-c6d1bd87d917","Ящик решетчатый (или обрешетка) мелкий");
 НайтиФормуУпаковки("aabbf190-ba1f-4611-8a97-6ce660a1dbc3","Ящик решетчатый (или обрешетка) многослойный деревянный");
 НайтиФормуУпаковки("f1a52766-b434-4e89-8440-60ba8df518c3","Ящик решетчатый (или обрешетка) многослойный картонный");
 НайтиФормуУпаковки("5fc55705-10dd-4071-a5ec-bd2337e98b95","Ящик решетчатый (или обрешетка) многослойный пластмассовый");
 НайтиФормуУпаковки("c1444369-7a47-4e53-8e62-c33c290d73c2","Ящик решетчатый (или обрешетка) рамный");
 НайтиФормуУпаковки("fe47d256-3d2b-4460-87e3-349ee65f6ac0","Ящик решетчатый для бутылок");
 НайтиФормуУпаковки("e879ae24-cac7-4dd1-a0e5-1d433b3493ab","Ящик решетчатый для массовых грузов деревянный");
 НайтиФормуУпаковки("ebf8776f-0e3d-4aff-bc64-28fb6e93a6fb","Ящик решетчатый для массовых грузов картонный");
 НайтиФормуУпаковки("7c4ea86f-477d-499e-b9b5-281c8d7cb2a5","Ящик решетчатый для массовых грузов пластмассовый");
 НайтиФормуУпаковки("dcf6eeb2-a0fd-4f1c-83db-7a85354a7c84","Ящик решетчатый для молока");
 НайтиФормуУпаковки("9e2b9bfb-8f54-4a66-ad38-d650ca479e44","Ящик решетчатый для пива");
 НайтиФормуУпаковки("3ea227b5-df09-40c2-b802-8abd1427c73e","Ящик решетчатый для фруктов");
 НайтиФормуУпаковки("93266aa3-4642-4162-8155-01851a5c0811","Ящик с поддоном");
 НайтиФормуУпаковки("a106dd9b-f9ee-45d6-a4f7-d8c18a1c53ea","Ящик с поддоном деревянный");
 НайтиФормуУпаковки("dbb7a1d0-aa1f-4141-90e2-1db559dd20f7","Ящик с поддоном картонный");
 НайтиФормуУпаковки("4ad07608-39ee-4991-baac-9cd2bdb5b2b0","Ящик с поддоном металлический");
 НайтиФормуУпаковки("215592ec-b08d-401b-800d-d36bda9ba0b5","Ящик с поддоном пластмассовый");
 НайтиФормуУпаковки("a451a297-b510-48fc-8a31-a41e311a0d82","Ящик, изотермический");
 НайтиФормуУпаковки("5bca0d26-c06d-4fbd-a75a-39b098f7a5d8","Ящик, каркасный");
 НайтиФормуУпаковки("e2437340-c529-4655-9774-c61054d429a5","Ящик, решетчатый (или обрешетка)");
 НайтиФормуУпаковки("a4992438-8d0c-45b2-9ffd-669dff708417","Ящик, стальной");
	
КонецФункции

Функция ИнициализацияХС_ЗагрузитьСтраны() Экспорт
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	Сообщить(" Запрос GetCountryList ");		
	Результат = КомпонентаНаСервере.GetCountryList( );
	
	СообщитьИнфо("Загрузка XML-файла: " + КомпонентаНаСервере.LogFilename);    

	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Попытка
		countryList = xdto.countryList.country;
		Для каждого country из countryList Цикл		
				
			guid = country.guid;
			_uuid = country.uuid;
			name = country.name;			
			
			Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Страна.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Страна КАК ВСД_Страна
		                      |ГДЕ
		                      |	ВСД_Страна.GUID = &GUID");
			Запрос.УстановитьПараметр("GUID", guid );
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда 
				Ответ = Результат.Ссылка;
			Иначе
				Сообщить("ВСД_Страна ["+name+"] GUID ["+guid+"] добавлена");
				Спр = Справочники.ВСД_Страна.СоздатьЭлемент();
				Спр.Наименование = name;
				Спр.GUID = guid;
				Спр.UUID = _UUID;
				Спр.Записать();
				Ответ = Спр.Ссылка;
			КонецЕсли;		
					
		КонецЦикла;
	Исключение
		Сообщить("Ошибка при получении ВСД_Страна");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Сообщить("Загрузка стран завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьРегионы(Страна) Экспорт 
	//Страна_GUID = ?(ПустаяСтрока(Страна)=1,"",Страна.GUID);
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	Сообщить(" Запрос GetRegionList ["+СокрЛП(Страна.GUID) +"]");		
	Результат = КомпонентаНаСервере.GetRegionList( СокрЛП(Страна.GUID) );
		
	СообщитьИнфо("Загрузка XML-файла: " + КомпонентаНаСервере.LogFilename);    
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Попытка
		regionList = xdto.RegionList.region;
		Для каждого region из regionList Цикл		
				
			guid = region.guid;
			_uuid = region.uuid;
			name = region.view;			
			
			Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Регион.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Регион КАК ВСД_Регион
		                      |ГДЕ
		                      |	ВСД_Регион.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Регион ["+name+"] GUID ["+guid+"] добавлена");
			//создать 
			Спр = Справочники.ВСД_Регион.СоздатьЭлемент();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = _UUID;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		

		КонецЦикла;
	Исключение
		Сообщить("Ошибка при получении ВСД_Регион");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Сообщить("Загрузка ВСД_Регион завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьГорода(Регион) Экспорт 
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	//стандартное поведение функции			
	//Страна_GUID = ?(ПустаяСтрока(Страна)=1,"",Страна_GUID);
		
	Сообщить(" Запрос GetLocalityListByRegion "+Регион+" ["+СокрЛП(Регион.GUID) +"]");		
	Результат = КомпонентаНаСервере.GetLocalityListByRegion( СокрЛП(Регион.GUID) );
	
	//Отладка();
	
	СообщитьИнфо("Загрузка XML-файла: " + КомпонентаНаСервере.LogFilename);    

	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Попытка
		LocalityList = xdto.LocalityList.Locality;
		Для каждого Locality из LocalityList Цикл		
				
			guid = Locality.guid;
			_uuid = Locality.uuid;
			name = Locality.view;			
			
			Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Город.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Город КАК ВСД_Город
		                      |ГДЕ
		                      |	ВСД_Город.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Город ["+name+"] GUID ["+guid+"] добавлена");
			Спр = Справочники.ВСД_Город.СоздатьЭлемент();
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = _UUID;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		

						
		КонецЦикла;
	Исключение
		Сообщить("Ошибка при получении ВСД_Город");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Сообщить("Загрузка ВСД_Город завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьПродукцию(Тип) Экспорт
	// http://help.vetrf.ru/wiki/ProductType
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	Сообщить(" Запрос GetProductList ");		
	Результат = КомпонентаНаСервере.GetProductList( Тип );
	
	Если Результат="SUCCESS" Тогда
			
		СообщитьИнфо("Загрузка XML-файла: "+КомпонентаНаСервере.LogFilename);    
		
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
		xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

		Попытка
			productList = xdto.productList.product;
			Для каждого product из productList Цикл		
					
				guid = product.guid;
				_uuid = product.uuid;
				name = product.name;			
				
				Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	ВСД_Продукция.Ссылка
			                      |ИЗ
			                      |	Справочник.ВСД_Продукция КАК ВСД_Продукция
			                      |ГДЕ
			                      |	ВСД_Продукция.GUID = &GUID");
			Запрос.УстановитьПараметр("GUID", guid );
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда 
				Ответ = Результат.Ссылка;
				Спр = Результат.Ссылка.ПолучитьОбъект();
			Иначе
				Сообщить("ВСД_Продукция ["+name+"] GUID ["+guid+"] добавлена");
				//создать 
				Спр = Справочники.ВСД_Продукция.СоздатьЭлемент();
			КонецЕсли;		
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = _UUID;
			Попытка Спр.КодТНВЭД =  ?(ТипЗнч(product.code) = Тип("Строка"),product.code,""); Исключение Спр.КодТНВЭД = "" ;КонецПопытки;
			
			Спр.Тип = product.ProductType;				
			Спр.Записать();
			Ответ = Спр.Ссылка;

			ИнициализацияХС_ЗагрузитьВидыПродукции(guid, Спр.Ссылка );
							
			КонецЦикла;
		Исключение
			Сообщить("Ошибка при получении ВСД_Продукция");
			Сообщить(ОписаниеОшибки());
		КонецПопытки;

	КонецЕсли;	
	Сообщить("Загрузка ВСД_Продукция завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьВидыПродукции(guid, Владелец) Экспорт
	
	Если Владелец=Справочники.ВСД_Продукция.ПустаяСсылка() Тогда 
		Сообщить("Не указан владелец "+guid);
		Возврат 0;
	КонецЕсли;
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	Сообщить(" Запрос GetProductList ");		
	Результат = КомпонентаНаСервере.GetSubProductByProductList( guid );
	
	СообщитьИнфо("Загрузка XML-файла: "+КомпонентаНаСервере.LogFilename);    
		
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Попытка
		//subProductList = xdto.subProductList.subProduct;
		Если ТипЗнч(xdto.subProductList.subProduct)<>Тип("СписокXDTO") Тогда 
			subProductList = Новый Массив;
			subProductList.Добавить(xdto.subProductList.subProduct);
		Иначе
			subProductList = xdto.subProductList.subProduct;
		КонецЕсли;
		
		Для каждого subProduct из subProductList Цикл		
				
			guid = subProduct.guid;
			_uuid = subProduct.uuid;
			name = subProduct.name;			
			
			Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ВидПродукции.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ВидПродукции КАК ВСД_ВидПродукции
		                      |ГДЕ
		                      |	ВСД_ВидПродукции.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
			Спр = Результат.Ссылка.ПолучитьОбъект();
			Сообщить("ВСД_ВидПродукции ["+name+"] GUID ["+guid+"] изменена");
		Иначе
			Сообщить("ВСД_ВидПродукции ["+name+"] GUID ["+guid+"] добавлена");
			//создать 
			Спр = Справочники.ВСД_ВидПродукции.СоздатьЭлемент();
		КонецЕсли;		
		Спр.Владелец = Владелец;
		Спр.Наименование = name;
		Спр.GUID = guid;
		Спр.UUID = _UUID;
		Попытка Спр.КодТНВЭД =  ?(ТипЗнч(subProduct.code) = Тип("Строка"),subProduct.code,""); Исключение Спр.КодТНВЭД = "" ;КонецПопытки;

		//Спр.Тип = subProduct.ProductType;				
		Спр.Записать();
		Ответ = Спр.Ссылка;			
						
		КонецЦикла;
	Исключение
		Сообщить("Ошибка при получении ВСД_ВидПродукции");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Сообщить("Загрузка ВСД_ВидПродукции завершена");
		
	Возврат 1;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьЕдиницыИзмерения() Экспорт
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	Сообщить(" Запрос GetUnitList ");		
	Результат = КомпонентаНаСервере.GetUnitList();
	
	Если Результат="SUCCESS" Тогда
		
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
		xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

		Попытка
			unitList = xdto.UnitList.Unit;
			//Если ТипЗнч(xdto.subProductList.subProduct)<>Тип("СписокXDTO") Тогда 
			//	subProductList = Новый Массив;
			//	subProductList.Добавить(xdto.subProductList.subProduct);
			//Иначе
			//	subProductList = xdto.subProductList.subProduct;
			//КонецЕсли;
			
			Для каждого unit из unitList Цикл		
					
				guid = unit.guid;
				_uuid = unit.uuid;
				name = unit.name;
				
				Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	ВСД_ЕдиницыИзмерения.Ссылка
			                      |ИЗ
			                      |	Справочник.ВСД_ЕдиницыИзмерения КАК ВСД_ЕдиницыИзмерения
			                      |ГДЕ
			                      |	ВСД_ЕдиницыИзмерения.GUID = &GUID");
			Запрос.УстановитьПараметр("GUID", guid );
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда 
				Ответ = Результат.Ссылка;
				Спр = Результат.Ссылка.ПолучитьОбъект();
				Сообщить("ВСД_ЕдиницыИзмерения ["+name+"] GUID ["+guid+"] изменена");
			Иначе
				Сообщить("ВСД_ЕдиницыИзмерения ["+name+"] GUID ["+guid+"] добавлена");
				//создать 
				Спр = Справочники.ВСД_ЕдиницыИзмерения.СоздатьЭлемент();
			КонецЕсли;		
			
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = _UUID;
			Спр.Коэффициент = unit.factor;			
			Спр.Записать();
			Ответ = Спр.Ссылка;			
							
			КонецЦикла;
		Исключение
			Сообщить("Ошибка при получении ВСД_ЕдиницыИзмерения");
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		Сообщить("Загрузка ВСД_ЕдиницыИзмерения завершена");
	КонецЕсли;	
	Сообщить("Загрузка завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьЦели( ) Экспорт
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	ЗапросXML = ИнициализацияХС_ЗагрузитьЦели_ЗапросXML();     // т.к. Ф-ция в Модуле объекта
	метод = КомпонентаНаСервере.GetMethod();
    метод.Service = "platform/services/DictionaryService";
    метод.Action = "GetPurposeList";		
	Сообщить83("Отправляем запрос");
	appID = КомпонентаНаСервере.SendRequestSoap(метод, ЗапросXML);
	//ФОтвета = КомпонентаНаСервере.LogFilename;
	Сообщить83("Загрузка XML-файла: " + КомпонентаНаСервере.LogFilename); 
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Попытка
		List = xdto.Body.getPurposeListResponse.purposeList.purpose;
	    Для каждого item из List Цикл
			_uuid = item.uuid;
			guid = item.guid;
			name = item.name;
			Запрос = Новый Запрос("ВЫБРАТЬ
			                     |	ВСД_Цель.Ссылка
			                     |ИЗ
			                     |	Справочник.ВСД_Цель КАК ВСД_Цель
			                     |ГДЕ
			                     |	ВСД_Цель.GUID = &GUID");
			Запрос.УстановитьПараметр("GUID", guid );
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда 
				Ответ = Результат.Ссылка;
				Спр = Результат.Ссылка.ПолучитьОбъект();
				Сообщить("ВСД_Цель ["+name+"] GUID ["+guid+"] изменена");
			Иначе
				Сообщить83("ВСД_Цель ["+name+"] GUID ["+guid+"] добавлена");
				//создать 
				Спр = Справочники.ВСД_Цель.СоздатьЭлемент();
			КонецЕсли;		
			
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = _UUID;
			Спр.Записать();
			Ответ = Спр.Ссылка;			
		    Сообщить83("Записан ВСД_Цель ["+name+"] ");
	    КонецЦикла;
	Исключение
		Сообщить83("Ошибка при получении ВСД_Цель");
		Сообщить83(ОписаниеОшибки());
		Попытка УдалитьФайлы(КомпонентаНаСервере.LogFilename);Исключение КонецПопытки;
		Возврат False;
	КонецПопытки;
	//Уничтожим временный Файл
	Попытка УдалитьФайлы(КомпонентаНаСервере.LogFilename);Исключение КонецПопытки;
	Сообщить83("Загрузка классификатора Цели завершена");
	Возврат True;

КонецФункции

Функция Удалить_ЗагрузитьЦели_Сервер(АдресВременногоХранилища="")  Экспорт
	//Получаем файл из хранилища
	Если АдресВременногоХранилища<>"" тогда 
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	 	ИмяФайлаответ = ПолучитьИмяВременногоФайла("xml");
	 	ДвоичныеДанные.Записать(ИмяФайлаответ);    // иначе его как бы не существует
	Иначе
		//ВСД_Компонента = ПолучитьКомпоненту();
		ИмяФайлаответ = КомпонентаНаСервере.LogFilename;
	КонецЕсли;
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаответ);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Попытка
		List = xdto.Body.getPurposeListResponse.purposeList.purpose;
	    Для каждого item из List Цикл
			_uuid = item.uuid;
			guid = item.guid;
			name = item.name;
			Запрос = Новый Запрос("ВЫБРАТЬ
			                     |	ВСД_Цель.Ссылка
			                     |ИЗ
			                     |	Справочник.ВСД_Цель КАК ВСД_Цель
			                     |ГДЕ
			                     |	ВСД_Цель.GUID = &GUID");
			Запрос.УстановитьПараметр("GUID", guid );
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда 
				Ответ = Результат.Ссылка;
				Спр = Результат.Ссылка.ПолучитьОбъект();
				Сообщить("ВСД_Цель ["+name+"] GUID ["+guid+"] изменена");
			Иначе
				Сообщить("ВСД_Цель ["+name+"] GUID ["+guid+"] добавлена");
				//создать 
				Спр = Справочники.ВСД_Цель.СоздатьЭлемент();
			КонецЕсли;		
			
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = _UUID;
			Спр.Записать();
			Ответ = Спр.Ссылка;			
		    Сообщить("Записан ВСД_Цель ["+name+"] ");
	    КонецЦикла;
	Исключение
		Сообщить("Ошибка при получении ВСД_Цель");
		Сообщить(ОписаниеОшибки());
		Возврат False;
	КонецПопытки;
	//Уничтожим временный Файл
	Попытка УдалитьФайлы(ИмяФайлаответ);Исключение КонецПопытки;
	Сообщить("Загрузка классификатора Цели завершена");
	Возврат True;
КонецФункции

Функция ИнициализацияХС_ЗагрузитьЦели_ЗапросXML() Экспорт
	Запрос = "
	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' 
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/argus/common/ws-definitions' 
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'>
	|  <soapenv:Header/>
	|  <soapenv:Body>
	|    <ws:getPurposeListRequest>
	|      <base:listOptions>
	|        <base:count>1000</base:count>
	//|        <base:offset>2</base:offset>
	|      </base:listOptions>
	|    </ws:getPurposeListRequest>
	|  </soapenv:Body>
	|</soapenv:Envelope>
	|";
	Возврат Запрос;
КонецФункции
// ***************** Классификаторы Меркурий   окончание

//=================== ИНИЦИАЛИЗАЦИЯ ===================================================
Процедура ИнициализацияХС() Экспорт
	
	ЗаполнитьФормыУпаковки();
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	// основные параметры
	НазваниеРеквизитаКоличество = "Количество";
	ПарамКоэффициентПересчетаКоличества = 1;
	ПарамЗнакСортировкиУбывание = ложь;
	ПарамКолонкаСортировкиПартииСписания = "ДатаИзменения";
	НазваниеРеквизитаКоличествоМест = "Количество";
	ТермУсловияПеревозки = 1;
	ВСД_РезультатыИсследований = Перечисления.ВСД_РезультатИсследования.VSERAW;
	ПарамЗаполнятьТранзакциюПриОтсутствииПартий = Ложь;	
	ИнициализацияХС_ЗагрузитьСтраны();
	Попытка ИнициализацияХС_ЗагрузитьЦели(); Исключение КонецПопытки;
	Для А=1 По 8 Цикл
		ИнициализацияХС_ЗагрузитьПродукцию(А);
	КонецЦикла;
	
	Результат = ХС_ПолучитьGuid(Отправитель_ХозСубъект);
	
	ИмяФайла = КомпонентаНаСервере.LogFilename;
	Если Результат="SUCCESS" Тогда
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
		xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		Попытка
			guid = xdto.businessEntityList.businessEntity.guid;
			_uuid = xdto.businessEntityList.businessEntity.uuid;
			active = xdto.businessEntityList.businessEntity.active;
			Попытка 
				name = xdto.businessEntityList.businessEntity.name;
			Исключение 
				name = xdto.businessEntityList.businessEntity.fio;
			КонецПопытки;
			country = xdto.businessEntityList.businessEntity.juridicalAddress.country.guid;
			countryName = xdto.businessEntityList.businessEntity.juridicalAddress.country.name;
			
			region = xdto.businessEntityList.businessEntity.juridicalAddress.region.guid;
			regionName = xdto.businessEntityList.businessEntity.juridicalAddress.region.name;		

			Попытка 
				locality = xdto.businessEntityList.businessEntity.juridicalAddress.locality.guid;
				localityName = xdto.businessEntityList.businessEntity.juridicalAddress.locality.name;		
			Исключение
				Сообщить("Площадка НЕ привязана к Хозсубъекту. Проверьте площадку в ГИС Меркурий");
				Возврат;
			КонецПопытки;
		
		Исключение
			Сообщить("Получен пустой ответ сервера. Заполните параметры подключения.");
			Возврат;
		КонецПопытки;
		
		Страна 	= НайтиСтрануПоGUID(country, countryName);
		
		ИнициализацияХС_ЗагрузитьРегионы(Страна);	
	
		ИнициализацияХС_ЗагрузитьЕдиницыИзмерения();
			
		Регион 	= НайтиРегионПоGUID(region, regionName);			
		
		Город 	= НайтиГородПоGUID(locality, localityName);
		
		Если ПустаяСтрока(param_issuer_id)=1 Тогда 
			param_issuer_id = guid;
		Иначе
			Если НЕ(param_issuer_id = guid) Тогда 
				Сообщить("Ошибка в param_issuer_id, должно быть "+guid);
			Иначе
				Сообщить("param_issuer_id - правильно "+name);
			КонецЕсли;
		КонецЕсли;		
		
		ЗагрузитьПлощадки( Отправитель_ХозСубъект );
		
		//Выбрать площадку
		//ВыбРеквизит = "Отправитель_Площадка";
		//ОткрытьПлощадкиПоХС(Отправитель_ХозСубъект);
		
	КонецЕсли;
		
КонецПроцедуры

Функция ЗагрузитьПараметры(_Организация="") Экспорт
	Если НЕ(ЗначениеЗаполнено(_Организация)) Тогда
		_Организация = ПолучитьОрганизациюПоУмолчанию();
// УПП		_Организация   = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
//	Если Метаданные.ОбщиеМодули.Найти("УправлениеПользователями") <> Неопределено Тогда
//		МодульРабота1 = ОбщийМодуль("УправлениеПользователями");
//		_Организация   = МодульРабота1.ПолучитьЗначениеПоУмолчанию(ИмяПользователя(), "ОсновнаяОрганизация");
//	ИначеЕсли Метаданные.ОбщиеМодули.Найти("БухгалтерскийУчетПереопределяемый") <> Неопределено Тогда
//		МодульРабота1 = ОбщийМодуль("БухгалтерскийУчетПереопределяемый");
//		_Организация   = МодульРабота1.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация", ИмяПользователя());
//	КонецЕсли;

//БП3
//_Организация   = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация", ИмяПользователя());



//или так		ТекущаяНастройкаОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация", ИмяПользователяИБ);
//		ТекущаяНастройкаОсновногоПодразделения = ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации", ИмяПользователяИБ);
//		ТекущаяНастройкаОсновногоСклада = ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад", ИмяПользователяИБ);
		
		Если _Организация.Пустая() Тогда
			Сообщить("Не определена Основная Организация пользователя", СтатусСообщения.ОченьВажное);
		КонецЕсли;		
	КонецЕсли;
	
	СписокКонстант = ВСД.ЗагрузитьПараметры( _Организация );
		
	param_username 		= СписокКонстант.Получить("param_username"); ;  // для базовой авторизации
	param_password 		= СписокКонстант.Получить("param_password");
	param_issuer_id		= СписокКонстант.Получить("param_issuer_id"); // идентификатор хозяйствующего субъекта в реестре РСХН.
	param_service_id 	= СписокКонстант.Получить("param_service_id") ;
	param_api_key 		= СписокКонстант.Получить("param_api_key") ;

	param_intiator_login 	= СписокКонстант.Получить("param_intiator_login"); // ! логин ветврача или др. пользователя в Меркурии
	param_vetdoctor_login = СписокКонстант.Получить("param_vetdoctor_login");
	param_vetdoctor_fio 	= СписокКонстант.Получить("param_vetdoctor_fio");
	param_vetdoctor_post 	= СписокКонстант.Получить("param_vetdoctor_post");
	
	Отправитель_ХозСубъект = СписокКонстант.Получить("Отправитель_ХозСубъект");	
	Отправитель_Площадка 	= СписокКонстант.Получить("Отправитель_Площадка");
	Перевозчик_ХозСубъект = СписокКонстант.Получить("Перевозчик_ХозСубъект");
	
	Страна 				= СписокКонстант.Получить("Страна");
	Регион 				= СписокКонстант.Получить("Регион");
	Город 				= СписокКонстант.Получить("Город");
	
	ВСД_Экспертиза 		= СписокКонстант.Получить("ВСД_Экспертиза");	
	Если НЕ(ЗначениеЗаполнено(ВСД_Экспертиза)) Тогда		
		ВСД_Экспертиза 	= "Произ.лабор ";
	КонецЕсли;
	
	ВСД_Местность 		= СписокКонстант.Получить("ВСД_Местность");
	Если НЕ(ЗначениеЗаполнено(ВСД_Местность))  Тогда 
		ВСД_Местность 	= "местность благополучная по остро инфекционным заболеваниям с\х животных и птиц";
	КонецЕсли;

	ВСД_ОсобыеОтметки 	= СписокКонстант.Получить("ВСД_ОсобыеОтметки");
		
	Смещение			= СписокКонстант.Получить("Смещение");
	
	РеквизитГрузополучатель 	= СписокКонстант.Получить("РеквизитГрузополучатель");
	ПропускатьПустыеСвойства 	= СписокКонстант.Получить("ПропускатьПустыеСвойства");
	
	//	//КонтекстФормы.КаталогЛогов = КаталогИБ()+"logs\";
	КаталогЛогов = СписокКонстант.Получить("КаталогЛогов");
	//Если НЕ(ЗначениеЗаполнено(КонтекстФормы.КаталогЛогов )=1 Тогда 
	//	//КаталогЛогов = КаталогИБ()+"logs\";
	//КонецЕсли;
	//	//Если ФС.СуществуетФайл(КонтекстФормы.КаталогЛогов)=0 Тогда 
	//	//	ФС.СоздатьКаталог(КонтекстФормы.КаталогЛогов);
	//	//КонецЕсли;
	//	
	ПаузаСек 				= СписокКонстант.Получить("ПаузаСек");
	Если НЕ(ЗначениеЗаполнено(ПаузаСек)) Тогда
		ПаузаСек=10;
	КонецЕсли;
	ОтладкаЗапросовXML = СписокКонстант.Получить("ОтладкаЗапросовXML");
	
	ТестовыйРежим = СписокКонстант.Получить("ТестовыйРежим");
	ПолноеИмяФайлаОбработки = СписокКонстант.Получить("ПолноеИмяФайлаОбработки");
	ВыводитьПодробнуюИнформацию = СписокКонстант.Получить("ВыводитьПодробнуюИнформацию");
	АвтоЗаписьВСДСоответствия = СписокКонстант.Получить("АвтоЗаписьВСДСоответствия");
	НазваниеРеквизитаКоличество = СписокКонстант.Получить("НазваниеРеквизитаКоличество");
	ПарамКоэффициентПересчетаКоличества = СписокКонстант.Получить("ПарамКоэффициентПересчетаКоличества");
	ВСД_РезультатыИсследований = СписокКонстант.Получить("ВСД_РезультатыИсследований");
	ТермУсловияПеревозки = СписокКонстант.Получить("ТермУсловияПеревозки");
	ВСДЦель = СписокКонстант.Получить("ВСДЦель");
	ПарамЗаполнятьТранзакциюПриОтсутствииПартий = СписокКонстант.Получить("ПарамЗаполнятьТранзакциюПриОтсутствииПартий");
	ПарамНомерУровняУпаковкиДляВСД = СписокКонстант.Получить("ПарамНомерУровняУпаковкиДляВСД");
	ПарамФормаУпаковкиДляВСД = СписокКонстант.Получить("ПарамФормаУпаковкиДляВСД");
	НазваниеРеквизитаКоличествоМест = СписокКонстант.Получить("НазваниеРеквизитаКоличествоМест");
	ОчищатьСправочникВСД_Партии = СписокКонстант.Получить("ОчищатьСправочникВСД_Партии");
	ПарамКолонкаСортировкиПартииСписания = СписокКонстант.Получить("ПарамКолонкаСортировкиПартииСписания");
	ПарамЗнакСортировкиУбывание = СписокКонстант.Получить("ПарамЗнакСортировкиУбывание");
	ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя = СписокКонстант.Получить("ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя");	

	ПарамПоставщикОрганизация = СписокКонстант.Получить("ПарамПоставщикОрганизация");	
	ПарамПоставщикХозСубъект = СписокКонстант.Получить("ПарамПоставщикХозСубъект");	
	ПарамПоставщикПлощадка = СписокКонстант.Получить("ПарамПоставщикПлощадка");	
	
	
КонецФункции

Процедура ПоместитьГлПеременныеВоВременноеХранилище()
	Структура = Новый Структура("Компонента", КомпонентаНаСервере);
	АдресКомпонентыНаСервере		= ПоместитьВоВременноеХранилище(Структура,Новый УникальныйИдентификатор);
	Структура = Новый Структура("Константы,ТермическиеУсловияПеревозки,ТермическиеУсловияПеревозки2", СписокКонстант,ТермическиеУсловияПеревозки,ТермическиеУсловияПеревозки2);
	АдресСпискаКонстантнаСервере	= ПоместитьВоВременноеХранилище(Структура,Новый УникальныйИдентификатор);
КонецПроцедуры

Процедура ЗагрузитьГлПеременныеИзВременногоХранилища()
	КомпонентаНаСервере 	= ПолучитьИзВременногоХранилища(АдресКомпонентыНаСервере).Компонента;
	СписокКонстант		 	= ПолучитьИзВременногоХранилища(АдресСпискаКонстантнаСервере).Константы;
	ТермическиеУсловияПеревозки		 	= ПолучитьИзВременногоХранилища(АдресСпискаКонстантнаСервере).ТермическиеУсловияПеревозки;
	ТермическиеУсловияПеревозки2		 	= ПолучитьИзВременногоХранилища(АдресСпискаКонстантнаСервере).ТермическиеУсловияПеревозки2;
	Если КомпонентаНаСервере = Неопределено Тогда
		Сообщить("Хранилище почикалось");
		АдресКомпонентыНаСервере = "";
		Инициализация();
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьМакетКомпонентыНаСервере(ИмяМакета)    
    Макет = ПолучитьОбщийМакет(ИмяМакета);
    Возврат Макет;
КонецФункции

Функция ЗаписатьМакетКомпонентыВФайл(ИмяМакета,_ИмяDLL)
    Каталог = КаталогВременныхФайлов();	
    Попытка
        ИмяФайла = Каталог + ИмяМакета + ".dll"; //Так НЕРАБОТАЕТ
		ИмяФайла = Каталог + _ИмяDLL+".dll";//"SoapDLL_test.dll"; // Нужно ТАК

        ПолучитьМакетКомпонентыНаСервере(ИмяМакета).Записать(ИмяФайла);        
    Исключение
        Сообщить(ОписаниеОшибки());
    КонецПопытки;    
    
    Возврат ИмяФайла;
КонецФункции

Функция ЗакрузитьКомпонетуНаСервере( ПараметрыОбъекта )
	//ИмяФайлаМакета = "AddIn.SoapDLL_test";
	//ИмяDLL = "SoapDLL_test";
	//ИмяФайлаМакета = "D:\Soad_DLL\SoapDLL2_test.dll";
	Если ТестовыйРежим Тогда 	
		// ТЕСТ
		ИмяDLL = "SoapDLL_test";
		Сообщить("Тестовый режим");
	Иначе
		// РАБОЧАЯ		
		ИмяDLL = "SoapDLL_work";
		Сообщить("Боевой режим");
	КонецЕсли;
	
	КомпонентаНаСервере = Неопределено;
	
	Если (Метаданные.ОбщиеМакеты.Найти("ВСД_Компонента") <> Неопределено) и
		НЕ(ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение) Тогда
		// серверная Версия
		ИмяФайлаМакета = ЗаписатьМакетКомпонентыВФайл("ВСД_Компонента",ИмяDLL);
		//Вариант без Макета - загрузка из файла, расположенного в папке на сервере
		//а. добавить параметр ПарамКаталогКомпонентыНаСервере
		//б. копировать с локальной машины, но тогда это делать придется с клиента, т.е. из формы
		//НаКлиенте считывать локальный файл в хранилище и через хранилище передавать насервер
		//где писать во временную папку
		//ИмяФайлаМакета = СокрЛП(ПарамКаталогКомпонентыНаСервере)+ИмяDLL+".dll";   //"D:\Soad_DLL\"+ИмяDLL+".dll";
		Попытка		
			рез = ПодключитьВнешнююКомпоненту(ИмяФайлаМакета, "Component");
			Если рез Тогда
				КомпонентаНаСервере = Новый("AddIn.Component."+ИмяDLL);//SoapDLL_test"); 	
				Сообщить("Компонента УСПЕШНО загружена на сервере "+КомпонентаНаСервере.Version);
			Иначе
				Сообщить("Не удалось загрузить на Сервере "+ИмяФайлаМакета);			
				Возврат "" ;
			КонецЕсли;
		Исключение
  			КомпонентаНаСервере = Неопределено;
			Сообщить("Не удалось загрузить Компоненту на сервере ");
	  		Сообщить(ОписаниеОшибки());
			Возврат "";
		КонецПопытки;
	ИначеЕсли ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
  		КомпонентаНаСервере = Неопределено;
		Сообщить("Не удалось загрузить Компоненту на сервере -> в конфигурации отсутствует Макет ВСД_Компонента");
		Возврат "";
	Иначе
		//Нет макета, файловый режим
		Попытка
			рез =  ПодключитьВнешнююКомпоненту("AddIn."+ИмяDLL);
			Если рез Тогда
				КомпонентаНаСервере = Новый("AddIn."+ИмяDLL);
				Сообщить("Компонента УСПЕШНО загружена на локальной машине " + КомпонентаНаСервере.Version);
			Иначе
				Сообщить("Не удалось загрузить Компоненту на локальной машине ");			
				Возврат "" ;
			КонецЕсли;
				
		Исключение
			КомпонентаНаСервере = Неопределено;
			Сообщить("Библиотека не зарегистрирована");
			Сообщить(ОписаниеОшибки());
			Возврат "";
		КонецПопытки;	
		
	КонецЕсли;
	
	Возврат ИнициализироватьКомпоненту(ПараметрыОбъекта);
	
//	Попытка
//		Опции = КомпонентаНаСервере.GetOptions();
//	Исключение
//		Сообщить("Компонента не ЗАВЕЛАСЬ");
//		Сообщить(ОписаниеОшибки());
//		Возврат "";
//	КонецПопытки;
	
//	Опции.USERNAME 			= ПараметрыОбъекта.param_username;
//    Опции.PASSWORD 			= ПараметрыОбъекта.param_password;
//    Опции.ISSUER_ID 		= ПараметрыОбъекта.param_issuer_id;
//    Опции.SERVICE_ID 		= ПараметрыОбъекта.param_service_id;
//    Опции.API_KEY 			= ПараметрыОбъекта.param_api_key;
//    Опции.INITIATOR_LOGIN 	= ПараметрыОбъекта.param_intiator_login;
//    Опции.VETDOCTOR_LOGIN 	= ПараметрыОбъекта.param_vetdoctor_login;
//	Опции.LogsDir 			= ПараметрыОбъекта.КаталогЛогов;
//	Опции.VETDOCTOR_FIO 	= ПараметрыОбъекта.param_vetdoctor_fio;
//	Опции.VETDOCTOR_POST 	= ПараметрыОбъекта.param_vetdoctor_post;
//	Опции.DEBUG 			= ПараметрыОбъекта.ОтладкаЗапросовXML;
	
//	КомпонентаНаСервере.Init( Опции );
	
//	возврат КомпонентаНаСервере;
КонецФункции

Функция ИнициализироватьКомпоненту(ПараметрыОбъекта) Экспорт
	
	Попытка
		Опции = КомпонентаНаСервере.GetOptions();
	Исключение
		Сообщить("Компонента не ЗАВЕЛАСЬ");
		Сообщить(ОписаниеОшибки());
		Возврат "";
	КонецПопытки;
	
	Опции.USERNAME 			= ПараметрыОбъекта.param_username;
    Опции.PASSWORD 			= ПараметрыОбъекта.param_password;
    Опции.ISSUER_ID 		= ПараметрыОбъекта.param_issuer_id;
    Опции.SERVICE_ID 		= ПараметрыОбъекта.param_service_id;
    Опции.API_KEY 			= ПараметрыОбъекта.param_api_key;
    Опции.INITIATOR_LOGIN 	= ПараметрыОбъекта.param_intiator_login;
    Опции.VETDOCTOR_LOGIN 	= ПараметрыОбъекта.param_vetdoctor_login;
	Опции.LogsDir 			= ПараметрыОбъекта.КаталогЛогов;
	Опции.VETDOCTOR_FIO 	= ПараметрыОбъекта.param_vetdoctor_fio;
	Опции.VETDOCTOR_POST 	= ПараметрыОбъекта.param_vetdoctor_post;
	Опции.DEBUG 			= ПараметрыОбъекта.ОтладкаЗапросовXML;
	
	КомпонентаНаСервере.Init( Опции );
	СообщитьИнфо("Отладка - > Иницализация компоненты для "+ПараметрыОбъекта.Отправитель_Площадка);
	возврат КомпонентаНаСервере;
КонецФункции


Процедура Инициализация( ) Экспорт
	ЗагрузитьПараметры(Организация); // Получили заполненные реквизиты для ЭтотОбъект
	Если НЕ(ЗначениеЗаполнено(СписокКонстант.Получить("КаталогЛогов"))) Тогда 
		Сообщить("Внимание: каталог log файлов не определен");
		ТестовыйРежим = Истина;
	КонецЕсли;
	
	Если НЕ(ЗначениеЗаполнено(param_api_key)) Тогда
		// Первый Запуск?
		Сообщить("Внимание: не заполнен Параметр param_api_key - > вкл. Тестовый Режим");
		ТестовыйРежим = Истина;
	КонецЕсли;
	
	Если (КомпонентаНаСервере = Неопределено) и ЗначениеЗаполнено(АдресКомпонентыНаСервере) тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
		ИнициализироватьКомпоненту(ЭтотОбъект);
		//?? ИнициализироватьКомпоненту(ЭтотОбъект);
	ИначеЕсли НЕ(КомпонентаНаСервере = Неопределено) Тогда
		// Просто реинициализируем - зачем загружать
		ИнициализироватьКомпоненту(ЭтотОбъект);		
	иначе
		ТермическиеУсловияПеревозки = Новый("СписокЗначений");
		ТермическиеУсловияПеревозки.Добавить("1", "FROZEN");
		ТермическиеУсловияПеревозки.Добавить("2", "CHILLED");
		ТермическиеУсловияПеревозки.Добавить("3", "COOLED");
		ТермическиеУсловияПеревозки.Добавить("4", "VENTILATED");
		// напрямую как в 7.7 не найти по представлению
		ТермическиеУсловияПеревозки2 = Новый("СписокЗначений");
		ТермическиеУсловияПеревозки2.Добавить("FROZEN","1");
		ТермическиеУсловияПеревозки2.Добавить("CHILLED","2");
		ТермическиеУсловияПеревозки2.Добавить("COOLED","3");
		ТермическиеУсловияПеревозки2.Добавить("VENTILATED","4");
		
		КомпонентаНаСервере = ЗакрузитьКомпонетуНаСервере( ЭтотОбъект );
		ПоместитьГлПеременныеВоВременноеХранилище();	
	КонецЕсли;
	Возврат;// КомпонентаНаСервере;
	
	//ИнициализацияСправочников();

КонецПроцедуры

//*************ТЕСТЫ
Функция ПеременныеЖивы() Экспорт   //ТЕСТ
	//КомпонентаНаСервере = ПолучитьИзВременногоХранилища(АдресКомпонентыНаСервере).Объект;
	ЗагрузитьГлПеременныеИзВременногоХранилища();
	Сообщить("Версия компоненты = "+КомпонентаНаСервере.Version);
	Сообщить("СписокКонстант param_username = "+СписокКонстант.Получить("param_username"));
	//Тест = СписокКонстант;
	//Тест2 = КомпонентаНаСервере;
КонецФункции
