Перем Компонента Экспорт;
Перем НП Экспорт;
Перем СписокКонстант Экспорт;
//Перем ЭтоТестовыйРежим Экспорт;
Перем ИмяDLL Экспорт; 
Перем ТермическиеУсловияПеревозки Экспорт;

Процедура СообщитьИнфо(стр)
	Если ВыводитьПодробнуюИнформацию Тогда
		Сообщить(стр);
	КонецЕсли;	
КонецПроцедуры

Функция НайтиОшибки(ФайлXML, док="")
	результат = Ложь;	
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлXML);	
	
	СтрОшибки ="";
	Пока ЧтениеXML.Прочитать() Цикл
		Если (ЧтениеXML.Имя = "error") и (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
			ЧтениеXML.Прочитать();
			СтрОшибки = СтрОшибки + "ОШИБКА: "+ЧтениеXML.Значение+" ";
			Сообщить("ОШИБКА: "+ЧтениеXML.Значение,СтатусСообщения.ОченьВажное);
			результат=Истина
		КонецЕсли;		
	КонецЦикла;
		
	Если ПустоеЗначение(Док)=0 Тогда
		ДокОбъект = док.ПолучитьОбъект();
		ДокОбъект.Комментарий = СокрЛП(ДокОбъект.Комментарий) + СтрОшибки;
		ДокОбъект.Записать();
	КонецЕсли;	
	
	Возврат результат;
КонецФункции

Функция ДатаГод(ВыбДата)
	возврат формат(выбДата, "ДФ=""гггг""")
КонецФункции

Функция ДатаМесяц(ВыбДата)
	возврат формат(выбДата, "ДФ=""ММ""")
КонецФункции

Функция ДатаЧисло(ВыбДата)
	возврат формат(выбДата, "ДФ=""дд""")
КонецФункции

Функция ПустоеЗначение(Зн)
	возврат Число(НЕ (ЗначениеЗаполнено(Зн)) );	
КонецФункции

Функция ДатаXML(ВыбДата, Время="") Экспорт
		
	стрДата = формат(ВыбДата, "ДФ=""гггг-ММ-дд""")+Время;
	Возврат стрДата;
КонецФункции


Функция Пауза() Экспорт
	//ЗадержкаСекунд = 5; //СписокКонстант.Получить("ПаузаСек");
	Состояние("Пауза "+ПаузаСек+" сек");
	
	//tt2=_GetPerformanceCounter();			
	//Сообщить("Пауза = "+(tt2 - tt1));
	
	//Состояние("Пауза "+ПаузаСек+" сек");
	//scr = Новый("WScript.Shell");
	//scr.Run("ping 127.0.0.1 -n "+Сокрлп( Число(ПаузаСек) ),0,1); 

	//стандартное поведение функции
	Компонента.Pause(ПаузаСек*1000); // в ms
КонецФункции

Функция УдалитьXML(ИмяФайла) Экспорт
	
	////стандартное поведение функции
	//Если СписокКонстант.Получить("ОтладкаЗапросовXML")=0 Тогда 
	//	Попытка
	//		ФС.УдалитьФайл(ИмяФайла);
	//	Исключение
	//		Сообщить(ОписаниеОшибки());
	//	КонецПопытки;
	//КонецЕсли;
	
КонецФункции

Функция СтрокаВДату(ДатаСтрока)
	год = Лев(ДатаСтрока,4 );
	мес = Сред(ДатаСтрока,6,2);
	день = Сред(ДатаСтрока,9,2);
	возврат Дата(год, мес,день);
КонецФункции

Функция НайтиХСпоGUID(Guid) Экспорт

	Ответ = "";
	Guid = СокрЛП(Guid);
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ХозСубъект.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
		                      |ГДЕ
		                      |	ВСД_ХозСубъект.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("Guid "+Guid+" не найден, создайте ХС и выполните синхронизацию");			
		КонецЕсли;
		
	Иначе
		СообщитьИнфо("Пустой Guid ХозСубъекта");
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция НайтиПартиюПоGUID(Guid)
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Партия.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Партия КАК ВСД_Партия
		                      |ГДЕ
		                      |	ВСД_Партия.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка.ПолучитьОбъект();
		Иначе
			Ответ = Справочники.ВСД_Партия.СоздатьЭлемент();	
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ВСД_Партия");
		Ответ = Справочники.ВСД_Партия.СоздатьЭлемент();	
	КонецЕсли;
	 	
	Возврат Ответ;
КонецФункции

Функция НайтиПлощадку(guid)
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Площадка.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Площадка КАК ВСД_Площадка
		                      |ГДЕ
		                      |	ВСД_Площадка.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Ответ = ЗагрузитьПлощадкуПоGUID(guid);	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Площадка");
	КонецЕсли;
	 	
	Возврат Ответ;
КонецФункции

Функция НайтиПродукцию(guid)
	если ПустаяСтрока(guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Продукция.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Продукция КАК ВСД_Продукция
		                      |ГДЕ
		                      |	ВСД_Продукция.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Продукция Guid "+guid+" не найдена. Выполните инициализацию");
			Ответ = Справочники.ВСД_Продукция.ПустаяСсылка();	
		КонецЕсли;
	Иначе
		СообщитьИнфо("Пустой Guid ВСД_Продукция");
	КонецЕсли;
	 	
	Возврат Ответ;

КонецФункции

Функция НайтиВидПродукции(guid)
	если ПустаяСтрока(guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ВидПродукции.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ВидПродукции КАК ВСД_ВидПродукции
		                      |ГДЕ
		                      |	ВСД_ВидПродукции.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_ВидПродукции Guid "+guid+" не найдена. Выполните инициализацию");
			Ответ = Справочники.ВСД_ВидПродукции.ПустаяСсылка();	
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ВСД_ВидПродукции");
		Ответ = "";
	КонецЕсли;
	 	
	Возврат Ответ;
	
КонецФункции

Функция Найти_Продукция_Элемент(Название, Uuid="", ВСД_Продукция, ВСД_ВидПродукции) Экспорт
	если ПустаяСтрока(Uuid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Продукция_Элемент.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Продукция_Элемент КАК ВСД_Продукция_Элемент
		                      |ГДЕ
		                      |	ВСД_Продукция_Элемент.UUID = &UUID");
		Запрос.УстановитьПараметр("UUID", Uuid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Продукция_Элемент Guid "+Uuid+" не найдена. Создан новый элемент");
			Спр = Справочники.ВСД_Продукция_Элемент.СоздатьЭлемент();
			Спр.Наименование = Название;
			Спр.Uuid = Uuid;
			Спр.Продукция = ВСД_Продукция;
			Спр.ВидПродукции = ВСД_ВидПродукции;
			Спр.Записать();	
			Ответ = спр.Ссылка;
		КонецЕсли;
	ИначеЕсли ПустаяСтрока(Название)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Продукция_Элемент.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Продукция_Элемент КАК ВСД_Продукция_Элемент
		                      |ГДЕ
		                      |	ВСД_Продукция_Элемент.Наименование = &Название");
		Запрос.УстановитьПараметр("Название", Название );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Продукция_Элемент Guid "+Название+" не найдена. Создан новый элемент");
			Спр = Справочники.ВСД_Продукция_Элемент.СоздатьЭлемент();
			Спр.Наименование = Название;
			Спр.Uuid = Uuid;
			Спр.Продукция = ВСД_Продукция;
			Спр.ВидПродукции = ВСД_ВидПродукции;
			Спр.Записать();	
			Ответ = спр.Ссылка;
		КонецЕсли;

	Иначе
		Сообщить("Пустой Guid ВСД_Продукция_Элемент");
		Ответ ="";
	КонецЕсли;
	 	
	Возврат Ответ;

КонецФункции

Функция НайтиЕдИзмерения(guid, uuid="")	Экспорт
	если ПустаяСтрока(guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ЕдиницыИзмерения.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ЕдиницыИзмерения КАК ВСД_ЕдиницыИзмерения
		                      |ГДЕ
		                      |	ВСД_ЕдиницыИзмерения.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_ЕдиницыИзмерения Guid "+guid+" не найдена. Выполните инициализацию");
			Ответ = Справочники.ВСД_ЕдиницыИзмерения.ПустаяСсылка();	
		КонецЕсли;
	Иначе
		Сообщить("Пустой Guid ВСД_ЕдиницыИзмерения");
		Ответ="";
	КонецЕсли;
	 	
	Возврат Ответ;

КонецФункции

Функция НайтиФормуУпаковки(guid, name) Экспорт

	Ответ = "";
	Guid = СокрЛП(Guid);
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ФормыУпаковки.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ФормыУпаковки КАК ВСД_ФормыУпаковки
		                      |ГДЕ
		                      |	ВСД_ФормыУпаковки.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_ФормыУпаковки GUID ["+guid+"] добавлена");
			//создать 
			Спр = Справочники.ВСД_ФормыУпаковки.СоздатьЭлемент();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		
	Иначе
		Сообщить("Пустой Guid ВСД_ФормыУпаковки");
	КонецЕсли;
	
	Возврат Ответ;
		
КонецФункции

Функция НайтиСтрануПоGUID(GUID, name) Экспорт

	Ответ = "";
	Guid = СокрЛП(Guid);
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Страна.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Страна КАК ВСД_Страна
		                      |ГДЕ
		                      |	ВСД_Страна.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Страна ["+name+"] GUID ["+guid+"] добавлена");
			//создать 
			Спр = Справочники.ВСД_Страна.СоздатьЭлемент();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		
	Иначе
		Сообщить("Пустой Guid ВСД_Страна");
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция НайтиГородПоGUID(GUID, name) Экспорт

	Ответ = "";
	Guid = СокрЛП(Guid);
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Город.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Город КАК ВСД_Город
		                      |ГДЕ
		                      |	ВСД_Город.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Город ["+name+"] GUID ["+guid+"] добавлена");
			//создать 
			Спр = Справочники.ВСД_Город.СоздатьЭлемент();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		
	Иначе
		Сообщить("Пустой Guid ВСД_Город");
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции


Функция НайтиРегионПоGUID(GUID, name) Экспорт

	Ответ = "";
	Guid = СокрЛП(Guid);
	если ПустаяСтрока(Guid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Регион.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Регион КАК ВСД_Регион
		                      |ГДЕ
		                      |	ВСД_Регион.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", Guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Регион ["+name+"] GUID ["+guid+"] добавлена");
			//создать 
			Спр = Справочники.ВСД_Регион.СоздатьЭлемент();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		
	Иначе
		Сообщить("Пустой Guid ВСД_Регион");
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция НайтиВСДпоUUID( uuid ) 
	ВидДокумента = "ВСД";	
	если ПустаяСтрока(uuid)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	"+ВидДокумента+".Ссылка
		                      |ИЗ
		                      |	Документ."+ВидДокумента+" КАК "+ВидДокумента+"
		                      |ГДЕ
		                      |	"+ВидДокумента+".UUID = &UUID");
		Запрос.УстановитьПараметр("UUID", Uuid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			ДокОб = Результат.Ссылка.ПолучитьОбъект();		
			ДокОб.Записать( РежимЗаписиДокумента.ОтменаПроведения, );
			ДокОб.УстановитьПометкуУдаления(Ложь);
			//Док.СнятьПометкуУдаления();
			
			Сообщить("Найден "+Результат.Ссылка);
		Иначе
			ДокОб = Документы[ВидДокумента].СоздатьДокумент();
			//ДокОб.applicationId = applicationId;

			Сообщить("Создан новый "+ВидДокумента+" № "+ДокОб.Номер);
		КонецЕсли;	
		
	Иначе
		Сообщить("Пустой UUID");
	КонецЕсли;
	
	Возврат ДокОб;

КонецФункции

Функция НайтиВСДпоApplicationId(applicationId, ВидДокумента) 

	Ответ = "";
	если ПустаяСтрока(applicationId)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	"+ВидДокумента+".Ссылка
		                      |ИЗ
		                      |	Документ."+ВидДокумента+" КАК "+ВидДокумента+"
		                      |ГДЕ
		                      |	"+ВидДокумента+".applicationId = &applicationId");
		Запрос.УстановитьПараметр("applicationId", applicationId );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			//Сообщить("ВСД_Город ["+name+"] GUID ["+guid+"] добавлена");
			////создать 
			//Спр = Справочники.ВСД_Город.СоздатьЭлемент();
			////Спр.Код = ;
			//Спр.Наименование = name;
			//Спр.GUID = guid;
			//Спр.Записать();
			//Ответ = Спр.Ссылка;			
		КонецЕсли;		
	Иначе
		Сообщить("Пустой applicationId");
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

// Поиск ВСД по UUID и/или ApplicationID
// ВариантПоиска = 1 - поиск только по 1 параметру ApplicationID / uuid
// ВариантПоиска = 2 - поиск только по 2 параметрам - сначала по uuid, потом по ApplicationID 
Функция НайтиВСД(ApplicationID, uuid, ВидДокумента, ВариантПоиска=2) Экспорт

	Если ПустаяСтрока(UUID)=0 Тогда 	
		ответ = НайтиВСДпоUUID(uuid );
		
		Если ВариантПоиска=2 Тогда 
			Если ответ="" Тогда 
				ответ = НайтиВСДпоApplicationId(ApplicationID, ВидДокумента );
			КонецЕсли;
		КонецЕсли;
	Иначе
		ответ = НайтиВСДпоApplicationId(ApplicationID, ВидДокумента );
	КонецЕсли;
	
	//Док = Новый("Документ."+ВидДокумента);
	Если ответ="" Тогда 
		ДокОб = Документы[ВидДокумента].СоздатьДокумент();
		ДокОб.applicationId = applicationId;

		Сообщить("Создан новый "+ВидДокумента+" № "+ДокОб.Номер);
	Иначе		
		ДокОб = ответ.ПолучитьОбъект();		
		ДокОб.Записать( РежимЗаписиДокумента.ОтменаПроведения, );
		//Док.СнятьПометкуУдаления();
		
		Сообщить("Найден "+ответ);
	конецЕсли;	
	
	Возврат ДокОб;
КонецФункции

Функция ЗаписатьПартию(stockEntry)
	//t = stockEntry.text;	
	active = stockEntry.active;		
	uuid = stockEntry.uuid;
	guid = stockEntry.guid;
	st = stockEntry.status;
	entryNumber = stockEntry.entryNumber;
	updateDate = stockEntry.updateDate;
	createDate = stockEntry.createDate;
	
	batch = stockEntry.batch;
	
	product 	= batch.product.guid;
	subProduct 	= batch.subProduct.guid;

	Попытка
		productItemName = batch.productItem.name;
	Исключение
		СообщитьИнфо("Не удалось получить элемент [productItem]");
		productItemName = "";
	КонецПопытки;
	
	Попытка
		productItemUuid = batch.productItem.uuid;
	Исключение			
		productItemUuid="";
	КонецПопытки;
	
	volume 		= batch.volume;
	unit		= batch.unit.guid;

	Попытка
		unitGuid	= batch.unit.guid;			
	Исключение
		unitGuid = "";			
	КонецПопытки;
	Попытка
		unitUuid	= batch.unit.uuid;			
	Исключение
		unitUuid = "";			
	КонецПопытки;
	
	Попытка
		packingFormUuid	= batch.packingList.packingForm.uuid;
	Исключение
		СообщитьИнфо("Не удалось получить элемент [packingForm] [uuid]");
		packingFormUuid = "";			
	КонецПопытки;
	Попытка
		packingFormName	= batch.packingList.packingForm.name;
	Исключение
		packingFormName="";
		СообщитьИнфо("Не удалось получить элемент [packingForm] [name]");
	КонецПопытки;

	packingAmount = batch.packingAmount;
		
	// dateOfProduction 1
	ДатаИзготовления1="";
	ДатаИзготовления="";
	попытка			
		год = batch.dateOfProduction.firstDate.year;
		мес = batch.dateOfProduction.firstDate.month;
		день = batch.dateOfProduction.firstDate.day;
		ДатаИзготовления1 = Дата(год, мес, день);
	Исключение
		Попытка
			ДатаИзготовления = batch.dateOfProduction.informalDate;
		Исключение				
		КонецПопытки;
	КонецПопытки;				
	ДатаИзготовления2="";
	попытка
		год = batch.dateOfProduction.secondDate.year;
		мес = batch.dateOfProduction.secondDate.month;
		день = batch.dateOfProduction.secondDate.day;
		ДатаИзготовления2 = Дата(год, мес, день);
	Исключение			
	КонецПопытки;
	
	//ДатаСрокГодности
	попытка			
		год = batch.expiryDate.firstDate.year;
		мес = batch.expiryDate.firstDate.month;
		день = batch.expiryDate.firstDate.day;
		ДатаСрокГодности1 = Дата(год, мес, день);
	Исключение
		Попытка
			ДатаСрокГодности = batch.expiryDate.informalDate;
		Исключение				
		КонецПопытки;
	КонецПопытки;				
	ДатаСрокГодности2="";
	попытка
		год = batch.expiryDate.secondDate.year;
		мес = batch.expiryDate.secondDate.month;
		день = batch.expiryDate.secondDate.day;
		ДатаСрокГодности2 = Дата(год, мес, день);
	Исключение			
	КонецПопытки;
		
	Попытка			
		producer = batch.producerList.producer.enterprise.guid;
	Исключение
		producer = "";
	КонецПопытки;
	
	Попытка				
		owner = batch.owner.guid; //ХозСубъект
		ВладелецХС = НайтиХСпоGUID(owner);
	Исключение
		ВладелецХС = "";
	КонецПопытки;

	Партия = НайтиПартиюПоGUID(guid);
	
	Если active="false" Тогда 
		СообщитьИнфо("Изменения в партию "+Партия+" uuid ["+uuid+"] не внесены. Признак партии = не активна");
		Партия.Удалить(0);
		Возврат Партия;
	КонецЕсли;
	
	Сообщить(" ВСД_Партия от "+createDate+" # "+entryNumber);
	
	Партия.ДатаИзменения = СтрокаВДату( updateDate );
					
	Партия.Получатель_ХозСубъект = ВладелецХС;
	Партия.Получатель_Площадка = Отправитель_Площадка; 
	Партия.Производитель_Площадка = НайтиПлощадку(producer);
	//Попытка
	//	Партия.Производитель_ХозСубъект = Партия.Производитель_Площадка.Контрагент;
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
	Партия.Продукция 	= НайтиПродукцию(product);
	Партия.ВидПродукции = НайтиВидПродукции(subProduct);
	
	Партия.Продукция_Элемент = Найти_Продукция_Элемент(productItemName, productItemUuid, Партия.Продукция, Партия.ВидПродукции);
	//Партия.СвойствоНоменклатурыЗначение = Партия.Продукция_Элемент.СвойствоНоменклатурыЗначение;
	
	Партия.Количество 	= Число(volume);
	Партия.КоличествоМест = Число(packingAmount);
	Партия.ФормаУпаковки = НайтиФормуУпаковки( packingFormUuid, packingFormName);;

	Партия.ЕдиницаИзмерения = НайтиЕдИзмерения( unitGuid, unitUUID );
	
	Партия.ДатаИзготовления1 = ДатаИзготовления1;
	Партия.ДатаИзготовления2 = ДатаИзготовления2;
	Партия.ДатаИзготовления =  ДатаИзготовления;
	Партия.ДатаСрокГодности = ДатаСрокГодности;
	Партия.ДатаСрокГодности1 = ДатаСрокГодности1;
	Партия.ДатаСрокГодности2 = ДатаСрокГодности2;
	Партия.Статус = st;		
	Партия.GUID = guid;
	Партия.UUID = uuid;
	//Партия.ДатаИзменения = updateDate;
	Партия.НомерЗаписи = entryNumber;
	Партия.НаименованиеПродукции = productItemName;
	Если НЕ(ПустаяСтрока(productItemName)) Тогда 
		Партия.Наименование = productItemName;
	Иначе
		Партия.Наименование = Партия.Продукция_Элемент.Наименование;
	КонецЕсли;
	//Партия.Фирма = глПользователь.ОсновнаяФирма;
	//Если ПустаяСтрока(Партия.Автор)=1 Тогда
	//	Партия.Автор = глПользователь;
	//КонецЕсли;
	
	Партия.ВсдДата = СтрокаВДату(createDate);
			
	Если Партия.Количество=0 Тогда 
		
		Если ( Партия.ЭтоНовый()=0 ) Тогда
			СообщитьИнфо("Количество партии guid ["+guid+"] uuid ["+uuid+"] = 0. Партия удалена. ");
			Партия.Записать();
			Партия.УстановитьПометкуУдаления(истина);
		Иначе
			СообщитьИнфо("Количество партии guid ["+guid+"] uuid ["+uuid+"] = 0. Партия пропущена. ");
			Возврат "";
		КонецЕсли;
	Иначе
		Партия.Записать();
		Партия.УстановитьПометкуУдаления(ложь);
	КонецЕсли;		
	Возврат Партия;	
КонецФункции

Процедура ЗагрузитьXML_ВсеПартииОтвет(имяФайла) Экспорт
    
    Сообщить("Загрузка XML-файла: "+ИмяФайла);    
    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	seList = xdto.application.result.getStockEntryListResponse.stockEntryList.StockEntry;
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		stockEntryList = Новый Массив;
		stockEntryList.Добавить(seList);
	Иначе
		stockEntryList = seList;
	КонецЕсли;
	Для каждого stockEntry из stockEntryList Цикл		
		
		Партия = ЗаписатьПартию(stockEntry);
					
	КонецЦикла;
	
	Сообщить("Загрузка партий завершена");

    
КонецПроцедуры

Функция  ПолучитьПартииОтветXML(appID) Экспорт

	Результат = Компонента.GetStockListResult(СокрЛП(appID));

	Если Результат="COMPLETED" Тогда
		
		//При объединении партий в Меркурии - старые партии пропадают, появляются новые
		// поэтому в 1С остаются "остатки", которые нужно удалять
		Если ОчищатьСправочникВСД_Партии Тогда
			Состояние("Удаление справочника ВСД_Партии");
			//Отправитель_Площадка = СписокКонстант.Получить("Отправитель_Площадка"); 
			
			Выборка = Справочники.ВСД_Партия.Выбрать();
			Пока Выборка.Следующий() Цикл			
				//Если Выборка.Получатель_Площадка = Отправитель_Площадка Тогда 
					СпрОбъект = Выборка.ПолучитьОбъект();
					СпрОбъект.УстановитьПометкуУдаления(истина);
				//КонецЕсли;				
			КонецЦикла;
		КонецЕсли;
		
		ЗагрузитьXML_ВсеПартииОтвет( Компонента.LogFilename );
				
		УдалитьXML( Компонента.LogFilename);
	КонецЕсли;		
		
	Возврат Результат;
КонецФункции

Функция  ПолучитьПартии(Смещение=0) Экспорт
	
	Если ПустаяСтрока(Отправитель_Площадка.GUID) Тогда 
		Сообщить("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

	Результат = Компонента.GetStockList(СокрЛП(Отправитель_Площадка.GUID), Смещение);

	appID = Компонента.ApplicationId;
	//Отладка();
	
	УдалитьXML( Компонента.LogFilename);

	Результат = ПолучитьПартииОтветXML(appID);
	Пока Результат="IN_PROCESS" Цикл
		Пауза();				
		Результат = ПолучитьПартииОтветXML(appID);
	КонецЦикла;		
	
	//УдалитьXML( Компонента.LogFilename);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИНН(ВыбКлиент) экспорт
		
	//стандартное поведение функции
	Попытка		
		ИННКПП = ВыбКлиент.ИНН;
	Исключение
		ИННКПП = "";
	КонецПопытки;
	
	//Если Найти(ИННКПП, "\") <> 0 Тогда
	//	// найден разделитель
	//	Возврат Лев(ИННКПП, Найти(ИННКПП, "\") - 1);

	//ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
	//	// найден разделитель
	//	Возврат Лев(ИННКПП, Найти(ИННКПП, "/") - 1);
	//Иначе
		Возврат СокрЛП(ИННКПП);
	//КонецЕсли;
КонецФункции // ПолучитьИНН() //mbIkola - функция изменена

Функция ЗагрузитьПлощадкуПоGUID(GUID, ХС="") Экспорт
	
	Сообщить(" Запрос getEnterpriseByGuid [ "+СокрЛП(GUID)+" ]");		
	Результат = Компонента.getEnterpriseByGuid( СокрЛП(GUID) );	
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
    
    enterprise = xdto.enterprise ;						
	guid = enterprise.guid;
	uuid = enterprise.uuid;
	name = enterprise.name;
	active = enterprise.active;		
	address = enterprise.address.addressView;
	
	Спр = Новый("СправочникМенеджер.ВСД_Площадка");
	Ссылка_ВСД_Площадка = Спр.НайтиПоРеквизиту("GUID",Guid);
	Если Ссылка_ВСД_Площадка = Справочники.ВСД_Площадка.ПустаяСсылка() Тогда 
		Объект_ВСД_Площадка = Справочники.ВСД_Площадка.СоздатьЭлемент();
		//Спр.УстановитьНовыйКод("00");	
	Иначе
		Объект_ВСД_Площадка = Ссылка_ВСД_Площадка.ПолучитьОбъект(); 
	КонецЕсли;
	
	Объект_ВСД_Площадка.Наименование = name;
	Объект_ВСД_Площадка.Адрес = address;
	Объект_ВСД_Площадка.GUID = guid;
	Объект_ВСД_Площадка.UUID = uuid;	
	
	Если ХС="" Тогда
		Сообщить("Внимание: создана площадка ["+GUID+"] без указания ХозСубъекта ");
		//Возврат;
	Иначе 
		Объект_ВСД_Площадка.GUIDХозСубъекта = ХС.GUID;
	КонецЕсли;	
	
	Объект_ВСД_Площадка.Записать();
	Сообщить("Записан ВСД_Площадка ["+Объект_ВСД_Площадка+"] GUID = "+ Guid);		
	
КонецФункции

Функция ЗагрузитьПлощадки(ХС)	Экспорт

	Если ПустаяСтрока(ХС.GUID)=1 Тогда 
		ХС_ПолучитьGuid(ХС);
	КонецЕсли;
	
	Если ПустаяСтрока(ХС.GUID)=1 Тогда 
		Сообщить("В ХозСубъекте ["+ХС+"] не указан GUID");
		Возврат "";
	КонецЕсли;
	
	Сообщить(" Запрос getBusinessEntityByGuid [ "+СокрЛП(ХС.GUID)+" ]");		
	Результат = Компонента.GetBusinessEntityByGuid( СокрЛП(ХС.GUID) );
	
	//Отладка();
			
    Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Если НайтиОшибки(Компонента.LogFilename) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		List = xdto.businessEntity.activityLocation;
		
		Если ТипЗнч(List)<>Тип("СписокXDTO") Тогда 
			activityLocationList = Новый Массив;
			activityLocationList.Добавить(List);
		Иначе
			activityLocationList = List;
		КонецЕсли;
		
		Для каждого activityLocation из activityLocationList Цикл		
				
			guid = activityLocation.enterprise.guid;
			
			ЗагрузитьПлощадкуПоGUID(guid, ХС);
						
		КонецЦикла;
	Исключение
		Сообщить("Ошибка при получении площадок, привязанных к ХозСубъекту");
	КонецПопытки;
	Сообщить("Загрузка площадок завершена");
КонецФункции

Функция ЗаполнитьФормыУпаковки() Экспорт
	//http://help.vetrf.ru/wiki/PackingForm
	
	НайтиФормуУпаковки("fedf3e32-053c-11e1-99b4-d8d385fbc9e8",	"банки");
	НайтиФормуУпаковки("fedf401c-053c-11e1-99b4-d8d385fbc9e8",	"биг бэги");
	НайтиФормуУпаковки("fedf412a-053c-11e1-99b4-d8d385fbc9e8",	"бочки");
	НайтиФормуУпаковки("fedf422e-053c-11e1-99b4-d8d385fbc9e8",	"жестяные банки");
	НайтиФормуУпаковки("fedf4328-053c-11e1-99b4-d8d385fbc9e8",	"картонные коробки");
	НайтиФормуУпаковки("fedf4422-053c-11e1-99b4-d8d385fbc9e8",	"крафтмешки");
	НайтиФормуУпаковки("fedf451c-053c-11e1-99b4-d8d385fbc9e8",	"мешки");
	НайтиФормуУпаковки("fedf4616-053c-11e1-99b4-d8d385fbc9e8",	"мешки полипропиленовые");
	НайтиФормуУпаковки("fedf46fc-053c-11e1-99b4-d8d385fbc9e8",	"навалом");
	НайтиФормуУпаковки("fedf47ec-053c-11e1-99b4-d8d385fbc9e8",	"насыпью");
	НайтиФормуУпаковки("fedf48dc-053c-11e1-99b4-d8d385fbc9e8",	"пакеты");
	НайтиФормуУпаковки("fedf49cc-053c-11e1-99b4-d8d385fbc9e8",	"полиблоки");
	НайтиФормуУпаковки("fedf55e8-053c-11e1-99b4-d8d385fbc9e8",	"пенопластовые ящики");
	НайтиФормуУпаковки("fedf56f6-053c-11e1-99b4-d8d385fbc9e8",	"паллеты");
	НайтиФормуУпаковки("fedf57f0-053c-11e1-99b4-d8d385fbc9e8",	"полиэтилен");
	НайтиФормуУпаковки("fedf58e0-053c-11e1-99b4-d8d385fbc9e8",	"картон");
	НайтиФормуУпаковки("fedf59da-053c-11e1-99b4-d8d385fbc9e8",	"стокинеты");
	НайтиФормуУпаковки("fedf5ad4-053c-11e1-99b4-d8d385fbc9e8",	"коробки");
	НайтиФормуУпаковки("fedf5bc4-053c-11e1-99b4-d8d385fbc9e8",	"прицеп");
	НайтиФормуУпаковки("fedf5cb4-053c-11e1-99b4-d8d385fbc9e8",	"корзины");
	НайтиФормуУпаковки("fedf5d9a-053c-11e1-99b4-d8d385fbc9e8",	"автоцистерна");
	НайтиФормуУпаковки("fedf5e80-053c-11e1-99b4-d8d385fbc9e8",	"мешки бумажные");
	НайтиФормуУпаковки("fedf5f70-053c-11e1-99b4-d8d385fbc9e8",	"пенопластовые коробки");
	НайтиФормуУпаковки("fedf606a-053c-11e1-99b4-d8d385fbc9e8",	"контейнер");
	НайтиФормуУпаковки("fedf615a-053c-11e1-99b4-d8d385fbc9e8",	"поддоны");
	НайтиФормуУпаковки("fedf6240-053c-11e1-99b4-d8d385fbc9e8",	"на подвесе");
	НайтиФормуУпаковки("fedf6344-053c-11e1-99b4-d8d385fbc9e8",	"кипы");
	НайтиФормуУпаковки("a99ecd22-d2e8-11e4-8109-d89d67148660",	"гофроящики");
	НайтиФормуУпаковки("dae4571f-d2e8-11e4-8109-d89d67148660",	"пластмассовые ящики");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьСтраны() Экспорт
	
	Сообщить(" Запрос GetCountryList ");		
	Результат = Компонента.GetCountryList( );
	
	Сообщить("Загрузка XML-файла: " + Компонента.LogFilename);    

	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Попытка
		countryList = xdto.countryList.country;
		Для каждого country из countryList Цикл		
				
			guid = country.guid;
			uuid = country.uuid;
			name = country.name;			
			
			Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Страна.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Страна КАК ВСД_Страна
		                      |ГДЕ
		                      |	ВСД_Страна.GUID = &GUID");
			Запрос.УстановитьПараметр("GUID", guid );
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда 
				Ответ = Результат.Ссылка;
			Иначе
				Сообщить("ВСД_Страна ["+name+"] GUID ["+guid+"] добавлена");
				Спр = Справочники.ВСД_Страна.СоздатьЭлемент();
				Спр.Наименование = name;
				Спр.GUID = guid;
				Спр.UUID = UUID;
				Спр.Записать();
				Ответ = Спр.Ссылка;
			КонецЕсли;		
					
		КонецЦикла;
	Исключение
		Сообщить("Ошибка при получении ВСД_Страна");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Сообщить("Загрузка стран завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьРегионы(Страна) Экспорт 
	//Страна_GUID = ?(ПустаяСтрока(Страна)=1,"",Страна.GUID);
		
	Сообщить(" Запрос GetRegionList ["+СокрЛП(Страна.GUID) +"]");		
	Результат = Компонента.GetRegionList( СокрЛП(Страна.GUID) );
		
	Сообщить("Загрузка XML-файла: " + Компонента.LogFilename);    
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Попытка
		regionList = xdto.RegionList.region;
		Для каждого region из regionList Цикл		
				
			guid = region.guid;
			uuid = region.uuid;
			name = region.view;			
			
			Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Регион.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Регион КАК ВСД_Регион
		                      |ГДЕ
		                      |	ВСД_Регион.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Регион ["+name+"] GUID ["+guid+"] добавлена");
			//создать 
			Спр = Справочники.ВСД_Регион.СоздатьЭлемент();
			//Спр.Код = ;
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = UUID;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		

		КонецЦикла;
	Исключение
		Сообщить("Ошибка при получении ВСД_Регион");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Сообщить("Загрузка ВСД_Регион завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьГорода(Регион) Экспорт 

	//стандартное поведение функции			
	//Страна_GUID = ?(ПустаяСтрока(Страна)=1,"",Страна_GUID);
		
	Сообщить(" Запрос GetLocalityListByRegion "+Регион+" ["+СокрЛП(Регион.GUID) +"]");		
	Результат = Компонента.GetLocalityListByRegion( СокрЛП(Регион.GUID) );
	
	//Отладка();
	
	 Сообщить("Загрузка XML-файла: " + Компонента.LogFilename);    

	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Попытка
		LocalityList = xdto.LocalityList.Locality;
		Для каждого Locality из LocalityList Цикл		
				
			guid = Locality.guid;
			uuid = Locality.uuid;
			name = Locality.view;			
			
			Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_Город.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_Город КАК ВСД_Город
		                      |ГДЕ
		                      |	ВСД_Город.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе
			Сообщить("ВСД_Город ["+name+"] GUID ["+guid+"] добавлена");
			Спр = Справочники.ВСД_Город.СоздатьЭлемент();
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = UUID;
			Спр.Записать();
			Ответ = Спр.Ссылка;
		КонецЕсли;		

						
		КонецЦикла;
	Исключение
		Сообщить("Ошибка при получении ВСД_Город");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Сообщить("Загрузка ВСД_Город завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьПродукцию(Тип) Экспорт
	// http://help.vetrf.ru/wiki/ProductType
	
	Сообщить(" Запрос GetProductList ");		
	Результат = Компонента.GetProductList( Тип );
	
	Если Результат="SUCCESS" Тогда
			
		Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
		
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
		xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

		Попытка
			productList = xdto.productList.product;
			Для каждого product из productList Цикл		
					
				guid = product.guid;
				uuid = product.uuid;
				name = product.name;			
				
				Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	ВСД_Продукция.Ссылка
			                      |ИЗ
			                      |	Справочник.ВСД_Продукция КАК ВСД_Продукция
			                      |ГДЕ
			                      |	ВСД_Продукция.GUID = &GUID");
			Запрос.УстановитьПараметр("GUID", guid );
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда 
				Ответ = Результат.Ссылка;
				Спр = Результат.Ссылка.ПолучитьОбъект();
			Иначе
				Сообщить("ВСД_Продукция ["+name+"] GUID ["+guid+"] добавлена");
				//создать 
				Спр = Справочники.ВСД_Продукция.СоздатьЭлемент();
			КонецЕсли;		
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = UUID;
			Попытка
				Спр.КодТНВЭД = product.code;	
			Исключение
			КонецПопытки;
			
			Спр.Тип = product.ProductType;				
			Спр.Записать();
			Ответ = Спр.Ссылка;

			ИнициализацияХС_ЗагрузитьВидыПродукции(guid, Спр.Ссылка );
							
			КонецЦикла;
		Исключение
			Сообщить("Ошибка при получении ВСД_Продукция");
			Сообщить(ОписаниеОшибки());
		КонецПопытки;

	КонецЕсли;	
	Сообщить("Загрузка ВСД_Продукция завершена");
КонецФункции

Функция ИнициализацияХС_ЗагрузитьВидыПродукции(guid, Владелец) Экспорт
	
	Если Владелец=Справочники.ВСД_Продукция.ПустаяСсылка() Тогда 
		Сообщить("Не указан владелец "+guid);
		Возврат 0;
	КонецЕсли;

	Сообщить(" Запрос GetProductList ");		
	Результат = Компонента.GetSubProductByProductList( guid );
	
		Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
		
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Попытка
		//subProductList = xdto.subProductList.subProduct;
		Если ТипЗнч(xdto.subProductList.subProduct)<>Тип("СписокXDTO") Тогда 
			subProductList = Новый Массив;
			subProductList.Добавить(xdto.subProductList.subProduct);
		Иначе
			subProductList = xdto.subProductList.subProduct;
		КонецЕсли;
		
		Для каждого subProduct из subProductList Цикл		
				
			guid = subProduct.guid;
			uuid = subProduct.uuid;
			name = subProduct.name;			
			
			Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВСД_ВидПродукции.Ссылка
		                      |ИЗ
		                      |	Справочник.ВСД_ВидПродукции КАК ВСД_ВидПродукции
		                      |ГДЕ
		                      |	ВСД_ВидПродукции.GUID = &GUID");
		Запрос.УстановитьПараметр("GUID", guid );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
			Спр = Результат.Ссылка.ПолучитьОбъект();
			Сообщить("ВСД_ВидПродукции ["+name+"] GUID ["+guid+"] изменена");
		Иначе
			Сообщить("ВСД_ВидПродукции ["+name+"] GUID ["+guid+"] добавлена");
			//создать 
			Спр = Справочники.ВСД_ВидПродукции.СоздатьЭлемент();
		КонецЕсли;		
		Спр.Владелец = Владелец;
		Спр.Наименование = name;
		Спр.GUID = guid;
		Спр.UUID = UUID;
		Попытка
			Спр.КодТНВЭД = subProduct.code;	
		Исключение
		КонецПопытки;

		//Спр.Тип = subProduct.ProductType;				
		Спр.Записать();
		Ответ = Спр.Ссылка;			
						
		КонецЦикла;
	Исключение
		Сообщить("Ошибка при получении ВСД_ВидПродукции");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Сообщить("Загрузка ВСД_ВидПродукции завершена");
		
	Возврат 1;
КонецФункции


Функция ИнициализацияХС_ЗагрузитьЕдиницыИзмерения() Экспорт
	
	Сообщить(" Запрос GetUnitList ");		
	Результат = Компонента.GetUnitList();
	
	Если Результат="SUCCESS" Тогда
		
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
		xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

		Попытка
			unitList = xdto.UnitList.Unit;
			//Если ТипЗнч(xdto.subProductList.subProduct)<>Тип("СписокXDTO") Тогда 
			//	subProductList = Новый Массив;
			//	subProductList.Добавить(xdto.subProductList.subProduct);
			//Иначе
			//	subProductList = xdto.subProductList.subProduct;
			//КонецЕсли;
			
			Для каждого unit из unitList Цикл		
					
				guid = unit.guid;
				uuid = unit.uuid;
				name = unit.name;
				
				Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	ВСД_ЕдиницыИзмерения.Ссылка
			                      |ИЗ
			                      |	Справочник.ВСД_ЕдиницыИзмерения КАК ВСД_ЕдиницыИзмерения
			                      |ГДЕ
			                      |	ВСД_ЕдиницыИзмерения.GUID = &GUID");
			Запрос.УстановитьПараметр("GUID", guid );
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда 
				Ответ = Результат.Ссылка;
				Спр = Результат.Ссылка.ПолучитьОбъект();
				Сообщить("ВСД_ЕдиницыИзмерения ["+name+"] GUID ["+guid+"] изменена");
			Иначе
				Сообщить("ВСД_ЕдиницыИзмерения ["+name+"] GUID ["+guid+"] добавлена");
				//создать 
				Спр = Справочники.ВСД_ЕдиницыИзмерения.СоздатьЭлемент();
			КонецЕсли;		
			
			Спр.Наименование = name;
			Спр.GUID = guid;
			Спр.UUID = UUID;
			Спр.Коэффициент = unit.factor;			
			Спр.Записать();
			Ответ = Спр.Ссылка;			
							
			КонецЦикла;
		Исключение
			Сообщить("Ошибка при получении ВСД_ЕдиницыИзмерения");
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		Сообщить("Загрузка ВСД_ЕдиницыИзмерения завершена");
	КонецЕсли;	
	Сообщить("Загрузка завершена");
КонецФункции

Процедура ИнициализацияХС() Экспорт
	
	Если ПустаяСтрока(param_username)=1 Тогда 
		Предупреждение("Заполните параметр [param_username]");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(param_password)=1 Тогда 
		Предупреждение("Заполните параметр [param_password]");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(param_issuer_id)=1 Тогда 
		Предупреждение("Заполните параметр [issuer_id]");
		Возврат;
	КонецЕсли;
	
	
	ЗаполнитьФормыУпаковки();
	
	ИнициализацияХС_ЗагрузитьСтраны();
	
	Для А=1 По 8 Цикл
		ИнициализацияХС_ЗагрузитьПродукцию(А);
	КонецЦикла;
	
	Если Отправитель_ХозСубъект=Справочники.ВСД_ХозСубъект.ПустаяСсылка() Тогда
		
		СпрКонтрагенты = Справочники.Контрагенты;
		ФормаСписка= СпрКонтрагенты.ПолучитьФормуВыбора();
		Если Не ФормаСписка.Открыта() Тогда
		    ФормаСписка.Открыть();
		КонецЕсли; 

//		СпрКонтрагенты = Новый("Справочник.Контрагенты");
//		Если СпрКонтрагенты.Выбрать("Выберите фирму-отправитель вет справок",)=1 Тогда 
//			ВыбКонтрагент = СпрКонтрагенты.ТекущийЭлемент();
//			СпрХС = СоздатьОбъект("Справочник.ВСД_ХозСубъект");
//			Если СпрХС.НайтиПоРеквизиту("Контрагент", ВыбКонтрагент ,1)=0 Тогда
//				СпрХС.Новый();
//				СпрХС.Наименование = ВыбКонтрагент .Наименование;
//				СпрХС.Контрагент = ВыбКонтрагент ;
//				СпрХС.ИНН = ГМ.ПолучитьИНН(ВыбКонтрагент);
//				СпрХС.Записать();
//				Отправитель_ХозСубъект = СпрХС.ТекущийЭлемент();
//			Иначе
//				Отправитель_ХозСубъект = СпрХС.ТекущийЭлемент();
//			КонецЕсли;			
//		Иначе
//			Возврат;
//		КонецЕсли;		
	КонецЕсли;
	
	Результат = ХС_ПолучитьGuid(Отправитель_ХозСубъект);
	
	ИмяФайла = Компонента.LogFilename;
	Если Результат="SUCCESS" Тогда
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
		xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		Попытка
			guid = xdto.businessEntityList.businessEntity.guid;
			uuid = xdto.businessEntityList.businessEntity.uuid;
			active = xdto.businessEntityList.businessEntity.active;
			Попытка 
				name = xdto.businessEntityList.businessEntity.name;
			Исключение 
				name = xdto.businessEntityList.businessEntity.fio;
			КонецПопытки;
			country = xdto.businessEntityList.businessEntity.juridicalAddress.country.guid;
			countryName = xdto.businessEntityList.businessEntity.juridicalAddress.country.name;
			
			region = xdto.businessEntityList.businessEntity.juridicalAddress.region.guid;
			regionName = xdto.businessEntityList.businessEntity.juridicalAddress.region.name;		

			Попытка 
				locality = xdto.businessEntityList.businessEntity.juridicalAddress.locality.guid;
				localityName = xdto.businessEntityList.businessEntity.juridicalAddress.locality.name;		
			Исключение
				Сообщить("Площадка НЕ привязана к Хозсубъекту. Проверьте площадку в ГИС Меркурий");
				Возврат;
			КонецПопытки;
			
			//ОбъектХС = ХС.ПолучитьОбъект();
			//ОбъектХС.GUID = GUID;
			//ОбъектХС.UUID = uuid;
			//ОбъектХС.Записать();
			//Сообщить("Записан Эл ["+ХС+"] GUID = "+GUID);		
		
		
		Исключение
			Сообщить("Получен пустой ответ сервера. Заполните параметры подключения.");
			Возврат;
		КонецПопытки;
		
		Страна 	= НайтиСтрануПоGUID(country, countryName);
		
		ИнициализацияХС_ЗагрузитьРегионы(Страна);	
	
		ИнициализацияХС_ЗагрузитьЕдиницыИзмерения();
			
		Регион 	= НайтиРегионПоGUID(region, regionName);			
		
		Город 	= НайтиГородПоGUID(locality, localityName);
		
		Если ПустаяСтрока(param_issuer_id)=1 Тогда 
			param_issuer_id = guid;
		Иначе
			Если НЕ(param_issuer_id = guid) Тогда 
				Сообщить("Ошибка в param_issuer_id, должно быть "+guid);
			Иначе
				Сообщить("param_issuer_id - правильно "+name);
			КонецЕсли;
		КонецЕсли;		
		
		ЗагрузитьПлощадки( Отправитель_ХозСубъект );
		
		//Выбрать площадку
		//ВыбРеквизит = "Отправитель_Площадка";
		//ОткрытьПлощадкиПоХС(Отправитель_ХозСубъект);
		
	КонецЕсли;
		
КонецПроцедуры

//=================== ХозСубъекты ===================================
Функция ХС_ПолучитьGuid(ХС) Экспорт

	//стандартное поведение функции		
	ИНН = ПолучитьИНН(ХС.Контрагент);
	Если ПустаяСтрока(ИНН)=1 Тогда 
		Сообщить("Неправильно указан ИНН");
		Возврат "ERROR";
	КонецЕсли;	
	
	Сообщить(" Запрос GetBusinessEntityByINN [ "+ИНН+" ]");		
	Результат = Компонента.GetBusinessEntityByINN( ИНН );	
	
	Если Результат="SUCCESS" Тогда

	  	СообщитьИнфо("Загрузка XML-файла: "+Компонента.LogFilename);    
	    
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
		xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		Если Число(xdto.businessEntityList.total)>0 Тогда			
			guid = xdto.businessEntityList.businessEntity.guid;
			uuid = xdto.businessEntityList.businessEntity.uuid;
			active = xdto.businessEntityList.businessEntity.active;
					
			ОбъектХС = ХС.ПолучитьОбъект();
			ОбъектХС.GUID = GUID;
			ОбъектХС.UUID = uuid;
			ОбъектХС.Записать();
			Сообщить("Записан ХозСубъект ["+ХС+"] GUID = "+GUID);			
		Иначе
			Сообщить("ХозСубъект ["+ХС+"] с ИНН "+ИНН+" не найден в ГИС Меркурий");			
		КонецЕсли;
		
	КонецЕсли;	
		
	Возврат Результат;
	
КонецФункции


Процедура ХС_Создать_Ответ( applicationID, ХС)
	
	Если Не (ЗначениеЗаполнено(applicationID)) Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateBusinessEntityResult [ "+СокрЛП(applicationID)+" ]");		
	Результат = Компонента.CreateBusinessEntityResult( СокрЛП(applicationID));
	//Отладка();	
	
    Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);        
 	
	Если НайтиОшибки(Компонента.LogFilename) Тогда 
		Возврат;
	КонецЕсли;
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Попытка
		be = xdto.application.result.modifyBusinessEntityResponse.businessEntity;
		guid = be.guid;
		uuid = be.uuid;
		ОбъектХС = ХС.ПолучитьОбъект();
		ОбъектХС.GUID = guid;
		ОбъектХС.UUID = uuid;
		ОбъектХС.Записать();
		Сообщить("Записан ХозСубъект ["+ХС+"] GUID = "+GUID);	
	Исключение
		Сообщить("ХозСубъект ["+ХС+"] неудалось записать отчет ГИС Меркурий");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	УдалитьXML( Компонента.LogFilename );
КонецПроцедуры

Процедура ХС_Создать(ХС)   Экспорт

	ИНН = ХС.Контрагент.ИНН;	
	КПП = ХС.Контрагент.КПП;	
	//ИНН = СокрЛП(ХС.Контрагент.ИНН);
	//КПП = СокрЛП(ХС.Контрагент.КПП);
	ОГРН = ХС.Контрагент.ОГРН;

	Если не(ЗначениеЗаполнено(ИНН)) Тогда 
		Сообщить("Неправильно указан ИНН");
		Возврат;
	КонецЕсли;	
	// для ИП - пустое КПП
	//Если ПустоеЗначение(КПП)=1 Тогда 
	//	Сообщить("Неправильно указан КПП","!");
	//	Возврат;
	//КонецЕсли;
	Если НЕ(ЗначениеЗаполнено(ОГРН)) Тогда 
		Сообщить("Не указан ОГРН");
		Возврат;
	КонецЕсли;
	
	СведенияОПлательщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ХС.Контрагент, ТекущаяДата());
	СведенияОПлательщике.Вставить("ЮрФизЛицо", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ХС.Контрагент, "ЮрФизЛицо"));
	//ДанныеДляПечати.Вставить("СведенияОПлательщике", СведенияОПлательщике);
	//ДанныеДляПечати.Вставить("ПредставлениеПлательщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПлательщике, СписокЮр));
	
	Адрес = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПлательщике, "ЮридическийАдрес");
	//ХС.Контрагент.ЮрФизЛицо.ЮрАдрес;
	Если НЕ(ЗначениеЗаполнено(Адрес)) Тогда 
		Сообщить("Не указан ЮридическийАдрес");
		Возврат;
	КонецЕсли;
	
	Наименование = хс.Контрагент.НаименованиеПолное;
	
	Сообщить(" Запрос CreateBusinessEntity [ "+ИНН+" ]");		
	Результат = Компонента.CreateBusinessEntity(
			Наименование, 
			Наименование, 
			ИНН, 
			КПП, 
			ОГРН, 
	        СокрЛП(Страна.GUID), 
            СокрЛП(Регион.GUID), 
            СокрЛП(Город.GUID), 
			Адрес
	);
	
	//Отладка();	
	УдалитьXML( Компонента.LogFilename );
	
	Если Результат="ACCEPTED" Тогда
		Состояние("Пауза "+ПаузаСек+" сек");
		Пауза();
		
		ХС_Создать_Ответ( Компонента.ApplicationId, ХС )
		
	КонецЕсли;
	
КонецПроцедуры

//================== Площадки ===================================
Процедура СоздатьПлощадку(Площадка) Экспорт
	
	Если ПустаяСтрока(Площадка.GuidХозСубъекта)=1 Тогда
		Сообщить("Не указан Guid ХозСубъекта");
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(Страна.GUID)=1 Тогда
		Сообщить("Не указан Страна.GUID");
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(Регион.GUID)=1 Тогда
		Сообщить("Не указан Регион.GUID");
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(Город.GUID)=1 Тогда
		Сообщить("Не указан Город.GUID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateEnterprise [ "+СокрЛП(Площадка)+" ]");		
	Результат = Компонента.CreateEnterprise(
			СокрЛП(Площадка.Контрагент.Наименование),
			СокрЛП(Площадка.Адрес), 
	        СокрЛП(Страна.GUID),
            СокрЛП(Регион.GUID),
            СокрЛП(Город.GUID), 
			СокрЛП(Площадка.GuidХозСубъекта)
	);	
	//Отладка();	
		
	УдалитьXML( Компонента.LogFilename );
	
	Если Результат="ACCEPTED" Тогда
		Состояние("Пауза "+ПаузаСек+" сек");
		Пауза();
		
		ПолучитьОтветПлощадка( Компонента.ApplicationId, Площадка )
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОтветПлощадка( applicationID , Площадка) Экспорт
	
	Если ПустаяСтрока(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateEnterpriseResult [ "+СокрЛП(applicationID)+" ]");		
	Результат = Компонента.CreateEnterpriseResult( СокрЛП(applicationID));
	
    Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Если НайтиОшибки(Компонента.LogFilename) Тогда
		Возврат ;
	КонецЕсли;

	
	enterprise = xdto.application.result.modifyEnterpriseResponse.enterprise;
	guid = enterprise.guid;
	uuid = enterprise.uuid;
	active = enterprise.active;
	Попытка 
		name = enterprise.name;
	Исключение 
		name = enterprise.fio;
	КонецПопытки;
			
	ОбъектПлощадка = Площадка.ПолучитьОбъект();
	ОбъектПлощадка.guid = guid;
	ОбъектПлощадка.uuid = uuid;
	ОбъектПлощадка.Записать();
	Сообщить("Успешно записан ВСД_Площадка ["+Площадка+"] GUID = "+GUID);
      			
	УдалитьXML( Компонента.LogFilename );
	Пауза();
	
	СоздатьСвязьХозсубъектПлощадка(Площадка);

КонецПроцедуры

Процедура СоздатьСвязьХозсубъектПлощадка(Площадка) Экспорт
	Если ПустаяСтрока(Площадка.GuidХозСубъекта)=1 Тогда 
		Сообщить("не указан GUID хоз субъекта");
		Возврат;
	КонецЕсли;
		
	Если ПустаяСтрока(Площадка.GUID)=1 Тогда 
		Сообщить("Выб площадке не указан GUID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateActivityLocationsOperation [ "+СокрЛП(Площадка)+" ]");		
	Результат = Компонента.CreateActivityLocationsOperation(
			СокрЛП(Площадка.GuidХозСубъекта),
			СокрЛП(Площадка.GUID) 
	);
	
	//Отладка();	
	УдалитьXML( Компонента.LogFilename );
	
	Если Результат="ACCEPTED" Тогда
		Пауза();
		
		ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( Компонента.ApplicationId)
	КонецЕсли;
	
КонецПроцедуры


Процедура ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( applicationID )
	
	Если ПустаяСтрока(applicationID)=1 Тогда
		Сообщить("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	Сообщить(" Запрос CreateActivityLocationsOperationResult [ "+СокрЛП(applicationID)+" ]");		
	Результат = Компонента.CreateActivityLocationsOperationResult( СокрЛП(applicationID));
	
	Если Результат="COMPLETED" Тогда			
		//objDom=СоздатьОбъект("MSXML2.DOMDocument");
		//objDom.load(ГМ.Компонента.LogFilename);    	        
		//businessEntity=objDom.selectSingleNode("//merc:businessEntity") ;									
		//guid = businessEntity.selectSingleNode("base:guid").text;
		//uuid = businessEntity.selectSingleNode("base:uuid").text;			
		//active = businessEntity.selectSingleNode("base:active").text;		
		//enterprise = businessEntity.selectSingleNode("ent:activityLocation").selectSingleNode("ent:enterprise").selectSingleNode("base:guid").text;		
		Сообщить("Успешно установлена связь ВСД_Площадка ");//["+enterprise+"] ВСД_ХозСубъект ["+guid+"]");
		//рез = Компонента.ResultString;				
	КонецЕсли;	
	
	УдалитьXML( Компонента.LogFilename );
КонецПроцедуры

Функция НайтиПлощадкиПоНазванию(ХС, Регион, УточнитьНазвание) Экспорт

	//стандартное поведение функции	
	Если НЕ(ЗначениеЗаполнено(ХС.GUID)) Тогда
		Сообщить("Не указан ХозСубъект GUID ");
		Возврат 0;
	КонецЕсли;
	
	
	Стр = СокрЛП(ХС.Контрагент.НаименованиеПолное);
	Если СтрДлина( СокрЛП(ХС.Контрагент.ИНН) )=12 Тогда 
		//ИП
		стр = СтрЗаменить(стр, " ИП","");
		стр = СтрЗаменить(стр, "ИП ","");
	КонецЕсли;
	
	Если УточнитьНазвание=1 Тогда 
		Если ВвестиЗначение(стр,"Название контрагента","Строка")=0 Тогда 
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Сообщить(" Запрос GetRussianEnterpriseListByName [ "+стр+" ] регион = ["+Регион+"]");		
	Результат = Компонента.GetRussianEnterpriseListByName( стр, СокрЛП(Регион.GUID) );
	//Отладка();
	
    Сообщить("Загрузка XML-файла: "+Компонента.LogFilename);    
    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Если НайтиОшибки(Компонента.LogFilename) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		List = xdto.enterpriseList.enterprise;
		
		Если ТипЗнч(List)<>Тип("СписокXDTO") Тогда 
			enterpriseList = Новый Массив;
			enterpriseList.Добавить(List);
		Иначе
			enterpriseList = List;
		КонецЕсли;
		
		Для каждого enterprise из enterpriseList Цикл		
				
			guid = enterprise.guid;
			
			Спр = Новый("СправочникМенеджер.ВСД_Площадка");
			Ссылка_ВСД_Площадка = Спр.НайтиПоРеквизиту("GUID",Guid);
			Если Ссылка_ВСД_Площадка = Справочники.ВСД_Площадка.ПустаяСсылка() Тогда 
				Объект_ВСД_Площадка = Справочники.ВСД_Площадка.СоздатьЭлемент();
				//Спр.УстановитьНовыйКод("00");	
			Иначе
				Объект_ВСД_Площадка = Ссылка_ВСД_Площадка.ПолучитьОбъект(); 
			КонецЕсли;
			
			Объект_ВСД_Площадка.Наименование = enterprise.name;
			Объект_ВСД_Площадка.Адрес = enterprise.address.addressView;
			Объект_ВСД_Площадка.GUID = enterprise.guid;
			Объект_ВСД_Площадка.UUID = enterprise.uuid;	
			
			//Если ХС="" Тогда
			//	Сообщить("Внимание: создана площадка ["+enterprise.GUID+"] ["+enterprise.name+"] без указания ХозСубъекта ");
			//	//Возврат;
			//Иначе 
			Объект_ВСД_Площадка.GUIDХозСубъекта = ХС.GUID;
			//КонецЕсли;	
			
			Объект_ВСД_Площадка.Записать();
			Сообщить("Записан ВСД_Площадка ["+Объект_ВСД_Площадка+"] GUID = "+ Guid);				
			//ЗагрузитьПлощадкуПоGUID(guid, ХС);
						
		КонецЦикла;
	Исключение
		Сообщить("Ошибка при получении площадок, привязанных к ХозСубъекту");
	КонецПопытки;
	Сообщить("Загрузка площадок завершена");
	
	Возврат 1;
КонецФункции

//================================================================

Процедура ЗагрузитьXML_Партии(имяФайла, докОснование="") 
	
	Если НайтиОшибки(имяФайла, докОснование)>0 Тогда 
		Возврат;
	КонецЕсли;	
	
    Сообщить("Загрузка XML-файла: "+ИмяФайла);    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
	seList = xdto.application.result.prepareOutcomingConsignmentResponse.StockEntry;
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		stockEntryList = Новый Массив;
		stockEntryList.Добавить(seList);
	Иначе
		stockEntryList = seList;
	КонецЕсли;
			
	//Сообщить("Получено "+seList.length+" записей","i");
	Для каждого stockEntry из stockEntryList Цикл		
					
		Партия = ЗаписатьПартию(stockEntry);
		
		Если докОснование<>"" Тогда 
			Партия.ДокОснование = докОснование;
			Партия.Записать();
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры

Функция ВыбратьВидДокументаВСД(type)
	
    //{ VetDocumentType 
    //    TRANSPORT, = 1	= Транспортный ВСД.	
    //    PRODUCTIVE, = 2 	= Производственный ВСД.
    //    RETURNABLE, = 3 	= Возвратный ВСД.
    //    INCOMING, = 4  	= Входящий ВСД.
    //    OUTGOING, = 5  	= Исходящий ВСД.
    //}
	
	рез = "";
	Если type="TRANSPORT" Тогда
		рез = "ВСД";
	ИначеЕсли type="PRODUCTIVE" Тогда
		рез = "ВСД_Производство";
	ИначеЕсли type="INCOMING" Тогда
		рез = "ВСД_входящий";
	ИначеЕсли type="RETURNABLE" Тогда
		рез = "ВСД_возвратный";
	ИначеЕсли type="OUTGOING" Тогда
		// проверить !!!
		рез = "ВСД";
	Иначе
		Сообщить("Неопределенный вид ВСД ["+type+"]");
	КонецЕсли;
	
	Возврат рез;
КонецФункции

Процедура ЗагрузитьXML_ВСД(имяФайла, докОснование)
	
	Если НайтиОшибки(имяФайла, докОснование)>0 Тогда 
		Возврат;
	КонецЕсли;		
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Компонента.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	applicationId = xdto.application.applicationId;
	
	seList = xdto.application.result.prepareOutcomingConsignmentResponse.vetDocument;
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		vetDocumentList = Новый Массив;
		vetDocumentList.Добавить(seList);
	Иначе
		vetDocumentList = seList;
	КонецЕсли;
	
	Для каждого vetDocument из vetDocumentList Цикл		
		uuid = vetDocument.uuid;
		st 	 = vetDocument.status;
		type = vetDocument.type;
		
		ВидДокумента = ВыбратьВидДокументаВСД(type);
		
		createDate = vetDocument.issueDate;
		
		consignorBusinessEntity = vetDocument.consignor.businessEntity.guid;
		consignorEnterprise 	= vetDocument.consignor.enterprise.guid;
		
		Попытка
			consigneeBusinessEntity = vetDocument.consignee.businessEntity.guid;
		Исключение
			consigneeBusinessEntity ="";
		КонецПопытки;
		Попытка
			consigneeEnterprise 	= vetDocument.consignee.enterprise.guid;
		Исключение
			consigneeEnterprise = "";
		КонецПопытки;
		
		batch = vetDocument.batch;
		
		product 	= batch.product.guid;
		subProduct 	= batch.subProduct.guid;

		Попытка
			productItem = batch.productItem.name;
		Исключение
			СообщитьИнфо("Не удалось получить элемент [productItem]");
			productItem = "";
		КонецПопытки;
		
		Попытка
			productItemUuid = batch.productItem.uuid;
		Исключение
			productItemUuid="";
		КонецПопытки;
		volume 		= batch.volume;
		unitGuid	= batch.unit.guid;
		
		Попытка
			packingFormUuid	= batch.packingList.packingForm.uuid;			
		Исключение
			СообщитьИнфо("Не удалось получить элемент [packingForm] [uuid]");
			packingFormUuid = "";			
		КонецПопытки;
		Попытка
			packingFormName	= batch.packingList.packingForm.name;	
		Исключение
			packingFormName="";
			СообщитьИнфо("Не удалось получить элемент [packingForm] [name]");
		КонецПопытки;

		packingAmount = batch.packingAmount;
						
		Попытка			
			producer = batch.producerList.producer.enterprise.guid;
		Исключение
			producer = "";
		КонецПопытки;
		
		owner = batch.owner.guid; //ХозСубъект
		ВладелецХС = НайтиХСпоGUID(owner);
				
		//Если ТипЗнч(докОснование) = Тип("ДокументСсылка.ВСД_транзакция") Тогда 
		//	докОбъект = НайтиВсд(applicationId, uuid, ВидДокумента, 1);
		//Иначе			
		//	докОбъект = НайтиВсд(applicationId, uuid, ВидДокумента);
		//КонецЕсли;
		докОбъект = НайтиВСДпоUUID( uuid );
		докОбъект.UUID = uuid;
		докОбъект.applicationId = applicationId;
		//Если докОбъект.ТекущийДокумент() <> докОснование Тогда 
			докОбъект.ДокументОснование = докОснование;
		//КонецЕсли;
		//док.UUID = Компонента.DocUUID;					
		
		Попытка 
			докОбъект.Отправитель_ХозСубъект 	= НайтиХСпоGUID(consignorBusinessEntity);
		Исключение			
		КонецПопытки;
		Попытка			
			докОбъект.Отправитель_Площадка 		= НайтиПлощадку(consignorEnterprise);
		Исключение			
		КонецПопытки;

		Попытка
			докОбъект.Получатель_ХозСубъект 	= НайтиХСпоGUID(consigneeBusinessEntity);
		Исключение			
		КонецПопытки;

		Попытка			
			докОбъект.Получатель_Площадка 		= НайтиПлощадку(consigneeEnterprise);
		Исключение			
		КонецПопытки;
			
		докОбъект.Производитель_Площадка 	= НайтиПлощадку(producer);
		//Попытка
		//	докОбъект.Производитель_ХозСубъект = докОбъект.Производитель_Площадка.Контрагент;
		//Исключение
		//	Сообщить(ОписаниеОшибки());
		//КонецПопытки;		
		//ДокПартия.Перевозчик_ХозСубъект = ;
		докОбъект.Продукция 	= НайтиПродукцию(product);
		докОбъект.ВидПродукции 	= НайтиВидПродукции(subProduct);
		
		докОбъект.Продукция_Элемент = Найти_Продукция_Элемент(productItem, productItemUuid, докОбъект.Продукция, докОбъект.ВидПродукции);
		//докОбъект.СвойствоНоменклатурыЗначение = докОбъект.Продукция_Элемент.СвойствоНоменклатурыЗначение;
		
		докОбъект.Количество 	= Число(volume);
		докОбъект.КоличествоМест = Число(packingAmount);
		ФормаУпаковки 			= НайтиФормуУпаковки( packingFormUuid, packingFormName);
		докОбъект.ФормаУпаковки = ФормаУпаковки;	

		докОбъект.ЕдиницаИзмерения = НайтиЕдИзмерения( unitGuid );;
		
		докОбъект.Статус = st;		
		докОбъект.НаименованиеПродукции = productItem;
		//докОбъект.Фирма = глПользователь.ОсновнаяФирма;
		//докОбъект.Автор = глПользователь;	
		  
		
		докОбъект.Дата = СтрокаВДату(createDate);
				
		докОбъект.Записать(РежимЗаписиДокумента.Проведение);

		Сообщить("Записан "+ВидДокумента+" от "+докОбъект.Дата+" ["+uuid+"]");
	КонецЦикла;

	Если ПустоеЗначение(докОснование)=0 Тогда
		докОснованиеОбъект = докОснование.ПолучитьОбъект();
		докОснованиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;		
КонецПроцедуры


//=================== Документы ==================================

Процедура СохранитьСтатусЗапроса(док)
	ДокОб = док.ПолучитьОбъект();

	ДокОб.applicationID = СокрЛП(Компонента.ApplicationId);
	ДокОб.Статус 		= СокрЛП(Компонента.Status);
	ДокОб.Комментарий = СокрЛП(Компонента.ErrorMessage);		
	ДокОб.Записать();
	Сообщить(" статус = "+ДокОб.Статус );
	Если ПустаяСтрока(СокрЛП(ДокОб.Комментарий))=0 Тогда
		Сообщить("Ошибка: "+ДокОб.Комментарий);
	КонецЕсли;	
КонецПроцедуры

Функция Проверка_ВСД_Исходящий(док)
	Результат = 1; //все в порядке
	
	Если ПустаяСтрока(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;

	Если ПустаяСтрока(док.Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Получатель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Партия.Производитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан док.Партия.Производитель_Площадка.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Перевозчик_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Партия.GUID)=1 Тогда 
		Сообщить("Не указан Партия.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Партия.ВсдДата)=1 Тогда 
		Сообщить("Не указан Партия.ВсдДата");
		Результат = 0;
	КонецЕсли;
	//Если ПустаяСтрока(док.Партия.ФормаУпаковки)=1 Тогда 
	//	Сообщить("Не указан Партия.ФормаУпаковки");
	//	Результат = 0;
	//КонецЕсли;
	Если ПустаяСтрока(док.Продукция)=1 Тогда 
		Сообщить("Не указан Продукция");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.ВидПродукции)=1 Тогда 
		Сообщить("Не указан ВидПродукции");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.НаименованиеПродукции)=1 Тогда 
		Сообщить("Не указан НаименованиеПродукции");
		Результат = 0;
	КонецЕсли;
	//Если ПустаяСтрока(док.ЕдиницаИзмерения)=1 Тогда 
	//	Сообщить("Не указан ЕдиницаИзмерения");
	//	Результат = 0;
	//КонецЕсли;
	//Если ПустаяСтрока(док.ФормаУпаковки)=1 Тогда 
	//	Сообщить("Не указан ФормаУпаковки");
	//	Результат = 0;
	//КонецЕсли;

//	Если ПустаяСтрока(док.applicationID)=0 Тогда 
//		Сообщить("ВСД уже отправлен "+док);
//		Результат = 0;
//	КонецЕсли;
	Если ПустаяСтрока( СокрЛП(док.UUID) )=0 Тогда 
		Сообщить("ВСД уже отправлен "+док);
		Результат = 0;
	КонецЕсли;
	//Если док.ФормаВСД=0 Тогда 
	//	Сообщить("Не указана форма ВСД "+док);
	//	Результат = 0;
	//КонецЕсли;
	Если  док.Количество=0 Тогда 
		Сообщить("не указано Количество "+док);
		Результат = 0;
	КонецЕсли;
	//Если док.КоличествоМест =0 Тогда 
	//	Сообщить("не указано Количество коробов"+док);
	//	Результат = 0;
	//КонецЕсли;

	Если ПустаяСтрока(док.Партия.Продукция.Тип)=1 Тогда 
		Сообщить("Не указан Партия.Продукция.Тип");
		Результат = 0;
	КонецЕсли;

	
	Возврат Результат;
КонецФункции

Функция Отправить_ВСД_Исходящий(док) Экспорт
	
	Если Проверка_ВСД_Исходящий(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Сообщить("Отправляем запрос ВСД_Исходящий ["+док+"]");
	Результат = Компонента.Send_VSD_OUT( док );
	
	//Отладка();
	УдалитьXML( Компонента.LogFilename );
	
	Попытка
		СохранитьСтатусЗапроса(док);
		
		Если Результат="ACCEPTED" Тогда 
			//ВСД отправлен успешно, осталось получить ответ				
			Пауза();			
			
			Результат = ПолучитьРезультат_ВСД_Исходящий( док );
			Сообщить("Результат = "+Результат);
			Для А=1 По 10 Цикл
				Если (Результат="IN_PROCESS") Тогда 
					Пауза();
					Результат = ПолучитьРезультат_ВСД_Исходящий( док );
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		Сообщить("Не удалось записать ApplicationID в документ ВСД "+ОписаниеОшибки());
	КонецПопытки;		

	Возврат 1;
	
КонецФункции

Функция ПолучитьРезультат_ВСД_Исходящий( докСсылка ) Экспорт	

	applicationID = СокрЛП(докСсылка.applicationID);
	Если ПустаяСтрока(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;

	Сообщить("Отправляем запрос ВСД_Исходящий_Результат ["+докСсылка+"]" );
	Результат = Компонента.Send_VSD_OUT_Result( applicationID );

	СохранитьСтатусЗапроса(докСсылка);

	Если Результат="COMPLETED" Тогда

		ЗагрузитьXML_Партии( Компонента.LogFilename );
		
		//Если докСсылка.Вид()="ВСД_исходящий" Тогда 
		//	ДокОснование = докСсылка.ДокОснование;
		//Иначе
			ДокОснование = докСсылка;
		//КонецЕсли;
		//
		ЗагрузитьXML_ВСД( Компонента.LogFilename, ДокОснование);
		
	Иначе
		Сообщить(докСсылка.Комментарий);		
	КонецЕсли;
			
	УдалитьXML( Компонента.LogFilename );
	
	Возврат Результат;
КонецФункции

Функция ПолучитьРезультат_ВСД(applicationID, докСсылка ) Экспорт
	Если ПустоеЗначение(applicationID)=1 Тогда
		Сообщить("Пустая ссылка applicationID");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	Пауза( );
	
	Сообщить("Отправляем запрос ["+докСсылка+"]" );
	Результат = Компонента.SendRequestResult( applicationID );

	Если НайтиОшибки(Компонента.LogFilename, докСсылка)>0 Тогда 
		Возврат Результат;
	КонецЕсли;		
	
	Если ПустоеЗначение(докСсылка)=0 Тогда 
		СохранитьСтатусЗапроса(докСсылка);
		ЗагрузитьXML_ВСД( Компонента.LogFilename, докСсылка);
	КонецЕсли;

	ЗагрузитьXML_Партии( Компонента.LogFilename );
		
	УдалитьXML( Компонента.LogFilename );
	
	Возврат Результат;
КонецФункции

Функция  ОтправитьЗапросXML(ЗапросXML, док="") Экспорт
	Если ПустоеЗначение(док)=0 Тогда 
		Сообщить("Отправляем запрос "+ТипЗнч(док)+" ["+док+"]");
	Иначе
		Сообщить("Отправляем запрос");
	КонецЕсли;
	результат = Компонента.SendRequestXML(ЗапросXML);

	appID = Компонента.ApplicationId;
	
	УдалитьXML( Компонента.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда
		
		Результат = ПолучитьРезультат_ВСД(appID, док ); //ДокОб.ТекущийДокумент()
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Результат = ПолучитьРезультат_ВСД(appID, док ); //ДокОб.ТекущийДокумент()
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат appID;
	
КонецФункции


//================== ВСД_транзакция ===============================

Функция Проверка_ВСД_транзакция(док)
	Результат = 1; //все в порядке
	
	Если ПустаяСтрока(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;

	Если ПустаяСтрока(док.Отправитель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Получатель_Площадка.GUID)=1 Тогда 
		Сообщить("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Перевозчик_ХозСубъект.GUID)=1 Тогда 
		Сообщить("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	
	Для А=0 по Док.Товары.Количество()-1 Цикл
		ТекСтр = Док.Товары[А];
		
		// Не обязательное условие
		//Если ПустаяСтрока(док.Партия.Производитель_Площадка.GUID)=1 Тогда 
		//	Сообщить("Не указан док.Партия.Производитель_Площадка.GUID Выполните синхронизацию справочников");
		//	Результат = 0;
		//КонецЕсли;		
	
		Если ПустаяСтрока(ТекСтр.Партия.GUID)=1 Тогда 
			Сообщить("Не указан Партия.GUID Выполните синхронизацию справочников");
			Результат = 0;
		КонецЕсли;
		Если ПустаяСтрока(ТекСтр.Партия.ВсдДата)=1 Тогда 
			Сообщить("Не указан Партия.ВсдДата");
			Результат = 0;
		КонецЕсли;
		//Если ПустаяСтрока(док.Партия.ФормаУпаковки)=1 Тогда 
		//	Сообщить("Не указан Партия.ФормаУпаковки");
		//	Результат = 0;
		//КонецЕсли;
		//Если ПустаяСтрока(док.ФормаУпаковки)=1 Тогда 
		//	Сообщить("Не указан ФормаУпаковки");
		//	Результат = 0;
		//КонецЕсли;
		Если  ТекСтр.Количество=0 Тогда 
			Сообщить("не указано Количество "+док);
			Результат = 0;
		КонецЕсли;
		//Если док.КоличествоМест =0 Тогда 
		//	Сообщить("не указано Количество коробов"+док);
		//	Результат = 0;
		//КонецЕсли;
	
		Если ПустаяСтрока(ТекСтр.Партия.Продукция.Тип)=1 Тогда 
			Сообщить("Не указан Партия.Продукция.Тип");
			Результат = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	//Если ПустаяСтрока(док.applicationID)=0 Тогда 
	//	Сообщить("ВСД уже отправлен "+док);
	//	Результат = 0;
	//КонецЕсли;
	//Если ПустаяСтрока( СокрЛП(док.UUID) )=0 Тогда 
	//	Сообщить("ВСД уже отправлен "+док);
	//	Результат = 0;
	//КонецЕсли;
	//Если док.ФормаВСД=0 Тогда 
	//	Сообщить("Не указана форма ВСД "+док);
	//	Результат = 0;
	//КонецЕсли;

	
	Возврат Результат;
КонецФункции

Функция ВСД_транзакция_ЗапросXML(док)
	
	Запрос_Шапка = "
	|<prepareOutcomingConsignmentRequest 
	|xmlns:sch='http://www.w3.org/2001/XMLSchema' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document' 
	|xmlns:sh='http://api.vetrf.ru/schema/cdm/argus/shipment' 
	|xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:app='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:co='http://api.vetrf.ru/schema/cdm/argus/common' 
	|xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise' 
	|xmlns:pr='http://api.vetrf.ru/schema/cdm/argus/production' 
	|xmlns:ik='http://api.vetrf.ru/schema/cdm/ikar' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns='http://api.vetrf.ru/schema/cdm/mercury/applications'>
	|        <localTransactionId>[GUID]</localTransactionId>
	|        <initiator>
	|          <co:login>"+СокрЛП( СписокКонстант.Получить("param_intiator_login") )+"</co:login>
	|        </initiator>
	|";
	
	delivery = "
	|        <delivery>
	|          <vd:deliveryDate>" + ДатаXML(док.ТтнДата, "T00:00:00") + "</vd:deliveryDate>
	|          <vd:consignor>
	|            <ent:businessEntity>
	|              <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
	|            </ent:businessEntity>
	|            <ent:enterprise>
	|              <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
	|            </ent:enterprise>
	|          </vd:consignor>
	|          <vd:consignee>
	|            <ent:businessEntity>
	|              <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
	|            </ent:businessEntity>
	|            <ent:enterprise>
	|              <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
	|            </ent:enterprise>
	|          </vd:consignee>
	|";
	
	consignment=""; vetCertificate ="";
	тз = Док.Товары.Выгрузить();
	//тз.ВыбратьСтроки()
	Для А=0 По тз.Количество()-1 Цикл
		СтрокаДокумента = тз[А];
		consignment = consignment+ "
		|          <vd:consignment id='id"+ А +"'>
		|            <vd:productType>"+ СтрокаДокумента.Партия.Продукция.Тип +"</vd:productType>
		|            <vd:product>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.Продукция.GUID) +"</bs:guid>
		|            </vd:product>
		|            <vd:subProduct>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.ВидПродукции.GUID) +"</bs:guid>
		|            </vd:subProduct>
		|            <vd:productItem>
		|";
		Если ПустоеЗначение(СтрокаДокумента.Партия.Продукция_Элемент.GUID)=0 Тогда
			consignment = consignment+ "
			|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.Продукция_Элемент.GUID) +"</bs:guid>
			|";
		КонецЕсли;
		consignment = consignment+ "
		|              <pr:name>"+ СокрЛП(СтрокаДокумента.Партия.Продукция_Элемент.Наименование) +"</pr:name>
		|            </vd:productItem>
		|            <vd:volume>"+ Формат(СтрокаДокумента.Количество, "ЧРД=.; ЧГ=0") +"</vd:volume>
		|            <vd:unit>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.ЕдиницаИзмерения.GUID) +"</bs:guid>
		|            </vd:unit>
		|";
		
		Если СтрокаДокумента.КоличествоМест>0 Тогда 
			consignment = consignment+ "
			|            <vd:packingList>
			|              <co:packingForm>
			|                <bs:uuid>"+ СокрЛП(СтрокаДокумента.ФормаУпаковки.GUID) +"</bs:uuid>
			|              </co:packingForm>
			|            </vd:packingList>
			|            <vd:packingAmount>"+ СтрокаДокумента.КоличествоМест +"</vd:packingAmount>
			|";
		КонецЕсли;
		consignment = consignment+ "
		|            <vd:dateOfProduction>
		|";
		Если (ПустоеЗначение(СтрокаДокумента.Партия.ДатаИзготовления1)=0) Тогда
			consignment = consignment+ "
		|              <vd:firstDate>
		|                <bs:year>"+ДатаГод(СтрокаДокумента.Партия.ДатаИзготовления1)+"</bs:year>
		|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаИзготовления1) +"</bs:month>
		|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаИзготовления1) +"</bs:day>
		|                <bs:hour>0</bs:hour>
		|              </vd:firstDate>
		|";
	КонецЕсли;
		Если ((ПустоеЗначение(СтрокаДокумента.Партия.ДатаИзготовления2)=0) и 
				(СтрокаДокумента.Партия.ДатаИзготовления2 > СтрокаДокумента.Партия.ДатаИзготовления1)) Тогда
			consignment=consignment+"		
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(СтрокаДокумента.Партия.ДатаИзготовления2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаИзготовления2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаИзготовления2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		consignment=consignment+"
		|              <vd:informalDate />
		|            </vd:dateOfProduction>
		|            <vd:expiryDate>
		|";
		
		Если (ПустоеЗначение(СтрокаДокумента.Партия.ДатаСрокГодности1)=0) Тогда
			consignment=consignment+"
			|              <vd:firstDate>
			|                <bs:year>"+ ДатаГод(СтрокаДокумента.Партия.ДатаСрокГодности1) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаСрокГодности1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаСрокГодности1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(СтрокаДокумента.Партия.ДатаСрокГодности2)=0) и 
				(СтрокаДокумента.Партия.ДатаСрокГодности2 > СтрокаДокумента.Партия.ДатаСрокГодности1)) Тогда
			consignment=consignment+"				
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(СтрокаДокумента.Партия.ДатаСрокГодности2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаСрокГодности2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаСрокГодности2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		consignment=consignment+"
		|              <vd:informalDate />
		|            </vd:expiryDate>
		|            <vd:perishable>false</vd:perishable>
		|            <vd:countryOfOrigin>
		|              <bs:uuid>"+ СокрЛП( СписокКонстант.Получить("Страна").UUID) +"</bs:uuid>
		|            </vd:countryOfOrigin>
		|            <vd:producerList />
		|            <vd:productMarkingList />
		|            <vd:lowGradeCargo>false</vd:lowGradeCargo>
		|            <vd:productName>"+ СокрЛП(СтрокаДокумента.Партия.НаименованиеПродукции) +"</vd:productName>
		|            <vd:productCode />
		|            <vd:sourceStockEntry>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.GUID) +"</bs:guid>
		|            </vd:sourceStockEntry>
		|          </vd:consignment>
		|";
			
		vetCertificate  = vetCertificate + "
		|            <vd:vetCertificate for='id"+ А +"'>
		|              <vd:issueSeries />
		|              <vd:issueNumber />
		|              <vd:issueDate>"+ ДатаXML(док.Дата) +"</vd:issueDate>
		|              <vd:form>LIC2</vd:form>
		|          <vd:consignor>
		|            <ent:businessEntity>
		|              <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
		|            </ent:businessEntity>
		|            <ent:enterprise>
		|              <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
		|            </ent:enterprise>
		|          </vd:consignor>
		|          <vd:consignee>
		|            <ent:businessEntity>
		|              <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
		|            </ent:businessEntity>
		|            <ent:enterprise>
		|              <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
		|            </ent:enterprise>
		|          </vd:consignee>
		|              <vd:batch>
		|            <vd:productType>"+ СтрокаДокумента.Партия.Продукция.Тип +"</vd:productType>
		|            <vd:product>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.Продукция.GUID) +"</bs:guid>
		|            </vd:product>
		|            <vd:subProduct>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.ВидПродукции.GUID) +"</bs:guid>
		|            </vd:subProduct>
		|            <vd:productItem>
		|";
		Если ПустоеЗначение(СтрокаДокумента.Партия.Продукция_Элемент.GUID)=0 Тогда
			vetCertificate=vetCertificate+"	
			|              <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.Продукция_Элемент.GUID) +"</bs:guid>
			|";
		КонецЕсли;
		vetCertificate=vetCertificate+"		
		|              <pr:name>"+ СокрЛП(СтрокаДокумента.Партия.Продукция_Элемент.Наименование) +"</pr:name>
		|            </vd:productItem>
		|            <vd:volume>"+ Формат(СтрокаДокумента.Количество, "ЧРД=.; ЧГ=0") +"</vd:volume>
		|            <vd:unit>
		|              <bs:guid>"+ СокрЛП(СтрокаДокумента.ЕдиницаИзмерения.GUID) +"</bs:guid>
		|            </vd:unit>
		|";
		Если СтрокаДокумента.КоличествоМест>0 Тогда 
			vetCertificate=vetCertificate+"	
			|            <vd:packingList>
			|              <co:packingForm>
			|                <bs:uuid>"+ СокрЛП(СтрокаДокумента.ФормаУпаковки.GUID) +"</bs:uuid>
			|              </co:packingForm>
			|            </vd:packingList>
			|            <vd:packingAmount>"+ СтрокаДокумента.КоличествоМест +"</vd:packingAmount>
			|";
		КонецЕсли;
		vetCertificate=vetCertificate+"	
		|            <vd:dateOfProduction>
		|";
		
		Если (ПустоеЗначение(СтрокаДокумента.Партия.ДатаИзготовления1)=0) Тогда
			vetCertificate=vetCertificate+"				
			|              <vd:firstDate>
			|                <bs:year>"+ДатаГод(СтрокаДокумента.Партия.ДатаИзготовления1)+"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаИзготовления1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаИзготовления1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(СтрокаДокумента.Партия.ДатаИзготовления2)=0) и 
				(СтрокаДокумента.Партия.ДатаИзготовления2 > СтрокаДокумента.Партия.ДатаИзготовления1)) Тогда
			vetCertificate=vetCertificate+"		
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(СтрокаДокумента.Партия.ДатаИзготовления2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаИзготовления2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаИзготовления2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		vetCertificate=vetCertificate+"
		|              <vd:informalDate />
		|            </vd:dateOfProduction>
		|            <vd:expiryDate>
		|";
		Если (ПустоеЗначение(СтрокаДокумента.Партия.ДатаСрокГодности1)=0) Тогда
			vetCertificate=vetCertificate+"						
			|              <vd:firstDate>
			|                <bs:year>"+ ДатаГод(СтрокаДокумента.Партия.ДатаСрокГодности1) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаСрокГодности1) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаСрокГодности1) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(СтрокаДокумента.Партия.ДатаСрокГодности2)=0) и 
				(СтрокаДокумента.Партия.ДатаСрокГодности2 > СтрокаДокумента.Партия.ДатаСрокГодности1)) Тогда
			vetCertificate=vetCertificate+"				
			|              <vd:secondDate>
			|                <bs:year>"+ ДатаГод(СтрокаДокумента.Партия.ДатаСрокГодности2) +"</bs:year>
			|                <bs:month>"+ ДатаМесяц(СтрокаДокумента.Партия.ДатаСрокГодности2) +"</bs:month>
			|                <bs:day>"+ ДатаЧисло(СтрокаДокумента.Партия.ДатаСрокГодности2) +"</bs:day>
			|                <bs:hour>0</bs:hour>
			|              </vd:secondDate>
			|";
		КонецЕсли;
		vetCertificate=vetCertificate+"
		|              <vd:informalDate />
		|            </vd:expiryDate>
		|            <vd:perishable>false</vd:perishable>
		|            <vd:countryOfOrigin>
		|              <bs:uuid>"+ СокрЛП( СписокКонстант.Получить("Страна").UUID) +"</bs:uuid>
		|            </vd:countryOfOrigin>
		|            <vd:productMarkingList />
		|            <vd:lowGradeCargo>false</vd:lowGradeCargo>
		//|                <vd:producerList>
		//|                  <ent:producer>
		//|                    <ent:enterprise>
		//|                      <bs:guid>"+ СокрЛП(СтрокаДокумента.Партия.Производитель_Площадка.GUID) +"</bs:guid>
		//|                    </ent:enterprise>
		//|                  </ent:producer>
		//|                </vd:producerList>
		|              </vd:batch>
		|              <vd:productName>"+ СокрЛП(СтрокаДокумента.НаименованиеПродукции) +"</vd:productName>
		|              <vd:productCode />
		|              <vd:purpose>
		|                <bs:guid>5b90da1b-e089-11e1-bcf3-b499babae7ea</bs:guid>
		|              </vd:purpose>
		|              <vd:broker>
		|                <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
		|              </vd:broker>
		|              <vd:transportInfo>
		|                <sh:transportType>1</sh:transportType>
		|                <sh:transportNumber>
		|                  <sh:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</sh:vehicleNumber>
		|                </sh:transportNumber>
		|              </vd:transportInfo>
		|              <vd:cargoReloadingPointList />
		|              <vd:cargoInspected>"+ Число(док.cargoInspected) +"</vd:cargoInspected>
		|              <vd:cargoExpertized>"+  Число(док.cargoExpertized) +"</vd:cargoExpertized>
		|              <vd:expertiseInfo>"+ СокрЛП(док.Экспертиза) +"</vd:expertiseInfo>
		|              <vd:confirmedBy>
		|                <co:login>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_login")) +"</co:login>
		|              </vd:confirmedBy>
		|              <vd:locationProsperity>"+ СокрЛП(док.Местность) +"</vd:locationProsperity>
		|              <vd:importPermit />
		|              <vd:transferPermit />
		|              <vd:specialMarks>"+ СокрЛП(док.ОсобыеОтметки) +"</vd:specialMarks>
		|              <vd:withdrawedBy />
		|              <vd:utilizedBy />
		|            </vd:vetCertificate>
		|";
	
	КонецЦикла;
	
	
	accompanyingForms_Шапка = "
	|          <vd:accompanyingForms>
	|            <vd:waybill>
	|              <sh:issueSeries />
	|              <sh:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</sh:issueNumber>
	|              <sh:issueDate>"+ ДатаXML(док.ТтнДата) +"</sh:issueDate>
	|              <sh:type>1</sh:type>
	|              <sh:consignor>
	|                <ent:businessEntity />
	|                <ent:enterprise />
	|              </sh:consignor>
	|              <sh:consignee>
	|                <ent:businessEntity />
	|                <ent:enterprise />
	|              </sh:consignee>
	|              <sh:broker>
	|                <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
	|              </sh:broker>
	|              <sh:transportInfo>
	|                <sh:transportType>1</sh:transportType>
	|                <sh:transportNumber>
	|                  <sh:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</sh:vehicleNumber>
	|                </sh:transportNumber>
	|              </sh:transportInfo>
	|              <sh:transportStorageType>"+ ТермическиеУсловияПеревозки.Получить( док.ТермическоеСостояние ) +"</sh:transportStorageType>
	|              <sh:cargoReloadingPointList />
	|            </vd:waybill>
	|";
	
	
	ЗапросПодвал = "
	|          </vd:accompanyingForms>
	|        </delivery>
	|      </prepareOutcomingConsignmentRequest>
	|";

	Запрос = Запрос_Шапка+
		delivery+
		consignment+
		accompanyingForms_Шапка+
		vetCertificate+
		ЗапросПодвал;
	
	Возврат Запрос;
КонецФункции

//Старый вариант
Функция Отправить_ВСД_транзакция_1(док) Экспорт
	
	Если Проверка_ВСД_транзакция(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Сообщить("Отправляем запрос Send_VSD_OUT_2 ["+док+"]" );
	Результат = Компонента.Send_VSD_OUT_2( док );
	
	УдалитьXML( Компонента.LogFilename );
	
	СохранитьСтатусЗапроса(док);		
	
	Если Результат="ACCEPTED" Тогда 
		//ВСД отправлен успешно, осталось получить ответ				
		Пауза();			
				
		Результат = ПолучитьРезультат_ВСД_Исходящий( док );
		Сообщить("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") Тогда 
				Пауза( );
				Результат = ПолучитьРезультат_ВСД_Исходящий( док );
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	

	Возврат 1;
	
КонецФункции

Функция Отправить_ВСД_транзакция(док) Экспорт
	
	Если Проверка_ВСД_транзакция(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Сообщить("Отправляем запрос Send_VSD ["+док+"]" );
	ЗапросXML = ВСД_транзакция_ЗапросXML(док);
	
	appID = ОтправитьЗапросXML(ЗапросXML, док);

	Возврат appID;
	
КонецФункции


//================ Заполнение табличной части ============================

// Формирует запрос по регистру СостояниеРаботниковОрганизаций
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапрос(Организации = Неопределено, ПодразделениеОрганизации, ДатаНачала, ДатаОкончания) Экспорт
	
	Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Регистраторы",				Регистраторы);
	Запрос.УстановитьПараметр("ДатаНачала",					НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",				КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("СписокОрганизаций",			Организации);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации",	ПодразделениеОрганизации);
	//Запрос.УстановитьПараметр("Сотрудник",					Сотрудник);
	//Запрос.УстановитьПараметр("ОтбиратьСобытияПоДокументу",	ЗначениеЗаполнено(Регистраторы));
	//Запрос.УстановитьПараметр("НеОтбиратьПоПодразделению",	Не ЗначениеЗаполнено(ПодразделениеОрганизации));
	//Запрос.УстановитьПараметр("НеОтбиратьПоСотруднику",		Не ЗначениеЗаполнено(Сотрудник));
	//Запрос.УстановитьПараметр("НеОтбиратьПоОрганизации",	Не ЗначениеЗаполнено(Организации));
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Определим периоды смены (реальные или намеченные) состояния работников за указанный пользователем интервал.
	// Выбираем намеченные события, зарегистрированные тем же регистратором.
	// Составим список возможных расчетных документов за соответствующий период регистрации
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Док,
	|	РеализацияТоваровУслуг.Контрагент КАК Грузополучатель,
	|	РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент КАК Контрагент,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	|	СУММА(РеализацияТоваровУслугТовары.КоличествоМест) КАК КоличествоМест,
	|	ВСД_Площадка.Ссылка КАК Площадка,
	|	ВСД_ХозСубъект.Ссылка КАК ХозСубъект,
	|	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	|	ВСД_транзакция.Ссылка КАК ВСД,
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	РеализацияТоваровУслуг.Дата КАК Дата
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВСД_транзакция КАК ВСД_транзакция
	|		ПО (ВСД_транзакция.ДокументОснование = РеализацияТоваровУслуг.Ссылка)
	|			И (ВСД_транзакция.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_Площадка КАК ВСД_Площадка
	|		ПО РеализацияТоваровУслуг.Контрагент = ВСД_Площадка.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
	|		ПО РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент = ВСД_ХозСубъект.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПО РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РеализацияТоваровУслугТовары.Сумма > 0
	|	И РеализацияТоваровУслуг.Организация В ИЕРАРХИИ(&СписокОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент,
	|	ВСД_Площадка.Ссылка,
	|	ВСД_ХозСубъект.Ссылка,
	|	ВСД_транзакция.Ссылка,
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер";
	Запрос.Выполнить();
		
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапрос()

// Заполняет т.ч. обработки документами
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Булево - Истина, если успешно выполнено заполнение, иначе Ложь
//
Функция Автозаполнение() Экспорт

	//Если НЕ ЗначениеЗаполнено(Организация) Тогда
	//	ОбщегоНазначенияЗК.СообщитьОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Необходимо указать организацию!"));
	//	Возврат Ложь;
	//КонецЕсли;
	
	РезультатЗапроса = СформироватьЗапрос(Организация, ПодразделениеОрганизации, ДатаНачалаОтбора, ДатаОкончанияОтбора);

	Отгрузки.Загрузить(РезультатЗапроса.Выгрузить());
	Возврат Истина;
	
КонецФункции

Функция СоздатьНовыйХозСубъект(ВыбКонтрагент)
	Спр = Справочники.ВСД_ХозСубъект.СоздатьЭлемент();
	Спр.Контрагент = ВыбКонтрагент;
	Спр.Наименование = ВыбКонтрагент.Наименование;
	Спр.Записать();
	Сообщить("Создан ХозСубъект "+Спр.Ссылка);
	
	Возврат Спр.Ссылка;
КонецФункции

//Функция СоздатьНовыйПлощадка( ВыбКонтрагент, ХС)
//	Спр = Справочники.ВСД_Площадка.СоздатьЭлемент();
//	Спр.Контрагент = ВыбКонтрагент;
//	Спр.GuidХозСубъекта = ХС.GUID;
//	Спр.Наименование = ВыбКонтрагент.Наименование;
//	Спр.Записать();
//	Сообщить("Создан ВСД_Площадка "+Спр.Ссылка);
//	
//	Возврат Спр.Ссылка;
//КонецФункции

Процедура ЗагрузитьПлощадкиСписком(ПоНаименованию=0)  Экспорт
	тзСвертка = Отгрузки.Выгрузить();
	тзСвертка.Свернуть("Отметка, Грузополучатель, Площадка, Контрагент, ХозСубъект",);
	
	Для Каждого стр Из тзСвертка Цикл
		Если стр.Отметка Тогда 
			Если стр.ХозСубъект = Справочники.ВСД_ХозСубъект.ПустаяСсылка() Тогда 
				стр.ХозСубъект = СоздатьНовыйХозСубъект(стр.Контрагент);
			КонецЕсли;
			//Если стр.Площадка = Справочники.ВСД_Площадка.ПустаяСсылка() Тогда 
			//	стр.Площадка = СоздатьНовыйПлощадка( стр.Грузополучатель, стр.ХозСубъект);
			//КонецЕсли;
			
			Если ПустаяСтрока(стр.ХозСубъект.GUID) Тогда 
				ХС_ПолучитьGuid(стр.ХозСубъект);
			КонецЕсли;
			Если ПоНаименованию=0 Тогда 
				Если НЕ(ПустаяСтрока(стр.ХозСубъект.GUID)) Тогда 
					ЗагрузитьПлощадки(стр.ХозСубъект);							
				КонецЕсли;
			Иначе
				Если НЕ(ПустаяСтрока(стр.ХозСубъект.GUID)) Тогда 
					НайтиПлощадкиПоНазванию(стр.ХозСубъект, СписокКонстант.Получить("Регион"), 1);						
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли
	КонецЦикла;
КонецПроцедуры

//============================== Создание ВСД ===================================


Функция СвернутьТч(Док)
	//тзДок = Новый("Массив");
	//Док.Товары.Выгрузить(тзДок);
	
	тзРез = Новый("ТаблицаЗначений");
	тзРез.Колонки.Добавить("ВСД_Продукция_Элемент");
	тзРез.Колонки.Добавить("Количество");
	тзРез.Колонки.Добавить("КоличествоМест");
	
	//тзДок.ВыбратьСтроки();
	//Пока тзДок.ПолучитьСтроку() = 1 Цикл
	для каждого стрДок из док.Товары Цикл
		
		Если ПропускатьПустыеСвойства Тогда 
			Если стрДок.Номенклатура.ВСД_Продукция_Элемент=Справочники.ВСД_Продукция_Элемент.ПустаяСсылка() Тогда
				Сообщить("["+стрДок.Номенклатура+"] количество = "+стрДок.Количество+" не указан ВСД_Продукция_Элемент - пропущен","!");
				Продолжить;
			КонецЕсли;
		КонецЕсли;			
		
		СтрТЧ = тзРез.Добавить();
		СтрТЧ.ВСД_Продукция_Элемент = стрДок.Номенклатура.ВСД_Продукция_Элемент;
		СтрТЧ.Количество = стрДок.Количество;
		СтрТЧ.КоличествоМест = стрДок.КоличествоМест;
	КонецЦикла;
		
	тзРез.Свернуть("ВСД_Продукция_Элемент","Количество, КоличествоМест");
	
	Возврат тзРез;
КонецФункции

Процедура ЗаполнитьТаблицуПартий() Экспорт
	
	//Если НЕ(ЗначениеЗаполнено(Отправитель_ХозСубъект)=1 Тогда
	//	Сообщить("Не выбран параметр Отправитель_ХозСубъект ","!");			
	//	Возврат;
	//КонецЕсли;
	//Если НЕ(ЗначениеЗаполнено(Отправитель_Площадка)=1 Тогда
	//	Сообщить("Не выбран параметр Отправитель_Площадка ","!");			
	//	Возврат;
	//КонецЕсли;
	//Если НЕ(ЗначениеЗаполнено(Перевозчик_ХозСубъект)=1 Тогда
	//	Сообщить("Не выбран параметр Перевозчик_ХозСубъект ","!");			
	//	Возврат;
	//КонецЕсли;
	//
	//Форма.Закладки.ТекущаяСтрока(2);
	//Форма.ИспользоватьСлой("Основной, Партии");
	//ЗаполнитьПартии();
	//ПриВыбореЗакладки(2,"Партии");
		
	Партии.Очистить();
	
	Для Каждого СтрОтгрузки Из Отгрузки Цикл
		Если НЕ(СтрОтгрузки.Отметка) Тогда
			Продолжить;
		КонецЕсли;

		Состояние("Заполнение списка партий ВСД ");
		
		тз = СвернутьТч(СтрОтгрузки.Док);
				
		Для Каждого стрТЗ из ТЗ Цикл
			стр=0;
			стр = Партии.Найти(стрТЗ.ВСД_Продукция_Элемент,"ВСД_Продукция_Элемент");
			Если стр <> Неопределено Тогда 
				стр.КоличествоСписания = стр.КоличествоСписания + стрТЗ.Количество;
				стр.КоличествоМестСписания = стр.КоличествоМестСписания + стрТЗ.КоличествоМест;
			Иначе
				НоваяСтр = Партии.Добавить();
				//НомерСтроки = Партии.Количество();
				НоваяСтр.ВСД_Продукция_Элемент = стрТЗ.ВСД_Продукция_Элемент;
				НоваяСтр.КоличествоСписания = стрТЗ.Количество;
				НоваяСтр.КоличествоМестСписания = стрТЗ.КоличествоМест;
			КонецЕсли;	
						
		КонецЦикла;
		
	КонецЦикла;
	
	////Выберем партии автоматом
	//СписокПартий.ВыбратьСтроки();
	//Пока СписокПартий.ПолучитьСтроку() = 1 Цикл
	//	Попытка
	//		СписокПартий.Партия = НайтиПервуюПартию(СписокПартий.ВСД_Продукция_Элемент);
	//		СписокПартий.Колво = СписокПартий.Партия.Количество;
	//		СписокПартий.КолвоМест = СписокПартий.Партия.КоличествоМест;
	//	Исключение
	//	КонецПопытки;
	//КонецЦикла;
	
	//РаскраситьСписокПартий();

КонецПроцедуры

Процедура СоздатьВСД() Экспорт
	
	Если Партии.Количество()=0 Тогда
		Сообщить("Не заполнена таблица партий.");
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрОтгрузки Из Отгрузки Цикл
		Если НЕ(СтрОтгрузки.Отметка) Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(СтрОтгрузки.ВСД=Документы.ВСД_транзакция.ПустаяСсылка()) Тогда       
			//Если (СокрЛП(СписокДокументов.ВСД.Статус)= "COMPLETED") Тогда  
			//	Сообщить("["+СписокДокументов.Док+"] партия ["+Партия+"] отправлен "+СписокДокументов.ВСД,"!");
			//	Продолжить;
			//КонецЕсли;
			
			Если (ПустаяСтрока(СтрОтгрузки.ВСД.Статус) = 1) Тогда 
				Сообщить("Для "+СтрОтгрузки.Док+" ВСД уже создан, но не отправлен");
				Продолжить;
			КонецЕсли;		
		КонецЕсли;		

		Состояние("Заполнение списка партий ВСД ");
				
		ХС = СтрОтгрузки.ХозСубъект;
		Площадка = СтрОтгрузки.Площадка;
					
		ДокВСД = Документы.ВСД_транзакция.СоздатьДокумент();
		ДокВСД.ДокументОснование = СтрОтгрузки.Док;			
		ДокВСД.Дата = ДокВСД.ДокументОснование.Дата;			
		ДокВСД.Отправитель_ХозСубъект = Отправитель_ХозСубъект;
		ДокВСД.Отправитель_Площадка = Отправитель_Площадка;			
		ДокВСД.Получатель_ХозСубъект = ХС;		
		ДокВСД.Получатель_Площадка = Площадка;					
		ДокВСД.Перевозчик_ХозСубъект = Перевозчик_ХозСубъект;
		
		//ТТН = ДокВСД.ДокументОснование.Маршрут;		
		//ТТН = СписокДокументов.Док.НомерМаршрута;	
					
		ДокВСД.ТтнСерия = ""; //ТТН.Серия;
		ДокВСД.ТтнНомер = СтрОтгрузки.Док.Номер;
		ДокВСД.ТтнДата = СтрОтгрузки.Док.Дата;
		//ДокВСД.номерАвто = "номер авто";//ТТН.Авто.НомернойЗнак;
		//Если НЕ(ЗначениеЗаполнено(ДокВСД.номерАвто)=1 Тогда
			ДокВСД.номерАвто = "не используется";
		//КонецЕсли;
		
		//Попытка
		//	ДокВСД.Автор = глПользователь;
		//Исключение
		//КонецПопытки;

		ДокВСД.ФормаВСД = 1;			
		ДокВСД.Экспертиза 		= ВСД_Экспертиза;
		ДокВСД.Местность 		= ВСД_Местность;
		ДокВСД.ОсобыеОтметки 	= ВСД_ОсобыеОтметки;
		ДокВСД.cargoExpertized  = истина;
		ДокВСД.cargoInspected  	= истина;			
		
		тз = СвернутьТч(СтрОтгрузки.Док);
			
		Для Каждого стрТЗ из ТЗ Цикл
			стр=0;
			стрПартии = Партии.Найти(стрТЗ.ВСД_Продукция_Элемент,"ВСД_Продукция_Элемент");
			Если стр <> Неопределено Тогда 
				Партия = стрПартии.Партия;
			Иначе
				Сообщить("Не найдена партия для свойства "+стрТЗ.ВСД_Продукция_Элемент+"
				|документ "+ДокВСД.ДокументОснование+" пропущен");
				Продолжить;
			КонецЕсли;	
			СтрТовары = ДокВСД.Товары.Добавить();
			СтрТовары.Партия 			= Партия;
			СтрТовары.Количество 		= стрТЗ.Количество;
			СтрТовары.КоличествоМест 	= стрТЗ.КоличествоМест;			
			СтрТовары.ЕдиницаИзмерения 	= СтрТовары.Партия.ЕдиницаИзмерения;
			СтрТовары.ФормаУпаковки 	= СтрТовары.Партия.ФормаУпаковки;
			//СтрТовары.Продукция 		= СтрТовары.Партия.Продукция;
			//СтрТовары.ВидПродукции 		= СтрТовары.Партия.ВидПродукции;

			//СтрТовары.Продукция_Элемент 	= стрПартии.ВСД_Продукция_Элемент;
			//СтрТовары.НаименованиеПродукции = стрПартии.ВСД_Продукция_Элемент.Наименование;

			ДокВСД.ТермическоеСостояние 	= стрПартии.ВСД_Продукция_Элемент.ТермическиеУсловияПеревозки;
			
		КонецЦикла;
		ДокВСД.Записать();
		
		СтрОтгрузки.ВСД = ДокВСД.Ссылка;		
		Сообщить("["+СтрОтгрузки.Грузополучатель+"] создан документ "+СтрОтгрузки.ВСД);		

	КонецЦикла;								

	//РаскраситьСписокДокументов();		
	
КонецПроцедуры

Процедура ОтправитьСписокВСД() Экспорт
		
	Состояние("Меркурий: отправка ВСД исходящие");
	Сообщить("Начало отправки документов");
	
	Для каждого СтрОтгрузка Из Отгрузки Цикл
		ВСД = СтрОтгрузка.ВСД;

		//Если СокрЛП(ВСД.Статус)="REJECTED" Тогда 
		//	Продолжить;
		//КонецЕсли;			
		Если ВСД.Проведен Тогда 
			продолжить;
		КонецЕсли;
		Если ВСД.ПометкаУдаления Тогда 
			Продолжить;
		КонецЕсли;
		Если ПустаяСтрока(ВСД.applicationID)=0 Тогда 
			Если Вопрос("Документ ["+ВСД+"] статус=["+СокрЛП(ВСД.Статус)+"] уже был отправлен, отправить ПОВТОРНО?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Нет Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;		
		
		//tt1=_GetPerformanceCounter();
		Сообщить(""+ВСД+" "+ВСД.Статус);
				
		Отправить_ВСД_транзакция( ВСД );

	КонецЦикла;
	
	Сообщить("Отправка документов завершена");
КонецПроцедуры

//=================== ИНИЦИАЛИЗАЦИЯ ===================================================

Функция ЗагрузитьПараметры(_Организация="") Экспорт
	Если НЕ(ЗначениеЗаполнено(_Организация)) Тогда
		_Организация   = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		Если _Организация.Пустая() Тогда
			Сообщить("Не определена Основная Организация пользователя", СтатусСообщения.ОченьВажное);
		КонецЕсли;		
	КонецЕсли;

	//ИмяФайла = ИмяФайлаНастроек();
	//СписокКонстант=Новый("Соответствие");
	//
	//ФайлНастроек = Новый Файл(ИмяФайла);
	//Если НЕ(ФайлНастроек.Существует()) Тогда
	//	Сообщить("Файл с константами ["+ИмяФайла+"] не найден");
	//Иначе
	//	Сообщить("Параметры загружены из файла ["+ИмяФайла+"] ");
	//	СписокКонстант = ЗначениеИзФайла(ИмяФайла);
	//КонецЕсли;
	//
	//КлючОбъекта  = "ВСД";
	//КлючНастроек = "НастройкиВСД";
	//ВладелецНастроек = ИмяПользователя();
	//// Для восстановления настроек необходимо воспользоваться функцией Загрузить
	//СтруктураНастроек = Неопределено;
	//Попытка
	//	СписокКонстант = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта,КлючНастроек,,ВладелецНастроек);
	//	// если настроек нет, то будет возвращено значение "Неопределено"
	//Исключение
	//	Сообщить("Нет прав на восстановление настроек.");
	//КонецПопытки;

	//Если СписокКонстант = Неопределено Тогда
	//	Сообщить("Не удалось загрузить настройки!");
	//КонецЕсли;	
	
	СписокКонстант = ВСД.ЗагрузитьПараметры( _Организация );
		
	param_username 		= СписокКонстант.Получить("param_username"); ;  // для базовой авторизации
	param_password 		= СписокКонстант.Получить("param_password");
	param_issuer_id		= СписокКонстант.Получить("param_issuer_id"); // идентификатор хозяйствующего субъекта в реестре РСХН.
	param_service_id 	= СписокКонстант.Получить("param_service_id") ;
	param_api_key 		= СписокКонстант.Получить("param_api_key") ;

	param_intiator_login 	= СписокКонстант.Получить("param_intiator_login"); // ! логин ветврача или др. пользователя в Меркурии
	param_vetdoctor_login = СписокКонстант.Получить("param_vetdoctor_login");
	param_vetdoctor_fio 	= СписокКонстант.Получить("param_vetdoctor_fio");
	param_vetdoctor_post 	= СписокКонстант.Получить("param_vetdoctor_post");
	
	Отправитель_ХозСубъект = СписокКонстант.Получить("Отправитель_ХозСубъект");	
	Отправитель_Площадка 	= СписокКонстант.Получить("Отправитель_Площадка");
	Перевозчик_ХозСубъект = СписокКонстант.Получить("Перевозчик_ХозСубъект");
	
	Страна 				= СписокКонстант.Получить("Страна");
	Регион 				= СписокКонстант.Получить("Регион");
	Город 				= СписокКонстант.Получить("Город");
	
	ВСД_Экспертиза 		= СписокКонстант.Получить("ВСД_Экспертиза");	
	Если НЕ(ЗначениеЗаполнено(ВСД_Экспертиза)) Тогда		
		ВСД_Экспертиза 	= "Произ.лабор ";
	КонецЕсли;
	
	ВСД_Местность 		= СписокКонстант.Получить("ВСД_Местность");
	Если НЕ(ЗначениеЗаполнено(ВСД_Местность))  Тогда 
		ВСД_Местность 	= "местность благополучная по остро инфекционным заболеваниям с\х животных и птиц";
	КонецЕсли;

	ВСД_ОсобыеОтметки 	= СписокКонстант.Получить("ВСД_ОсобыеОтметки");
	//	
	//	//КонтекстФормы.КаталогЛогов = КаталогИБ()+"logs\";
	КаталогЛогов = СписокКонстант.Получить("КаталогЛогов");
	//Если НЕ(ЗначениеЗаполнено(КонтекстФормы.КаталогЛогов )=1 Тогда 
	//	//КаталогЛогов = КаталогИБ()+"logs\";
	//КонецЕсли;
	//	//Если ФС.СуществуетФайл(КонтекстФормы.КаталогЛогов)=0 Тогда 
	//	//	ФС.СоздатьКаталог(КонтекстФормы.КаталогЛогов);
	//	//КонецЕсли;
	//	
	ПаузаСек 				= СписокКонстант.Получить("ПаузаСек");
	Если НЕ(ЗначениеЗаполнено(ПаузаСек)) Тогда
		ПаузаСек=10;
	КонецЕсли;
	ОтладкаЗапросовXML = СписокКонстант.Получить("ОтладкаЗапросовXML");
	
	ТестовыйРежим = СписокКонстант.Получить("ТестовыйРежим");
	ПолноеИмяФайлаОбработки = СписокКонстант.Получить("ПолноеИмяФайлаОбработки");
	ВыводитьПодробнуюИнформацию = СписокКонстант.Получить("ВыводитьПодробнуюИнформацию");
КонецФункции

//Функция ВыборВерсии() Экспорт
//		
//	Возврат 1;
//КонецФункции // ВыборВерсии

Процедура Инициализация() Экспорт
	ЗагрузитьПараметры(Организация);
	Если ТестовыйРежим Тогда 	
		// ТЕСТ
		ИмяDLL = "SoapDLL_test";
		//Форма.Заголовок("Меркурий - ТЕСТ");		
	Иначе
		// РАБОЧАЯ		
		ИмяDLL = "SoapDLL_work";
		//Форма.Заголовок("Меркурий - РАБОЧАЯ [!!!]");
	КонецЕсли;

	Попытка
		ПодключитьВнешнююКомпоненту("AddIn."+ИмяDLL);			
		Компонента = Новый("AddIn."+ИмяDLL); 		
	Исключение		
		Сообщить("Библиотека не зарегистрирована");
		Сообщить(ОписаниеОшибки());
		Предупреждение("Библиотека не зарегистрирована
			|"+ОписаниеОшибки());
		Возврат ;
	КонецПопытки;	
	
	Если НЕ(ЗначениеЗаполнено(СписокКонстант.Получить("КаталогЛогов"))) Тогда 
		Сообщить("Внимание: каталог log файлов не определен");
	КонецЕсли;
	
	Опции = Компонента.GetOptions();
	
	Опции.USERNAME 			= param_username;
    Опции.PASSWORD 			= param_password;
    Опции.ISSUER_ID 		= param_issuer_id;
    Опции.SERVICE_ID 		= param_service_id;
    Опции.API_KEY 			= param_api_key;
    Опции.INITIATOR_LOGIN 	= param_intiator_login;
    Опции.VETDOCTOR_LOGIN 	= param_vetdoctor_login;
	Опции.LogsDir 			= КаталогЛогов;
	Опции.VETDOCTOR_FIO 	= param_vetdoctor_fio;
	Опции.VETDOCTOR_POST 	= param_vetdoctor_post;
	Опции.DEBUG 			= ОтладкаЗапросовXML;
		
	Компонента.Init(Опции);
			
	ТермическиеУсловияПеревозки = Новый("СписокЗначений");
	ТермическиеУсловияПеревозки.Добавить("1", "FROZEN");
	ТермическиеУсловияПеревозки.Добавить("2", "CHILLED");
	ТермическиеУсловияПеревозки.Добавить("3", "COOLED");
	ТермическиеУсловияПеревозки.Добавить("4", "VENTILATED");
		
КонецПроцедуры


НП =  Новый НастройкаПериода;
