//Перем Выбор_ВСД_Площадка;
Перем СзПарамГрузополучатель;  // используются лишь на форме для установки параметра - переделать
Перем СзПарамТермУсловияПеревозки;

//&НаКлиенте
//Перем КомпонентаНаКлиенте Экспорт ;
//&НаКлиенте
//Перем ИмяФайлаОтвет Экспорт ;
//&НаСервере
//Перем КомпонентаНаСервере Экспорт;

// ТЕСТ Вывод сообщений  - также смотри в самом низу модуля
//https://курсы-по-1с.рф/articles/2017-09-08-display-progress-of-long-operations/
//https://курсы-по-1с.рф/articles/%D0%B2%D1%8B%D0%B2%D0%BE%D0%B4-%D1%81%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D0%BD%D0%B8%D0%B9-%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8E/
&НаКлиенте
Процедура Сообщить83(стр)
	Сообщение=Новый СообщениеПользователю();
	Сообщение.Текст=стр;
	Сообщение.Сообщить();	
КонецПроцедуры

&НаСервере
Процедура Сообщить83Сервер(стр)
	Сообщение=Новый СообщениеПользователю();
	Сообщение.Текст=стр;
	Сообщение.Сообщить();	
КонецПроцедуры

&НаСервере 
Процедура Вывод_В_Индикатор() 
	МенеджСВ = Новый МенеджерСистемыВзаимодействия; 
	ОтборСВ = Новый ОтборСообщенийСистемыВзаимодействия; 
	ОтборСВ.Количество = 1; 
	ОтборСВ.НаправлениеСортировки = НаправлениеСортировки.Убыв; 
	ОтборОбсужд = Новый ОтборОбсужденийСистемыВзаимодействия; 
	ОтборОбсужд.КонтекстноеОбсуждение = Ложь; 
	ВсеОбсуждения = МенеджСВ.ПолучитьОбсуждения(ОтборОбсужд); 
	Для Каждого ТекОбсуждение Из ВсеОбсуждения Цикл 
		Если ТекОбсуждение.Заголовок = "Служебное" Тогда 
			Прервать; 
		КонецЕсли; 
	КонецЦикла; 
	ОтборСВ.Обсуждение = ТекОбсуждение.Идентификатор; 
	ВсеСообщения = МенеджСВ.ПолучитьСообщения(ОтборСВ); 
	Если ВсеСообщения.Количество() > 0 Тогда 
		Сообщение = ВсеСообщения[0]; 
	Иначе 
		Возврат; 
	КонецЕсли; 
	ЗначениеПроцента = СтрЗаменить(Сообщение.Текст,"Выполнение: ",""); 
	ЗначениеПроцента = СтрЗаменить(ЗначениеПроцента,"%",""); 
	Попытка ЗначениеПроцента = Число(СокрЛП(ЗначениеПроцента)); 
	Исключение 
		Возврат; 
	КонецПопытки; 
	Индикатор = ЗначениеПроцента; 
КонецПроцедуры

&НаКлиенте 
Процедура ОбработчикОжидания() Экспорт 
	Вывод_В_Индикатор(); 
КонецПроцедуры // ВыводПрогрессора()
//************ Оконч ТЕСТ

&НаКлиенте
Функция ВыбратьФайл()
	// Временный вариант для тестирования, т.к Компонента.LogFileName вызывает ступор системы
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл ответа на запрос";
	Диалог.ПолноеИмяФайла = ""; 
	Фильтр = "XML (*result.xml)|*result.xml"; 
	Диалог.Фильтр = Фильтр; 
    Диалог.МножественныйВыбор = Ложь;
	//Диалог.Каталог = "F:\";
	Если Диалог.Выбрать() Тогда
		Возврат Диалог.ПолноеИмяФайла;
	иначе
		Возврат "";
	КонецЕсли;
КонецФункции   

&НаКлиенте
Функция ПолучитьПоследнийXMLОтвет()
	// Временный вариант для тестирования, т.к Компонента.LogFileName вызывает ступор системы
	НайденныеФайлы = НайтиФайлы(Объект.КаталогЛогов, "*result.xml"); //Это массив
//	тзФайлов = Новый ТаблицаЗначений;  // ТЗ нет на клиенте ?
	МаксДатаВремя = Дата(1,1,1);
	ВыбранныйФайл = "";
	Для каждого файл из НайденныеФайлы Цикл
		Если файл.ПолучитьВремяИзменения() > МаксДатаВремя Тогда
			МаксДатаВремя = файл.ПолучитьВремяИзменения();
			ВыбранныйФайл = Файл.ПолноеИмя;	
		КонецЕсли;
	КонецЦикла;
	//Сообщить83(ВыбранныйФайл);
	Возврат ВыбранныйФайл;
КонецФункции  

Функция ПутьКфайлуИзПолного(ПутьИИмяВход)
	//mista
	ПутьИИмя = ПутьИИмяВход;
	Путь = "";
	Имя  = "";
	ПозСлэш = Найти(ПутьИИмя,"\");
	Пока ПозСлэш > 0 Цикл
    	Путь = Путь+Сред(ПутьИИмя,1,ПозСлэш);
	    ПутьИИмя = Сред(ПутьИИмя,ПозСлэш+1);
    	ПозСлэш = Найти(ПутьИИмя,"\");
	КонецЦикла;
	Имя = ПутьИИмя;
	Возврат Путь;
//	КаталогОбработок = Путь;
//	ИмяОбработкиИнтеграции = Имя;
	//Сообщить(Путь);
	//Сообщить(Имя);	
КонецФункции


// каждый раз будет инициирован вызов сервера - использовать как можно реже !!!
// Переделать вызовы в Циклах !!!!
&НаСервере
Функция ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбОбъект,Реквизит) экспорт
	// это раньше делалось просто через точку прямо в модуле формы
	Попытка
		Возврат ВыбОбъект[Реквизит];
	Исключение
		Сообщить83Сервер("Указан неверный реквизит "+Реквизит+" для объекта "+ВыбОбъект);
		Сообщить83Сервер(ОписаниеОшибки());
		Возврат "";
	КонецПопытки
КонецФункции

// Реквизит на форме - текущая площадка = Объект Отправитель_Площадка
&НаКлиенте
Процедура Отправитель_ПлощадкаНаФормеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Отбор по ХС включим
	ГУИДХСдляОтбора = ПолучитьЗначениеРевизитаОбъекта_НаСервере(Объект.Отправитель_ХозСубъект,"GUID");
	ГУИДХСдляОтбора = ?(ЗначениеЗаполнено(ГУИДХСдляОтбора),ГУИДХСдляОтбора,"****");
	
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = Новый Структура("GuidХозСубъекта", ГУИДХСдляОтбора);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина,ЗначениеОтбора);	
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);	
КонецПроцедуры

// ************ Сведения о ХС и Площадках

&НаСервере
Функция ХС_ПолучитьGuid_Сервер(ХС) Экспорт
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ХС_ПолучитьGuid(ХС);	
КонецФункции

&НаКлиенте
Процедура ПолучитьГУИД_ХС(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбранныйХС)) Тогда
		Предупреждение("Не выбран Хозсубъект !");
		Возврат;	
	КонецЕсли;
	ПоказатьОповещениеПользователя("Выполняем запрос получения GUID ХС",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	ХС_ПолучитьGuid_Сервер(ВыбранныйХС);
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПлощадки_Сервер(ХС)	Экспорт
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ЗагрузитьПлощадки(ХС);
    // Этап 4. Обратное преобразование прикладного объекта в реквизит формы
    //ЗначениеВРеквизитФормы(ФОбъект, "Объект");
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПлощадкиПоХС(Команда)
	ПоказатьОповещениеПользователя("Выполняется загрузка Площадок",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	ЗагрузитьПлощадки_Сервер(ВыбранныйХС);
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаСервере
Процедура кнЗагрузитьПлощадкиПоНаименованиюНаСервере(ВыбХС,ВыбРегион,ВыбНазвание)
	ФООбъект = РеквизитФормыВЗначение("Объект");
	ФООбъект.НайтиПлощадкиПоНазванию(ВыбХС, ВыбРегион, ВыбНазвание);
	//ЗначениеВРеквизитФормы(ФООбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура кнЗагрузитьПлощадкиПоНаименованию(Команда)
	ПоНаименованию="";
	Если ВвестиЗначение(ПоНаименованию,"Название контрагента","Строка")=0 Тогда
		Возврат;
	КонецЕсли;
	ТВопроса = "Загружаем все площадки региона "+Объект.Регион+" 
	| содержащие "+ПоНаименованию+". 
	|При отсутствии явного указания ХС в ответе Меркурий
	|Площадки будут привязаны к "+ВыбранныйХС+" ?";
	Ответ = Вопрос(ТВопроса,РежимДиалогаВопрос.ДаНет,0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется загрузка Площадок",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		кнЗагрузитьПлощадкиПоНаименованиюНаСервере(ВыбранныйХС,Объект.Регион,ПоНаименованию);
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПлощадкиСписком_Сервер(ПоНаименованию)
	ФООбъект = РеквизитФормыВЗначение("Объект");
	ФООбъект.ЗагрузитьПлощадкиСписком(ПоНаименованию);
	ЗначениеВРеквизитФормы(ФООбъект, "Объект");
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПлощадкиПоСпискуДокументов(Команда)
	ПоНаименованию="";
	Если Команда.имя = "ЗагрузитьПлощадкиПоСпискуДокументовНаименование" тогда
		// по списку несколько бессмысленное мероприятие в данном случае -
		// ответ будет один и тот же всегда, Площадки без owner в ответе завяжутся к последнему ХС в Списке
		Если ВвестиЗначение(ПоНаименованию,"Название контрагента","Строка")=0 Тогда
			Возврат;
		КонецЕсли;		
		ТВопроса = "Загружаем все площадки региона "+Объект.Регион+", 
		| содержащие "+ПоНаименованию+". 
		|При отсутствии явного указания ХС в ответе Меркурий
		|Площадки будут привязаны к последнему ХС из отмеченных в списке ?";
		Ответ = Вопрос(ТВопроса,РежимДиалогаВопрос.ДаНет,0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПоказатьОповещениеПользователя("Выполняется загрузка Площадок",,"Ожидайте...",БиблиотекаКартинок.Информация32);
			ЗагрузитьПлощадкиСписком_Сервер(ПоНаименованию);
			ПоказатьОповещениеПользователя("Выполнено");
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ПоказатьОповещениеПользователя("Выполняется загрузка Площадок",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	ЗагрузитьПлощадкиСписком_Сервер(ПоНаименованию);
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаКлиенте
Процедура ВыбраннаяПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Отбор по ХС включим
	ГУИДХСдляОтбора = ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбранныйХС,"GUID");
	ГУИДХСдляОтбора = ?(ЗначениеЗаполнено(ГУИДХСдляОтбора),ГУИДХСдляОтбора,"****");
	
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = Новый Структура("GuidХозСубъекта", ГУИДХСдляОтбора);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина,ЗначениеОтбора);	
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);	
КонецПроцедуры

&НаСервере
Процедура кнХС_СоздатьНаСервере()
	ФООбъект = РеквизитФормыВЗначение("Объект");
	ФООбъект.ХС_Создать(ВыбранныйХС);
КонецПроцедуры

&НаКлиенте
Процедура кнХС_Создать(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбранныйХС)) тогда
		Сообщить83("Укажите ХС");
		Возврат;
	КонецЕсли;	
	Ответ = Вопрос("Создать ХС "+ВыбранныйХС+" в Меркурий ?",РежимДиалогаВопрос.ДаНет,0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Создаем ХС в Меркурий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
    	кнХС_СоздатьНаСервере();
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;	
КонецПроцедуры


&НаСервере
Функция кнПлощадкаПоХССоздатьНаСервере(ВыбХС)
	ФООбъект = РеквизитФормыВЗначение("Объект");
	СведенияОКонтрагенте = ФООбъект.ПолучитьСведенияОКонтрагенте(ВыбХС.Контрагент,ТекущаяДата());	
	СпрПл = Справочники.ВСД_Площадка.СоздатьЭлемент();
	СпрПл.Наименование = ВыбХС.Контрагент.Наименование;
	СпрПл.Контрагент = ВыбХС.Контрагент.Ссылка;
	СпрПл.GuidХозСубъекта = ВыбХС.GUID;
	Попытка СпрПл.Адрес = СведенияОКонтрагенте.ФактическийАдрес; Исключение КонецПопытки;
	СпрПл.Записать();
	Сообщить83Сервер("Создан ВСД_Площадка "+СпрПл);
	Возврат СпрПл.Ссылка;
КонецФункции

&НаКлиенте
Процедура кнПлощадкаПоХССоздать(Команда)
	// Создание Площадки в справочнике 1С
	Если НЕ(ЗначениеЗаполнено(ВыбранныйХС)) Тогда
		Предупреждение("Выберите Хоз субъект");
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбраннаяПлощадка) Тогда
		Предупреждение("Уже создана Площадка в Справочнике 1С - для создания новой очистите поле");
		Возврат;
	КонецЕсли;
	Если НЕ(ЗначениеЗаполнено(ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбранныйХС,"GUID"))) Тогда
		Предупреждение("Хоз субъект не определен в ГИС Меркурий - Выполните поиск или Создайте");
		Возврат;
	КонецЕсли;
	ТВопроса = "Создать Площадку в справочнике 1С для 
	|"+ВыбранныйХС+" ?"; 
	Ответ = Вопрос(ТВопроса,РежимДиалогаВопрос.ДаНет,0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		//ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		ВыбраннаяПлощадка = кнПлощадкаПоХССоздатьНаСервере(ВыбранныйХС);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура кнСоздатьПлощадкувМеркурийНаСервере(ВыбПлощадка)
	ФООбъект = РеквизитФормыВЗначение("Объект");
	ФООбъект.СоздатьПлощадку(ВыбПлощадка);
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьПлощадкувМеркурий(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбраннаяПлощадка)) Тогда
		Предупреждение("Не указана Площадка 1С для создания в Меркурий");
		Возврат;
	КонецЕсли;
	ПоказатьОповещениеПользователя("Создаем площадку в Меркурий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнСоздатьПлощадкувМеркурийНаСервере(ВыбраннаяПлощадка);
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаСервере
Процедура кнПривязатьПлощадкуНаСервере(ВыбПлощадка)
	ФООбъект = РеквизитФормыВЗначение("Объект");
	ФООбъект.СоздатьСвязьХозсубъектПлощадка(ВыбПлощадка);
КонецПроцедуры

&НаКлиенте
Процедура кнПривязатьПлощадку(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбраннаяПлощадка)) Тогда
		Предупреждение("Не указана Площадка для привязки к ХС");
		Возврат;
	КонецЕсли;
	ПоказатьОповещениеПользователя("Привязываем Площадку к ХС",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнПривязатьПлощадкуНаСервере(ВыбраннаяПлощадка);
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры


// ************* Сведения о ХС и Площадках окончание

// *** Загрузка НСИ

&НаСервере
Функция ЗагрузитьЦели_Сервер()
    ФОбъект = РеквизитФормыВЗначение("Объект");  // РеквизитФормыВЗначение недоступен с клиента
	Рез = ФОбъект.ИнициализацияХС_ЗагрузитьЦели();
    //ЗначениеВРеквизитФормы(ФОбъект, "Объект"); //Не нужно нам данные обратно в форму тащить, они не изменились
	Возврат Рез;
КонецФункции
 
&НаКлиенте
Процедура ЗагрузитьЦели(Команда)
	ПоказатьОповещениеПользователя("Выполняется загрузка Классификатора Цели");
	ЗагрузитьЦели_Сервер();
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры
// *** Загрузка НСИ Окончание


// ************* Открытие, Инициализация и сохранение параметров
&НаСервере
Процедура ИнициализацияСервер()
    ФОбъект = РеквизитФормыВЗначение("Объект");
//	Если Объект.Организация.Пустая() Тогда
//УПП		Организация   = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
//		ФОбъект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация",ИмяПользователя());
//	КонецЕсли;

// 	ФОбъект.ЗагрузитьПараметры(ФОбъект.Организация);  //есть уже  в ФОбъект.Инициализация() 
	ФОбъект.Инициализация();
	//КомпонентаНаСервере = ФОбъект.Инициализация();
	// Мы в инициализации уже сохранили в АдресКомпонентыНаСервере
	// а раз Инициализация() вызвана отсюда, то Временное хранилище не умрет до закрытия формы 
//	Структура = Новый Структура("Объект", КомпонентаНаСервере);
//	ФОбъект.АдресКомпонентыНаСервере = ПоместитьВоВременноеХранилище(Структура, Новый УникальныйИдентификатор);	
	
	ФОбъект.Автозаполнение(флПеремещения);
	
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");	
КонецПроцедуры

&НаКлиенте
Функция ИнициализацияКлиентНаФорме() Экспорт      // ТЕСТ НЕ Используется
	Если Объект.ТестовыйРежим Тогда 	
		// ТЕСТ
		ИмяDLL = "SoapDLL_test";
		//Форма.Заголовок("Меркурий - ТЕСТ");		
	Иначе
		// РАБОЧАЯ		
		ИмяDLL = "SoapDLL_work";
		//Форма.Заголовок("Меркурий - РАБОЧАЯ [!!!]");
	КонецЕсли;
	
	КомпонентаНаКлиенте = "";
	Попытка
		рез = ПодключитьВнешнююКомпоненту("AddIn."+ИмяDLL);			
		//  ПодключитьВнешнююКомпоненту("AddIn."+ИмяDLL, , ТипВнешнейКомпоненты.Native);			
		  
		//ПодключитьВнешнююКомпоненту("AddIn."+ИмяDLL, , ТипВнешнейКомпоненты.COM);			
		//{ВнешняяОбработка.Интеграция_ГИС_Меркурий.Форма.ФормаУФ.Форма(366)}: Ошибка при вызове метода контекста (ПодключитьВнешнююКомпоненту): 
		//Несоответствие типов (параметр номер '3')
		Если Рез тогда
			КомпонентаНаКлиенте = Новый("AddIn."+ИмяDLL); 
			Сообщить83("Компонента УСПЕШНО загружена на клиенте "+КомпонентаНаКлиенте.Version);		
			ВСД_Компонента = КомпонентаНаКлиенте;
		Иначе
			Сообщить83("Не удалось загрузить на клиенте "+ИмяDLL);			
			Возврат "" ;
		КонецЕсли;
	Исключение		
		Сообщить83("Библиотека не зарегистрирована");
		Сообщить83(ОписаниеОшибки());
		Возврат "" ;
	КонецПопытки;	
	Попытка
		Опции = КомпонентаНаКлиенте.GetOptions();
	Исключение
		Сообщить83("Компонента не ЗАВЕЛАСЬ");
		Сообщить83(ОписаниеОшибки());
		Возврат "";
	КонецПопытки;
	Опции.USERNAME 			= Объект.param_username;
    Опции.PASSWORD 			= Объект.param_password;
    Опции.ISSUER_ID 		= Объект.param_issuer_id;
    Опции.SERVICE_ID 		= Объект.param_service_id;
    Опции.API_KEY 			= Объект.param_api_key;
    Опции.INITIATOR_LOGIN 	= Объект.param_intiator_login;
    Опции.VETDOCTOR_LOGIN 	= Объект.param_vetdoctor_login;
	Опции.LogsDir 			= Объект.КаталогЛогов;
	Опции.VETDOCTOR_FIO 	= Объект.param_vetdoctor_fio;
	Опции.VETDOCTOR_POST 	= Объект.param_vetdoctor_post;
	Опции.DEBUG 			= Объект.ОтладкаЗапросовXML;
	
	КомпонентаНаКлиенте.Init( Опции );
	
    Если ПараметрыПриложения = Неопределено Тогда
    	ПараметрыПриложения  = Новый Соответствие;
    КонецЕсли;
	ПараметрыПриложения.Вставить("ВСД_Компонента", КомпонентаНаКлиенте);
			
	Возврат КомпонентаНаКлиенте;
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Объект.ДатаНачалаОтбора = НачалоДня(ТекущаяДата());
	Объект.ДатаОкончанияОтбора = КонецДня(ТекущаяДата());
	ПоказатьОповещениеПользователя("Выполняется инициализация обработки",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	ИнициализацияСервер(); // Загрузим параметры и список документов
	ПоказатьОповещениеПользователя("Выполнено");
//	ИнициализацияКлиентНаФорме();	// Загрузим компоненту и инициализируем ее   - на сервере она загружена
	//ЖД РеквизитГрузополучатель
	СзПарамГрузополучатель = Новый СписокЗначений;
    СзПарамГрузополучатель.Добавить(0,"Контрагент");
    СзПарамГрузополучатель.Добавить(1,"Адрес Доставки");
	СзПарамГрузополучатель.Добавить(2,"Другое...");
//	ТекПарам = СзПарамГрузополучатель.НайтиПоЗначению(РеквизитГрузополучатель);
//	Если ТекПарам = Неопределено Тогда
//		ЭлементыФОрмы.НадпГрузополучатель.Заголовок = "Установите!!!";
//	Иначе
//		ЭлементыФОрмы.НадпГрузополучатель.Заголовок = ТекПарам.Представление;
//	КонецЕсли;
	
	//ЖД ТермУсловияПеревозки
	СзПарамТермУсловияПеревозки = Новый СписокЗначений;
    СзПарамТермУсловияПеревозки.Добавить(1,"Замороженный");
	СзПарамТермУсловияПеревозки.Добавить(2,"Охлажденный");
	СзПарамТермУсловияПеревозки.Добавить(3,"Охлаждаемый");
	СзПарамТермУсловияПеревозки.Добавить(4,"Вентилируемый");
	

КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыНаСервере()
	
    ФОбъект = РеквизитФормыВЗначение("Объект");
	КлючНастроек = ФОбъект.Организация;
	
	СписокКонстант=Новый("Соответствие");
	СписокКонстант.Вставить("param_username", ФОбъект.param_username);
	СписокКонстант.Вставить("param_password", ФОбъект.param_password);
	СписокКонстант.Вставить("param_issuer_id", ФОбъект.param_issuer_id);
	СписокКонстант.Вставить("param_service_id", ФОбъект.param_service_id);
	СписокКонстант.Вставить("param_api_key", ФОбъект.param_api_key);
	СписокКонстант.Вставить("param_intiator_login", ФОбъект.param_intiator_login);
	СписокКонстант.Вставить("param_vetdoctor_login", ФОбъект.param_vetdoctor_login);
	СписокКонстант.Вставить("param_vetdoctor_fio", ФОбъект.param_vetdoctor_fio);	
	СписокКонстант.Вставить("param_vetdoctor_post", ФОбъект.param_vetdoctor_post);	
	
	СписокКонстант.Вставить("Отправитель_Площадка", ФОбъект.Отправитель_Площадка);
	СписокКонстант.Вставить("Отправитель_ХозСубъект", ФОбъект.Отправитель_ХозСубъект );
	
	СписокКонстант.Вставить("Страна", ФОбъект.Страна);
	СписокКонстант.Вставить("Регион", ФОбъект.Регион);
	СписокКонстант.Вставить("Город", ФОбъект.Город);
	СписокКонстант.Вставить("ВСД_Экспертиза", ФОбъект.ВСД_Экспертиза);
	СписокКонстант.Вставить("ВСД_Местность", ФОбъект.ВСД_Местность );
	СписокКонстант.Вставить("ВСД_ОсобыеОтметки", ФОбъект.ВСД_ОсобыеОтметки);
	
	СписокКонстант.Вставить("ПаузаСек", ФОбъект.ПаузаСек);	
	СписокКонстант.Вставить("РеквизитГрузополучатель", ФОбъект.РеквизитГрузополучатель);	
			
	СписокКонстант.Вставить("ОтладкаЗапросовXML", ФОбъект.ОтладкаЗапросовXML);	
	
	//СписокКонстант.Вставить(ВСД_Продукция_Свойство, "ВСД_Продукция_Свойство");
	СписокКонстант.Вставить("Перевозчик_ХозСубъект", ФОбъект.Перевозчик_ХозСубъект);		
	//СписокКонстант.Вставить(НазваниеРеквизитаКоличествоМест, "НазваниеРеквизитаКоличествоМест");
	СписокКонстант.Вставить("ПропускатьПустыеСвойства", ФОбъект.ПропускатьПустыеСвойства);		
	//СписокКонстант.Вставить(НазваниеВидаДокументаРеализация, "НазваниеВидаДокументаРеализация");		
	//СписокКонстант.Вставить(НазваниеРеквизитаКоличество, "НазваниеРеквизитаКоличество");
	
	СписокКонстант.Вставить("КаталогЛогов", ФОбъект.КаталогЛогов);
	СписокКонстант.Вставить("ПаузаСек", ФОбъект.ПаузаСек);		
	
	СписокКонстант.Вставить("ПолноеИмяФайлаОбработки", ФОбъект.ПолноеИмяФайлаОбработки);		
	СписокКонстант.Вставить("ТестовыйРежим", ФОбъект.ТестовыйРежим);	
	СписокКонстант.Вставить("ВыводитьПодробнуюИнформацию", ФОбъект.ВыводитьПодробнуюИнформацию);	
	
	СписокКонстант.Вставить("Смещение", ФОбъект.Смещение);
	СписокКонстант.Вставить("АвтоЗаписьВСДСоответствия", ФОбъект.АвтоЗаписьВСДСоответствия);
	СписокКонстант.Вставить("НазваниеРеквизитаКоличество", ФОбъект.НазваниеРеквизитаКоличество);
	СписокКонстант.Вставить("ПарамКоэффициентПересчетаКоличества", ФОбъект.ПарамКоэффициентПересчетаКоличества);
	СписокКонстант.Вставить("ВСД_РезультатыИсследований", ФОбъект.ВСД_РезультатыИсследований);
    СписокКонстант.Вставить("ТермУсловияПеревозки", ФОбъект.ТермУсловияПеревозки);
	СписокКонстант.Вставить("ВСДЦель", ФОбъект.ВСДЦель);
	СписокКонстант.Вставить("ПарамЗаполнятьТранзакциюПриОтсутствииПартий", ФОбъект.ПарамЗаполнятьТранзакциюПриОтсутствииПартий);
	СписокКонстант.Вставить("ПарамНомерУровняУпаковкиДляВСД", ФОбъект.ПарамНомерУровняУпаковкиДляВСД);
	СписокКонстант.Вставить("ПарамФормаУпаковкиДляВСД", ФОбъект.ПарамФормаУпаковкиДляВСД);
	СписокКонстант.Вставить("НазваниеРеквизитаКоличествоМест", ФОбъект.НазваниеРеквизитаКоличествоМест);
	СписокКонстант.Вставить("НазваниеРеквизитаКоличествоМест", ФОбъект.НазваниеРеквизитаКоличествоМест);
	СписокКонстант.Вставить("ОчищатьСправочникВСД_Партии", ФОбъект.ОчищатьСправочникВСД_Партии);
	СписокКонстант.Вставить("ПарамКолонкаСортировкиПартииСписания", ФОбъект.ПарамКолонкаСортировкиПартииСписания);
	СписокКонстант.Вставить("ПарамЗнакСортировкиУбывание", ФОбъект.ПарамЗнакСортировкиУбывание);
	СписокКонстант.Вставить("ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя",ФОбъект.ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя);	
	
	СписокКонстант.Вставить("ПарамПоставщикОрганизация",ФОбъект.ПарамПоставщикОрганизация);	
	СписокКонстант.Вставить("ПарамПоставщикХозСубъект",ФОбъект.ПарамПоставщикХозСубъект);	
	СписокКонстант.Вставить("ПарамПоставщикПлощадка",ФОбъект.ПарамПоставщикПлощадка);	
	
	// ключи могут быть произвольными строками
    КлючОбъекта  = "ВСД";
    //КлючНастроек = "НастройкиВСД";
    // настройки могут быть произвольного типа
	//Настройки    = Новый Структура;
	//Настройки.Вставить("Настройки", "123");

    // имя пользователя - пользователь владелец настроек, если параметр не указать,
    // то настройки будут сохранены для ТЕКУЩЕГО пользователя
    ИмяПользователя = ИмяПользователя();
    ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  Строка(КлючНастроек), СписокКонстант, , ИмяПользователя);		
	
	Сообщить83Сервер("Настройки сохранены для "+ИмяПользователя+" - "+КлючНастроек);
    // Этап 4. Обратное преобразование прикладного объекта в реквизит формы
    ЗначениеВРеквизитФормы(ФОбъект, "Объект");	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПараметры(Команда)
	СохранитьПараметрыНаСервере();
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура кнИнициализацияНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ИнициализацияХС();
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура кнИнициализация(Команда)
	Если ПустаяСтрока(Объект.param_username)=1 Тогда 
		Предупреждение("Заполните параметр [param_username]");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(Объект.param_password)=1 Тогда 
		Предупреждение("Заполните параметр [param_password]");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(Объект.param_issuer_id)=1 Тогда 
		Предупреждение("Заполните параметр [issuer_id]");
		Возврат;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(Объект.Отправитель_ХозСубъект)) Тогда
		Предупреждение("Заполните параметр [Отправитель_ХозСубъект]");
		Возврат;
	КонецЕсли;	
	ТВопроса = "Будет произведена загрузка классификаторов Меркурий 
	| и заполнены начальные данные. 
	|Операция может занять продолжительное время.";
	Ответ = Вопрос(ТВопроса,РежимДиалогаВопрос.ДаНет,0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется начальная Инициализация",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		кнИнициализацияНаСервере();
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;

КонецПроцедуры


// ************* Инициализация и сохранение параметров Окончание

// ************ Партии
&НаСервере
Процедура ПолучитьПартииНаСервере(ВыбПлощадка)	
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ПолучитьПартии2( ВыбПлощадка,ПартииСмещение,1,ПартииНач,ПартииКон,флПартииНенулевые );	
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьПартии(Команда)
	ТВопроса = "Получить Партии по Площадке "+Объект.Отправитель_Площадка+" в Меркурий ";
	Если ЗначениеЗаполнено(ПартииНач)  Тогда
		ТВопроса = ТВопроса + "
		|за период с "+ПартииНач+" по "+ПартииКон+"";
	КонецЕсли;
	ТВопроса = ТВопроса + "
	| Операция может занять продолжительное время.";
	Ответ = Вопрос(ТВопроса,РежимДиалогаВопрос.ДаНет,0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется загрузка Партий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
    	ПолучитьПартииНаСервере(Объект.Отправитель_Площадка);
		ПоказатьОповещениеПользователя("Загрузка Партий завершена");
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура кнПолучитьПартии14НаСервере()
	ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ПолучитьПартии();
	//ЗначениеВРеквизитФормы(ФОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьПартии14(Команда)
	ТВопроса = "Получить Партии по Площадке "+Объект.Отправитель_Площадка+" в Меркурий ";
	ТВопроса = ТВопроса + "
	| Операция может занять продолжительное время.";
	Ответ = Вопрос(ТВопроса,РежимДиалогаВопрос.ДаНет,0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется загрузка Партий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
    	кнПолучитьПартии14НаСервере();
		ПоказатьОповещениеПользователя("Загрузка Партий завершена");
	КонецЕсли;	
КонецПроцедуры


// *********** Партии окончание

// *** На форме

// Загрузка Классификаторов
&НаСервере
Процедура кнЗагрузитьПродукциюНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ИнициализацияХС_ЗагрузитьПродукцию(1);
КонецПроцедуры

&НаКлиенте
Процедура кнЗагрузитьПродукцию(Команда)
	ПоказатьОповещениеПользователя("Выполняется загрузка Продукции",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнЗагрузитьПродукциюНаСервере();
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаСервере
Процедура кнЗагрузитьЕдИзмНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ИнициализацияХС_ЗагрузитьЕдиницыИзмерения();
КонецПроцедуры

&НаКлиенте
Процедура кнЗагрузитьЕдИзм(Команда)
	ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнЗагрузитьЕдИзмНаСервере();
	ПоказатьОповещениеПользователя("Завершено");
КонецПроцедуры

&НаСервере
Процедура кнЗагрузитьСтраныНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ИнициализацияХС_ЗагрузитьСтраны();
КонецПроцедуры

&НаКлиенте
Процедура кнЗагрузитьСтраны(Команда)
	ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнЗагрузитьСтраныНаСервере();
	ПоказатьОповещениеПользователя("Завершено");
КонецПроцедуры

&НаСервере
Процедура кнЗагрузитьРегионыНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ИнициализацияХС_ЗагрузитьРегионы(ФОбъект.Страна);
КонецПроцедуры

&НаКлиенте
Процедура кнЗагрузитьРегионы(Команда)
	ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнЗагрузитьРегионыНаСервере();
	ПоказатьОповещениеПользователя("Завершено");
КонецПроцедуры

&НаСервере
Процедура кнЗагрузитьГородаНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ИнициализацияХС_ЗагрузитьГорода(ФОбъект.Регион);
КонецПроцедуры

&НаКлиенте
Процедура кнЗагрузитьГорода(Команда)
	ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнЗагрузитьГородаНаСервере();
КонецПроцедуры

&НаСервере
Процедура кнЗагрузитьУпаковкуНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ЗаполнитьФормыУпаковки();
КонецПроцедуры

&НаКлиенте
Процедура кнЗагрузитьУпаковку(Команда)
	ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнЗагрузитьУпаковкуНаСервере();
	ПоказатьОповещениеПользователя("Завершено");
КонецПроцедуры
//**************** Форма Страница Реализации
// **** Список документов перечитать
&НаСервере
Процедура ОбновитьСписокРеализацийНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.Автозаполнение(флПеремещения);
    // Этап 4. Обратное преобразование прикладного объекта в реквизит формы
    ЗначениеВРеквизитФормы(ФОбъект, "Объект");	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокРеализаций(Команда)
	ПоказатьОповещениеПользователя("Выполняется поиск документов для создания ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	ОбновитьСписокРеализацийНаСервере();
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры
// **** Список документов перечитать  Окончание
&НаКлиенте
Процедура ВыборПериода(Команда)
	ВыбранныйПериод = Новый СтандартныйПериод;
	Если Команда.Имя = "ВыборПериодаПартии" Тогда
		// Устанавливаем начальные данные
		ВыбранныйПериод.ДатаНачала = ПартииНач;
		ВыбранныйПериод.ДатаОкончания = ПартииКон;
		КудаРезультат = "ВыборПериодаПартий";
	Иначе
		// Устанавливаем начальные данные
		ВыбранныйПериод.ДатаНачала = Объект.ДатаНачалаОтбора;
		ВыбранныйПериод.ДатаОкончания = Объект.ДатаОкончанияОтбора;
		КудаРезультат = "ВыборПериодаОтгрузки";
	КонецЕсли;
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ВыбранныйПериод;
	// Не модальный вызов диалога выбора периода
		
	Диалог.Показать(Новый ОписаниеОповещения(КудаРезультат, ЭтаФорма, Новый Структура("Диалог", Диалог)));
		
КонецПроцедуры
 
&НаКлиенте
Процедура ВыборПериодаОтгрузки(Период, ДополнительныеПараметры) Экспорт
	Диалог = ДополнительныеПараметры.Диалог;
	Если ЗначениеЗаполнено(Период) Тогда 
		ВыбранныйПериод = Диалог.Период;
		Объект.ДатаНачалаОтбора = ВыбранныйПериод.ДатаНачала;
		Объект.ДатаОкончанияОтбора = ВыбранныйПериод.ДатаОкончания;
		ОбновитьСписокРеализаций("");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаПартий(Период, ДополнительныеПараметры) Экспорт
	Диалог = ДополнительныеПараметры.Диалог;
	Если ЗначениеЗаполнено(Период) Тогда 
		ВыбранныйПериод = Диалог.Период;
		ПартииНач = ВыбранныйПериод.ДатаНачала;
		ПартииКон = ВыбранныйПериод.ДатаОкончания;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОтметитьВсеДокументы(Команда)
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьДокументыКСозданию(Команда)
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = ложь;
		Если ЗначениеЗаполнено(стр.ВСД) или НЕ(ЗначениеЗаполнено(стр.Площадка)) Тогда
			Продолжить;
		КонецЕсли;	
		стр.Отметка = истина;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура кнОтметитьНеотправленныеВСДСервер()
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = ложь;
		Если НЕ(ЗначениеЗаполнено(стр.ВСД)) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ(ЗначениеЗаполнено(стр.ВСД.Статус)) Тогда
			стр.Отметка = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьНеотправленныеВСД(Команда)
	кнОтметитьНеотправленныеВСДСервер();
КонецПроцедуры

&НаСервере
Процедура кнОтметитьСОшибкойСервер()
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = ложь;
		Если НЕ(ЗначениеЗаполнено(стр.ВСД)) Тогда
			Продолжить;
		КонецЕсли;
		СтатусДок = СокрЛП(стр.ВСД.Статус);
		Если (СтатусДок = "REJECTED") или (СтатусДок = "IN_PROCESS")  Тогда
			стр.Отметка = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьСОшибкой(Команда)
	кнОтметитьСОшибкойСервер();
КонецПроцедуры

&НаСервере
Процедура кнОтметитьБезХССервер()
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = ложь;
		Если ЗначениеЗаполнено(стр.ХозСубъект.GUID) Тогда
			Продолжить;
		КонецЕсли;
		стр.Отметка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьБезХС(Команда)
	кнОтметитьБезХССервер();
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиДокументов(Команда)
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = ложь;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПартийНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ЗаполнитьТаблицуПартий();
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура кнЗаполнитьТаблицуПартий(Команда)
	ПоказатьОповещениеПользователя("Заполняем таблицу Партий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	ЗаполнитьТаблицуПартийНаСервере();
	ПоказатьОповещениеПользователя("Выполнено");
	Элементы.ГрСтраницыОсн.ТекущаяСтраница = Элементы.ГрПартии;
	// Перейти на страницу Партий и посчитать Итог
//	ЭтаФорма.Панель.ТекущаяСтраница = ЭтаФорма.Панель.Страницы.Страница5;
//	ЭтаФорма.ЭлементыФормы.НадпИтогСписания.Заголовок = Партии.Итог("КоличествоСписания");
//	ЭтаФорма.ЭлементыФормы.Партии.Колонки.ПолеСортировки.ТекстШапки = СокрЛП(ПарамКолонкаСортировкиПартииСписания);
КонецПроцедуры

&НаСервере
Процедура кнЗапросРегионализацияНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ПроверитьВозможностьПеремещенияВСДПоСписку();
//	ЗначениеВРеквизитФормы(ФОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура кнЗапросРегионализация(Команда)
	ПоказатьОповещениеПользователя("Выполняется запрос условий перевозки для отмеченных документов ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнЗапросРегионализацияНаСервере();
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаСервере
Процедура кнОтправитьВСДНаСервере(сзДокументыКОтправке)
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ОтправитьСписокВСД( сзДокументыКОтправке );
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура кнОтправитьВСД(Команда)
	сзДокументыКОтправке = новый СписокЗначений;
	Для каждого СтрОтгрузка Из Объект.Отгрузки Цикл
		_ВСД = СтрОтгрузка.ВСД;
		Если НЕ(ЗначениеЗаполнено(_ВСД)) или НЕ(СтрОтгрузка.Отметка) Тогда 		
			Продолжить;    
		КонецЕсли;
		_Проведен = ПолучитьЗначениеРевизитаОбъекта_НаСервере(_ВСД,"Проведен");
		_Статус = СокрЛП(ПолучитьЗначениеРевизитаОбъекта_НаСервере(_ВСД,"Статус"));
		_ПометкаУдаления = ПолучитьЗначениеРевизитаОбъекта_НаСервере(_ВСД,"ПометкаУдаления");
		_applicationID = ПолучитьЗначениеРевизитаОбъекта_НаСервере(_ВСД,"applicationID");
		
		Если ((_Проведен) и (_Статус  = "COMPLETED")) или (_Статус = "COMPLETED") или (_ПометкаУдаления) Тогда
			Сообщить83("Документ ["+_ВСД+"] статус=["+_Статус+"] уже был обработан");
			продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(_applicationID) Тогда 
			Если Вопрос("Документ ["+_ВСД+"] статус=["+_Статус+"] уже был отправлен, отправить ПОВТОРНО?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Нет Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;		
		сзДокументыКОтправке.Добавить(_ВСД);
		Сообщить83(""+_ВСД+" Добавлен в очередь на отправку");
	КонецЦикла;
	
	Если сзДокументыКОтправке.Количество() > 0 тогда		
		ПоказатьОповещениеПользователя("Выполняется отправка документов в Меркурий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		кнОтправитьВСДНаСервере(сзДокументыКОтправке);
		ПоказатьОповещениеПользователя("отправка завершена");
		//Сообщить83("Отправка документов завершена");
	Иначе
		Сообщить83("Нет документов к отправке");
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура кнПолучитьОтветВСД2НаСервере(сзДокументыКОтправке)
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ПолучитьОтветыПоСпискуВСД( сзДокументыКОтправке );
//	ЗначениеВРеквизитФормы(ФОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьОтветВСД2(Команда)
	Сообщить83("Выполняется поиск отправленных ВСД без ответа Ветис");
	сзДокументыКОтправке = новый СписокЗначений;
	Для каждого строкаТЗ из Объект.Отгрузки Цикл
		ВыбВСД = строкаТЗ.ВСД;
		Если НЕ ЗначениеЗаполнено(ВыбВСД) Тогда
			Продолжить;	
		КонецЕсли;
		_Статус = СокрЛП(ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбВСД,"Статус"));
		_applicationID = ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбВСД,"applicationID");
		Если (НЕ ЗначениеЗаполнено(_applicationID)) или (_Статус = "COMPLETED") Тогда
			Продолжить;	
		КонецЕсли;
		сзДокументыКОтправке.Добавить(ВыбВСД);
		Сообщить83(""+ВыбВСД+" Добавлен в очередь на проверку ответа Меркурий");
	КонецЦикла;
	
	Если сзДокументыКОтправке.Количество() > 0 тогда
		ПоказатьОповещениеПользователя("Выполняется проверка ответов Меркурий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		кнПолучитьОтветВСД2НаСервере(сзДокументыКОтправке);
		Сообщить83("Проверка ответов завершена");
	Иначе
		Сообщить83("Не выбрано документов к проверке");
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура кнАннулироватьВыбранныеВСДНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.Отправить_ВСД2_АннулированиеВыбранные(ФлПеремещения);
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");	// Перерисовка формы
КонецПроцедуры

&НаКлиенте
Процедура кнАннулироватьВыбранныеВСД(Команда)
	// Список ВСД к Аннулированию подберем на сервере
	Ответ = Вопрос("Аннулировать выбранные транзакции ?",РежимДиалогаВопрос.ДаНет,0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется Аннулирование выбранных ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
    	кнАннулироватьВыбранныеВСДНаСервере();
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнУстановитьСоответствия(Команда)
	//Форма = ПолучитьФорму("Форма_СоответствияУФ");
	ОткрытьФорму("ВнешняяОбработка.Интеграция_ГИС_Меркурий.Форма.Форма_СоответствияУФ");
КонецПроцедуры
//**** Открытие доп формы и возврат из нее значений
// http://is.1csoft.com/public/414550/
&НаКлиенте
Процедура ОткрытиеФормыГашения(РезультатВыбора, ДопПараметры) Экспорт
	КопироватьДанныеФормы(РезультатВыбора, Объект);
	// все данные объекта заполнились
	Если ДопПараметры.ИмяКоманды = "ТутБылоПереданоИмяКоманды" Тогда
    	// выполняем дополнительные процедуры, если они нужны
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура кнГашение(Команда)
	ОповещениеОВыборе  = Новый ОписаниеОповещения("ОткрытиеФормыГашения", ЭтаФорма, Новый Структура("ИмяКоманды", Команда.Имя));
	ОткрытьФорму("ВнешняяОбработка.Интеграция_ГИС_Меркурий.Форма.ФормаГашениеУФ",, ЭтаФорма,,,, ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	//ОткрытьФорму("ВнешняяОбработка.Интеграция_ГИС_Меркурий.Форма.ФормаГашение");
КонецПроцедуры
// Можно заоптимизировать с ОткрытиеФормыГашения
&НаКлиенте
Процедура ОткрытиеФормыСозданиеЭлементов(РезультатВыбора, ДопПараметры) Экспорт
	КопироватьДанныеФормы(РезультатВыбора, Объект);
	// все данные объекта заполнились
	Если ДопПараметры.ИмяКоманды = "ТутБылоПереданоИмяКоманды" Тогда
    	// выполняем дополнительные процедуры, если они нужны
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьВСДЭлементы(Команда)
	ОповещениеОВыборе  = Новый ОписаниеОповещения("ОткрытиеФормыСозданиеЭлементов", ЭтаФорма, Новый Структура("ИмяКоманды", Команда.Имя));
	ОткрытьФорму("ВнешняяОбработка.Интеграция_ГИС_Меркурий.Форма.ФормаСоздатьВСД_ЭлементыУФ",, ЭтаФорма,,,, ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
КонецПроцедуры

//********  Открытие доп формы окончание

&НаСервере
Функция кнПечатьВСДВнешняя(докСсылка,Адресобработки)
	ОбработкаПечати = ВнешниеОбработки.Создать(Адресобработки,Ложь);
	Возврат ОбработкаПечати.ПечатьВнешнейПечатнойФормы(ДокСсылка, "", "");
КонецФункции

&НаКлиенте
Процедура кнПечатьСтрОтгрузки(Команда)
	//
	Адресобработки = ПутьКфайлуИзПолного(Объект.ПолноеИмяФайлаОбработки)+"Сокращенная Форма ВСД_УФ.epf";
	ФайлНаДиске = Новый Файл(Адресобработки);
    Если Не ФайлНаДиске.Существует() Тогда
        Сообщить("Не существует обработка печати "+Адресобработки);
		Возврат;
    КонецЕсли;	
	
	Для каждого стрДок из Объект.Отгрузки Цикл
		Если Стрдок.Отметка Тогда
			ТабДок = кнПечатьВСДВнешняя(СтрДок.док,Адресобработки);
			ТабДок.Показать();
		КонецЕсли;
	КонецЦикла;
	//Предупреждение("В Разработке");
КонецПроцедуры
// *************  Форма стр 1 события тз Реализации
&НаКлиенте
Процедура ОтгрузкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтгрузкиВСДОчисткаНаСервере(ДокСсылка)
	Попытка
		Если НЕ(ДокСсылка = Документы.ВСД2_транзакция.ПустаяСсылка()) Тогда 
			ДокОбъект = ДокСсылка.ПОлучитьОбъект();
			Если СокрЛП(ДокОбъект.Статус) = "COMPLETED" Тогда
				Сообщить(""+ДокОбъект+" зарегистрирован в Меркурий - удаление невозможно");
				Возврат false;
			КонецЕсли;
			ДокОбъект.УстановитьПометкуУдаления(ИСТИНА);
			Возврат true;
		КонецЕсли;		
	Исключение
		Возврат false;
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ОтгрузкиВСДОчистка(Элемент, СтандартнаяОбработка)
	//Пометим на удаление док ВСД
	СтандартнаяОбработка = Ложь;
	// Вероятно что-то тут не так   Элемент.Родитель.ТекущиеДанные.ВСД -> д.б. проще ?
	// Еще есть -> Элемент.Родитель.ТекущаяСтрока  (номер строки содержит - меньше на1 чем в родителе, вероятно начало с 0)
	// Элемент.Родитель.ТекущиеДанные.НомерСтроки (№ строки в родителе)
	// Элемент.Родитель.ТекущиеДанные.ИсходныйНомерСтроки ??
	Если ЗначениеЗаполнено(Элемент.Родитель.ТекущиеДанные.ВСД) Тогда 
		ДокСсылка = Элемент.Родитель.ТекущиеДанные.ВСД;
		Если СокрЛП(ПолучитьЗначениеРевизитаОбъекта_НаСервере(ДокСсылка,"Статус")) = "COMPLETED" Тогда
			Сообщить83(""+ДокСсылка+" зарегистрирован в Меркурий - удаление невозможно");
			Возврат;
		КонецЕсли;
		Ответ = Вопрос("Удалить "+ДокСсылка+" ?",РежимДиалогаВопрос.ДаНет,0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если ОтгрузкиВСДОчисткаНаСервере(ДокСсылка) тогда
				Элемент.Родитель.ТекущиеДанные.сЦвет = 0;
				СтандартнаяОбработка = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтгрузкиПлощадкаОчисткаНаСервере(ПлощадкаСсылка)
	Попытка
		Если НЕ(ПлощадкаСсылка = Справочники.ВСД_Площадка.ПустаяСсылка()) Тогда 
			СпрОб = ПлощадкаСсылка.ПОлучитьОбъект();
			СпрОб.Контрагент = "";
			СпрОб.Записать();
		КонецЕсли;		
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиПлощадкаОчистка(Элемент, СтандартнаяОбработка)
	// Отвяжем площадку от контрагента
//	СтандартнаяОбработка = Ложь;
//    Предупреждение("Отвязка Площадки из формы в Разработке");
//	Возврат;	
	ОтгрузкиПлощадкаОчисткаНаСервере(Элемент.Родитель.ТекущиеДанные.Площадка);
	Элемент.Родитель.ТекущиеДанные.сЦвет = 2;  //Желтый
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтгрузкиПлощадкаПриИзмененииНаСервере(ПлощадкаСсылка, КонтраСсылка)
	Если НЕ (ПлощадкаСсылка = Справочники.ВСД_Площадка.ПустаяСсылка()) Тогда 
		СпрОб = ПлощадкаСсылка.ПОлучитьОбъект();
		СпрОб.Контрагент = КонтраСсылка;//ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Грузополучатель;
		СпрОб.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиПлощадкаПриИзменении(Элемент)
	//Привяжем к Контрагенту
	//Отвязать прежнюю ? - где то хранить нужно - Сделал отвязку при начале Выбора, см. ниже.
	//Сообщить83("Разработчику - сделать отвязку прежней площадки ! Смотри процедуру ниже");
	ОтгрузкиПлощадкаПриИзмененииНаСервере(Элемент.Родитель.ТекущиеДанные.Площадка,Элемент.Родитель.ТекущиеДанные.Грузополучатель);
	Если ЗначениеЗаполнено(Элемент.Родитель.ТекущиеДанные.Площадка) Тогда
		Элемент.Родитель.ТекущиеДанные.сЦвет = 0;
	Иначе
		Элемент.Родитель.ТекущиеДанные.сЦвет = 2;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//Выбор_ВСД_Площадка = Элемент.Родитель.ТекущиеДанные.Площадка; // для последующего удаления привязки - в переменную формы !
	//Отвяжем сразу без вопросов
	ОтгрузкиПлощадкаОчисткаНаСервере(Элемент.Родитель.ТекущиеДанные.Площадка);
	// Отбор по ХС включим
	ГУИДХСдляОтбора = ПолучитьЗначениеРевизитаОбъекта_НаСервере(Элемент.Родитель.ТекущиеДанные.ХозСубъект,"GUID");
	ГУИДХСдляОтбора = ?(ЗначениеЗаполнено(ГУИДХСдляОтбора),ГУИДХСдляОтбора,"****");
	
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = Новый Структура("GuidХозСубъекта", ГУИДХСдляОтбора);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина,ЗначениеОтбора);	
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);	
КонецПроцедуры

//*********** Вкладка Партии

&НаСервере
Процедура кнСоздатьВСДНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.СоздатьВСД2();
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");	// Перерисовка формы  - нужно ли ?
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьВСД(Команда)
	Если Объект.Партии.Количество() = 0 Тогда
		Сообщить83("Нет Партий для создания ВСД ");
		Возврат;
	КонецЕсли;
	Ответ = Вопрос("Создать ВСД на отмеченные Накладные ?",РежимДиалогаВопрос.ДаНет,0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Создаем ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		кнСоздатьВСДНаСервере();
		ПоказатьОповещениеПользователя("Выполнено");
		Элементы.ГрСтраницыОсн.ТекущаяСтраница = Элементы.ГрОтгрузки;
		ЭтаФорма.ТекущийЭлемент = Элементы.кнОтправитьВСД;
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура СоздатьВСДПроизводствоНаСервере(ВыбДата)
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.Создать_ВСД2_Производство(ВыбДата);
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");	
КонецПроцедуры

&НаКлиенте
Процедура кнПроизводство(Команда)
	Если Объект.Партии.Количество() = 0 Тогда
		Сообщить83("Нет данных в таблице ");
		Возврат;
	КонецЕсли;
	Ответ = Вопрос("Создать производственные ВСД на недостающую продукцию ?",РежимДиалогаВопрос.ДаНет,0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Подсказка = "Введите дату выпуска для создания документов Производство";
		ВыбДата = Объект.ДатаНачалаОтбора;
		Если НЕ ВвестиДату(ВыбДата, Подсказка) Тогда
			Сообщить83("Отменено");
			Возврат;
		КонецЕсли;
		
    	СоздатьВСДПроизводствоНаСервере(ВыбДата);
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ОтправитьВСДПроизводствоНаСервере(СзДок)
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ОтправитьВсе_ВСД2_Производство(СзДок,,);	
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");	
КонецПроцедуры

&НаКлиенте
Процедура кнПроизводствоОтправить(Команда)
	СЗДок = Новый СписокЗначений;
	Для Каждого стр из Объект.Партии Цикл				
		Если НЕ(ЗначениеЗаполнено(стр.ВСД_Производство)) Тогда
			Продолжить;
		КонецЕсли;
		Если ПолучитьЗначениеРевизитаОбъекта_НаСервере(стр.ВСД_Производство,"Проведен") Тогда
			Продолжить	
		КонецЕсли;
		СЗДок.Добавить(стр.ВСД_Производство);
	КонецЦикла;
	Если СзДок.Количество() = 0 Тогда
		Сообщить83("Нет производственных ВСД для отправки");
		Возврат;
	КонецЕсли;
	ПоказатьОповещениеПользователя("Выполняется отправка производственных ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	ОтправитьВСДПроизводствоНаСервере(СзДок);
	ПоказатьОповещениеПользователя("Выполнено");
		//Обновим партии на форме, проверим, все ли хорошо оправилось
	ОтправкаОК = true;
	Для Каждого стр из Объект.Партии Цикл				
		Если НЕ(ЗначениеЗаполнено(стр.ВСД_Производство)) Тогда
			Продолжить;
		КонецЕсли;
		Если (СокрЛП(ПолучитьЗначениеРевизитаОбъекта_НаСервере(стр.ВСД_Производство,"Статус")) = "COMPLETED") Тогда
			стр.Количество = стр.КоличествоСписания; //ЖД чтобы окрасилось правильно
			Продолжить	
		КонецЕсли;
		ОтправкаОК = false;
	КонецЦикла;
	Если ОтправкаОК Тогда
		ПоказатьОповещениеПользователя("Обновляем таблицу Партий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		кнЗаполнитьТаблицуПартий(Команда);
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьОтветВСДПроизводство(Команда)
	сзДокументыКОтправке = новый СписокЗначений;
	Для каждого строкаТЗ из Объект.Партии Цикл
		ВыбВСД = строкаТЗ.ВСД_Производство;
		Если НЕ ЗначениеЗаполнено(ВыбВСД) Тогда
			Продолжить;	
		КонецЕсли;
		_Статус = СокрЛП(ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбВСД,"Статус"));
		_applicationID = ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбВСД,"applicationID");
		Если (НЕ ЗначениеЗаполнено(_applicationID)) или (_Статус = "COMPLETED") Тогда
			Продолжить;	
		КонецЕсли;
		сзДокументыКОтправке.Добавить(ВыбВСД);
		Сообщить83(""+ВыбВСД+" Добавлен в очередь на проверку ответа Меркурий");
	КонецЦикла;
	
	Если сзДокументыКОтправке.Количество() > 0 тогда
		//Сообщить83("Выполняется запрос ответов от ВЕТИС на отправленные документы из списка партий без ответа");
		ПоказатьОповещениеПользователя("Выполняется запрос ответов в Меркурий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		кнПолучитьОтветВСД2НаСервере(сзДокументыКОтправке);
		ПоказатьОповещениеПользователя("Выполнено");
	Иначе
		Сообщить83("Не выбрано документов к проверке");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция кнПереместитьОтПоставщикаНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	Возвртат = ФОбъект.СменаВладельцаВызовИзФормы();
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");	
КонецФункции

&НаКлиенте
Процедура кнПереместитьОтПоставщика(Команда)
	//Предупреждение("В Разработке");
	ТВопроса = "Создать ВСД2_Транзакцию по списку недостающих партий
	|на перемещение от "+Объект.ПарамПоставщикПлощадка+ " ?";
	Ответ = Вопрос(ТВопроса,РежимДиалогаВопрос.ДаНет,0);
	Если НЕ (Ответ = КодВозвратаДиалога.Да) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя("Выполняется пермещение..",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	Рез = кнПереместитьОтПоставщикаНаСервере();	
	Если Рез = "ОК" Тогда
		кнЗаполнитьТаблицуПартий(Команда);
	ИначеЕсли Рез = "ОШИБКААВТОГАШЕНИЯ" Тогда
		Форма = ПолучитьФорму("ФормаГашение");
		ОткрытьФормуМодально(Форма);
	КонецЕсли;
	ПоказатьОповещениеПользователя("Выполнено");

КонецПроцедуры

&НаКлиенте
Процедура ПартииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = истина;
КонецПроцедуры

//**** Продукция
&НаСервере
Процедура кнПолучитьСписокПродукцииНаСервере(ВыбПлощадка)
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.Получить_Список_Продукции( ВыбПлощадка );
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьСписокПродукции(Команда)
	Если НЕ(ЗначениеЗаполнено(Объект.Отправитель_Площадка)) тогда
		Сообщить83("Укажите Площадку");
		Возврат;
	КонецЕсли;
	Ответ = Вопрос("Получить полный список продукции по площадке "+Объект.Отправитель_Площадка+"?",РежимДиалогаВопрос.ДаНет,0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Получаем список продукции по выбранной площадке",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	   	кнПолучитьСписокПродукцииНаСервере(Объект.Отправитель_Площадка);
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура кнПолучитьИнфоПродукцияНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.Получить_Инфо_Продукции( ВыбПродукция );
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьИнфоПродукция(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбПродукция)) тогда
		Сообщить83("Укажите Продукцию");
		Возврат;
	КонецЕсли;
	ПоказатьОповещениеПользователя("Получаем инфо о продукции",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнПолучитьИнфоПродукцияНаСервере();
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаСервере
Процедура ИзменитьПродукциюНаСервере(ВыбКоманда)
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.Изменить_Продукцию(ВыбПродукция,ВыбКоманда);
КонецПроцедуры

&НаКлиенте
Процедура кнИзменитьПродукцию(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбПродукция)) тогда
		Сообщить83("Укажите Продукцию");
		Возврат;
	КонецЕсли;	
	Ответ = Вопрос("Изменить продукцию "+ВыбПродукция+" на площадке "+Объект.Отправитель_Площадка+"?",РежимДиалогаВопрос.ДаНет,0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется запрос на изменение продукции",,"Ожидайте...",БиблиотекаКартинок.Информация32);
    	ИзменитьПродукциюНаСервере("UPDATE");
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьПродукцию(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбПродукция)) тогда
		Сообщить83("Укажите Продукцию");
		Возврат;
	КонецЕсли;	
	Ответ = Вопрос("Создать продукцию "+ВыбПродукция+" на площадке "+Объект.Отправитель_Площадка+"?",РежимДиалогаВопрос.ДаНет,0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется запрос на создание Продукции",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	   	ИзменитьПродукциюНаСервере("CREATE");
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура кнУдалитьПродукцию(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбПродукция)) тогда
		Сообщить83("Укажите Продукцию");
		Возврат;
	КонецЕсли;	
	Ответ = Вопрос("Удалить продукцию "+ВыбПродукция+" в Меркурий?",РежимДиалогаВопрос.ДаНет,0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется запрос на удаление Продукции",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	   	ИзменитьПродукциюНаСервере("DELETE");
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;
КонецПроцедуры

// ************* ТЕСТЫ
&НаСервере
Функция ЗагрузитьЦели_СерверТЕСТ()
	Рез = "";
    ФОбъект = РеквизитФормыВЗначение("Объект");
	//Поместим во врем Хранилище ФОбъект и передадим его Адрес в параметры вызова фона
	Структура = Новый Структура("ОбработкаВСД", ФОбъект);
	АдресОбработкиНаСервере		= ПоместитьВоВременноеХранилище(Структура,Новый УникальныйИдентификатор);
	// Временное хранилище не передается в фоновое задание.....
	Парам = Новый Массив;  // параметров д.б. ровно столько, сколько указано в вызываемой процедуре общего модуля, иначе ошибка
	//Парам.Добавить(АдресОбработкиНаСервере);
	//Парам.Добавить("ТЕСТ Параметр2");
	Парам.Добавить(Объект.Организация);
	Парам.Добавить("ТЕСТ Параметр2");	
//	Параметры.Добавить("");
	
	ФоновыеЗадания.Выполнить("ВСД.ВыполнитьВФоне", Парам, Новый УникальныйИдентификатор, "Тестовое задание");	
	//Рез = ФОбъект.ИнициализацияХС_ЗагрузитьЦели();
    //ЗначениеВРеквизитФормы(ФОбъект, "Объект"); //Не нужно нам данные обратно в форму тащить, они не изменились
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ТЕСТСообщения(Команда)
	ПоказатьОповещениеПользователя("Выполняется загрузка Классификатора Цели",,"Ждите...",БиблиотекаКартинок.Информация32);
	ЗагрузитьЦели_СерверТЕСТ();
	ПодключитьОбработчикОжидания("ОбработчикОжидания",5,Истина);
	//ПоказатьОповещениеПользователя("Загрузка Завершена");
КонецПроцедуры

&НаСервере
Процедура ПроверитьЖивостьПеременныхНаСервере()	
    ФОбъект = РеквизитФормыВЗначение("Объект");
	//Структура = ПолучитьИзВременногоХранилища(Объект.АдресКомпонентыНаСервере);
	ФОбъект.ПеременныеЖивы();
КонецПроцедуры

&НаКлиенте
Процедура ТЕСТ1(Команда)
	ПроверитьЖивостьПеременныхНаСервере()
	//Сообщить83("Самый последний файл = "+ПолучитьПоследнийXMLОтвет());
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	Фобъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.Инициализация();
	ФОбъект.Автозаполнение(флПеремещения);
	ЗначениеВРеквизитФормы(Фобъект,"Объект");
КонецПроцедуры


&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры






