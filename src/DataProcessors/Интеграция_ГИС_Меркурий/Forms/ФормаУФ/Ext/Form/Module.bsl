#Область НемодальныеОкна
&НаКлиенте
Процедура ПредупреждениеПользователю(ТекстПредупреждения) Экспорт
    Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждения", ЭтотОбъект);	
    ПоказатьПредупреждение( Оповещение,   ТекстПредупреждения,   0,   "Предупреждение" );
КонецПроцедуры
 
&НаКлиенте
Процедура ПослеЗакрытияПредупреждения(Параметры) Экспорт	
КонецПроцедуры

#КонецОбласти


// ТЕСТ Вывод сообщений  - также смотри в самом низу модуля
//https://курсы-по-1с.рф/articles/2017-09-08-display-progress-of-long-operations/
//https://курсы-по-1с.рф/articles/%D0%B2%D1%8B%D0%B2%D0%BE%D0%B4-%D1%81%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D0%BD%D0%B8%D0%B9-%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8E/
&НаКлиенте
Процедура Сообщить83(стр)
	Сообщение=Новый СообщениеПользователю();
	Сообщение.Текст=стр;
	Сообщение.Сообщить();	
КонецПроцедуры

&НаСервере
Процедура Сообщить83Сервер(стр)
	Сообщение=Новый СообщениеПользователю();
	Сообщение.Текст=стр;
	Сообщение.Сообщить();	
КонецПроцедуры

&НаСервере 
Процедура Вывод_В_Индикатор() 
	//МенеджСВ = Новый МенеджерСистемыВзаимодействия; 
	//ОтборСВ = Новый ОтборСообщенийСистемыВзаимодействия; 
	//ОтборСВ.Количество = 1; 
	//ОтборСВ.НаправлениеСортировки = НаправлениеСортировки.Убыв; 
	//ОтборОбсужд = Новый ОтборОбсужденийСистемыВзаимодействия; 
	//ОтборОбсужд.КонтекстноеОбсуждение = Ложь; 
	//ВсеОбсуждения = МенеджСВ.ПолучитьОбсуждения(ОтборОбсужд); 
	//Для Каждого ТекОбсуждение Из ВсеОбсуждения Цикл 
	//	Если ТекОбсуждение.Заголовок = "Служебное" Тогда 
	//		Прервать; 
	//	КонецЕсли; 
	//КонецЦикла; 
	//ОтборСВ.Обсуждение = ТекОбсуждение.Идентификатор; 
	//ВсеСообщения = МенеджСВ.ПолучитьСообщения(ОтборСВ); 
	//Если ВсеСообщения.Количество() > 0 Тогда 
	//	Сообщение = ВсеСообщения[0]; 
	//Иначе 
	//	Возврат; 
	//КонецЕсли; 
	//ЗначениеПроцента = СтрЗаменить(Сообщение.Текст,"Выполнение: ",""); 
	//ЗначениеПроцента = СтрЗаменить(ЗначениеПроцента,"%",""); 
	//Попытка ЗначениеПроцента = Число(СокрЛП(ЗначениеПроцента)); 
	//Исключение 
	//	Возврат; 
	//КонецПопытки; 
	//Индикатор = ЗначениеПроцента; 
КонецПроцедуры

&НаКлиенте 
Процедура ОбработчикОжидания() Экспорт 
	Вывод_В_Индикатор(); 
КонецПроцедуры // ВыводПрогрессора()
//************ Оконч ТЕСТ

&НаКлиенте
Функция ВыбратьФайл()
	// Временный вариант для тестирования, т.к Компонента.LogFileName вызывает ступор системы
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл ответа на запрос";
	Диалог.ПолноеИмяФайла = ""; 
	Фильтр = "XML (*result.xml)|*result.xml"; 
	Диалог.Фильтр = Фильтр; 
    Диалог.МножественныйВыбор = Ложь;
	//Диалог.Каталог = "F:\";
	Если Диалог.Выбрать() Тогда
		Возврат Диалог.ПолноеИмяФайла;
	иначе
		Возврат "";
	КонецЕсли;
КонецФункции   

Функция ПутьКфайлуИзПолного(ПутьИИмяВход)
	//mista
	ПутьИИмя = ПутьИИмяВход;
	Путь = "";
	Имя  = "";
	ПозСлэш = Найти(ПутьИИмя,"\");
	Пока ПозСлэш > 0 Цикл
    	Путь = Путь+Сред(ПутьИИмя,1,ПозСлэш);
	    ПутьИИмя = Сред(ПутьИИмя,ПозСлэш+1);
    	ПозСлэш = Найти(ПутьИИмя,"\");
	КонецЦикла;
	Имя = ПутьИИмя;
	Возврат Путь;
//	КаталогОбработок = Путь;
//	ИмяОбработкиИнтеграции = Имя;
	//Сообщить(Путь);
	//Сообщить(Имя);	
КонецФункции

// Реквизит на форме - текущая площадка = Объект Отправитель_Площадка
&НаКлиенте
Процедура Отправитель_ПлощадкаНаФормеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Отбор по ХС включим
	ГУИДХСдляОтбора = ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(Объект.Отправитель_ХозСубъект,"GUID");
	ГУИДХСдляОтбора = ?(ЗначениеЗаполнено(ГУИДХСдляОтбора),ГУИДХСдляОтбора,"****");
	
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = Новый Структура("GuidХозСубъекта", ГУИДХСдляОтбора);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина,ЗначениеОтбора);	
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);	
КонецПроцедуры

// ************ Сведения о ХС и Площадках

&НаСервере
Функция ХС_ПолучитьGuid_Сервер(ХС) Экспорт
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ХС_ПолучитьGuid(ХС);	
КонецФункции

&НаКлиенте
Процедура ПолучитьГУИД_ХС(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбранныйХС)) Тогда
		ПредупреждениеПользователю("Не выбран Хозсубъект !");
		Возврат;	
	КонецЕсли;
	ПоказатьОповещениеПользователя("Выполняем запрос получения GUID ХС",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	ХС_ПолучитьGuid_Сервер(ВыбранныйХС);
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПлощадки_Сервер(ХС)	Экспорт
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ЗагрузитьПлощадки(ХС);
    // Этап 4. Обратное преобразование прикладного объекта в реквизит формы
    ЗначениеВРеквизитФормы(ФОбъект, "Объект");
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПлощадкиПоХС(Команда)
	ПоказатьОповещениеПользователя("Выполняется загрузка Площадок",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	ЗагрузитьПлощадки_Сервер(ВыбранныйХС);
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПлощадкиСписком_Сервер(ПоНаименованию)
	ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ЗагрузитьПлощадкиСписком(ПоНаименованию);
	ФОбъект.Автозаполнение(флПеремещения); // обновим список
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПлощадкиПоСпискуДокументов(Команда)
	ПоНаименованию="";
	ПоказатьОповещениеПользователя("Выполняется загрузка Площадок",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	ЗагрузитьПлощадкиСписком_Сервер(ПоНаименованию);
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФормыЗагрузкаПлощадок(РезультатВыбора, ДопПараметры) Экспорт
	КопироватьДанныеФормы(РезультатВыбора, Объект);
	// все данные объекта заполнились
	Если ДопПараметры.ИмяКоманды = "ТутБылоПереданоИмяКоманды" Тогда
    	// выполняем дополнительные процедуры, если они нужны
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПлощадкиПоНаименованию(Команда)
	Если ЭтаФорма.Элементы.Отгрузки.ТекущиеДанные <> Неопределено Тогда
		СтруктураПараметров = Новый Структура("ВыбХС",ЭтаФорма.Элементы.Отгрузки.ТекущиеДанные.ХозСубъект);
	Иначе
		СтруктураПараметров = Новый Структура("ВыбХС","");
	КонецЕсли;
	ОповещениеОВыборе  = Новый ОписаниеОповещения("ОткрытиеФормыЗагрузкаПлощадок", ЭтаФорма, Новый Структура("ИмяКоманды", Команда.Имя));
	Если Объект.флИспользоватьВнешнююОбработку Тогда
		ОткрытьФорму("ВнешняяОбработка.Интеграция_ГИС_Меркурий.Форма.ФормаЗагрузкаПлощадокУФ",СтруктураПараметров, ЭтаФорма,,,, ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму("Обработка.Интеграция_ГИС_Меркурий.Форма.ФормаЗагрузкаПлощадокУФ",СтруктураПараметров, ЭтаФорма,,,, ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбраннаяПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Отбор по ХС включим
	ГУИДХСдляОтбора = ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбранныйХС,"GUID");
	ГУИДХСдляОтбора = ?(ЗначениеЗаполнено(ГУИДХСдляОтбора),ГУИДХСдляОтбора,"****");
	
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = Новый Структура("GuidХозСубъекта", ГУИДХСдляОтбора);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина,ЗначениеОтбора);	
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);	
КонецПроцедуры

&НаСервере
Процедура кнХС_СоздатьНаСервере()
	ФООбъект = РеквизитФормыВЗначение("Объект");
	ФООбъект.ХС_Создать(ВыбранныйХС);
КонецПроцедуры

&НаКлиенте
Процедура кнХС_СоздатьОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Создаем ХС в Меркурий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
    	кнХС_СоздатьНаСервере();
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура кнХС_Создать(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбранныйХС)) тогда
		Сообщить83("Укажите ХС");
		Возврат;
	КонецЕсли;
	ТекстВопроса = "Создать ХС "+ВыбранныйХС+" в Меркурий ?";
    Оповещение = Новый ОписаниеОповещения("кнХС_СоздатьОтвет",ЭтотОбъект);	
    ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры


&НаСервере
Функция кнПлощадкаПоХССоздатьНаСервере(ВыбХС)
	ФООбъект = РеквизитФормыВЗначение("Объект");
	СведенияОКонтрагенте = ФООбъект.ПолучитьСведенияОКонтрагенте(ВыбХС.Контрагент,ТекущаяДата());	
	СпрПл = Справочники.ВСД_Площадка.СоздатьЭлемент();
	СпрПл.Наименование = ВыбХС.Контрагент.Наименование;
	СпрПл.Контрагент = ВыбХС.Контрагент.Ссылка;
	СпрПл.GuidХозСубъекта = ВыбХС.GUID;
	Попытка СпрПл.Адрес = СведенияОКонтрагенте.ФактическийАдрес; Исключение КонецПопытки;
	СпрПл.Записать();
	Сообщить83Сервер("Создан ВСД_Площадка "+СпрПл);
	Возврат СпрПл.Ссылка;
КонецФункции

&НаКлиенте
Процедура кнПлощадкаПоХССоздатьОтвет(Ответ, Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыбраннаяПлощадка = кнПлощадкаПоХССоздатьНаСервере(ВыбранныйХС);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура кнПлощадкаПоХССоздать(Команда)
	// Создание Площадки в справочнике 1С
	Если НЕ(ЗначениеЗаполнено(ВыбранныйХС)) Тогда
		ПредупреждениеПользователю("Выберите Хоз субъект");
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбраннаяПлощадка) Тогда
		ПредупреждениеПользователю("Уже создана Площадка в Справочнике 1С - для создания новой очистите поле");
		Возврат;
	КонецЕсли;
	Если НЕ(ЗначениеЗаполнено(ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбранныйХС,"GUID"))) Тогда
		ПредупреждениеПользователю("Хоз субъект не определен в ГИС Меркурий - Выполните поиск или Создайте");
		Возврат;
	КонецЕсли;
	ТВопроса = "Создать Площадку в справочнике 1С для 
	|"+ВыбранныйХС+" ?"; 
	
    Оповещение = Новый ОписаниеОповещения("кнПлощадкаПоХССоздатьОтвет",ЭтотОбъект);	
    ПоказатьВопрос(Оповещение, ТВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаСервере
Процедура кнСоздатьПлощадкувМеркурийНаСервере(ВыбПлощадка)
	ФООбъект = РеквизитФормыВЗначение("Объект");
	ФООбъект.СоздатьПлощадку(ВыбПлощадка);
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьПлощадкувМеркурий(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбраннаяПлощадка)) Тогда
		ПредупреждениеПользователю("Не указана Площадка 1С для создания в Меркурий");
		Возврат;
	КонецЕсли;
	ПоказатьОповещениеПользователя("Создаем площадку в Меркурий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнСоздатьПлощадкувМеркурийНаСервере(ВыбраннаяПлощадка);
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаСервере
Процедура кнПривязатьПлощадкуНаСервере(ВыбПлощадка)
	ФООбъект = РеквизитФормыВЗначение("Объект");
	ФООбъект.СоздатьСвязьХозсубъектПлощадка(ВыбПлощадка);
КонецПроцедуры

&НаКлиенте
Процедура кнПривязатьПлощадку(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбраннаяПлощадка)) Тогда
		ПредупреждениеПользователю("Не указана Площадка для привязки к ХС");
		Возврат;
	КонецЕсли;
	ПоказатьОповещениеПользователя("Привязываем Площадку к ХС",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнПривязатьПлощадкуНаСервере(ВыбраннаяПлощадка);
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры


// ************* Сведения о ХС и Площадках окончание

// *** Загрузка НСИ

&НаСервере
Функция ЗагрузитьЦели_Сервер()
    ФОбъект = РеквизитФормыВЗначение("Объект");  // РеквизитФормыВЗначение недоступен с клиента
	Рез = ФОбъект.ИнициализацияХС_ЗагрузитьЦели();
    //ЗначениеВРеквизитФормы(ФОбъект, "Объект"); //Не нужно нам данные обратно в форму тащить, они не изменились
	Возврат Рез;
КонецФункции
 
&НаКлиенте
Процедура ЗагрузитьЦели(Команда)
	ПоказатьОповещениеПользователя("Выполняется загрузка Классификатора Цели");
	ЗагрузитьЦели_Сервер();
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры
// *** Загрузка НСИ Окончание


// ************* Открытие, Инициализация и сохранение параметров
&НаСервере
Процедура ИнициализацияСервер()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.Инициализация();
	ФОбъект.Автозаполнение(флПеремещения);
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Объект.ДатаНачалаОтбора = НачалоДня(ТекущаяДата());
	Объект.ДатаОкончанияОтбора = КонецДня(ТекущаяДата());
	ПоказатьОповещениеПользователя("Выполняется инициализация обработки",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	ИнициализацияСервер(); // Загрузим параметры и список документов
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ВСД.СохранитьПараметры(ФОбъект);
	
	_Организация = ФОбъект.Организация;
	
	Сообщить83Сервер("Настройки сохранены для  - "+_Организация);
    // Этап 4. Обратное преобразование прикладного объекта в реквизит формы
    ЗначениеВРеквизитФормы(ФОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПараметры(Команда)
	СохранитьПараметрыНаСервере();
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура кнИнициализацияНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ИнициализацияХС();
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура кнИнициализацияОтвет(Ответ, Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется начальная Инициализация",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		кнИнициализацияНаСервере();
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура кнИнициализация(Команда)
	Если ПустаяСтрока(Объект.param_username)=1 Тогда 
		ПредупреждениеПользователю("Заполните параметр [param_username]");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(Объект.param_password)=1 Тогда 
		ПредупреждениеПользователю("Заполните параметр [param_password]");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(Объект.param_issuer_id)=1 Тогда 
		ПредупреждениеПользователю("Заполните параметр [issuer_id]");
		Возврат;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(Объект.Отправитель_ХозСубъект)) Тогда
		ПредупреждениеПользователю("Заполните параметр [Отправитель_ХозСубъект]");
		Возврат;
	КонецЕсли;	
	ТВопроса = "Будет произведена загрузка классификаторов Меркурий 
	| и заполнены начальные данные. 
	|Операция может занять продолжительное время.";
	
	Оповещение = Новый ОписаниеОповещения("кнИнициализацияОтвет",ЭтотОбъект);	
    ПоказатьВопрос(Оповещение, ТВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
	
КонецПроцедуры


// ************* Инициализация и сохранение параметров Окончание

// ************ Партии

&НаСервере
Процедура ПослеОтветаНаВопросПолучитьПартииСервер() Экспорт
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ПолучитьПартии2( Объект.Отправитель_Площадка ,ПартииСмещение,1,ПартииНач,ПартииКон,флПартииНенулевые );
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросПолучитьПартии(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПослеОтветаНаВопросПолучитьПартииСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьПартии2(Команда)
	ТекстВопроса = "Получить Партии по Площадке "+Объект.Отправитель_Площадка+" в Меркурий ";

	Если ЗначениеЗаполнено(ПартииНач)  Тогда
		ТекстВопроса = ТекстВопроса + "
		|за период с "+ПартииНач+" по "+ПартииКон+"";
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеОтветаНаВопросПолучитьПартии", ЭтотОбъект);	
    ПоказатьВопрос(Оповещение, ТекстВопроса,РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да, ""  );    
КонецПроцедуры

&НаСервере
Процедура ПослеВводаДатыЗагрузкиПартии(ВыбДата, Параметры) Экспорт
    Если Не ВыбДата = Неопределено Тогда
    	ФОбъект = РеквизитФормыВЗначение("Объект");
		ФОбъект.ПолучитьПартии2( Объект.Отправитель_Площадка ,,,ВыбДата,ТекущаяДата());	
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьПартии(Команда)
	Оповещение = Новый ОписаниеОповещения("ПослеВводаДатыЗагрузкиПартии", ЭтотОбъект);	
    ВыбДата = ТекущаяДата()-30*60*60*30;
    ПоказатьВводДаты( Оповещение, ВыбДата , "Введите дату начала загрузки Партий",  ЧастиДаты.Дата);   	
КонецПроцедуры

&НаСервере
Процедура кнПолучитьПартии14НаСервере()
	ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ПолучитьПартии(Объект.Отправитель_Площадка);
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьПартии14Ответ(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется загрузка Партий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
    	кнПолучитьПартии14НаСервере();
		ПоказатьОповещениеПользователя("Загрузка Партий завершена");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьПартии14(Команда)
	ТВопроса = "Получить Партии по Площадке "+Объект.Отправитель_Площадка+" в Меркурий ";
	ТВопроса = ТВопроса + "
	| Операция может занять продолжительное время.";
	
    Оповещение = Новый ОписаниеОповещения("кнПолучитьПартии14Ответ",ЭтотОбъект);	
    ПоказатьВопрос(Оповещение, ТВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    

КонецПроцедуры


// *********** Партии окончание

// *** На форме

// Загрузка Классификаторов
&НаСервере
Процедура кнЗагрузитьПродукциюНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	Для А=1 По 8 Цикл
		ФОбъект.ИнициализацияХС_ЗагрузитьПродукцию(А);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура кнЗагрузитьПродукцию(Команда)
	ПоказатьОповещениеПользователя("Выполняется загрузка Продукции",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнЗагрузитьПродукциюНаСервере();
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаСервере
Процедура кнЗагрузитьЕдИзмНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ИнициализацияХС_ЗагрузитьЕдиницыИзмерения();
КонецПроцедуры

&НаКлиенте
Процедура кнЗагрузитьЕдИзм(Команда)
	ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнЗагрузитьЕдИзмНаСервере();
	ПоказатьОповещениеПользователя("Завершено");
КонецПроцедуры

&НаСервере
Процедура кнЗагрузитьСтраныНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ИнициализацияХС_ЗагрузитьСтраны();
КонецПроцедуры

&НаКлиенте
Процедура кнЗагрузитьСтраны(Команда)
	ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнЗагрузитьСтраныНаСервере();
	ПоказатьОповещениеПользователя("Завершено");
КонецПроцедуры

&НаСервере
Процедура кнЗагрузитьРегионыНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ИнициализацияХС_ЗагрузитьРегионы(ФОбъект.Страна);
КонецПроцедуры

&НаКлиенте
Процедура кнЗагрузитьРегионы(Команда)
	ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнЗагрузитьРегионыНаСервере();
	ПоказатьОповещениеПользователя("Завершено");
КонецПроцедуры

&НаСервере
Процедура кнЗагрузитьГородаНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ИнициализацияХС_ЗагрузитьГорода(ФОбъект.Регион);
КонецПроцедуры

&НаКлиенте
Процедура кнЗагрузитьГорода(Команда)
	ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнЗагрузитьГородаНаСервере();
КонецПроцедуры

&НаСервере
Процедура кнЗагрузитьУпаковкуНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ЗаполнитьФормыУпаковки();
КонецПроцедуры

&НаКлиенте
Процедура кнЗагрузитьУпаковку(Команда)
	ПоказатьОповещениеПользователя("Выполняется обработка",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнЗагрузитьУпаковкуНаСервере();
	ПоказатьОповещениеПользователя("Завершено");
КонецПроцедуры
//**************** Форма Страница Реализации
// **** Список документов перечитать
&НаСервере
Процедура ОбновитьСписокРеализацийНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.Автозаполнение(флПеремещения);
    // Этап 4. Обратное преобразование прикладного объекта в реквизит формы
    ЗначениеВРеквизитФормы(ФОбъект, "Объект");	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокРеализаций(Команда)
	ПоказатьОповещениеПользователя("Выполняется поиск документов для создания ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	ОбновитьСписокРеализацийНаСервере();
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры
// **** Список документов перечитать  Окончание
&НаКлиенте
Процедура ВыборПериода(Команда)
	ВыбранныйПериод = Новый СтандартныйПериод;
	Если Команда.Имя = "ВыборПериодаПартии" Тогда
		// Устанавливаем начальные данные
		ВыбранныйПериод.ДатаНачала = ПартииНач;
		ВыбранныйПериод.ДатаОкончания = ПартииКон;
		КудаРезультат = "ВыборПериодаПартий";
	Иначе
		// Устанавливаем начальные данные
		ВыбранныйПериод.ДатаНачала = Объект.ДатаНачалаОтбора;
		ВыбранныйПериод.ДатаОкончания = Объект.ДатаОкончанияОтбора;
		КудаРезультат = "ВыборПериодаОтгрузки";
	КонецЕсли;
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ВыбранныйПериод;
	// Не модальный вызов диалога выбора периода
		
	Диалог.Показать(Новый ОписаниеОповещения(КудаРезультат, ЭтаФорма, Новый Структура("Диалог", Диалог)));
		
КонецПроцедуры
 
&НаКлиенте
Процедура ВыборПериодаОтгрузки(Период, ДополнительныеПараметры) Экспорт
	Диалог = ДополнительныеПараметры.Диалог;
	Если ЗначениеЗаполнено(Период) Тогда 
		ВыбранныйПериод = Диалог.Период;
		Объект.ДатаНачалаОтбора = ВыбранныйПериод.ДатаНачала;
		Объект.ДатаОкончанияОтбора = ВыбранныйПериод.ДатаОкончания;
		ОбновитьСписокРеализаций("");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаПартий(Период, ДополнительныеПараметры) Экспорт
	Диалог = ДополнительныеПараметры.Диалог;
	Если ЗначениеЗаполнено(Период) Тогда 
		ВыбранныйПериод = Диалог.Период;
		ПартииНач = ВыбранныйПериод.ДатаНачала;
		ПартииКон = ВыбранныйПериод.ДатаОкончания;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОтметитьВсеДокументы(Команда)
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьДокументыКСозданию(Команда)
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = ложь;
		Если ЗначениеЗаполнено(стр.ВСД) или НЕ(ЗначениеЗаполнено(стр.Площадка)) Тогда
			Продолжить;
		КонецЕсли;	
		стр.Отметка = истина;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура кнОтметитьНеотправленныеВСДСервер()
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = ложь;
		Если НЕ(ЗначениеЗаполнено(стр.ВСД)) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ(ЗначениеЗаполнено(стр.ВСД.Статус)) Тогда
			стр.Отметка = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьНеотправленныеВСД(Команда)
	кнОтметитьНеотправленныеВСДСервер();
КонецПроцедуры

&НаСервере
Процедура кнОтметитьСОшибкойСервер()
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = ложь;
		Если НЕ(ЗначениеЗаполнено(стр.ВСД)) Тогда
			Продолжить;
		КонецЕсли;
		СтатусДок = СокрЛП(стр.ВСД.Статус);
		Если (СтатусДок = "REJECTED") или (СтатусДок = "IN_PROCESS")  Тогда
			стр.Отметка = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьСОшибкой(Команда)
	кнОтметитьСОшибкойСервер();
КонецПроцедуры

&НаСервере
Процедура кнОтметитьБезХССервер()
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = ложь;
		Если ЗначениеЗаполнено(стр.ХозСубъект.GUID) Тогда
			Продолжить;
		КонецЕсли;
		стр.Отметка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура кнОтметитьБезХС(Команда)
	кнОтметитьБезХССервер();
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиДокументов(Команда)
	Для Каждого стр Из Объект.Отгрузки Цикл
		стр.Отметка = ложь;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПартийНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ЗаполнитьТаблицуПартий();
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура кнЗаполнитьТаблицуПартий(Команда)
	ПоказатьОповещениеПользователя("Заполняем таблицу Партий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	ЗаполнитьТаблицуПартийНаСервере();
	ПоказатьОповещениеПользователя("Выполнено");
	Элементы.ГрСтраницыОсн.ТекущаяСтраница = Элементы.ГрПартии;
	// Перейти на страницу Партий и посчитать Итог
КонецПроцедуры

&НаСервере
Процедура кнЗапросРегионализацияНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ПроверитьВозможностьПеремещенияВСДПоСписку();
//	ЗначениеВРеквизитФормы(ФОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура кнЗапросРегионализация(Команда)
	ПоказатьОповещениеПользователя("Выполняется запрос условий перевозки для отмеченных документов ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнЗапросРегионализацияНаСервере();
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаСервере
Процедура кнОтправитьВСДНаСервере(сзДокументыКОтправке)
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ОтправитьСписокВСД( сзДокументыКОтправке );
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");
КонецПроцедуры

&НаСервере
Функция ПодготовитьСписокВСДКОтправке(ОтправлятьРанееОтправленные) Экспорт
	сзДокументыКОтправке = новый СписокЗначений;
	Для каждого СтрОтгрузка Из Объект.Отгрузки Цикл
		_ВСД = СтрОтгрузка.ВСД;
		Если НЕ(ЗначениеЗаполнено(_ВСД)) или НЕ(СтрОтгрузка.Отметка) Тогда 		
			Продолжить;    
		КонецЕсли;
		
		Если ((_ВСД.Проведен) и (_ВСД.Статус  = "COMPLETED")) или (_ВСД.Статус = "COMPLETED") или (_ВСД.ПометкаУдаления) Тогда
			Сообщить83Сервер("Документ ["+_ВСД+"] статус=["+_ВСД.Статус+"] уже был обработан");
			продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(_ВСД.applicationID) и НЕ ОтправлятьРанееОтправленные Тогда 
			Продолжить;
		КонецЕсли;
		
		сзДокументыКОтправке.Добавить(_ВСД);
		Сообщить83Сервер(""+_ВСД+" Добавлен в очередь на отправку");
	КонецЦикла;
	Возврат сзДокументыКОтправке;
КонецФункции

&НаКлиенте
Процедура кнОтправитьВСДОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		сзДокументыКОтправке = ПодготовитьСписокВСДКОтправке(Истина);	
	Иначе
		сзДокументыКОтправке = ПодготовитьСписокВСДКОтправке(Ложь);	
	КонецЕсли;
	
	Если сзДокументыКОтправке.Количество() > 0 тогда		
		ПоказатьОповещениеПользователя("Выполняется отправка документов в Меркурий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		кнОтправитьВСДНаСервере(сзДокументыКОтправке);
		ПоказатьОповещениеПользователя("отправка завершена");
	Иначе
		Сообщить83("Нет документов к отправке");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура кнОтправитьВСД(Команда)
	ТекстВопроса = "Отправлять ранее обработанные ВСД (с ошибкой) ?";
    Оповещение = Новый ОписаниеОповещения("кнОтправитьВСДОтвет",ЭтотОбъект);	
    ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаСервере
Процедура кнПолучитьОтветВСД2НаСервере(сзДокументыКОтправке)
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ПолучитьОтветыПоСпискуВСД( сзДокументыКОтправке );
//	ЗначениеВРеквизитФормы(ФОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьОтветВСД2(Команда)
	Сообщить83("Выполняется поиск отправленных ВСД без ответа Ветис");
	сзДокументыКОтправке = новый СписокЗначений;
	Для каждого строкаТЗ из Объект.Отгрузки Цикл
		ВыбВСД = строкаТЗ.ВСД;
		Если НЕ ЗначениеЗаполнено(ВыбВСД) Тогда
			Продолжить;	
		КонецЕсли;
		// ЖД Переделать
		_Статус = СокрЛП(ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбВСД,"Статус"));
		_applicationID = ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбВСД,"applicationID");
		Если (НЕ ЗначениеЗаполнено(_applicationID)) или (_Статус = "COMPLETED") Тогда
			Продолжить;	
		КонецЕсли;
		сзДокументыКОтправке.Добавить(ВыбВСД);
		Сообщить83(""+ВыбВСД+" Добавлен в очередь на проверку ответа Меркурий");
	КонецЦикла;
	
	Если сзДокументыКОтправке.Количество() > 0 тогда
		ПоказатьОповещениеПользователя("Выполняется проверка ответов Меркурий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		кнПолучитьОтветВСД2НаСервере(сзДокументыКОтправке);
		Сообщить83("Проверка ответов завершена");
	Иначе
		Сообщить83("Не выбрано документов к проверке");
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура кнАннулироватьВыбранныеВСДНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.Отправить_ВСД2_АннулированиеВыбранные(ФлПеремещения);
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");	// Перерисовка формы
КонецПроцедуры

&НаКлиенте
Процедура кнАннулироватьВыбранныеВСДОтвет(Ответ, Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется Аннулирование выбранных ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
    	кнАннулироватьВыбранныеВСДНаСервере();
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнАннулироватьВыбранныеВСД(Команда)
	// Список ВСД к Аннулированию подберем на сервере
    Оповещение = Новый ОписаниеОповещения("кнАннулироватьВыбранныеВСДОтвет",ЭтотОбъект);	
    ПоказатьВопрос(Оповещение, "Аннулировать выбранные транзакции ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаКлиенте
Процедура кнУстановитьСоответствия(Команда)
	Если Объект.флИспользоватьВнешнююОбработку Тогда
		ОткрытьФорму("ВнешняяОбработка.Интеграция_ГИС_Меркурий.Форма.Форма_СоответствияУФ");
	Иначе
		ОткрытьФорму("Обработка.Интеграция_ГИС_Меркурий.Форма.Форма_СоответствияУФ");
	КонецЕсли;
КонецПроцедуры
//**** Открытие доп формы и возврат из нее значений
// http://is.1csoft.com/public/414550/
&НаКлиенте
Процедура ОткрытиеФормыГашения(РезультатВыбора, ДопПараметры) Экспорт
	КопироватьДанныеФормы(РезультатВыбора, Объект);
	// все данные объекта заполнились
	Если ДопПараметры.ИмяКоманды = "ТутБылоПереданоИмяКоманды" Тогда
    	// выполняем дополнительные процедуры, если они нужны
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура кнГашение(Команда)
	ОповещениеОВыборе  = Новый ОписаниеОповещения("ОткрытиеФормыГашения", ЭтаФорма, Новый Структура("ИмяКоманды", Команда.Имя));
	Если Объект.флИспользоватьВнешнююОбработку Тогда
		ОткрытьФорму("ВнешняяОбработка.Интеграция_ГИС_Меркурий.Форма.ФормаГашениеУФ",, ЭтаФорма,,,, ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму("Обработка.Интеграция_ГИС_Меркурий.Форма.ФормаГашениеУФ",, ЭтаФорма,,,, ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

// Можно заоптимизировать с ОткрытиеФормыГашения
&НаКлиенте
Процедура ОткрытиеФормыСозданиеЭлементов(РезультатВыбора, ДопПараметры) Экспорт
	КопироватьДанныеФормы(РезультатВыбора, Объект);
	// все данные объекта заполнились
	Если ДопПараметры.ИмяКоманды = "ТутБылоПереданоИмяКоманды" Тогда
    	// выполняем дополнительные процедуры, если они нужны
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьВСДЭлементы(Команда)
	ОповещениеОВыборе  = Новый ОписаниеОповещения("ОткрытиеФормыСозданиеЭлементов", ЭтаФорма, Новый Структура("ИмяКоманды", Команда.Имя));
	Если Объект.флИспользоватьВнешнююОбработку Тогда
		ОткрытьФорму("ВнешняяОбработка.Интеграция_ГИС_Меркурий.Форма.ФормаСоздатьВСД_ЭлементыУФ",, ЭтаФорма,,,, ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму("Обработка.Интеграция_ГИС_Меркурий.Форма.ФормаСоздатьВСД_ЭлементыУФ",, ЭтаФорма,,,, ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

//********  Открытие доп формы окончание

&НаСервере
Функция кнПечатьВСДВнешняя(докСсылка,Адресобработки)
	ОбработкаПечати = ВнешниеОбработки.Создать(Адресобработки,Ложь);
	Возврат ОбработкаПечати.ПечатьВнешнейПечатнойФормы(ДокСсылка, "", "");
КонецФункции

&НаКлиенте
Процедура кнПечатьСтрОтгрузки(Команда)
	//
	Адресобработки = ПутьКфайлуИзПолного(Объект.КаталогИнтеграции)+"Внешняя_Форма_ВСД.epf";
	ФайлНаДиске = Новый Файл(Адресобработки);
    Если Не ФайлНаДиске.Существует() Тогда
        Сообщить("Не существует обработка печати "+Адресобработки);
		Возврат;
    КонецЕсли;	
	
	Для каждого стрДок из Объект.Отгрузки Цикл
		Если Стрдок.Отметка Тогда
			ТабДок = кнПечатьВСДВнешняя(СтрДок.док,Адресобработки);
			ТабДок.Показать();
		КонецЕсли;
	КонецЦикла;
	//ПредупреждениеПользователю("В Разработке");
КонецПроцедуры

&НаКлиенте
Процедура кнПечатьРеестр(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

// *************  Форма стр 1 события тз Реализации
&НаКлиенте
Процедура ОтгрузкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтгрузкиВСДОчисткаНаСервере(ДокСсылка)
	Попытка
		Если НЕ(ДокСсылка = Документы.ВСД2_транзакция.ПустаяСсылка()) Тогда 
			ДокОбъект = ДокСсылка.ПОлучитьОбъект();
			Если СокрЛП(ДокОбъект.Статус) = "COMPLETED" Тогда
				Сообщить(""+ДокОбъект+" зарегистрирован в Меркурий - удаление невозможно");
				Возврат false;
			КонецЕсли;
			ДокОбъект.УстановитьПометкуУдаления(ИСТИНА);
			Возврат true;
		КонецЕсли;		
	Исключение
		Возврат false;
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ОтгрузкиВСДОчисткаОтвет(Ответ, Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ОтгрузкиВСДОчисткаНаСервере(Парам.ДокСсылка) тогда
			Парам.Элемент.Родитель.ТекущиеДанные.сЦвет = 0;
			Парам.Элемент.Родитель.ТекущиеДанные.ВСД = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОтгрузкиВСДОчистка(Элемент, СтандартнаяОбработка)
	//Пометим на удаление док ВСД
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элемент.Родитель.ТекущиеДанные.ВСД) Тогда 
		ДокСсылка = Элемент.Родитель.ТекущиеДанные.ВСД;
		Если СокрЛП(ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ДокСсылка,"Статус")) = "COMPLETED" Тогда
			Сообщить83(""+ДокСсылка+" зарегистрирован в Меркурий - удаление невозможно");
			Возврат;
		КонецЕсли;
		Парам = новый Структура("ДокСсылка,Элемент",ДокСсылка,Элемент);
    	Оповещение = Новый ОписаниеОповещения("ОтгрузкиВСДОчисткаОтвет",ЭтотОбъект,Парам);	
    	ПоказатьВопрос(Оповещение, "Удалить "+ДокСсылка+" ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтгрузкиПлощадкаОчисткаНаСервере(ПлощадкаСсылка)
	Попытка
		Если НЕ(ПлощадкаСсылка = Справочники.ВСД_Площадка.ПустаяСсылка()) Тогда 
			СпрОб = ПлощадкаСсылка.ПОлучитьОбъект();
			СпрОб.Контрагент = "";
			СпрОб.Записать();
		КонецЕсли;		
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиПлощадкаОчистка(Элемент, СтандартнаяОбработка)
	// Отвяжем площадку от контрагента
//	СтандартнаяОбработка = Ложь;
//    ПредупреждениеПользователю("Отвязка Площадки из формы в Разработке");
//	Возврат;	
	ОтгрузкиПлощадкаОчисткаНаСервере(Элемент.Родитель.ТекущиеДанные.Площадка);
	Элемент.Родитель.ТекущиеДанные.сЦвет = 2;  //Желтый
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтгрузкиПлощадкаПриИзмененииНаСервере(ПлощадкаСсылка, КонтраСсылка)
	Если НЕ (ПлощадкаСсылка = Справочники.ВСД_Площадка.ПустаяСсылка()) Тогда 
		СпрОб = ПлощадкаСсылка.ПОлучитьОбъект();
		СпрОб.Контрагент = КонтраСсылка;//ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Грузополучатель;
		СпрОб.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиПлощадкаПриИзменении(Элемент)
	//Привяжем к Контрагенту
	//Отвязать прежнюю ? - где то хранить нужно - Сделал отвязку при начале Выбора, см. ниже.
	//Сообщить83("Разработчику - сделать отвязку прежней площадки ! Смотри процедуру ниже");
	ОтгрузкиПлощадкаПриИзмененииНаСервере(Элемент.Родитель.ТекущиеДанные.Площадка,Элемент.Родитель.ТекущиеДанные.Грузополучатель);
	Если ЗначениеЗаполнено(Элемент.Родитель.ТекущиеДанные.Площадка) Тогда
		Элемент.Родитель.ТекущиеДанные.сЦвет = 0;
	Иначе
		Элемент.Родитель.ТекущиеДанные.сЦвет = 2;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//Выбор_ВСД_Площадка = Элемент.Родитель.ТекущиеДанные.Площадка; // для последующего удаления привязки - в переменную формы !
	//Отвяжем сразу без вопросов
	ОтгрузкиПлощадкаОчисткаНаСервере(Элемент.Родитель.ТекущиеДанные.Площадка);
	// Отбор по ХС включим
	ГУИДХСдляОтбора = ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(Элемент.Родитель.ТекущиеДанные.ХозСубъект,"GUID");
	ГУИДХСдляОтбора = ?(ЗначениеЗаполнено(ГУИДХСдляОтбора),ГУИДХСдляОтбора,"****");
	
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = Новый Структура("GuidХозСубъекта", ГУИДХСдляОтбора);
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора,Отбор", Истина, Истина,ЗначениеОтбора);	
	ОткрытьФорму("Справочник.ВСД_Площадка.ФормаВыбора", ПараметрыПодбора, Элемент);	
КонецПроцедуры

//*********** Вкладка Партии

&НаСервере
Процедура кнСоздатьВСДНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.СоздатьВСД2();
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");	// Перерисовка формы  - нужно ли ?
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьВСДОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Создаем ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		кнСоздатьВСДНаСервере();
		ПоказатьОповещениеПользователя("Выполнено");
		Элементы.ГрСтраницыОсн.ТекущаяСтраница = Элементы.ГрОтгрузки;
		ЭтаФорма.ТекущийЭлемент = Элементы.кнОтправитьВСД;
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьВСД(Команда)
	Если Объект.Партии.Количество() = 0 Тогда
		Сообщить83("Нет Партий для создания ВСД ");
		Возврат;
	КонецЕсли;
    Оповещение = Новый ОписаниеОповещения("кнСоздатьВСДОтвет",ЭтотОбъект);	
    ПоказатьВопрос(Оповещение, "Создать ВСД на отмеченные Накладные ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаСервере
Процедура СоздатьВСДПроизводствоНаСервере(ВыбДата)
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.Создать_ВСД2_Производство(ВыбДата);
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДатыПроизводство(ВыбДата,Парам) Экспорт
	Если ВыбДата = Неопределено Тогда
		Сообщить83("Отменено");
		Возврат;
	Иначе
		СоздатьВСДПроизводствоНаСервере(ВыбДата);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнПроизводствоОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеВводаДатыПроизводство", ЭтотОбъект);	
    	ВыбДата = Объект.ДатаНачалаОтбора;
    	ПоказатьВводДаты( Оповещение, ВыбДата , "Введите дату выпуска для создания документов Производство",  ЧастиДаты.Дата);		
	КонецЕсли;		
КонецПроцедуры


&НаКлиенте
Процедура кнПроизводство(Команда)
	Если Объект.Партии.Количество() = 0 Тогда
		Сообщить83("Нет данных в таблице ");
		Возврат;
	КонецЕсли;
    Оповещение = Новый ОписаниеОповещения("кнПроизводствоОтвет",ЭтотОбъект);	
    ПоказатьВопрос(Оповещение, "Создать производственные ВСД на недостающую продукцию ?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаСервере
Процедура ОтправитьВСДПроизводствоНаСервере(СзДок)
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.ОтправитьВсе_ВСД2_Производство(СзДок,,);	
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");	
КонецПроцедуры

&НаКлиенте
Процедура кнПроизводствоОтправить(Команда)
	СЗДок = Новый СписокЗначений;
	Для Каждого стр из Объект.Партии Цикл				
		Если НЕ(ЗначениеЗаполнено(стр.ВСД_Производство)) Тогда
			Продолжить;
		КонецЕсли;
		Если ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(стр.ВСД_Производство,"Проведен") Тогда
			Продолжить	
		КонецЕсли;
		СЗДок.Добавить(стр.ВСД_Производство);
	КонецЦикла;
	Если СзДок.Количество() = 0 Тогда
		Сообщить83("Нет производственных ВСД для отправки");
		Возврат;
	КонецЕсли;
	ПоказатьОповещениеПользователя("Выполняется отправка производственных ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	ОтправитьВСДПроизводствоНаСервере(СзДок);
	ПоказатьОповещениеПользователя("Выполнено");
		//Обновим партии на форме, проверим, все ли хорошо оправилось
	ОтправкаОК = true;
	Для Каждого стр из Объект.Партии Цикл				
		Если НЕ(ЗначениеЗаполнено(стр.ВСД_Производство)) Тогда
			Продолжить;
		КонецЕсли;
		// ЖД - вызовы сервера в цикле !!!! переделать
		Если (СокрЛП(ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(стр.ВСД_Производство,"Статус")) = "COMPLETED") Тогда
			стр.Количество = стр.КоличествоСписания; //ЖД чтобы окрасилось правильно
			Продолжить	
		КонецЕсли;
		ОтправкаОК = false;
	КонецЦикла;
	Если ОтправкаОК Тогда
		ПоказатьОповещениеПользователя("Обновляем таблицу Партий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		кнЗаполнитьТаблицуПартий(Команда);
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьОтветВСДПроизводство(Команда)
	сзДокументыКОтправке = новый СписокЗначений;
	Для каждого строкаТЗ из Объект.Партии Цикл
		ВыбВСД = строкаТЗ.ВСД_Производство;
		Если НЕ ЗначениеЗаполнено(ВыбВСД) Тогда
			Продолжить;	
		КонецЕсли;
		_Статус = СокрЛП(ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбВСД,"Статус"));
		_applicationID = ВСД.ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбВСД,"applicationID");
		Если (НЕ ЗначениеЗаполнено(_applicationID)) или (_Статус = "COMPLETED") Тогда
			Продолжить;	
		КонецЕсли;
		сзДокументыКОтправке.Добавить(ВыбВСД);
		Сообщить83(""+ВыбВСД+" Добавлен в очередь на проверку ответа Меркурий");
	КонецЦикла;
	
	Если сзДокументыКОтправке.Количество() > 0 тогда
		//Сообщить83("Выполняется запрос ответов от ВЕТИС на отправленные документы из списка партий без ответа");
		ПоказатьОповещениеПользователя("Выполняется запрос ответов в Меркурий",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		кнПолучитьОтветВСД2НаСервере(сзДокументыКОтправке);
		ПоказатьОповещениеПользователя("Выполнено");
	Иначе
		Сообщить83("Не выбрано документов к проверке");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция кнПереместитьОтПоставщикаНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	Возвртат = ФОбъект.СменаВладельцаВызовИзФормы();
	ЗначениеВРеквизитФормы(ФОбъект, "Объект");	
КонецФункции

&НаКлиенте
Процедура кнПереместитьОтПоставщикаОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется пермещение..",,"Ожидайте...",БиблиотекаКартинок.Информация32);
		Рез = кнПереместитьОтПоставщикаНаСервере();	
		Если Рез = "ОК" Тогда
			кнЗаполнитьТаблицуПартий("");
		ИначеЕсли Рез = "ОШИБКААВТОГАШЕНИЯ" Тогда
			//??? для УФ не прокатит
			Форма = ПолучитьФорму("ФормаГашение");
			ОткрытьФормуМодально(Форма);
		КонецЕсли;
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнПереместитьОтПоставщика(Команда)
	//ПредупреждениеПользователю("В Разработке");
	ТВопроса = "Создать ВСД2_Транзакцию по списку недостающих партий
	|на перемещение от "+Объект.ПарамПоставщикПлощадка+ " ?";
    Оповещение = Новый ОписаниеОповещения("кнПереместитьОтПоставщикаОтвет",ЭтотОбъект);	
    ПоказатьВопрос(Оповещение, ТВопроса, РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаКлиенте
Процедура ПартииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = истина;
КонецПроцедуры

//**** Продукция
&НаСервере
Процедура кнПолучитьСписокПродукцииНаСервере(ВыбПлощадка)
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.Получить_Список_Продукции( ВыбПлощадка );
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьСписокПродукцииОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Получаем список продукции по выбранной площадке",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	   	кнПолучитьСписокПродукцииНаСервере(Объект.Отправитель_Площадка);
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьСписокПродукции(Команда)
	Если НЕ(ЗначениеЗаполнено(Объект.Отправитель_Площадка)) тогда
		Сообщить83("Укажите Площадку");
		Возврат;
	КонецЕсли;
    Оповещение = Новый ОписаниеОповещения("кнПолучитьСписокПродукцииОтвет",ЭтотОбъект);	
    ПоказатьВопрос(Оповещение, "Получить полный список продукции по площадке "+Объект.Отправитель_Площадка+"?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаСервере
Процедура кнПолучитьИнфоПродукцияНаСервере()
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.Получить_Инфо_Продукции( ВыбПродукция );
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьИнфоПродукция(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбПродукция)) тогда
		Сообщить83("Укажите Продукцию");
		Возврат;
	КонецЕсли;
	ПоказатьОповещениеПользователя("Получаем инфо о продукции",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	кнПолучитьИнфоПродукцияНаСервере();
	ПоказатьОповещениеПользователя("Выполнено");
КонецПроцедуры

&НаСервере
Процедура ИзменитьПродукциюНаСервере(ВыбКоманда)
    ФОбъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.Изменить_Продукцию(ВыбПродукция,ВыбКоманда);
КонецПроцедуры

&НаКлиенте
Процедура кнИзменитьПродукциюОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется запрос на изменение продукции",,"Ожидайте...",БиблиотекаКартинок.Информация32);
    	ИзменитьПродукциюНаСервере("UPDATE");
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура кнИзменитьПродукцию(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбПродукция)) тогда
		Сообщить83("Укажите Продукцию");
		Возврат;
	КонецЕсли;
    Оповещение = Новый ОписаниеОповещения("кнИзменитьПродукциюОтвет",ЭтотОбъект);	
    ПоказатьВопрос(Оповещение, "Изменить продукцию "+ВыбПродукция+" на площадке "+Объект.Отправитель_Площадка+"?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьПродукциюОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется запрос на создание Продукции",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	   	ИзменитьПродукциюНаСервере("CREATE");
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьПродукцию(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбПродукция)) тогда
		Сообщить83("Укажите Продукцию");
		Возврат;
	КонецЕсли;
    Оповещение = Новый ОписаниеОповещения("кнСоздатьПродукциюОтвет",ЭтотОбъект);	
    ПоказатьВопрос(Оповещение, "Создать продукцию "+ВыбПродукция+" на площадке "+Объект.Отправитель_Площадка+"?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

&НаКлиенте
Процедура кнУдалитьПродукциюОтвет(Ответ,Парам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоказатьОповещениеПользователя("Выполняется запрос на удаление Продукции",,"Ожидайте...",БиблиотекаКартинок.Информация32);
	   	ИзменитьПродукциюНаСервере("DELETE");
		ПоказатьОповещениеПользователя("Выполнено");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнУдалитьПродукцию(Команда)
	Если НЕ(ЗначениеЗаполнено(ВыбПродукция)) тогда
		Сообщить83("Укажите Продукцию");
		Возврат;
	КонецЕсли;
    Оповещение = Новый ОписаниеОповещения("кнУдалитьПродукциюОтвет",ЭтотОбъект);	
    ПоказатьВопрос(Оповещение, "Удалить продукцию "+ВыбПродукция+" в Меркурий?", РежимДиалогаВопрос.ДаНет,  0, КодВозвратаДиалога.Да, ""   );    
КонецПроцедуры

// ************* ТЕСТЫ
&НаСервере
Функция ЗагрузитьЦели_СерверТЕСТ()
	Рез = "";
    ФОбъект = РеквизитФормыВЗначение("Объект");
	//Поместим во врем Хранилище ФОбъект и передадим его Адрес в параметры вызова фона
	Структура = Новый Структура("ОбработкаВСД", ФОбъект);
	АдресОбработкиНаСервере		= ПоместитьВоВременноеХранилище(Структура,Новый УникальныйИдентификатор);
	// Временное хранилище не передается в фоновое задание.....
	Парам = Новый Массив;  // параметров д.б. ровно столько, сколько указано в вызываемой процедуре общего модуля, иначе ошибка
	//Парам.Добавить(АдресОбработкиНаСервере);
	//Парам.Добавить("ТЕСТ Параметр2");
	Парам.Добавить(Объект.Организация);
	Парам.Добавить("ТЕСТ Параметр2");	
//	Параметры.Добавить("");
	
	ФоновыеЗадания.Выполнить("ВСД.ВыполнитьВФоне", Парам, Новый УникальныйИдентификатор, "Тестовое задание");	
	//Рез = ФОбъект.ИнициализацияХС_ЗагрузитьЦели();
    //ЗначениеВРеквизитФормы(ФОбъект, "Объект"); //Не нужно нам данные обратно в форму тащить, они не изменились
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ТЕСТСообщения(Команда)
	ПоказатьОповещениеПользователя("Выполняется загрузка Классификатора Цели",,"Ждите...",БиблиотекаКартинок.Информация32);
	ЗагрузитьЦели_СерверТЕСТ();
	ПодключитьОбработчикОжидания("ОбработчикОжидания",5,Истина);
	//ПоказатьОповещениеПользователя("Загрузка Завершена");
КонецПроцедуры

&НаСервере
Процедура ПроверитьЖивостьПеременныхНаСервере()	
    ФОбъект = РеквизитФормыВЗначение("Объект");
	//Структура = ПолучитьИзВременногоХранилища(Объект.АдресКомпонентыНаСервере);
	ФОбъект.ПеременныеЖивы();
КонецПроцедуры

&НаКлиенте
Процедура ТЕСТ1(Команда)
	ПроверитьЖивостьПеременныхНаСервере()
	//Сообщить83("Самый последний файл = "+ПолучитьПоследнийXMLОтвет());
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	Фобъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.Инициализация();
	ФОбъект.Автозаполнение(флПеремещения);
	ЗначениеВРеквизитФормы(Фобъект,"Объект");
КонецПроцедуры


&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура Отправитель_ПлощадкаНаФормеПриИзмененииНаСервере()
	Фобъект = РеквизитФормыВЗначение("Объект");
	ФОбъект.Отгрузки.Очистить();
	Фобъект.Партии.Очистить();
	Фобъект.ВСДВходящие.Очистить();
	ФОбъект.Автозаполнение(флПеремещения);
	ЗначениеВРеквизитФормы(Фобъект,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура Отправитель_ПлощадкаНаФормеПриИзменении(Элемент)
	Отправитель_ПлощадкаНаФормеПриИзмененииНаСервере();
КонецПроцедуры






