// Zhukov@kb99.pro 20/08/18
// Печать сокращенного ВСД из ДокОснования, Транзакции, Результата
// Для 1С 3.*

// На основе примеров https://helpf.pro/faq83/view/1726.html
// http://programmist1s.ru/vneshnie-pechatnyie-formyi-v-1s/
 // Функция формирует табличный документ с Внешней печатной формой
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
Функция ЗапросПоОснованию() 
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	ВСД2_транзакция.Ссылка КАК Ссылка1,
	|	ВСД2.Ссылка КАК ВСД2
	|ИЗ
	|	Документ.ВСД2 КАК ВСД2
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВСД2_транзакция КАК ВСД2_транзакция
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ПО ВСД2_транзакция.ДокументОснование = РеализацияТоваровУслуг.Ссылка
	|			И ВСД2_транзакция.ЭтоПеремещениеОтПоставщика = ЛОЖЬ
	|		ПО ВСД2.ДокументОснование = ВСД2_транзакция.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Ссылка
	|	И ВСД2.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	ВСД_транзакция.Ссылка,
	|	ВСД.Ссылка
	|ИЗ
	|	Документ.ВСД КАК ВСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВСД_транзакция КАК ВСД_транзакция
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ПО ВСД_транзакция.ДокументОснование = РеализацияТоваровУслуг.Ссылка
	|		ПО ВСД.ДокументОснование = ВСД_транзакция.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Ссылка
	|	И ВСД.ПометкаУдаления = ЛОЖЬ";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ЗапросПоТранзакции() 
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВСД2_транзакция.Ссылка КАК Ссылка1,
	|	ВСД2.Ссылка КАК ВСД2
	|ИЗ
	|	Документ.ВСД2 КАК ВСД2
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВСД2_транзакция КАК ВСД2_транзакция
	|		ПО ВСД2.ДокументОснование = ВСД2_транзакция.Ссылка
	|ГДЕ
	|	ВСД2_транзакция.Ссылка = &Ссылка
	|	И ВСД2.ПометкаУдаления = ЛОЖЬ
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ
	|	ВСД_транзакция.Ссылка КАК Ссылка1,
	|	ВСД.Ссылка КАК ВСД2
	|ИЗ
	|	Документ.ВСД КАК ВСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВСД_транзакция КАК ВСД_транзакция
	|		ПО ВСД.ДокументОснование = ВСД_транзакция.Ссылка
	|ГДЕ
	|	ВСД_транзакция.Ссылка = &Ссылка
	|	И ВСД.ПометкаУдаления = ЛОЖЬ";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ЗапросПоРезультату() 
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВСД2.Ссылка КАК ВСД2
	|ИЗ
	|	Документ.ВСД2 КАК ВСД2
	|ГДЕ
	|	ВСД2.Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ
	|	ВСД.Ссылка КАК ВСД2
	|ИЗ
	|	Документ.ВСД КАК ВСД
	|ГДЕ
	|	ВСД.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ПечатьВнешнейПечатнойФормы(ДокСсылка, ОбъектыПечати, Подписант="") Экспорт
	// ЖД Подписант - просто параметр любой, первые два обязательны
	// Причем вместо ДокСсылка можно передать (смотри вызов Ниже) МассивОбъектов 
	
	
	Если (ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД_транзакция")) или
		 (ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_транзакция")) тогда		 
		ТекстЗапроса = ЗапросПоТранзакции();
	ИначеЕсли (ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД")) или
		 (ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2")) тогда
		 ТекстЗапроса = ЗапросПоРезультату();
	Иначе
		ТекстЗапроса = ЗапросПоОснованию();	 
	КонецЕсли;
     
	
	ТабДокумент = Новый ТабличныйДокумент;
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		Макет = ПолучитьМакет("Макет");
		УПрПрил = истина;
	Иначе
		Макет = ПолучитьМакет("Макет82");
		УПрПрил = Ложь;
	КонецЕсли;
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	//ДокСсылка = МассивОбъектов[0];
	// ЖД - Встроенная в Конфу БП 3. - номер без префикска
	ОбластьМакета.Параметры.НомерДок = ДокСсылка.Номер;//ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокСсылка.Номер, Истина, Ложь);
	ОбластьМакета.Параметры.ДатаДок = Формат(ДокСсылка.Дата,"ДЛФ=Д");
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка); 
	ЭтоПеремещение = ложь;
	Если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РеализацияТоваровУслуг","ПеремещениеТоваров");
		ЭтоПеремещение = истина;
	КонецЕсли;
	ОбластьМакета = Макет.ПолучитьОбласть("ОбластьШтрихкод");
	
	Шапка = Запрос.Выполнить().Выбрать();
	Пока Шапка.Следующий() цикл
		докВСД = Шапка.ВСД2;
		Если НЕ(СокрЛП(ДокВСД.Статус) = "CONFIRMED") Тогда
			Продолжить;	
		КонецЕсли;
		// ЖД БП 3.0
		//СведенияОГрузополучателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(докВСД.Получатель_Площадка.Контрагент,  докВСД.Дата);
		ПечГрузополучатель   = СокрЛП(докВСД.Получатель_Площадка.Наименование)+", Адрес: " +СокрЛП(докВСД.Получатель_Площадка.Адрес);
		// = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН,ФактическийАдрес");
		ПечНомерТТН = СокрЛП(докВСД.ттнНомер);//ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокСсылка.Номер, Истина, Ложь);
		
		//*******
		тВСД = "Ветеринарное свидетельство (оформлен) Код: "+докВСД.UUID;
				тОтправитель = "Фирма-отправитель: "+ ДокСсылка.Организация.НаименованиеПолное+", ИНН:"+ 
			ДокСсылка.Организация.ИНН+", ТТН: № "+ПечНомерТТН+" от "+ДокСсылка.Дата;
		Если ЭтоПеремещение тогда
			тПолучатель = "Фирма-получатель: "+ДокСсылка.Организация.НаименованиеПолное+", ИНН:"+ДокСсылка.Организация.ИНН; 
		иначе
			Попытка
				тПолучатель = "Фирма-получатель: "+ДокСсылка.Контрагент.НаименованиеПолное+", ИНН: "+ДокСсылка.Контрагент.ИНН;
			Исключение
				тПолучатель = "Фирма-получатель: "+ДокСсылка.Получатель_Хозсубъект.Контрагент.НаименованиеПолное+", ИНН: "+ДокСсылка.Получатель_Хозсубъект.Контрагент.ИНН;
			КонецПопытки;
		КонецЕсли;
		тПлощадка = "Предприятие-получатель: " + ПечГрузополучатель;
		тПродукция = "Продукция: "+докВСД.НаименованиеПродукции +", "+докВСД.Количество+" кг";
		
		Если ЗначениеЗаполнено(докВСД.ДатаИзготовления1) Тогда
			тВыработано = "Выработана: "+Формат(докВСД.ДатаИзготовления1,"ДФ=dd.MM.yyyy; ДЛФ=D; ДП=-")+"-"+Формат(докВСД.ДатаИзготовления2,"ДФ=dd.MM.yyyy; ДЛФ=D; ДП=-");					
		Иначе
			тВыработано = "Выработана: " + Сокрлп(докВСД.ДатаИзготовления);
		КонецЕсли;
		Если ЗначениеЗаполнено(докВСД.ДатаСрокГодности1) Тогда
			тВыработано = тВыработано + 
			" срок годности: "+ Формат(докВСД.ДатаСрокГодности1,"ДФ=dd.MM.yyyy; ДЛФ=D; ДП=-")+"-"+Формат(докВСД.ДатаСрокГодности2,"ДФ=dd.MM.yyyy; ДЛФ=D; ДП=-");
		Иначе
			тВыработано = тВыработано + " срок годности: "+ СокрЛП(докВСД.ДатаСрокГодности);
		КонецЕсли;
		
		тКод = "Код: "+докВСД.UUID;  
		тСгенерировано = "Сгенерировано системой '1С' "+ТекущаяДата()+" "+ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
	   			 			
		шк = "http://mercury.vetrf.ru/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid= "+докВСД.UUID;
		
		Если УпрПрил Тогда
			// ЖД БП 3.0 Печать QR средствами 1С
			ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(шк, 1, 190);
			Если ДанныеQRКода = Неопределено Тогда
				КартинкаQRКода = Новый Картинка();
			Иначе
				КартинкаQRКода = Новый Картинка(ДанныеQRКода);
			КонецЕсли;
			ОбластьМакета.Рисунки.ШК.Картинка = КартинкаQRКода;
		// Печать средствами 1С оконч
		Иначе
			Попытка
				ОбластьМакета.Рисунки.Штрихкод.Объект.symbology = 58; // тип = QR
		    	ОбластьМакета.Рисунки.Штрихкод.Объект.barcode = шк;
			исключение
				Сообщить("Не загружена ocvitabarcode.ocx - Печать QR кода невозможна");
			КонецПопытки;
		КонецЕсли;
		ОбластьМакета.Параметры.тВСД = тВСД;
		ОбластьМакета.Параметры.тОтправитель = тОтправитель;
		ОбластьМакета.Параметры.тПолучатель = тПолучатель;
		ОбластьМакета.Параметры.тПлощадка = тПлощадка;
		ОбластьМакета.Параметры.тПродукция = тПродукция;
		ОбластьМакета.Параметры.тВыработано = тВыработано;
		ОбластьМакета.Параметры.тКод = тКод;
		ОбластьМакета.Параметры.тСгенерировано = тСгенерировано;
		
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "Удостоверение качества";
	
	
	Возврат ТабДокумент;
	

КонецФункции

// Экспортная процедура печати, вызываемая из основной программы
//
// Параметры:
// ВХОДЯЩИЕ:
//  МассивОбъектовНазначения - Массив - список объектов ссылочного типа для печати документа
//                 Как правило, содержит один элемент с ссылкой на вызвавший форму объект (документ, справочник)
//
// ИСХОДЯЩИЕ:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - таблица сформированных табличных документов.
//                 Как правило, содержит одну строку с именем текущей печатной формы
//  ОбъектыПечати - СписокЗначений - список объектов печати. 
//  ПараметрыВывода - Структура - Параметры сформированных табличных документов. Содержит поля:
//  						ДоступнаПечатьПоКомплектно - булево - по умолчанию Ложь
//							ПолучательЭлектронногоПисьма
//							ОтправительЭлектронногоПисьма
//
Процедура Печать(МассивОбъектовНазначения, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ВСДПечатьВнешняя") Тогда 
		ТабличныйДокумент = ПечатьВнешнейПечатнойФормы(МассивОбъектовНазначения[0], ОбъектыПечати, "");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ВСДПечатьВнешняя", "ВСД (внешний)", ТабличныйДокумент);
		
//	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АКТПечатьВнешняяИван") Тогда 
//		ТабличныйДокумент = ПечатьВнешнейПечатнойФормы(МассивОбъектовНазначения, ОбъектыПечати, "Иванов А.Ю.");
//		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АКТПечатьВнешняяИван", "АКТ (внешний) Иванов", ТабличныйДокумент);  		
		
//	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АКТПечатьВнешняяПетр") Тогда 
//		ТабличныйДокумент = ПечатьВнешнейПечатнойФормы(МассивОбъектовНазначения, ОбъектыПечати, "Петров В.С.");
//		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АКТПечатьВнешняяПетр", "АКТ (внешний) Петров", ТабличныйДокумент);
	КонецЕсли;


КонецПроцедуры


#Область СведенияОВнешнейОбработке
// Сервисная экспортная функция. Вызывается в основной программе при регистрации обработки в информационной базе
// Возвращает структуру с параметрами регистрации
//
// Возвращаемое значение:
//		Структура с полями:
//			Вид - строка, вид обработки, один из возможных: "ДополнительнаяОбработка", "ДополнительныйОтчет", 
//					"ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма", "СозданиеСвязанныхОбъектов"
//			Назначение - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					Например, "Документ.СчетЗаказ" или "Справочник.*". Параметр имеет смысл только для назначаемых обработок, для глобальных может не задаваться.
//			Наименование - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//			Информация  - строка - Краткая информация или описание по обработке.
//			Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//			БезопасныйРежим - булево - Принимает значение Истина или Ложь, в зависимости от того, требуется ли устанавливать или отключать безопасный режим 
//							исполнения обработок. Если истина, обработка будет запущена в безопасном режиме. 
//
Функция СведенияОВнешнейОбработке() Экспорт
	//Инициализируем структуру с параметрами регистрации    	
	ПараметрыРегистрации = Новый Структура;
	// Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать.
	// Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма"); //может быть - ПечатнаяФорма, ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов...
	
	МассивНазначений = Новый Массив;
	// Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
	// Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе,
	// которые поддерживают механизм ВПФ
	МассивНазначений.Добавить("Документ.РеализацияТоваровУслуг"); //Указываем документ к которому делаем внешнюю печ. форму   		
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	
	ПараметрыРегистрации.Вставить("Наименование", "ВСД"); //имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("БезопасныйРежим", ЛОЖЬ);  // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
	ПараметрыРегистрации.Вставить("Версия", "1.0");   // эти два параметра играют больше информационную роль,
	ПараметрыРегистрации.Вставить("Информация", "Дополнительная печатная форма"); // т.е. это то, что будет видеть пользователь в информации к обработке
	
	// Создадим таблицу команд (подробнее смотрим ниже)
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, "Внешний: ВСД", "ВСДПечатьВнешняя", "ВызовСерверногоМетода", Истина, "ПечатьMXL");
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации; 	
КонецФункции
#КонецОбласти


#Область Вспомогательное
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ


// Формирует структуру с параметрами регистрации регистрации обработки в информационной базе
//
// Параметры:
//	ОбъектыНазначенияФормы - Массив - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					или строка с именем объекта метаданных 
//	НаименованиеОбработки - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//							Необязательно, по умолчанию синоним или представление объекта
//	Информация  - строка - Краткая информация или описание обработки.
//							Необязательно, по умолчанию комментарий объекта
//	Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//
//
// Возвращаемое значение:
//		Структура
//
Функция ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы = Неопределено, НаименованиеОбработки = "", Информация = "", Версия = "1.0")


	Если ТипЗнч(ОбъектыНазначенияФормы) = Тип("Строка") Тогда
		ОбъектНазначенияФормы = ОбъектыНазначенияФормы;
		ОбъектыНазначенияФормы = Новый Массив;
		ОбъектыНазначенияФормы.Добавить(ОбъектНазначенияФормы);
	КонецЕсли; 
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Истина);
	ПараметрыРегистрации.Вставить("Назначение", ОбъектыНазначенияФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеОбработки) Тогда
		НаименованиеОбработки = ЭтотОбъект.Метаданные().Представление();
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Наименование", НаименованиеОбработки);
	
	Если Не ЗначениеЗаполнено(Информация) Тогда
		Информация = ЭтотОбъект.Метаданные().Комментарий;
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Информация", Информация);
	
	ПараметрыРегистрации.Вставить("Версия", Версия);


	Возврат ПараметрыРегистрации;


КонецФункции


// Формирует таблицу значений с командами печати
//	
// Возвращаемое значение:
//		ТаблицаЗначений
//
Функция ПолучитьТаблицуКоманд()


	Команды = Новый ТаблицаЗначений;
	
	//Представление команды в пользовательском интерфейсе
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//Уникальный идентификатор команды или имя макета печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	//Способ вызова команды: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"
	// "ОткрытиеФормы" - применяется только для отчетов и дополнительных отчетов
	// "ВызовКлиентскогоМетода" - вызов процедуры Печать(), определённой в модуле формы обработки
	// "ВызовСерверногоМетода" - вызов процедуры Печать(), определённой в модуле объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	//Показывать оповещение.
	//Если Истина, требуется показать оповещение при начале и при завершении работы обработки. 
	//Имеет смысл только при запуске обработки без открытия формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	//Дополнительный модификатор команды. 
	//Используется для дополнительных обработок печатных форм на основе табличных макетов.
	//Для таких команд должен содержать строку ПечатьMXL
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));


	Возврат Команды; 
КонецФункции


// Вспомогательная процедура.
//
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ВызовСерверногоМетода", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;      
КонецПроцедуры

#КонецОбласти   