// www.kb99.pro
// zhukov@kb99.pro адаптация для Управляемого приложения
// версия 1.7.14 от 11/02/2019
//
// Общий модуль для Обычного и Управляемого Приложений
// Разобраться с СтрРазделить() - > Проверить самописаный аналог СтрРазделить82() на соответствие
// Для УФ цвета в Условном Оформлении брать не из Стилей !!! иначе слетают.

Перем КомпонентаНаСервере Экспорт;
Перем СписокКонстант Экспорт;
//Перем ИмяDLL Экспорт; // пока не сохраняю в хранилище   - для формы 82 оставил

//Перем ТермическиеУсловияПеревозки Экспорт;
//Перем ТермическиеУсловияПеревозки2 Экспорт; //Временный вариант - разобраться

Перем МодульПереопределения Экспорт; //Подключаемая обработка с переопределяемыми функциями

Функция Найти_Продукция_Элемент2( productItem, Продукция, ВидПродукции)
	
КонецФункции

#Область ПереопределениеФункций
//Переопределение функций через внешние обработки

Функция ПодключитьМодульПереопределения(ПолноеИмяФайлаОбработки) Экспорт

	Если НЕ ЗначениеЗаполнено( ПолноеИмяФайлаОбработки ) Тогда 
		//Модуль отсутствует
		Возврат Неопределено;
	Иначе
		ФайлНаДиске = Новый Файл( ПолноеИмяФайлаОбработки );
		Если Не ФайлНаДиске.Существует() Тогда
        	СообщитьИнфо("Отладка -> Не существует файла модуля переопределения, проверьте Параметры "+ПолноеИмяФайлаОбработки);
		    Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
       	Возврат ВнешниеОбработки.Создать( ПолноеИмяФайлаОбработки,ложь);
	Исключение
		СообщитьИнфо("Отладка -> не удалось подключить Модуль переопределения!");
		СообщитьИнфо(ОписаниеОшибки());
	    Возврат Неопределено;
	КонецПопытки
КонецФункции

Функция ФункцияПереопределена(ИмяФункции)
//	МодульПереопределения   = Глоб переменная этого Модуля
	Если НЕ ЗначениеЗаполнено( ПолноеИмяФайлаПереопределения )  Тогда 
		//Модуль отсутствует
		МодульПереопределения	= Неопределено;
		Возврат Неопределено;		
	КонецЕсли;
	
	Если МодульПереопределения	= Неопределено Тогда
		МодульПереопределения = ПодключитьМодульПереопределения(ПолноеИмяФайлаПереопределения);
	КонецЕсли;
	
	Если МодульПереопределения <> Неопределено Тогда
		Если МодульПереопределения.НайтиПереопределяемуюФункцию(ИмяФункции) Тогда
			Возврат МодульПереопределения;	
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции

#КонецОбласти 

Функция ПометитьНаУдалениеСправочник(ИмяСправочника) Экспорт
//	СообщитьИнфо("Очистка справочника "+ИмяСправочника+" ..");
//	Попытка
//		Запрос = Новый Запрос("Выбрать Ссылка Из Справочник."+ИмяСправочника);
//		Выборка = Запрос.Выполнить().Выбрать();
//		Пока Выборка.Следующий() Цикл			
//			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
//			СпрОбъект.УстановитьПометкуУдаления(истина);
//		КонецЦикла;
//	Исключение
//		СообщитьИнфо("Не удалось очистить справочник "+ИмяСправочника);
//		СообщитьИнфо(ОписаниеОшибки());
//	КонецПопытки;
КонецФункции

//Функция ПолучитьНомерДокБезПрефикса(ВыбДок)
//	Если НЕ(ЗначениеЗаполнено(ВыбДок)) тогда
//		Возврат "";	
//	КонецЕсли;
//	
//	Обработка = ФункцияПереопределена("ПолучитьНомерДокБезПрефикса");
//	Если обработка <> Неопределено Тогда
//		Возврат Обработка.ПолучитьНомерДокБезПрефикса(ВыбДок);
//	КонецЕсли;	
//	
//	//БП 3.
//	
//	Если Метаданные.ОбщиеМодули.Найти("ПрефиксацияОбъектовКлиентСервер") <> Неопределено Тогда
//		МодульРабота1 = ВСД_Общий.ОбщийМодуль("ПрефиксацияОбъектовКлиентСервер");
//		Попытка
//			Возврат МодульРабота1.НомерНаПечать(ВыбДок.Номер, Истина, Ложь);
//		исключение
//			Возврат МодульРабота1.ПолучитьНомерНаПечать(ВыбДок.Номер, Истина, Ложь);
//		КонецПопытки;
//	ИначеЕсли Метаданные.ОбщиеМодули.Найти("ОбщегоНазначения") <> Неопределено Тогда
//		МодульРабота1 = ВСД_Общий.ОбщийМодуль("ОбщегоНазначения");
//		Возврат МодульРабота1.ПолучитьНомерНаПечать(ВыбДок);//НомерНаПечать(ВыбДок);
//	Иначе
//		СообщитьИнфо("Для данной конфигурации 1С не удалось ПолучитьНомерДокБезПрефикса");
//		СообщитьИнфо("Обратитесь в ТП КБ99");
//		Возврат "ошибка";
//	КонецЕсли;

////	Возврат ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыбДок.Номер, Истина, Ложь);
//	// УПП Воврат ОбщегоНазначения.ПолучитьНомерНаПечать(ВыбДок);
//КонецФункции

Функция ПолучитьАдрес(СведенияОПлательщике,ТипАдреса) экспорт
	Если Метаданные.ОбщиеМодули.Найти("ФормированиеПечатныхФорм") <> Неопределено Тогда
		МодульРабота1 = ВСД_Общий.ОбщийМодуль("ФормированиеПечатныхФорм");
		Адрес =  МодульРабота1.ОписаниеОрганизации(СведенияОПлательщике, ТипАдреса);
	ИначеЕсли Метаданные.ОбщиеМодули.Найти("ОбщегоНазначенияБПВызовСервера") <> Неопределено Тогда
		МодульРабота1 = ВСД_Общий.ОбщийМодуль("ОбщегоНазначенияБПВызовСервера");
		Адрес = МодульРабота1.ОписаниеОрганизации(СведенияОПлательщике, ТипАдреса);
	Иначе
		СообщитьИнфо("Для данной конфигурации 1С не удалось ПолучитьАдрес");
		СообщитьИнфо("Обратитесь в ТП КБ99");
		Адрес =  "ошибка";
	КонецЕсли;
	
	
	Попытка		
		//Адрес = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПлательщике, "ЮридическийАдрес");

		//Адрес = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПлательщике, ТипАдреса);
	Исключение
//		СообщитьИнфо("В конфигурации нет ф-ции ФормированиеПечатныхФорм.ОписаниеОрганизации()");
//		Адрес = "";
	КонецПопытки;	
	Возврат Адрес;
КонецФункции

Функция ПолучитьСведенияОКонтрагенте(ВыбКонтрагент,ВыбДата) экспорт
	Если Метаданные.ОбщиеМодули.Найти("БухгалтерскийУчетПереопределяемый") <> Неопределено Тогда
		МодульРабота1 = ВСД_Общий.ОбщийМодуль("БухгалтерскийУчетПереопределяемый");
		СведенияОКонтрагенте =  МодульРабота1.СведенияОЮрФизЛице(ВыбКонтрагент, ВыбДата);
	ИначеЕсли Метаданные.ОбщиеМодули.Найти("УправлениеКонтактнойИнформацией") <> Неопределено Тогда
		МодульРабота1 = ВСД_Общий.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		СведенияОКонтрагенте = МодульРабота1.СведенияОЮрФизЛице(ВыбКонтрагент, ВыбДата);
	Иначе
		СообщитьИнфо("Для данной конфигурации 1С не удалось ПолучитьСведенияОКонтрагенте");
		СообщитьИнфо("Обратитесь в ТП КБ99");
		СведенияОКонтрагенте =  "ошибка";
	КонецЕсли;
	
//	Попытка
//		СведенияОКонтрагенте = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыбКонтрагент, ВыбДата);
//	Исключение
//		СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ВыбКонтрагент, ВыбДата);
//	КонецПопытки;
	Возврат СведенияОКонтрагенте;
КонецФункции

//Функция ПолучитьНомерАвто(ДокОснование) Экспорт
//	Обработка = ФункцияПереопределена("ПолучитьНомерАвто");
//	Если обработка <> Неопределено Тогда
//		Возврат Обработка.ПолучитьНомерАвто(ДокОснование);
//	КонецЕсли;
//	
//	МетаданныеОбъекта = ДокОснование.Метаданные();
//	Если МетаданныеОбъекта.Реквизиты.Найти("Транспорт") <> Неопределено тогда
//		//Это БП ПТФ 2.0
//		НомерТС = ДокОснование.Транспорт.ГосНомерАвтомобиля;
//		НомерТС = ?(ЗначениеЗаполнено(НомерТС),СокрЛП(НомерТС),"Не исп.");
//	ИначеЕсли МетаданныеОбъекта.Реквизиты.Найти("РегистрационныйЗнакАвтомобиля") <> Неопределено тогда
//		//	БП 3
//		НомерТС = ?(ЗначениеЗаполнено(ДокОснование.РегистрационныйЗнакАвтомобиля),СокрЛП(ДокОснование.РегистрационныйЗнакАвтомобиля),"Не исп.");
//	Иначе	
//		Попытка
//		// Это УПП и УТ
//			Запрос = Новый Запрос;
//			Запрос.Текст = "ВЫБРАТЬ 
//			| ПараметрыМаршрутаСрезПоследних.Водитель, 
//			| ПараметрыМаршрутаСрезПоследних.ЗаказПокупателя, 
//			| ПараметрыМаршрутаСрезПоследних.НомерТС 
//			|ИЗ 
//			| РегистрСведений.ПараметрыМаршрута.СрезПоследних(, ЗаказПокупателя = &ТекЗаказ) КАК ПараметрыМаршрутаСрезПоследних";
//		
//			Запрос.УстановитьПараметр("ТекЗаказ", ДокОснование.Сделка);
//			РезультатЗапроса = Запрос.Выполнить();

//			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

//			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
//				//Водитель = ВыборкаДетальныеЗаписи.Водитель;
//				НомерТС = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НомерТС),ВыборкаДетальныеЗаписи.НомерТС,"Не уст.(Б/Н)");
//			Иначе
//				//Водитель = Справочники.ФизическиеЛица.ПустаяСсылка();
//				НомерТС = "Не исп.";
//			КонецЕсли;
//		Исключение //КРК - отстутствует регистр сведений ПараметрыМаршрута		
//			НомерТС = "Не исп.";	
//		КонецПопытки;
//	КонецЕсли;
//	Возврат НомерТС;
//КонецФункции

Функция ПолучитьИНН(ВыбКлиент) экспорт
	Обработка = ФункцияПереопределена("ПолучитьИНН");
	Если обработка <> Неопределено Тогда
		Возврат Обработка.ПолучитьИНН(ВыбКлиент);
	КонецЕсли;	
	Попытка		
		ИННКПП = ВыбКлиент.ИНН;
	Исключение
		ИННКПП = "";
	КонецПопытки;
	Возврат СокрЛП(ИННКПП);
КонецФункции
// ********* Преобразования
Функция ДатаXML(ВыбДата, Время="") Экспорт
		
	стрДата = формат(ВыбДата, "ДФ=""гггг-ММ-дд""")+Время;
	Возврат стрДата;
КонецФункции

Функция ДатаВремяXML(ВыбДата) Экспорт
		
	стрДата = формат(ВыбДата, "ДФ=""гггг-ММ-дд""")+"T"+Формат(ВыбДата,"ДФ=ЧЧ:мм:сс");;
	Возврат стрДата;
КонецФункции

// ******** совместимо 7.7
Функция Нашебулево(знЧисло) Экспорт
	//Булево возвращает русский, не разобрался, возможно ли по англ
	Если знЧисло=0 Тогда
		Возврат "false";
	Иначе
		Возврат "true";
	КонецЕсли;
КонецФункции

Функция ДатаГод(ВыбДата)
	возврат формат(выбДата, "ДФ=""гггг""")
КонецФункции

Функция ДатаМесяц(ВыбДата)
	возврат формат(выбДата, "ДФ=""ММ""")
КонецФункции

Функция ДатаЧисло(ВыбДата)
	возврат формат(выбДата, "ДФ=""дд""")
КонецФункции

Функция ПустоеЗначение(Зн)
	возврат Число(НЕ (ЗначениеЗаполнено(Зн)) );	
КонецФункции

Процедура СообщитьИнфо(ТекстСообщения, Ссылка = Неопределено)  Экспорт
	ВСД.СообщитьИнфо(ТекстСообщения, Ссылка);
КонецПроцедуры

Процедура СообщитьОшибку(ТекстСообщения, Ссылка = Неопределено)  Экспорт
	ВСД.СообщитьИнфо(ТекстСообщения);
КонецПроцедуры


Функция Дата_из_XML(dateXML, Дата1, Дата2, ДатаСтрока ) Экспорт 
	попытка			
		год = ""+dateXML.firstDate.year;		
		мес = ""+dateXML.firstDate.month;
		попытка день = ""+dateXML.firstDate.day; Исключение День = 1; КонецПопытки;
		Дата1 = Дата(год, мес, день);
	Исключение
		Попытка
			ДатаСтрока = ""+dateXML.informalDate;
		Исключение				
		КонецПопытки;
	КонецПопытки;				
	попытка
		год = ""+dateXML.secondDate.year;
		мес = ""+dateXML.secondDate.month;
		попытка день = ""+dateXML.secondDate.day; Исключение День = 1; КонецПопытки;
		Дата2 = Дата(год, мес, день);
	Исключение			
	КонецПопытки;
КонецФункции

Функция Дата_из_XML_ВСписокЗначений(dateXML,ДатаСЗ1,ДатаСЗ2,ДатаСтрока) Экспорт
	_ДатавСЗ1 = новый СписокЗначений;
	_ДатавСЗ2 = новый СписокЗначений;
	
	попытка
		_ДатавСЗ1.Добавить("<dt:year>"+dateXML.firstDate.year+"</dt:year>");
		_ДатавСЗ1.Добавить("<dt:month>"+dateXML.firstDate.month+"</dt:month>");		
		попытка _ДатавСЗ1.Добавить("<dt:day>"+dateXML.firstDate.day+"</dt:day>"); Исключение КонецПопытки;
		попытка _ДатавСЗ1.Добавить("<dt:hour>"+dateXML.firstDate.hour+"</dt:hour>"); Исключение КонецПопытки;
		ДатаСЗ1 = ЗначениеВСтрокуВнутр(_ДатавСЗ1);
	Исключение
		Попытка	ДатаСтрока = ""+dateXML.informalDate;	Исключение	КонецПопытки;		
		ДатаСЗ1 = "";
	КонецПопытки;				
	попытка
		_ДатавСЗ2.Добавить("<dt:year>"+dateXML.secondDate.year+"</dt:year>");
		_ДатавСЗ2.Добавить("<dt:month>"+dateXML.secondDate.month+"</dt:month>");		
		попытка _ДатавСЗ2.Добавить("<dt:day>"+dateXML.secondDate.day+"</dt:day>"); Исключение КонецПопытки;
		попытка _ДатавСЗ2.Добавить("<dt:hour>"+dateXML.secondDate.hour+"</dt:hour>"); Исключение КонецПопытки;
		ДатаСЗ2 = ЗначениеВСтрокуВнутр(_ДатавСЗ2);
	Исключение
		ДатаСЗ2 = "";
	КонецПопытки;				

//	Возврат ЗначениеВСтрокуВнутр(ДатавСЗ);
КонецФункции

Функция Изготовление_СрокГодности_в_XML(СтрПартии) Экспорт
	Запрос = "	
		|                <vd:dateOfProduction> ";
		//Может быть указана датой или диапазоном дат. В случае точной даты выработки указывается только первая компонента - firstDate.
		//Для скоропортящейся продукции обязательны к указанию год/месяц/день и могут быть указаны час/минута.
		//Для не скоропортящейся продукции обязательны к указанию год/месяц и может быть указан день.
		//Для не скоропортящейся продукции дата выработки и дата окончания срока годности должны быть заданы в одном формате 
		//	(например, если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).
		Если ЗначениеЗаполнено(СтрПартии.ДатаИзготовления1) Тогда
			Запрос = Запрос+ "
		|              <vd:firstDate>
		|                <dt:year>"+ДатаГод(СтрПартии.ДатаИзготовления1)+"</dt:year>
		|                <dt:month>"+ ДатаМесяц(СтрПартии.ДатаИзготовления1) +"</dt:month>
		|                <dt:day>"+ ДатаЧисло(СтрПартии.ДатаИзготовления1) +"</dt:day>
		|                <dt:hour>0</dt:hour>
		|              </vd:firstDate> ";
		КонецЕсли;
		Если ((ЗначениеЗаполнено(СтрПартии.ДатаИзготовления2)) и 
				(СтрПартии.ДатаИзготовления2 > СтрПартии.ДатаИзготовления1)) Тогда
			Запрос=Запрос+"		
			|              <vd:secondDate>
			|                <dt:year>"+ ДатаГод(СтрПартии.ДатаИзготовления2) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(СтрПартии.ДатаИзготовления2) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(СтрПартии.ДатаИзготовления2) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:secondDate> ";
		КонецЕсли;	
		Запрос=Запрос+"
		|            </vd:dateOfProduction>
		|            <vd:expiryDate> ";
		// !!! Не указывается для типа продукции "Живые животные".
		//Может быть указана датой или диапазоном дат. В случае точной даты выработки указывается только первая компонента - firstDate.
		//Для скоропортящейся продукции обязательны к указанию год/месяц/день и могут быть указаны час/минута.
		//Для не скоропортящейся продукции обязательны к указанию год/месяц и может быть указан день.
		//Для не скоропортящейся продукции дата выработки и дата окончания срока годности должны быть заданы в одном формате 
		//	(например, если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).
		Если (ЗначениеЗаполнено(СтрПартии.ДатаСрокГодности1)) Тогда
			Запрос=Запрос+"
			|              <vd:firstDate>
			|                <dt:year>"+ ДатаГод(СтрПартии.ДатаСрокГодности1) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(СтрПартии.ДатаСрокГодности1) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(СтрПартии.ДатаСрокГодности1) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:firstDate>";
		КонецЕсли;
		Если ((ЗначениеЗаполнено(СтрПартии.ДатаСрокГодности2)) и 
				(СтрПартии.ДатаСрокГодности2 > СтрПартии.ДатаСрокГодности1)) Тогда
			Запрос=Запрос+"				
			|              <vd:secondDate>
			|                <dt:year>"+ ДатаГод(СтрПартии.ДатаСрокГодности2) +"</dt:year>
			|                <dt:month>"+ ДатаМесяц(СтрПартии.ДатаСрокГодности2) +"</dt:month>
			|                <dt:day>"+ ДатаЧисло(СтрПартии.ДатаСрокГодности2) +"</dt:day>
			|                <dt:hour>0</dt:hour>
			|              </vd:secondDate>";
		КонецЕсли;
		Запрос=Запрос+"
		|                </vd:expiryDate>";
	Возврат Запрос;	
КонецФункции

Функция УровниУпаковки_из_XML(PList, Партия ="") Экспорт //ЖД
	//Возвращает длинну строку с Уровнями упаковок и Маркировок
	// При наличии Партия записывает в данные в ТЧ УровниУпаковки и Маркировка
	
	// Можно вернуть в виде ТЗ
	//Список физической упаковки. vd:packageList		
	// С уровнями
//   Уровни <dt:level>
//1 	Внутренний уровень. Уровень, при котором упаковка отсутствует, но тем не менее есть необходимость наносить маркировку. Например, яйцо, шкуры, мясо, сыр. Явно указывается, что упаковка отсутствует.
//2 	Потребительский уровень. Товар в упаковке для розничной торговли, маркированный штриховым кодом для сканирования на кассе.
//3 	Промежуточный уровень. Уровень упаковки, если он существует, который находится между потребительским и торговым уровнем.
//4 	Торговый уровень. Товар в упаковке, предназначенной для заказа, оплаты и доставки. Это согласованный между ритейлером и изготовителем (или другим участником) уровень упаковки товара, в котором товар заказывается, оплачивается и доставляется.
//5 	Дополнительный уровень. Товар в упаковке, которую нельзя однозначно отнести к торговому или транспортному уровню.
//6 	Транспортный (Логистический) уровень. Товар в упаковке, предназначенной для отгрузки покупателю (ритейлеру) при выполнении заказа. 		

// Классы <dt:productMarks class = Тип, описывающий тип маркировки.
//UNDEFINED 	Класс неопределен. Это значение используется по умолчанию.
//BN 	Номер производственной партии.
//    Важно, чтобы номера партий совпадали при совершении операции незавершённого производства. 
//SSCC 	SSCC-код (глобально-уникальный код грузовых контейнеров - Serial Shipping Container Code).
//EAN8 	Маркировка в соответствии с EAN-8.
//EAN13 	Маркировка в соответствии с EAN-13.
//EAN128 	Маркировка в соответствии с EAN-128.
//BUNDLE 	Маркировка вышестоящей групповой упаковки, например, паллеты. Может использоваться для поиска группы вет.сертификатов для партий, находящихся на данной паллете. 
	
	ТЗУровни = Новый ТаблицаЗначений;		
	ТЗУровни.Колонки.Добавить("НомерУровня",новый ОписаниеТипов("Число"));
	ТЗУровни.Колонки.Добавить("Упаковка",новый ОписаниеТипов("СправочникСсылка.ВСД_ФормыУпаковки"));
	ТЗУровни.Колонки.Добавить("КолВо",новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(12, 3)));
	ТЗУровни.Колонки.Добавить("Маркировки");
	
	Если ТипЗнч(Партия) = Тип("СправочникОбъект.ВСД_Партия") тогда
		//Парт = Справочники.ВСД_Партия.ПолучитьСсылку(Партия);
		Партия.УровниУпаковки.Очистить();
		Партия.Маркировка.Очистить();
	КонецЕсли;		
	
	
	Если ТипЗнч(PList)=Тип("ОбъектXDTO") Тогда 
		PListArray = Новый Массив;
		PListArray.Добавить(PList);
	ИначеЕсли ТипЗнч(PList)=Тип("СписокXDTO") Тогда
		PListArray = PList;
	Иначе
		Возврат "";
	КонецЕсли;
	Попытка
		Для каждого Узел из PListArray Цикл
			СтрУровня = ТЗУровни.Добавить();

			Попытка СтрУровня.НомерУровня = Узел.level; Исключение КонецПопытки;  // Уровень упаковки
			Попытка СтрУровня.Упаковка = НайтиФормуУпаковки( Узел.packingType.guid, Узел.packingType.name);	Исключение	КонецПопытки;
			//dt:globalID  	Уникальный идентификатор упаковки.
			Попытка	ГлИД = Узел.packingType.globalID; Исключение КонецПопытки;
			Попытка	СтрУровня.КолВо = Число(Узел.quantity);	Исключение	КонецПопытки;
			Если ТипЗнч(Партия) = Тип("СправочникОбъект.ВСД_Партия") тогда
				ПартУровни = Партия.УровниУпаковки.Добавить();
				ПартУровни.НомерУровня = Перечисления.ВСД_УровниУпаковки.Получить(СтрУровня.НомерУровня-1);//Значени = Метаданные.Перечисления.ВСД_УровниУпаковки.ЗначенияПеречисления[СтрУровня.НомерУровня-1];
				ПартУровни.ФормаУпаковки = СтрУровня.Упаковка;
				ПартУровни.Количество = СтрУровня.КолВо;				
			КонецЕсли;		
			
			СзМаркировки = Новый Списокзначений;
			//Маркировка партии продукции. Например
			//      <dt:productMarks class="EAN128">7456873456-147885</dt:productMarks>
             //      <dt:productMarks class="UNDEFINED">custom marking</dt:productMarks> 
			Попытка
                Маркировки = Узел.productMarks;
				Если ТипЗнч(Маркировки)=Тип("ОбъектXDTO") Тогда 
					МаркМассив = Новый Массив;
					МаркМассив.Добавить(Маркировки);
				ИначеЕсли ТипЗнч(Маркировки)=Тип("СписокXDTO") Тогда
					МаркМассив = Маркировки;
				КонецЕсли;
				
				Для каждого МаркН из МаркМассив Цикл		
					//МаркЗнач = МаркН.text;
					МаркЗнач = МаркН.Последовательность().ПолучитьТекст(0);  // ЖД Как получить ???
					МаркКласс = МаркН.class;
					СзМаркировки.Добавить(МаркЗнач,МаркКласс);
					//СзМаркировки.ДобавитьЗначение(Маркзнач,МаркКласс);
					Если ТипЗнч(Партия) = Тип("СправочникОбъект.ВСД_Партия") тогда
						ПартМаркировка = Партия.Маркировка.Добавить();
						ПартМаркировка.НомерУровня = Перечисления.ВСД_УровниУпаковки.Получить(СтрУровня.НомерУровня-1);
						ПартМаркировка.Класс = Перечисления.ВСД_Маркировка[МаркКласс];
						ПартМаркировка.Маркировка = МаркЗнач;				
					КонецЕсли;		
				КонецЦикла;
			Исключение КонецПопытки;
		    Если СзМаркировки.Количество() > 0 Тогда
		        СтрУровня.Маркировки = ЗначениеВСтрокуВнутр(СзМаркировки);
		    КонецЕсли;
		КонецЦикла;
	Исключение	КонецПопытки;
	Если ТЗУровни.Количество()>0 Тогда
		Возврат ЗначениеВСтрокуВнутр(ТЗУровни);
	Иначе
		Возврат "";
	КонецЕсли;
	//Возврат ТЗУровни;
КонецФункции

Функция УровниУпаковки_в_XML(НомерСтрокиПартии,тзУпаковка,тзМаркировка) Экспорт
	//Запрос = "";
	//// Оптимизировать перебор Фильтрацией
	//Если тзУпаковка.Количество()>0 Тогда
	//	Запрос=Запрос+"
	//	|                <vd:packageList>";
	//	Для каждого СтрокаУпаковки из тзУпаковка Цикл
	//		// связь со строкой Товары
	//		Если НЕ(СтрокаУпаковки.СтрокаПродукции = НомерСтрокиПартии) Тогда
	//			Продолжить;	
	//		КонецЕсли;
	//		
	//		Если ПустоеЗначение(СтрокаУпаковки.ФормаУпаковки.GUID)=1 Тогда
	//			СообщитьИнфо("Не указана форма упаковки на уровне "+СтрокаУпаковки.НомерУровня);
	//		    Продолжить;
	//		КонецЕсли;
	//		Запрос=Запрос+"
	//		|                  <dt:package>
	//		|                    <dt:level>"+ПолучитьПорядковыйНомерПеречисления(СтрокаУпаковки.НомерУровня)+"</dt:level>
	//		|                    <dt:packingType>
	//		|                      <bs:guid>"+ СтрокаУпаковки.ФормаУпаковки.GUID +"</bs:guid>
	//		|                    </dt:packingType>
	//		|                    <dt:quantity>"+ Формат(СтрокаУпаковки.Количество, "ЧРД=.; ЧГ=0;ЧН=0") +"</dt:quantity>";
	//		
	//		// Маркировки
	//		Для каждого СтрокаМаркировки из тзМаркировка Цикл
	//			Если НЕ(СтрокаУпаковки.НомерУровня = СтрокаМаркировки.НомерУровня) или НЕ(СтрокаУпаковки.СтрокаПродукции = СтрокаМаркировки.СтрокаПродукции) Тогда
	//				Продолжить;	
	//			КонецЕсли;
	//			Если ПустоеЗначение(СтрокаМаркировки.Класс) = 1 Тогда
	//				СообщитьИнфо("Не указан класс маркировки "+СтрокаМаркировки.Маркировка);
	//			    Продолжить;
	//			КонецЕсли;
	//			Запрос=Запрос+"
	//			|                    <dt:productMarks class='"+ПолучитьИдентификаторПеречисления(СтрокаМаркировки.Класс)+"'>"+СтрокаМаркировки.Маркировка+"</dt:productMarks>";
	//		КонецЦикла;		
	//		Запрос=Запрос+"
	//      		|                  </dt:package>";
	//    КонецЦикла;
	//	Запрос=Запрос+"
	//	|                </vd:packageList>";
	//КонецЕсли;
	//
	//Возврат Запрос;	
КонецФункции

Функция СписокПроизводителей_из_XML(ProducerList) Экспорт 
//	Если ТипЗнч(ProducerList)=Тип("ОбъектXDTO") Тогда 
//		ProdList = Новый Массив;
//		ProdList.Добавить(ProducerList);
//	ИначеЕсли ТипЗнч(ProducerList)=Тип("СписокXDTO") Тогда
//		ProdList = ProducerList;
//	Иначе
//		Возврат "";
//	КонецЕсли;
//	ТзПроизводителей = Новый ТаблицаЗначений;
//	ТзПроизводителей.Колонки.Добавить("Площадка",новый ОписаниеТипов("СправочникСсылка.ВСД_Площадка"));
//	ТзПроизводителей.Колонки.Добавить("Роль",новый ОписаниеТипов("Строка"));
//	ТзПроизводителей.Колонки.Добавить("Имя",новый ОписаниеТипов("Строка"));
//	Попытка
//		Для каждого producer из ProdList Цикл
//			Попытка
//				Если НЕ ЗначениеЗаполнено(producer.enterprise.guid) Тогда
//					//Продолжить;	
//				КонецЕсли;
//			Исключение
//				СообщитьИнфо("Не указан ГУИД Производителя во входящем ВСД, возможно импортный. Гашение без ГУИД производителя м.б. Невозможно.");
//				//Продолжить; 
//			КонецПопытки;
//			СтрокаТЗ = ТзПроизводителей.Добавить();
//			Попытка СтрокаТЗ.Имя = producer.enterprise.name; Исключение КонецПопытки;
//			Попытка СтрокаТЗ.Площадка = НайтиПлощадку(producer.enterprise.guid); Исключение КонецПопытки;
//			Попытка СтрокаТЗ.Роль =  producer.role; Исключение СтрокаТЗ.Роль = "PRODUCER"; КонецПопытки;
//		КонецЦикла;			
//	Исключение	КонецПопытки;
//	Возврат ЗначениеВСтрокуВнутр(ТзПроизводителей);	
КонецФункции

//Функция СвязанныеДокументы_из_XML(referencedDocument) Экспорт 
//	Если ТипЗнч(referencedDocument)=Тип("ОбъектXDTO") Тогда 
//		RDListArray = Новый Массив;
//		RDListArray.Добавить(referencedDocument);
//	ИначеЕсли ТипЗнч(referencedDocument)=Тип("СписокXDTO") Тогда
//		RDListArray = referencedDocument;
//	Иначе
//		Возврат "";
//	КонецЕсли;
//	// Связанные документы  - их м.б. много
//	ТЗСвДокументы = Новый ТаблицаЗначений;		
//	ТЗСвДокументы.Колонки.Добавить("ТипДокумента",новый ОписаниеТипов("Число"));
//	ТЗСвДокументы.Колонки.Добавить("НомерДокумента",новый ОписаниеТипов("Строка"));
//	ТЗСвДокументы.Колонки.Добавить("СерияДокумента",новый ОписаниеТипов("Строка"));
//	ТЗСвДокументы.Колонки.Добавить("ДатаДокумента",новый ОписаниеТипов("Строка"));
//	ТЗСвДокументы.Колонки.Добавить("ТипОтношенияДок",новый ОписаниеТипов("Число"));
//	
//	Попытка
//		Для Каждого Узел из RDListArray Цикл
//			// 1 -ТТН, 6 -ТОРГ12,5 - ТрН, 16 - Заказ  http://help.vetrf.ru/wiki/DocumentType_v2.0
//			СтрокаТЗ = ТЗСвДокументы.Добавить();
//			Попытка СтрокаТЗ.ТипДокумента =  Узел.type; Исключение 	КонецПопытки;
//			Попытка	СтрокаТЗ.НомерДокумента =  Узел.issueNumber; Исключение  КонецПопытки;
//			Попытка СтрокаТЗ.СерияДокумента =  Узел.issueSeries;	Исключение 	КонецПопытки;
//			Попытка СтрокаТЗ.ДатаДокумента =  Узел.issueDate; Исключение 	КонецПопытки;
//			СтрокаТЗ.СерияДокумента = ?(СтрокаТЗ.СерияДокумента = "ОбъектXDTO","",СтрокаТЗ.СерияДокумента);
//		    // ТипОтношенияДок
//			//1 	Сопроводительный документ. 	Complementary accompanying document.
//			//2 	Предшествующий документ. 	Preceding document (Ancestor).
//			//3 	Следующий документ. 	Subsequent/following document (Child).
//			//4 	Документ, взамен которого выдан текущий документ. 	Replaced document.
//			//5 	Документ, заменяющий текущий документ. 	Replaced by document.
//			//6 	Связанный документ. 	Related document. 				
//			Попытка	СтрокаТЗ.ТипОтношенияДок =  Узел.relationshipType; Исключение КонецПопытки;
//			//Если СтрокаТЗ.ТипДокумента = 1 Тогда
//			//	ТЗВСД.ттнСерия = СтрокаТЗ.СерияДокумента;
//			//	ТЗВСД.ттнномер = СтрокаТЗ.НомерДокумента;
//			//	ТЗВСД.ттндата = СтрокаВДату(СтрокаТЗ.ДатаДокумента);
//			//КонецЕсли;
//		КонецЦикла;
//	Исключение		КонецПопытки;
//	Если ТЗСвДокументы.Количество()>0 Тогда
//		Возврат ЗначениеВСтрокуВнутр(ТЗСвДокументы);
//	Иначе
//		Возврат "";
//	КонецЕсли;	
//КонецФункции

Функция СписокНомеровПартий_из_XML(batch) Экспорт
	//// Номер Партии - м.б. несколько
	//СпНомераПартий = Новый СписокЗначений;
	//Попытка
	//Если ТипЗнч(batch.batchID)<>Тип("СписокXDTO") Тогда 
	//	ListbatchID = Новый Массив;
	//	ListbatchID.Добавить(batch.batchID);
	//Иначе
	//	ListbatchID = batch.batchID;
	//КонецЕсли;
	//Для Каждого batchID из ListbatchID Цикл
	//	СпНомераПартий.Добавить(batchID);
	//КонецЦикла;
	//Исключение КонецПопытки;
	//Возврат ЗначениеВСтрокуВнутр(СпНомераПартий);		
КонецФункции

Функция СоздатьТзМаршрутСледования() Экспорт
	//Порядок колонок имеет значние при сохранинии в Файл => структура должна быть единообразна - это 
	
	ТЗточкиМаршрута = Новый ТаблицаЗначений;
	ТЗточкиМаршрута.Колонки.Добавить("ВыбХС",новый ОписаниеТипов("СправочникСсылка.ВСД_ХозСубъект"));
	ТЗточкиМаршрута.Колонки.Добавить("ВыбПлощадка",новый ОписаниеТипов("СправочникСсылка.ВСД_Площадка"));
	ТЗточкиМаршрута.Колонки.Добавить("Страна",новый ОписаниеТипов("СправочникСсылка.ВСД_Страна"));
	ТЗточкиМаршрута.Колонки.Добавить("Регион",новый ОписаниеТипов("СправочникСсылка.ВСД_Регион"));
	ТЗточкиМаршрута.Колонки.Добавить("Район",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("Город",новый ОписаниеТипов("СправочникСсылка.ВСД_Город"));
	ТЗточкиМаршрута.Колонки.Добавить("НасПункт",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("Улица",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("Дом",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("Строение",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("Помещение",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("Перегрузка",новый ОписаниеТипов("Число"));
	ТЗточкиМаршрута.Колонки.Добавить("ТипТранспорта",новый ОписаниеТипов("Число"));
	ТЗточкиМаршрута.Колонки.Добавить("НомерТС",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("номерАвто",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("номерКонтейнера",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("номерВагона",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("номерПрицепа",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("НазваниеСудна",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("НомерАвиарейса",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("UUID",новый ОписаниеТипов("Строка"));
	ТЗточкиМаршрута.Колонки.Добавить("НомерТочки",новый ОписаниеТипов("Число"));
	Возврат ТзТочкиМаршрута;
КонецФункции

Функция МаршрутСледования_из_XML(list) Экспорт
//    // Упрощенная схема - выбраны Площадки, а не ручная запись адреса
//	//ТЗточкиМаршрута = СоздатьОбъект("ТаблицаЗначений");
//	ТЗточкиМаршрута = СоздатьТзМаршрутСледования();
//	Попытка
//		Если ТипЗнч(list)<>Тип("СписокXDTO") Тогда 
//			Routelist = Новый Массив;
//			Routelist.Добавить(list);
//		Иначе
//			Routelist = list;
//		КонецЕсли;
//		
//	    Для каждого узел из Routelist Цикл
//			СтрокаТЗ = ТЗточкиМаршрута.Добавить();
//            Попытка СтрокаТЗ.UUID					 = 		Узел.uuid; Исключение КонецПопытки;
//            Попытка СтрокаТЗ.НомерТочки				 =		Узел.sqnId; Исключение КонецПопытки;
//			Попытка Площадка_GUID = Узел.enterprise.guid; Исключение КонецПопытки;
//			Попытка СтрокаТЗ.ВыбПлощадка				 =  	НайтиПлощадку( Площадка_GUID ); Исключение КонецПопытки;
//			//Попытка ТЗточкиМаршрута.ПредприятиеНаименование	 =  	Узел.selectSingleNode("vd:enterprise").selectSingleNode("dt:name").text; Исключение КонецПопытки;
//            Попытка СтрокаТЗ.Перегрузка				 = 		?(Узел.transshipment = "true",1,0); Исключение КонецПопытки;
//            Попытка СтрокаТЗ.ТипТранспорта			 = 		Число(Узел.nextTransport.transportType); Исключение КонецПопытки;
//			
//			Если СтрокаТЗ.ТипТранспорта = 1 Тогда
//				Попытка СтрокаТЗ.номеравто 			= Узел.nextTransport.transportNumber.vehicleNumber; Исключение КонецПопытки;
//				Попытка СтрокаТЗ.номерПрицепа 	= Узел.nextTransport.transportNumber.trailerNumber; Исключение КонецПопытки;;
//				Попытка СтрокаТЗ.номерКонтейнера 	= Узел.nextTransport.transportNumber.containerNumber; Исключение КонецПопытки;
//			Иначеесли СтрокаТЗ.ТипТранспорта = 2 Тогда
//				Попытка СтрокаТЗ.номерВагона 			= Узел.nextTransport.transportNumber.wagonNumber; Исключение КонецПопытки;
//			Иначеесли СтрокаТЗ.ТипТранспорта = 3 Тогда
//				Попытка СтрокаТЗ.НомерАвиарейса 			= Узел.nextTransport.transportNumber.flightNumber; Исключение КонецПопытки;
//			Иначеесли (СтрокаТЗ.ТипТранспорта = 4) или (ТЗточкиМаршрута.ТипТранспорта = 5) или (ТЗточкиМаршрута.ТипТранспорта = 6) Тогда
//				Попытка СтрокаТЗ.НазваниеСудна 			= Узел.nextTransport.transportNumber.shipName; Исключение КонецПопытки;
////			Иначеесли ТЗВСД.ТипТС = "7" Тогда
////					ТЗВСД.номеравто = transportInfo.selectSingleNode("*[local-name()='transportNumber'] ").selectSingleNode("*[local-name()='shipName']").text;
//				
//			КонецЕсли;
//			СтрокаТЗ.номеравто = ?(СтрокаТЗ.номеравто = "ОбъектXDTO","",СтрокаТЗ.номеравто);
//			СтрокаТЗ.номерПрицепа = ?(СтрокаТЗ.номерПрицепа = "ОбъектXDTO","",СтрокаТЗ.номерПрицепа);
//			СтрокаТЗ.номерКонтейнера = ?(СтрокаТЗ.номерКонтейнера = "ОбъектXDTO","",СтрокаТЗ.номерКонтейнера);
//			СтрокаТЗ.номерВагона = ?(СтрокаТЗ.номерВагона = "ОбъектXDTO","",СтрокаТЗ.номерВагона);
//			СтрокаТЗ.НомерАвиарейса = ?(СтрокаТЗ.НомерАвиарейса = "ОбъектXDTO","",СтрокаТЗ.НомерАвиарейса);
//			СтрокаТЗ.НазваниеСудна = ?(СтрокаТЗ.НазваниеСудна = "ОбъектXDTO","",СтрокаТЗ.НазваниеСудна);
//			
//            СтрокаТЗ.НомерТС = СокрЛП(СтрокаТЗ.номеравто) + СокрЛП(СтрокаТЗ.номерВагона) + СокрЛП(СтрокаТЗ.НомерАвиарейса)+ СокрЛП(СтрокаТЗ.НазваниеСудна);; //Что-то тут не так
//		КонецЦикла;
//	Исключение КонецПопытки;
//	ТЗточкиМаршрута.Сортировать("НомерТочки");
//	
//	Если ТЗточкиМаршрута.Количество()>0 Тогда
//	    Возврат (ТЗточкиМаршрута);
//	Иначе
//		Возврат "";
//	КонецЕсли;
    
КонецФункции

Процедура Фасовка_из_XML(packaging,ФасовкаНаименование="",ФасовкаФормаУпаковки="",ФасовкаКоличество="",ФасовкаОбъем="",ФасовкаЕдиницаИзм="") Экспорт //ЖД
	// 	Тип упаковки. 
	//Попытка	ТипФасовки = packaging.selectSingleNode("dt:packagingType").text;  Исключение КонецПопытки;
	// 	Идентификатор версии типа упаковки.
	//Попытка ФасУИД =  packaging.packagingType.uuid; Исключение КонецПопытки;
	// Наименование упаковки.
	Попытка	ФасовкаНаименование =  packaging.packagingType.name;	Исключение КонецПопытки;
	Попытка ФасовкаФормаУпаковки = НайтиФормуУпаковки( packaging.packagingType.guid, ФасовкаНаименование); Исключение КонецПопытки;
	//  	Уникальный идентификатор упаковки. 
	//Попытка	ФасУН =  packaging.packagingType.globalID;	Исключение	КонецПопытки;
	Попытка	ФасовкаКоличество = Число(packaging.quantity); Исключение КонецПопытки;
	// Объём единицы упаковки товара.
	Попытка	ФасовкаОбъем = Число(packaging.volume); Исключение КонецПопытки;
	// 	Глобальный идентификатор единицы измерения. , есть uuid и имя - <dt:name> 
	Попытка	ФасовкаЕдиницаИзм = НайтиЕдИзмерения(packaging.unit.guid); Исключение КонецПопытки;			
КонецПроцедуры

Функция ProductItem_в_XML(СтрПартии, ПроверятьВидПродукцииПартииИProductItem = 0) Экспорт
	//Запрос = "
	//|                    <vd:productItem>";
	//Если (ПустоеЗначение(СтрПартии.Продукция_Элемент.GUID) = 0) и НЕ (СтрПартии.Продукция_Элемент.ПометкаУдаления) Тогда
	//	// ПРОИЗВОДСТВО Обязательно должно быть заполнено хотя бы одно из полей: либо UUID, либо GUID. При указании обоих полей приоритет у UUID.
	//	Попытка
	//		Если ПроверятьВидПродукцииПартииИProductItem = 1 Тогда
	//	    	// При изменении Вида продукции у ProductItem возникнет ошибка при списании ранее полученной партии
	//			// Указанное наименование продукции относится к другому виду продукции.
	//			Если ЗначениеЗаполнено(СтрПартии.Партия) и (СтрПартии.Продукция_Элемент.ВидПродукции = СтрПартии.Партия.ВидПродукции) тогда
	//				Запрос = Запрос+ "
	//				|                      <bs:guid>"+ СокрЛП(СтрПартии.Продукция_Элемент.GUID) +"</bs:guid>";
	//			КонецЕсли;
	//		Иначе
	//			Запрос = Запрос+ "
	//			|                      <bs:guid>"+ СокрЛП(СтрПартии.Продукция_Элемент.GUID) +"</bs:guid>";
	//		КонецЕсли;
	//	Исключение 	КонецПопытки;
	//КонецЕсли;
	//Попытка
	//    Запрос = Запрос+?(ПустоеЗначение(СтрПартии.GTIN)= 0,	"
	//	|                     <dt:globalID>"+ СокрЛП(СтрПартии.GTIN) +"</dt:globalID>","");
	//Исключение КонецПопытки;
	//
	////Момент ниже возможно упростить
	//Попытка //Производство
	//    Запрос = Запрос+?(ЗначениеЗаполнено(СтрПартии.НаименованиеПродукции),	"
	//	|                     <dt:name>"+ СокрЛП(СтрПартии.НаименованиеПродукции) +"</dt:name>","");
	//Исключение // транзакция 
	//    Запрос = Запрос+?(ЗначениеЗаполнено(СтрПартии.Продукция_Элемент),	"
	//	|                     <dt:name>"+ СокрЛП(СтрПартии.Продукция_Элемент.Наименование) +"</dt:name>","");
	//КонецПопытки;
	//
	//Попытка
	//	Запрос = Запрос+?(ПустоеЗначение(СтрПартии.Артикул)= 0,	"
	//	|                     <dt:code>"+ СокрЛП(СтрПартии.КодПродукции) +"</dt:code>","");
	//Исключение КонецПопытки;
	////Фасовка
	//Попытка
	//	Если ЗначениеЗаполнено(СтрПартии.ФасовкаФормаУпаковки) Тогда
	//		Запрос = Запрос + "
	//    	|          <dt:packaging>
	//      	|            <dt:packagingType>
	//        |              <bs:guid>"+ СокрЛП(СтрПартии.ФасовкаФормаУпаковки.GUID) +"</bs:guid>
	////						<dt:globalID>BE</dt:globalID> 	dt:PackingCodeType 	[0..1] 	Уникальный идентификатор упаковки. 
	//	    |            </dt:packagingType>
	//   		|            <dt:quantity>"+ Формат(СтрПартии.ФасовкаКоличество, "ЧРД=.; ЧГ=0;ЧН=0") +"</dt:quantity>
	//        |            <dt:volume>"+ Формат(СтрПартии.ФасовкаОбъем, "ЧРД=.; ЧГ=0;ЧН=0") +"</dt:volume>
	//	    |            <dt:unit>
	//   		|              <bs:guid>"+ СокрЛП(СтрПартии.ФасовкаЕдиницаИзмерения.GUID) +"</bs:guid>
	//        |            </dt:unit>
	//	    |          </dt:packaging>";		    
	//	КонецЕсли;		
	//Исключение КонецПопытки;
	//Запрос = Запрос+ "
	//|        </vd:productItem>";
	//Возврат Запрос;	
КонецФункции

Функция СтрокаВДату(ДатаСтрока)
	год = Лев(ДатаСтрока,4 );
	мес = Сред(ДатаСтрока,6,2);
	день = Сред(ДатаСтрока,9,2);
	возврат Дата(год, мес,день);	
КонецФункции

Функция СтрокаВДатаВремя(ДатаВремяСтрока)
	год = Лев(ДатаВремяСтрока,4 );
	мес = Сред(ДатаВремяСтрока,6,2);
	день = Сред(ДатаВремяСтрока,9,2);
	час = Число(Сред(ДатаВремяСтрока,12,2));
	мин = Сред(ДатаВремяСтрока,15,2);	
	сек = Сред(ДатаВремяСтрока,18,2);
	смещение = Число(Сред(ДатаВремяСтрока,21,2));
	Попытка результат = Дата(год, мес,день, (час+Смещение), мин, сек);	
	Исключение результат = Дата(год, мес,день);	
	КонецПопытки;
	Возврат Результат;

КонецФункции

// ************************
Функция УдалитьXML(ИмяФайла) Экспорт
	
	////стандартное поведение функции
	//Если СписокКонстант.Получить("ОтладкаЗапросовXML")=0 Тогда 
	//	Попытка
	//		ФС.УдалитьФайл(ИмяФайла);
	//	Исключение
	//		СообщитьИнфо(ОписаниеОшибки());
	//	КонецПопытки;
	//КонецЕсли;
	
КонецФункции

Функция Пауза() Экспорт
////	Состояние("Пауза "+ПаузаСек+" сек");
//	
//	//стандартное поведение функции
//	КомпонентаНаСервере.Pause(ПаузаСек*1000); // в ms
КонецФункции

Функция ПолучитьРезультатСервер(appID) Экспорт
	//Запрос ="<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'><SOAP-ENV:Header/><SOAP-ENV:Body>
	//|<receiveApplicationResultRequest xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema'>
	//  |<apiKey xmlns='http://api.vetrf.ru/schema/cdm/application/ws-definitions'>"+ param_api_key +"</apiKey>
	//  |<issuerId xmlns='http://api.vetrf.ru/schema/cdm/application/ws-definitions'>"+ param_issuer_id +"</issuerId>
	//  |<applicationId xmlns='http://api.vetrf.ru/schema/cdm/application/ws-definitions'>"+ СокрЛП(appID) +"</applicationId>
	//|</receiveApplicationResultRequest>
	//|</SOAP-ENV:Body></SOAP-ENV:Envelope>
	//|";

	//запрос = "
	//|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions'>
	//|   <soapenv:Header/>
	//|   <soapenv:Body>
	//|      <ws:receiveApplicationResultRequest>
	//|         <ws:apiKey>"+ param_api_key +"</ws:apiKey>
	//|         <ws:issuerId>"+ param_issuer_id +"</ws:issuerId>
	//|         <ws:applicationId>"+ СокрЛП(appID) +"</ws:applicationId>
	//|      </ws:receiveApplicationResultRequest>
	//|   </soapenv:Body>
	//|</soapenv:Envelope>
	//|";

	//метод = КомпонентаНаСервере.GetMethod();
	//метод.Service = "platform/services/ApplicationManagementService";
	//метод.Action = "receiveApplicationResult";

	//Результат = КомпонентаНаСервере.SendRequestSoap( метод, запрос, appID );

	////appID = Получить_ApplicationID(Компонента.LogFilename);
	////Возврат appID;

	////Возврат Результат;
	//возврат КомпонентаНаСервере.status;
КонецФункции

Функция Получить_ApplicationID(LogFilename) Экспорт
// для компоненты 1.1
	Попытка

		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(LogFilename);	
		xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		applicationId = xdto.Body.submitApplicationResponse.application.applicationId;
		st = xdto.Body.submitApplicationResponse.application.status;

		СообщитьИнфо("Ответ: ["+applicationId+"] ["+st+"]");
	Исключение
		//СообщитьИнфо("Не удалось получить applicationId");
		applicationId="";
	КонецПопытки;

	возврат applicationId;
КонецФункции

Функция ОтправитьЗапросSoap( ЗапросXML, метод ) Экспорт
	//Если КомпонентаНаСервере = Неопределено тогда
	//	ЗагрузитьГлПеременныеИзВременногоХранилища();
	//КонецЕсли;
	//СообщитьИнфо("Отправляем запрос");
	//Попытка
	//	//Компонента 1.0
	//	appID = КомпонентаНаСервере.SendRequestSoap(метод, ЗапросXML);
	//Исключение
	//	//Компонента 1.1
	//	appID = КомпонентаНаСервере.GUID();
	//	СообщитьИнфо("Отправляем запрос "+appID,СтатусСообщения.Информация);
	//	результат = КомпонентаНаСервере.SendRequestSoap(метод, ЗапросXML, appID);
	//	appID = Получить_ApplicationID(КомпонентаНаСервере.LogFilename); // = результат
	//КонецПопытки;
	////ИмяФайлаОтвет =  КомпонентаНаКлиенте.LogFilename;   //
	//Возврат appID;
КонецФункции

Процедура СохранитьИстриюЗапросовВДокументе(докСсылка)
	//Если докСсылка.Метаданные().ТабличныеЧасти.Найти("Запросы")<>Неопределено Тогда
	//	ДокОб = докСсылка.ПолучитьОбъект();
	//	стр = ДокОб.Запросы.Добавить();
	//	стр.Дата = ТекущаяДата();
	//	стр.Файл = КомпонентаНаСервере.LogFilenameRequest;
	//	стр.пользователь = ПараметрыСеанса.ТекущийПользователь;
	//	стр = ДокОб.Запросы.Добавить();
	//	стр.Дата = ТекущаяДата();
	//	стр.Файл = КомпонентаНаСервере.LogFilenameResponse;
	//	стр.пользователь = ПараметрыСеанса.ТекущийПользователь;
	//	ДокОб.Записать();		
	//КонецЕсли;
КонецПроцедуры

Функция СохранитьИмяЗапросаВДокументе(док) Экспорт
	//Если НЕ ЗначениеЗаполнено(док) Тогда
	//	Возврат ложь;	
	//КонецЕсли;
	//Попытка
	//	Если док.Метаданные().Реквизиты.Найти("ИмяФайлаЗапрос")<>Неопределено Тогда
	//		ДокОб = док.ПолучитьОбъект();
	//		ДокОб["ИмяФайлаЗапрос"] = КомпонентаНаСервере.LogFilenameRequest;
	//		ДокОб.Записать();			
	//	КонецЕсли;
	//Исключение 
	//	СообщитьИнфо("Обновите SoapDLL = "+КомпонентаНаСервере.Version);
	//	СообщитьОшибку(ОписаниеОшибки());
	//	Возврат ложь;
	//КонецПопытки;
	//СохранитьИстриюЗапросовВДокументе(док);
	//Возврат Истина;
КонецФункции

Функция СохранитьИмяОтветаВДокументе(док) Экспорт
	//Если НЕ ЗначениеЗаполнено(док) Тогда
	//	Возврат ложь;	
	//КонецЕсли;
	//
	//Попытка
	//	Если док.Метаданные().Реквизиты.Найти("ИмяФайлаОтвет")<>Неопределено Тогда
	//		ДокОб = док.ПолучитьОбъект();
	//		ДокОб["ИмяФайлаОтвет"] = КомпонентаНаСервере.LogFilenameResponse;
	//		ДокОб.Записать();			
	//	КонецЕсли;
	//Исключение 
	//	СообщитьИнфо("Обновите SoapDLL = "+КомпонентаНаСервере.Version);
	//	СообщитьОшибку(ОписаниеОшибки());
	//	Возврат ложь;
	//КонецПопытки; //ЖД Обновить dll
	//СохранитьИстриюЗапросовВДокументе(док);
	//Возврат Истина;
КонецФункции

Процедура СохранитьСтатусЗапроса(док)
	//Если ЗначениеЗаполнено( док ) Тогда
	//	Попытка
	//		ДокОб = док.ПолучитьОбъект();
	//		ДокОб.applicationID = СокрЛП(КомпонентаНаСервере.ApplicationId);
	//		ДокОб.Статус 		= СокрЛП(КомпонентаНаСервере.Status);
	//		//ДокОб.Комментарий = СокрЛП(КомпонентаНаСервере.ErrorMessage);		
	//		ДокОб.Записать();
	//		СообщитьИнфо(" статус = "+ДокОб.Статус );
	//		//Если ПустаяСтрока(СокрЛП(ДокОб.Комментарий))=0 Тогда
	//		//	СообщитьИнфо("Ошибка: "+ДокОб.Комментарий);
	//		//КонецЕсли;					
	//	Исключение
	//		СообщитьИнфо(ОписаниеОшибки());	
	//	КонецПопытки;
	//КонецЕсли;
КонецПроцедуры

Функция НайтиОшибки(ФайлXML, док="")  Экспорт
//	
//Попытка
//	
//	результат = Ложь;	
//	
//	ЧтениеXML = новый ЧтениеXML;
//	ЧтениеXML.ОткрытьФайл(ФайлXML);	
//	
//	СтрОшибки ="";
//	Пока ЧтениеXML.Прочитать() Цикл
//		Если (Прав(ЧтениеXML.Имя,5) = "error") и (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
//			НомерСтроки = ЧтениеXML.ЗначениеАтрибута("qualifier");
//			КодОшибки = ЧтениеXML.ЗначениеАтрибута("code");
//			ЧтениеXML.Прочитать();
//			СтрОшибки = "ОШИБКА "+КодОшибки+" в строке " + НомерСтроки + " : " + ЧтениеXML.Значение;
//			СообщитьОшибку( СтрОшибки );
//			результат=Истина
//		ИначеЕсли  (ЧтениеXML.Имя = "faultstring") и (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
//			НомерСтроки = ЧтениеXML.ЗначениеАтрибута("qualifier");
//			КодОшибки = ЧтениеXML.ЗначениеАтрибута("code");
//			ЧтениеXML.Прочитать();
//			СтрОшибки = "ОШИБКА "+КодОшибки+" в строке " + НомерСтроки + " : " + ЧтениеXML.Значение;
//			СообщитьОшибку( СтрОшибки );
//			результат=Истина			
//		КонецЕсли;			
//	КонецЦикла;
//	Если ЗначениеЗаполнено(Док) Тогда
//		ДокОбъект = док.ПолучитьОбъект();
//		ДокОбъект.Комментарий = СокрЛП(ДокОбъект.Комментарий) + СтрОшибки;
//		ДокОбъект.Записать();
//	КонецЕсли;	
//Исключение
//	СообщитьИнфо("Ошибка при чтении файла "+ФайлXML);
//	СообщитьИнфо("Выполнение операции прервано");
//	СообщитьИнфо("Просмотрите его содержимое, при проблемах - отправьте в Техподдержку");
//	Возврат Ложь;
//КонецПопытки;
//	Возврат результат;
КонецФункции

Функция ПолучитьИдентификаторПеречисления(ЗначПеречисления) Экспорт
	//присвоим переменной значение перечисления
	//например перечисления.ставкиНДС.НДС18 
	//или например Док.СтавкаНДС 
	//НужноеЗначение = Какое_то_Значение_Перечисления; 

	//теперь получаем как названо перечисление в конфигураторе
	ИмяПеречисления = ЗначПеречисления.Метаданные().Имя;

	//теперь получим индекс где хранится то что нам надо
	НужныйИндекс = Перечисления[ИмяПеречисления].Индекс(ЗначПеречисления);

	//и вот счастье. то что нам надо - идентификатор!!! всего-то четыре строчки кода
	//вместо Какое_то_Значение_Перечисления.Идентификатор() в 7.7
	Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[НужныйИндекс].Имя;
	
КонецФункции

Функция ПолучитьПорядковыйНомерПеречисления(ЗначПеречисления) Экспорт
	Возврат (Перечисления[ЗначПеречисления.Метаданные().Имя].Индекс(ЗначПеречисления) + 1)
КонецФункции

// ************************

//Функция ПолучитьВСДПродукцияЭлементПоНоменклатуре(ВыбНоменклатура)
////Вариант 1
  //	Запрос = Новый Запрос;
//	Запрос.Текст = "
//	|ВЫБРАТЬ
//    |	ВСД_Соответсвия.ПродукцияЭлемент КАК ПродукцияЭлемент
//    |ИЗ
//    |	РегистрСведений.ВСД_Соответсвия КАК ВСД_Соответсвия
//    |ГДЕ
//    |	ВСД_Соответсвия.Номенклатура = &ВыбНоменклатура";
//    Запрос.УстановитьПараметр("ВыбНоменклатура", ВыбНоменклатура); 

//    Результат = Запрос.Выполнить();
//    Выборка = Результат.Выбрать(); 
//	ПродукцияЭлемент = Справочники.ВСД_Продукция_Элемент.ПустаяСсылка();
//	Пока Выборка.Следующий() Цикл
//		ПродукцияЭлемент = Выборка.ПродукцияЭлемент;
//		Прервать;
//    КонецЦикла; 
//	Возврат ПродукцияЭлемент;
//	
//////Вариант 2	
////	НаборЗаписей = РегистрыСведений.ВСДСоответсвие.СоздатьНаборЗаписей();
////	НаборЗаписей.Отбор.Субъект.Установить(ВыбНоменклатура);
////	НаборЗаписей.Прочитать();
////	СписокЭлементов = НаборЗаписей.ВыгрузитьКолонку("Объект");
////	Если СписокЭлементов.Количество()>0 Тогда
////		ПродукцияЭлемент = СписокЭлементов[0].Значение;	
////	Иначе
////		ПродукцияЭлемент = Справочники.ВСД_Продукция_Элемент.ПустаяСсылка();
////	КонецЕсли;
////	
////	Возврат ПродукцияЭлемент;
//КонецФункции

Функция НайтиЕдИзмерения(guid, _uuid="")	Экспорт
	//если ПустаяСтрока(guid)=0 Тогда			
	//	Запрос = Новый Запрос("ВЫБРАТЬ
	//	                      |	ВСД_ЕдиницыИзмерения.Ссылка
	//	                      |ИЗ
	//	                      |	Справочник.ВСД_ЕдиницыИзмерения КАК ВСД_ЕдиницыИзмерения
	//	                      |ГДЕ
	//	                      |	ВСД_ЕдиницыИзмерения.GUID = &GUID");
	//	Запрос.УстановитьПараметр("GUID", Guid );
	//	
	//	Результат = Запрос.Выполнить().Выбрать();
	//	Если Результат.Следующий() Тогда 
	//		Ответ = Результат.Ссылка;
	//	Иначе
	//		СообщитьИнфо("ВСД_ЕдиницыИзмерения Guid "+guid+" не найдена. Выполните инициализацию");
	//		Ответ = Справочники.ВСД_ЕдиницыИзмерения.ПустаяСсылка();	
	//	КонецЕсли;
	//Иначе
	//	СообщитьИнфо("Пустой Guid ВСД_ЕдиницыИзмерения");
	//	Ответ="";
	//КонецЕсли;
	// 	
	//Возврат Ответ;

КонецФункции

Функция НайтиФормуУпаковки(guid, name, _uuid = "", КодУпаковки = "") Экспорт

//	Ответ = "";
//	Guid = СокрЛП(Guid);
//	если ПустаяСтрока(Guid)=0 Тогда			
//		Запрос = Новый Запрос("ВЫБРАТЬ
//		                      |	ВСД_ФормыУпаковки.Ссылка
//		                      |ИЗ
//		                      |	Справочник.ВСД_ФормыУпаковки КАК ВСД_ФормыУпаковки
//		                      |ГДЕ
//		                      |	ВСД_ФормыУпаковки.GUID = &GUID");
//		Запрос.УстановитьПараметр("GUID", Guid );
//		
//		Результат = Запрос.Выполнить().Выбрать();
//		
//		Если Результат.Следующий() Тогда 
//			Ответ = Результат.Ссылка;
//			Если НЕ(Ответ.Наименование = name) Тогда
//				СообщитьИнфо("ВСД_ФормыУпаковки "+ Ответ.Наименование +" изменилось Наименование на ["+name+"] перезаписано");
//				текСпр = Ответ.ПолучитьОбъект();
//				текСпр.Наименование = name;
//				текСпр.Записать();
//				Ответ = текСпр.Ссылка;
//			КонецЕсли;
//			СпрОбъект = Ответ.ПолучитьОбъект();
//			СпрОбъект.УстановитьПометкуУдаления(Ложь);
//		Иначе
//			СообщитьИнфо("ВСД_ФормыУпаковки GUID ["+guid+"] добавлена");
//			//создать 
//			Спр = Справочники.ВСД_ФормыУпаковки.СоздатьЭлемент();
//			//Спр.Код = ;
//			Спр.Наименование = name;
//			Спр.GUID = guid;
//			Спр.UUID = _uuid;
//			Попытка Спр.КодУпаковки = КодУпаковки; Исключение КонецПопытки; //Нет ревизита
//			Спр.Записать();
//			Ответ = Спр.Ссылка;
//		КонецЕсли;		
//	Иначе
//		СообщитьИнфо("Пустой Guid ВСД_ФормыУпаковки");
//	КонецЕсли;
//	
//	Возврат Ответ;
//		
КонецФункции

//Функция НайтиСтрануПоGUID(_GUID, name) Экспорт

//	Ответ = "";
//	_GUID = СокрЛП(_GUID);
//	если ПустаяСтрока(_GUID)=0 Тогда			
//		Запрос = Новый Запрос("ВЫБРАТЬ
//		                      |	ВСД_Страна.Ссылка
//		                      |ИЗ
//		                      |	Справочник.ВСД_Страна КАК ВСД_Страна
//		                      |ГДЕ
//		                      |	ВСД_Страна.GUID = &GUID");
//		Запрос.УстановитьПараметр("GUID", _GUID );
//		
//		Результат = Запрос.Выполнить().Выбрать();
//		
//		Если Результат.Следующий() Тогда 
//			Ответ = Результат.Ссылка;
//		Иначе
//			СообщитьИнфо("ВСД_Страна ["+name+"] GUID ["+_GUID+"] добавлена");
//			//создать 
//			Спр = Справочники.ВСД_Страна.СоздатьЭлемент();
//			//Спр.Код = ;
//			Спр.Наименование = name;
//			Спр.GUID = _GUID;
//			Спр.Записать();
//			Ответ = Спр.Ссылка;
//		КонецЕсли;		
//	Иначе
//		СообщитьИнфо("Пустой Guid ВСД_Страна");
//	КонецЕсли;
//	
//	Возврат Ответ;
//	
//КонецФункции

//Функция НайтиГородПоGUID(GUID, name) Экспорт

//	Ответ = "";
//	Guid = СокрЛП(Guid);
//	если ПустаяСтрока(Guid)=0 Тогда			
//		Запрос = Новый Запрос("ВЫБРАТЬ
//		                      |	ВСД_Город.Ссылка
//		                      |ИЗ
//		                      |	Справочник.ВСД_Город КАК ВСД_Город
//		                      |ГДЕ
//		                      |	ВСД_Город.GUID = &GUID");
//		Запрос.УстановитьПараметр("GUID", Guid );
//		
//		Результат = Запрос.Выполнить().Выбрать();
//		
//		Если Результат.Следующий() Тогда 
//			Ответ = Результат.Ссылка;
//		Иначе
//			СообщитьИнфо("ВСД_Город ["+name+"] GUID ["+guid+"] добавлена");
//			//создать 
//			Спр = Справочники.ВСД_Город.СоздатьЭлемент();
//			//Спр.Код = ;
//			Спр.Наименование = name;
//			Спр.GUID = guid;
//			Спр.Записать();
//			Ответ = Спр.Ссылка;
//		КонецЕсли;		
//	Иначе
//		СообщитьИнфо("Пустой Guid ВСД_Город");
//	КонецЕсли;
//	
//	Возврат Ответ;

//КонецФункции

//Функция НайтиРегионПоGUID(GUID, name) Экспорт

//	Ответ = "";
//	Guid = СокрЛП(Guid);
//	если ПустаяСтрока(Guid)=0 Тогда			
//		Запрос = Новый Запрос("ВЫБРАТЬ
//		                      |	ВСД_Регион.Ссылка
//		                      |ИЗ
//		                      |	Справочник.ВСД_Регион КАК ВСД_Регион
//		                      |ГДЕ
//		                      |	ВСД_Регион.GUID = &GUID");
//		Запрос.УстановитьПараметр("GUID", Guid );
//		
//		Результат = Запрос.Выполнить().Выбрать();
//		
//		Если Результат.Следующий() Тогда 
//			Ответ = Результат.Ссылка;
//		Иначе
//			СообщитьИнфо("ВСД_Регион ["+name+"] GUID ["+guid+"] добавлена");
//			//создать 
//			Спр = Справочники.ВСД_Регион.СоздатьЭлемент();
//			//Спр.Код = ;
//			Спр.Наименование = name;
//			Спр.GUID = guid;
//			Спр.Записать();
//			Ответ = Спр.Ссылка;
//		КонецЕсли;		
//	Иначе
//		СообщитьИнфо("Пустой Guid ВСД_Регион");
//	КонецЕсли;
//	
//	Возврат Ответ;
//КонецФункции


Функция Выбрать_ВСД2( докОснование ) Экспорт
 //   // Выбирает подчиненные ВСД_Транзакции документы ВСД 
 //   тзДок = Новый ТаблицаЗначений;
 //   тзДок.Колонки.Добавить("Док");
 //   
 //   Если НЕ(ЗначениеЗаполнено(докОснование)) Тогда
 //   	Возврат тзДок;
 //   КонецЕсли;
 //		Запрос = Новый Запрос;
 //   	ТекстЗапроса = 
 //       "ВЫБРАТЬ
 //       |    Ссылка
 //       |ИЗ
 //       |    Документ.ВСД КАК
 //       |    ВСДДокументыОснования
 //       |ГДЕ
 //       |    ВСДДокументыОснования.ДокументОснование =
 //       |    &ВыбВСДТранзакция";
 //   	
 //   	Если типЗнч(докОснование) = Тип("ДокументСсылка.ВСД2_транзакция") тогда
 //   		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ.ВСД","Документ.ВСД2");		
 //   	КонецЕсли;
 //   	Запрос.Текст = ТекстЗапроса;
 //       Запрос.УстановитьПараметр("ВыбВСДТранзакция", докОснование);
 //   	
 //       РезультатЗапроса = Запрос.Выполнить(); 
 //   	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
 //
 //       Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
 //   	    ВСДРезультат = ВыборкаДетальныеЗаписи.Ссылка;
 //       	//СообщитьИнфо(ВСДРезультат);
 //   		//Если НЕ(СокрЛП(ВСДРезультат.Статус = "Аннулирова")) Тогда
 //   		СтрТЗ = тзДок.Добавить();
 //   		СтрТЗ.Док = ВСДРезультат;
 //   		//КонецЕсли;
 //   	КонецЦикла;	
 //   Возврат тзДок;
КонецФункции

Функция НайтиВСДпоUUID( _uuid, ВидСоздаваемогоДокумента = "ВСД" ) 
//// будем искать все виды Результирующих ВСД		
//	если ПустаяСтрока(_uuid)=0 Тогда			
//		Запрос = Новый Запрос("ВЫБРАТЬ
//		                      |	ВСД.Ссылка
//		                      |ИЗ
//		                      |	Документ.ВСД КАК ВСД
//		                      |ГДЕ
//		                      |	ВСД.UUID = &UUID
//							  |ОБЪЕДИНИТЬ
//							  |ВЫБРАТЬ
//		                      |	ВСД2.Ссылка
//		                      |ИЗ
//		                      |	Документ.ВСД2 КАК ВСД2
//		                      |ГДЕ
//		                      |	ВСД2.UUID = &UUID");
//		
//		Запрос.УстановитьПараметр("UUID", _Uuid );
//		
//		Результат = Запрос.Выполнить().Выбрать();
//		
//		Если Результат.Следующий() Тогда 
//			ДокОб = Результат.Ссылка.ПолучитьОбъект();		
//			ДокОб.Записать( РежимЗаписиДокумента.ОтменаПроведения, );
//			ДокОб.УстановитьПометкуУдаления(Ложь);
//			//Док.СнятьПометкуУдаления();
//			
//			СообщитьИнфо("Найден "+Результат.Ссылка);
//		Иначе
//			ДокОб = Документы[ВидСоздаваемогоДокумента].СоздатьДокумент();
//			//ДокОб.applicationId = applicationId;

//			СообщитьИнфо("Создан новый "+ДокОб+" № "+ДокОб.Номер);
//		КонецЕсли;	
//		
//	Иначе
//		СообщитьИнфо("Пустой UUID");
//	КонецЕсли;
//	
//	Возврат ДокОб;

КонецФункции

Функция НайтиВСДпоApplicationId(applicationId, ВидДокумента) 

	Ответ = "";
	если ПустаяСтрока(applicationId)=0 Тогда			
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	"+ВидДокумента+".Ссылка
		                      |ИЗ
		                      |	Документ."+ВидДокумента+" КАК "+ВидДокумента+"
		                      |ГДЕ
		                      |	"+ВидДокумента+".applicationId = &applicationId");
		Запрос.УстановитьПараметр("applicationId", applicationId );
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Ответ = Результат.Ссылка;
		Иначе

		КонецЕсли;		
	Иначе
		СообщитьИнфо("Пустой applicationId");
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции


//=================== ХозСубъекты ===================================

Функция ЗагрузитьХСПоGUID(GUID) Экспорт
////ЖД Потестить, прилизать
//// В др процедурах не происходит связь с вновь созданным ХС - порешать

//	Если НЕ(ЗначениеЗаполнено(GUID)) Тогда 
//		СообщитьИнфо("Пустой GUID для поиска ХС");
//		Возврат "REJECTED";
//	КонецЕсли;
//	
//	Если КомпонентаНаСервере = Неопределено тогда
//		ЗагрузитьГлПеременныеИзВременногоХранилища();
//	КонецЕсли;
//	
//	ЗапросXML = "
//	|<soapenv:Envelope xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
//	|		  xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2' 
//	|		  xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'>
//	|<soapenv:Header/>
//	|<soapenv:Body>
//	|   <ws:getBusinessEntityByGuidRequest>
//	|      <bs:guid>"+GUID+"</bs:guid>
//	|   </ws:getBusinessEntityByGuidRequest>
//	|</soapenv:Body>
//	|</soapenv:Envelope>";
//	
//	
//	метод = КомпонентаНаСервере.GetMethod();
//	метод.Service = "platform/services/2.0/EnterpriseService";
//	метод.Action = "GetBusinessEntityByGUID";	
//	
//	СообщитьИнфо(" Запрос GetBusinessEntityByGUID [ "+СокрЛП(GUID)+" ]");
//	
//	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
//	
//	Если НайтиОшибки(КомпонентаНаСервере.LogFilename)> 0 Тогда
//		Возврат "";	
//	КонецЕсли;

//	ЧтениеXML = новый ЧтениеXML;
//	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
//	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
//	businessEntity = xdto.Body.getBusinessEntityByGuidResponse.businessEntity;
//	guid = businessEntity.guid;
//	_uuid = businessEntity.uuid;
//	
//	//dt:type>3</dt:type - ЖД вероятно Тип ЮЛ или ИП
//	
//	Попытка name = businessEntity.name; Исключение name=""; КонецПопытки;
//	Если name = "" тогда
//		Попытка name = businessEntity.fio; Исключение name=""; КонецПопытки;	
//	КонецЕсли;
//	
//	Попытка Fullname = businessEntity.fullname;  Исключение Fullname=""; КонецПопытки;
//	active = businessEntity.active;
//	Попытка ИНН =  businessEntity.inn; Исключение ИНН=""; КонецПопытки;
//	Попытка КПП = businessEntity.kpp; Исключение КПП=""; КонецПопытки;
//	Попытка ОГРН = businessEntity.ogrn; Исключение ОГРН=""; КонецПопытки;
//	Попытка address = businessEntity.juridicalAddress.addressView; Исключение address=""; КонецПопытки;

//	
//	
//	Спр = Новый("СправочникМенеджер.ВСД_ХозСубъект");
//	Ссылка_ВСД_ХозСубъект = Спр.НайтиПоРеквизиту("GUID",Guid);
//	Если Ссылка_ВСД_ХозСубъект = Справочники.ВСД_ХозСубъект.ПустаяСсылка() Тогда 
//		Объект_ВСД_ХозСубъект = Справочники.ВСД_ХозСубъект.СоздатьЭлемент();
//	Иначе
//		Объект_ВСД_ХозСубъект = Ссылка_ВСД_ХозСубъект.ПолучитьОбъект(); 
//	КонецЕсли;
//	
//	Объект_ВСД_ХозСубъект.Наименование = name;
//	//Объект_ВСД_ХозСубъект.Адрес = address;
//	Объект_ВСД_ХозСубъект.GUID = guid;
//	Объект_ВСД_ХозСубъект.UUID = _uuid;	
//	
//	// Ищем контрагента
//	Спр = Новый("СправочникМенеджер.Контрагенты");
//	Ссылка_Контрагент = Спр.НайтиПоРеквизиту("ИНН",ИНН);
//	Если Ссылка_Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
//		СообщитьИнфо("Не найден в справочнике Контрагент "+name+" ИНН "+ИНН+" ХС запишем без указания контрагента 1С");
//		// Выбираем из справочника
////		ФормаВыбора = Справочники.Контрагенты.ПолучитьФормуВыбора();
////		ФормаВыбора.Заголовок	= "Выберите контрагента ИНН "+ИНН+ " "+name+ " "+address; 
////		Ссылка_Контрагент = ФормаВыбора.ОткрытьМодально();
////		Если Ссылка_Контрагент = Неопределено Тогда
//			//Не выбрали - попробуем создать
////			ТекстВопроса = "Не найден и не выбран контрагент ИНН "+ИНН+ " "+name+"
////			|Создать?";
////			Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,0);
////			Если Ответ = КодВозвратаДиалога.Да Тогда
////				Объект_Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
////				Объект_Контрагент.Наименование = name;
////				Объект_Контрагент.ИНН = ИНН;
////				Объект_Контрагент.КПП = КПП;
//				// Вид контрагента добавить нужно
////				Объект_Контрагент.НаименованиеПолное = fullname;
////				Объект_Контрагент.Комментарий = "ОГРН: "+ОГРН+"; "+ address;
////				Объект_Контрагент.Записать();
////				СообщитьИнфо("Записан Контрагент ИНН ["+ИНН+ " "+name+"]  Адрес: "+address);
////			Иначе			
////				СообщитьИнфо("Невозможно создать ХС, т.к. не указан контрагент");
////				Возврат "";
////			КонецЕсли;
////		Иначе
////			Объект_Контрагент = Ссылка_Контрагент.ПолучитьОбъект();
////		КонецЕсли;
//	Иначе //Нашли по ИНН
//		Объект_Контрагент = Ссылка_Контрагент.ПолучитьОбъект();
//		Объект_ВСД_ХозСубъект.Контрагент = Объект_Контрагент.Ссылка;
//	КонецЕсли;
////	Объект_ВСД_ХозСубъект.Контрагент = Объект_Контрагент.Ссылка;
//	Объект_ВСД_ХозСубъект.Записать();
//	СообщитьИнфо("Записан ВСД_Хозсубъект ["+Объект_ВСД_ХозСубъект+"] GUID = "+ Guid+" Адрес: "+address);		

//	УдалитьXML( КомпонентаНаСервере.LogFilename);
//	
//	Возврат Объект_ВСД_ХозСубъект.Ссылка;
//	
КонецФункции

Функция НайтиХСпоGUID(Guid) Экспорт

//	Ответ = "";
//	Guid = СокрЛП(Guid);
//	если ПустаяСтрока(Guid)=0 Тогда			
//		Запрос = Новый Запрос("ВЫБРАТЬ
//		                      |	ВСД_ХозСубъект.Ссылка
//		                      |ИЗ
//		                      |	Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
//		                      |ГДЕ
//		                      |	ВСД_ХозСубъект.GUID = &GUID");
//		Запрос.УстановитьПараметр("GUID", Guid );
//		
//		Результат = Запрос.Выполнить().Выбрать();
//		
//		Если Результат.Следующий() Тогда 
//			Ответ = Результат.Ссылка;
//		Иначе
//			//СообщитьОшибку("Guid "+Guid+" не найден, создайте ХС и выполните синхронизацию");	
//			Ответ = ЗагрузитьХСПоGUID(guid);
//		КонецЕсли;
//		
//	Иначе
//		СообщитьИнфо("Пустой Guid ХозСубъекта");
//	КонецЕсли;
//	
//	Возврат Ответ;
КонецФункции

Функция СоздатьНовыйХозСубъект(ВыбКонтрагент)
	Спр = Справочники.ВСД_ХозСубъект.СоздатьЭлемент();
	Спр.Контрагент = ВыбКонтрагент;
	Спр.Наименование = ВыбКонтрагент.Наименование;
	Спр.Записать();
	СообщитьИнфо("Создан ХозСубъект "+Спр.Ссылка);
	
	Возврат Спр.Ссылка;
КонецФункции

Функция НайтиХозСубъект(ВыбКлиент) Экспорт

	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВСД_ХозСубъект.Ссылка,
	               |	ВСД_ХозСубъект.Контрагент,
	               |	ВСД_ХозСубъект.GUID
	               |ИЗ
	               |	Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
	               |ГДЕ
	               |	ВСД_ХозСубъект.Контрагент = &Контрагент";
	Запрос.УстановитьПараметр("Контрагент", ВыбКлиент);				   
					   
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда 
		Ответ = Результат.Ссылка;
	Иначе
		Ответ = СоздатьНовыйХозСубъект(ВыбКлиент);
	КонецЕсли;

	Возврат Ответ;
КонецФункции

//Функция Загрузить_ХС_по_ИНН(ИНН) Экспорт

//	Если ПустоеЗначение(ИНН)=1 Тогда
//		СообщитьИнфо("Пустой ИНН для поиска ХС");
//		Возврат "REJECTED";
//	КонецЕсли;
//	ЗапросXML = "
//	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'
//	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/cerberus/business-entity/ws-definitions'
//	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base' xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
//	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'>
//	|  <soapenv:Header/>
//	|  <soapenv:Body>
//	|    <ws:getBusinessEntityListRequest>
//	|        <ent:businessEntity>
//	|            <ent:inn>"+ СокрЛП(инн) +"</ent:inn>
//	|        </ent:businessEntity>
//	//|      <base:listOptions>
//	//|        <base:count>3</base:count>
//	//|        <base:offset>0</base:offset>
//	//|      </base:listOptions>
//	|    </ws:getBusinessEntityListRequest>
//	|  </soapenv:Body>
//	|</soapenv:Envelope>
//	|";


//	метод = КомпонентаНаСервере.GetMethod();
//	метод.Service = "platform/cerberus/services/EnterpriseService";
//	метод.Action = "GetBusinessEntityList";

//	СообщитьИнфо(" Запрос GetBusinessEntityList [ "+СокрЛП(ИНН)+" ]");

//	appID = ОтправитьЗапросSoap(ЗапросXML, метод);

//	Возврат appID;
//КонецФункции

Функция ХС_ПолучитьGuid(ХС) Экспорт
//	//стандартное поведение функции		
//	ИНН = ПолучитьИНН(ХС.Контрагент);   
//	Если ПустаяСтрока(ИНН)=1 Тогда 
//		СообщитьИнфо("Неправильно указан ИНН");
//		Возврат "ERROR";
//	КонецЕсли;	
//	Если КомпонентаНаСервере = Неопределено тогда
//		ЗагрузитьГлПеременныеИзВременногоХранилища();
//	КонецЕсли;
//	СообщитьИнфо(" Запрос GetBusinessEntityByINN [ "+ИНН+" ]");		
//	//Результат = КомпонентаНаСервере.GetBusinessEntityByINN( ИНН );	
//	Результат = Загрузить_ХС_по_ИНН(ИНН);
//	
////	Если Результат="SUCCESS" Тогда

//	  	СообщитьИнфо("Загрузка XML-файла: "+КомпонентаНаСервере.LogFilename);    
//		Если НайтиОшибки(КомпонентаНаСервере.LogFilename) Тогда 
//			Возврат "";
//		КонецЕсли;
//	Попытка
//		ЧтениеXML = новый ЧтениеXML;
//		ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
//		xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
//		Если Число(xdto.Body.getBusinessEntityListResponse.businessEntityList.total)>0 Тогда	
//			// mitmond тут может быть список, если ХС задвоен 
//			Если  Число(xdto.Body.getBusinessEntityListResponse.businessEntityList.total)>1 тогда
//				для каждого стр из xdto.Body.getBusinessEntityListResponse.businessEntityList.businessEntity цикл
//					guid = стр.guid;
//					_uuid = стр.uuid;
//					active = стр.active;
//				конеццикла ;
//			иначе
//			// end
//			_guid = xdto.Body.getBusinessEntityListResponse.businessEntityList.businessEntity.guid;
//			_uuid = xdto.Body.getBusinessEntityListResponse.businessEntityList.businessEntity.uuid;
//			active = xdto.Body.getBusinessEntityListResponse.businessEntityList.businessEntity.active;
//			конецесли;	//	
//					
//			ОбъектХС = ХС.ПолучитьОбъект();
//			ОбъектХС.GUID = _GUID;
//			ОбъектХС.UUID = _uuid;
//			ОбъектХС.Записать();
//			СообщитьИнфо("Записан ХозСубъект ["+ХС+"] GUID = "+_GUID);			
//		Иначе
//			СообщитьИнфо("ХозСубъект ["+ХС+"] с ИНН "+ИНН+" не найден в ГИС Меркурий");			
//		КонецЕсли;
//	Исключение
//		СообщитьИнфо("ХС_ПолучитьGuid() Не удалось прочитать "+КомпонентаНаСервере.LogFilename);
//		СообщитьИнфо(ОписаниеОшибки());
//	КонецПопытки;
////	КонецЕсли;	
//		
//	Возврат Результат;
//	
КонецФункции

Процедура ХС_Создать_Ответ( applicationID, ХС)
	
	Если Не (ЗначениеЗаполнено(applicationID)) Тогда
		СообщитьИнфо("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	СообщитьИнфо(" Запрос CreateBusinessEntityResult [ "+СокрЛП(applicationID)+" ]");		
	//Результат = КомпонентаНаСервере.CreateBusinessEntityResult( СокрЛП(applicationID));
	Результат = ПолучитьРезультатСервер( СокрЛП(applicationID) );

	//Отладка();	
	
    //СообщитьИнфо("Загрузка XML-файла: "+КомпонентаНаСервере.LogFilename);        
	
	Если Результат = "COMPLETED" Тогда
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
		xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		Попытка
			be = xdto.Body.receiveApplicationResultResponse.application.result.modifyBusinessEntityResponse.businessEntity;
			guid = be.guid;
			_uuid = be.uuid;
			ОбъектХС = ХС.ПолучитьОбъект();
			ОбъектХС.GUID = guid;
			ОбъектХС.UUID = _uuid;
			ОбъектХС.Записать();
			СообщитьИнфо("Записан ХозСубъект ["+ХС+"] GUID = "+GUID);	
		Исключение
			СообщитьИнфо("ХозСубъект ["+ХС+"] неудалось записать отчет ГИС Меркурий");
			СообщитьИнфо(ОписаниеОшибки());
		КонецПопытки;
	Иначе
		НайтиОшибки(КомпонентаНаСервере.LogFilename);
		СообщитьИнфо("Ошибка создания ХозСубъекта ["+ХС+"] в ГИС Меркурий");
	КонецЕсли;
	УдалитьXML( КомпонентаНаСервере.LogFilename );
КонецПроцедуры

Функция CreateBusinessEntity_2(Наименование,НаименованиеПолное,ИНН,КПП,ОГРН,СтранаGUID, РегионGUID,ГородGUID,	Адрес) Экспорт
	ЗапросXML = "
	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2' 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2' 
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions' 
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application' 
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2' 
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+СокрЛП( СписокКонстант.Получить("param_api_key") )+"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+СокрЛП( СписокКонстант.Получить("param_issuer_id") )+"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(Текущаядата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:modifyBusinessEntityRequest>
	|            <merc:localTransactionId>[GUID]</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+СокрЛП( СписокКонстант.Получить("param_intiator_login") )+"</vd:login>
	|            </merc:initiator>
	|            <merc:modificationOperation>
	|              <vd:type>FIND_OR_CREATE</vd:type>
	|              <vd:resultingList>
	|                <dt:businessEntity>";
	Если СтрДлина( СокрЛП(ИНН) ) = 12 Тогда
		//ИП Тип = 3 ФЛ тип = 2
		ЗапросXML = ЗапросXML + "		
		|                  <dt:type>3</dt:type>
		|                  <dt:fio>"+НаименованиеПолное+"</dt:fio>
		|                  <dt:inn>"+ИНН+"</dt:inn>";
	Иначе
		ЗапросXML = ЗапросXML + "		
		|                  <dt:type>1</dt:type>
		|                  <dt:name>"+Наименование+"</dt:name>
		|                  <dt:incorporationForm>
		|                    <dt:code>12300</dt:code>
		|                  </dt:incorporationForm>
		|                  <dt:fullName>"+НаименованиеПолное+"</dt:fullName>
		|                  <dt:inn>"+ИНН+"</dt:inn>";
	КонецЕсли;
	Если ЗначениеЗаполнено(КПП) Тогда
  		ЗапросXML = ЗапросXML + "
		|                  <dt:kpp>"+КПП+"</dt:kpp>";
	КонецЕсли;
  	ЗапросXML = ЗапросXML + "
	|                  <dt:ogrn>"+ОГРН+"</dt:ogrn>
	|                  <dt:juridicalAddress>
	|                    <dt:country>
	|                      <bs:guid>"+СтранаGUID+"</bs:guid>
	|                    </dt:country>
	|                    <dt:region>
	|                      <bs:guid>"+РегионGUID+"</bs:guid>
	|                    </dt:region>
	|                    <dt:locality>
	|                      <bs:guid>"+ГородGUID+"</bs:guid>
	|                    </dt:locality>
	|                    <dt:addressView>"+Адрес+"</dt:addressView>
	|                  </dt:juridicalAddress>
	|                </dt:businessEntity>
	|              </vd:resultingList>
	|              <vd:reason>Добавление субъекта в реестр.</vd:reason>
	|            </merc:modificationOperation>
	|          </merc:modifyBusinessEntityRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";
	

	метод = КомпонентаНаСервере.GetMethod();
	метод.Service = "platform/services/ApplicationManagementService";//"platform/cerberus/services/EnterpriseService";
	метод.Action = "modifyBusinessEntity";

//	СообщитьИнфо(" Запрос CreateEnterprise [ "+СокрЛП(Наименование)+" ]");

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);

	Возврат appID;
КонецФункции

Процедура ХС_Создать(ХС)   Экспорт
	СведенияОПлательщике = ПолучитьСведенияОКонтрагенте(ХС.Контрагент,ТекущаяДата());	// в упп нет ф-ции
	ИНН = СведенияОПлательщике.ИНН;	
	КПП = СведенияОПлательщике.КПП;	
	Попытка
		ОГРН = ?(ЗначениеЗаполнено(СведенияОПлательщике.ОГРН),СведенияОПлательщике.ОГРН,ХС.Контрагент.ОГРН);
	Исключение
		ОГРН = СокрЛП(ХС.ОГРН);
	КонецПопытки;
	Адрес = СведенияОПлательщике.ЮридическийАдрес;//ПолучитьАдрес(СведенияОПлательщике,"ЮридическийАдрес");//ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПлательщике, "ЮридическийАдрес");	
	Наименование = СведенияОПлательщике.ПолноеНаименование;//хс.Контрагент.НаименованиеПолное;
	
	Если не(ЗначениеЗаполнено(ИНН)) Тогда 
		СообщитьОшибку("Неправильно указан ИНН");
		Возврат;
	КонецЕсли;	
	Если НЕ(ЗначениеЗаполнено(ОГРН)) Тогда 
		СообщитьОшибку("Не указан ОГРН");
		Возврат;
	КонецЕсли;
	
	Если НЕ(ЗначениеЗаполнено(Адрес)) Тогда 
		СообщитьИнфо("Не указан Юридический Адрес ХС");
		Возврат;
	КонецЕсли;
	
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	
	СообщитьИнфо(" Запрос CreateBusinessEntity [ "+ИНН+" ]");		
//	Результат = КомпонентаНаСервере.CreateBusinessEntity(
	appID = CreateBusinessEntity_2(
			Наименование, 
			Наименование, 
			ИНН, 
			КПП, 
			ОГРН, 
	        СокрЛП(Страна.GUID), 
            СокрЛП(Регион.GUID), 
            СокрЛП(Город.GUID), 
			Адрес
	);
	
	//Отладка();	
	УдалитьXML( КомпонентаНаСервере.LogFilename );
	
	Если ЗначениеЗаполнено(appID) Тогда
		//Состояние("Пауза "+ПаузаСек+" сек");
		Пауза();
		
		ХС_Создать_Ответ( appID, ХС )
		
	КонецЕсли;
	
КонецПроцедуры

//================== Площадки ===================================
Функция НайтиПлощадку(guid, ХС="")
	//если ПустаяСтрока(Guid)=0 Тогда			
	//	Запрос = Новый Запрос();
	//	ТекстЗапроса = "ВЫБРАТЬ
	//  	|	ВСД_Площадка.Ссылка
	//	|ИЗ
	//    |	Справочник.ВСД_Площадка КАК ВСД_Площадка
	//    |ГДЕ
	//    |	ВСД_Площадка.GUID = &GUID
	//	|	@Отбор_по_ХС@
	//	| ";
	//	Если ЗначениеЗаполнено( ХС ) Тогда 
	//		ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "@Отбор_по_ХС@", " И ВСД_Площадка.GuidХозСубъекта = &GUID_ХС");
	//		Запрос.УстановитьПараметр("GUID_ХС", ХС.Guid );
	//	Иначе
	//		ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "@Отбор_по_ХС@", "")
	//	КонецЕсли;
	//	Запрос.Текст = ТекстЗапроса;
	//	Запрос.УстановитьПараметр("GUID", Guid );
	//	
	//	Результат = Запрос.Выполнить().Выбрать();
	//	Если Результат.Следующий() Тогда 
	//		Ответ = Результат.Ссылка;
	//	Иначе
	//		//Ответ = Справочники.ВСД_Площадка.ПустаяСсылка();
	//		Ответ = ЗагрузитьПлощадкуПоGUID(guid, ХС, ложь);	
	//	КонецЕсли;
	//Иначе
	//	СообщитьИнфо("Пустой Guid ВСД_Площадка");
	//КонецЕсли;
	// 	
	//Возврат Ответ;
КонецФункции


Функция CreateEnterprise2(Наименование, Адрес,СтранаGUID,РегионGUID, ГородGUID,	ПлощадкаGuidХозСубъекта ) Экспорт

	ЗапросXML = "
	|<SOAP-ENV:Envelope 
	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+СокрЛП( СписокКонстант.Получить("param_api_key") )+"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+СокрЛП( СписокКонстант.Получить("param_issuer_id") )+"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(Текущаядата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:modifyEnterpriseRequest>
	|            <merc:localTransactionId>[GUID]</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+СокрЛП( СписокКонстант.Получить("param_intiator_login") )+"</vd:login>
	|            </merc:initiator>
	|            <merc:modificationOperation>
	|              <vd:type>CREATE</vd:type>
	|              <vd:resultingList>
	|                <dt:enterprise>
	|                  <dt:name>"+Наименование+"</dt:name>
	|                  <dt:type>1</dt:type>
	|                  <dt:address>
	|                    <dt:country>
	|                      <bs:guid>"+СтранаGUID+"</bs:guid>
	|                    </dt:country>
	|                    <dt:region>
	|                      <bs:guid>"+РегионGUID+"</bs:guid>
	|                    </dt:region>
	|                    <dt:locality>
	|                      <bs:guid>"+ГородGUID+"</bs:guid>
	|                    </dt:locality>
	|                    <dt:addressView>"+Адрес+"</dt:addressView>
	|                  </dt:address>
	|                  <dt:activityList>
	|                    <dt:activity>
	|                      <dt:name>Приготовление полуфабрикатов</dt:name>
	|                    </dt:activity>
	|                    <dt:activity>
	|                      <dt:name>Реализация пищевых продуктов</dt:name>
	|                    </dt:activity>
	|                    <dt:activity>
	|                      <dt:name>Реализация непищевых продуктов</dt:name>
	|                    </dt:activity>
	|                  </dt:activityList>
	|                  <dt:owner>
	|                    <bs:guid>"+ПлощадкаGuidХозСубъекта+"</bs:guid>
	|                  </dt:owner>
	|                </dt:enterprise>
	|              </vd:resultingList>
	|              <vd:reason>Добавление предприятия в реестр.</vd:reason>
	|            </merc:modificationOperation>
	|          </merc:modifyEnterpriseRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";

	метод = КомпонентаНаСервере.GetMethod();
	метод.Service = "platform/services/ApplicationManagementService";//"platform/cerberus/services/EnterpriseService";
	метод.Action = "modifyEnterprise";

//	СообщитьИнфо(" Запрос CreateEnterprise [ "+СокрЛП(Наименование)+" ]");

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);

	Возврат appID;
КонецФункции

Процедура СоздатьПлощадку(Площадка) Экспорт
	
	Если ПустаяСтрока(Площадка.GuidХозСубъекта)=1 Тогда
		СообщитьИнфо("Не указан Guid ХозСубъекта");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(Площадка.Адрес)=1 Тогда
		СообщитьИнфо("Не указан Адрес");
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(Страна.GUID)=1 Тогда
		СообщитьИнфо("Не указан Страна.GUID");
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(Регион.GUID)=1 Тогда
		СообщитьИнфо("Не указан Регион.GUID");
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(Город.GUID)=1 Тогда
		СообщитьИнфо("Не указан Город.GUID");
		Возврат;
	КонецЕсли;
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	СообщитьИнфо(" Запрос CreateEnterprise [ "+СокрЛП(Площадка)+" ]");		
	//Результат = КомпонентаНаСервере.CreateEnterprise(
	appID = CreateEnterprise2(	
			СокрЛП(Площадка.Наименование),
			СокрЛП(Площадка.Адрес), 
	        СокрЛП(Страна.GUID),
            СокрЛП(Регион.GUID),
            СокрЛП(Город.GUID), 
			СокрЛП(Площадка.GuidХозСубъекта)
	);	
	//Отладка();	
		
	УдалитьXML( КомпонентаНаСервере.LogFilename );
	
	Если ЗначениеЗаполнено(appID) Тогда
		//Состояние("Пауза "+ПаузаСек+" сек");
		Пауза();
		
		ПолучитьОтветПлощадка( appID, Площадка )
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОтветПлощадка( applicationID , Площадка) Экспорт
	
	Если ПустаяСтрока(applicationID)=1 Тогда
		СообщитьИнфо("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	СообщитьИнфо(" Запрос CreateEnterpriseResult [ "+СокрЛП(applicationID)+" ]");		
	//Результат = КомпонентаНаСервере.CreateEnterpriseResult( СокрЛП(applicationID));
	Результат = ПолучитьРезультатСервер( СокрЛП(applicationID) );
	
    СообщитьИнфо("Загрузка XML-файла: "+КомпонентаНаСервере.LogFilename);    
	
	Если Результат = "COMPLETED" Тогда	
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
		xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	    Попытка
			enterprise = xdto.Body.receiveApplicationResultResponse.application.result.modifyEnterpriseResponse.enterprise;
			guid = enterprise.guid;
			_uuid = enterprise.uuid;
			active = enterprise.active;
			Попытка name = enterprise.name; Исключение	name = enterprise.fio;	КонецПопытки;
			
			ОбъектПлощадка = Площадка.ПолучитьОбъект();
			ОбъектПлощадка.guid = guid;
			ОбъектПлощадка.uuid = _uuid;
			ОбъектПлощадка.Записать();
			СообщитьИнфо("Успешно записан ВСД_Площадка ["+Площадка+"] GUID = "+GUID);
		      			
			УдалитьXML( КомпонентаНаСервере.LogFilename );
			Пауза();
			
			СоздатьСвязьХозсубъектПлощадка(Площадка);
		Исключение
			СообщитьИнфо("Не удалось прочитать ответ о Площадке "+КомпонентаНаСервере.LogFilename);
		КонецПопытки;
	Иначе
		НайтиОшибки(КомпонентаНаСервере.LogFilename);		
		СообщитьИнфо("Ошибка создания Площадки");
	КонецЕсли;

КонецПроцедуры

Функция CreateActivityLocationsOperation_2(ПлощадкаGuidХозСубъекта, ПлощадкаGUID ) Экспорт
	ЗапросXML = "
	|<SOAP-ENV:Envelope 
	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
	|  <SOAP-ENV:Header/>
	|  <SOAP-ENV:Body>
	|    <apldef:submitApplicationRequest>
	|      <apldef:apiKey>"+СокрЛП( СписокКонстант.Получить("param_api_key") )+"</apldef:apiKey>
	|      <apl:application>
	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
	|        <apl:issuerId>"+СокрЛП( СписокКонстант.Получить("param_issuer_id") )+"</apl:issuerId>
	|        <apl:issueDate>" + ДатаXML(Текущаядата(), "T00:00:00") + "</apl:issueDate>
	|        <apl:data>
	|          <merc:modifyActivityLocationsRequest>
	|            <merc:localTransactionId>[GUID]</merc:localTransactionId>
	|            <merc:initiator>
	|              <vd:login>"+СокрЛП( СписокКонстант.Получить("param_intiator_login") )+"</vd:login>
	|            </merc:initiator>
	|            <merc:modificationOperation>
	|              <vd:type>CREATE</vd:type>
	|              <vd:businessEntity>
	|                <bs:guid>"+ПлощадкаGuidХозСубъекта+"</bs:guid>
	|              </vd:businessEntity>
	|              <vd:activityLocation>
//	|                <vd:globalID>7574894948562</vd:globalID>
//	|                <vd:globalID>5412345123453</vd:globalID>
	|                <vd:enterprise>
	|                  <bs:guid>"+ПлощадкаGUID+"</bs:guid>
	|                </vd:enterprise>
	|              </vd:activityLocation>
	|            </merc:modificationOperation>
	|          </merc:modifyActivityLocationsRequest>
	|        </apl:data>
	|      </apl:application>
	|    </apldef:submitApplicationRequest>
	|  </SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>";	
	

	метод = КомпонентаНаСервере.GetMethod();
	метод.Service = "platform/services/ApplicationManagementService";//"platform/cerberus/services/EnterpriseService";
	метод.Action = "modifyActivityLocations";

//	СообщитьИнфо(" Запрос CreateEnterprise [ "+СокрЛП(Наименование)+" ]");

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);

	Возврат appID;
КонецФункции

Процедура СоздатьСвязьХозсубъектПлощадка(Площадка) Экспорт
	Если ПустаяСтрока(Площадка.GuidХозСубъекта)=1 Тогда 
		СообщитьИнфо("не указан GUID хоз субъекта");
		Возврат;
	КонецЕсли;
		
	Если ПустаяСтрока(Площадка.GUID)=1 Тогда 
		СообщитьИнфо("Выб площадке не указан GUID");
		Возврат;
	КонецЕсли;
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	СообщитьИнфо(" Запрос CreateActivityLocationsOperation [ "+СокрЛП(Площадка)+" ]");		
	//Результат = КомпонентаНаСервере.CreateActivityLocationsOperation(
	appID = CreateActivityLocationsOperation_2(	
			СокрЛП(Площадка.GuidХозСубъекта),
			СокрЛП(Площадка.GUID) 
	);
	
	//Отладка();	
	УдалитьXML( КомпонентаНаСервере.LogFilename );
	
	Если ЗначениеЗаполнено(appID) Тогда
		Пауза();
		
		ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( appID)
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОтветСоздатьСвязьХозсубъектПлощадка( applicationID )
	
	Если ПустаяСтрока(applicationID)=1 Тогда
		СообщитьИнфо("Не указано applicationID");
		Возврат;
	КонецЕсли;
	
	СообщитьИнфо(" Запрос CreateActivityLocationsOperationResult [ "+СокрЛП(applicationID)+" ]");		
//	Результат = КомпонентаНаСервере.CreateActivityLocationsOperationResult( СокрЛП(applicationID));
	Результат = ПолучитьРезультатСервер( СокрЛП(applicationID) );	
    СообщитьИнфо("Загрузка XML-файла: "+КомпонентаНаСервере.LogFilename);    
	
	Если Результат="COMPLETED" Тогда			
		//objDom=СоздатьОбъект("MSXML2.DOMDocument");
		//objDom.load(ГМ.КомпонентаНаСервере.LogFilename);    	        
		//businessEntity=objDom.selectSingleNode("//merc:businessEntity") ;									
		//guid = businessEntity.selectSingleNode("base:guid").text;
		//uuid = businessEntity.selectSingleNode("base:uuid").text;			
		//active = businessEntity.selectSingleNode("base:active").text;		
		//enterprise = businessEntity.selectSingleNode("ent:activityLocation").selectSingleNode("ent:enterprise").selectSingleNode("base:guid").text;		
		СообщитьИнфо("Успешно установлена связь ВСД_Площадка ");//["+enterprise+"] ВСД_ХозСубъект ["+guid+"]");
		//рез = КомпонентаНаСервере.ResultString;
	Иначе
		НайтиОшибки(КомпонентаНаСервере.LogFilename);		
		СообщитьИнфо("Ошибка связи ХС с Площадкой");
		//ЖД ТЕСТ покажем ошибки
	КонецЕсли;	
	
	УдалитьXML( КомпонентаНаСервере.LogFilename );
КонецПроцедуры

//Функция НайтиПлощадкиПоУсловиям_ЗапросXML(СписокУсловий, Смещение=0)

//	Запрос = "
//	|<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' 
//	|xmlns:ws='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2' 
//	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base' 
//	|xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'>
//	|   <soapenv:Header/>
//	|   <soapenv:Body>
//	|      <ws:getRussianEnterpriseListRequest>
//	|     	<bs:listOptions>
//	|            <bs:count>1000</bs:count>
//	|            <bs:offset>"+СтрЗаменить( Смещение , Символы.НПП ,"")+"</bs:offset>
//	|        </bs:listOptions>
//	|     	<dt:enterprise>";
//	Если ПустоеЗначение( СписокУсловий.Получить("uuid") ) = 0 Тогда
//	    Запрос = Запрос + "
//		|            <dt:uuid>"+ СписокУсловий.Получить("uuid") +"</dt:uuid>";	
//	КонецЕсли;
//	Если ПустоеЗначение( СписокУсловий.Получить("guid") ) = 0 Тогда
//	    Запрос = Запрос + "
//		|            <dt:guid>"+ СписокУсловий.Получить("guid") +"</dt:guid>";	
//	КонецЕсли;
//	Если ПустоеЗначение( СписокУсловий.Получить("Название") ) = 0 Тогда
//	    Запрос = Запрос + "
//		|            <dt:name>"+ СписокУсловий.Получить("Название") +"</dt:name>";	
//	КонецЕсли;
//	Если ПустоеЗначение( СписокУсловий.Получить("НомерПлощадки") ) = 0 Тогда
//	    Запрос = Запрос + "
//		|        <dt:numberList>
//		|            <dt:name>"+ СписокУсловий.Получить("НомерПлощадки") +"</dt:name>
//		|        </dt:numberList> ";	
//	КонецЕсли;
//	Если ПустоеЗначение( СписокУсловий.Получить("Регион") ) = 0 Тогда
//		Запрос = Запрос + "
//		|            <dt:address>
//		|               <dt:region>
//		|                  <bs:guid>"+ СписокУсловий.Получить("Регион").GUID +"</bs:guid>
//		|               </dt:region>
//		|            </dt:address> ";
//	КонецЕсли;
//	Запрос = Запрос + "
//	|        </dt:enterprise>
//	|      </ws:getRussianEnterpriseListRequest>
//	|   </soapenv:Body>
//	|</soapenv:Envelope>";	
//	Возврат Запрос;
//КонецФункции

//Функция НайтиПлощадкиПоУсловиям(СписокУсловий, Смещение=0) Экспорт
//	//стандартное поведение функции	
//	Если НЕ(ЗначениеЗаполнено(СписокУсловий)) Тогда
//		СообщитьИнфо("Не указаны условия ");
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	Если КомпонентаНаСервере = Неопределено тогда
//		ЗагрузитьГлПеременныеИзВременногоХранилища();
//	КонецЕсли;
//	
//	СообщитьИнфо(" Запрос GetRussianEnterpriseListByName ");
//	ЗапросXML = НайтиПлощадкиПоУсловиям_ЗапросXML( СписокУсловий );

//	метод = КомпонентаНаСервере.GetMethod();
//	метод.Service = "platform/services/2.0/EnterpriseService";
//	метод.Action = "GetRussianEnterpriseList";	

//	appID = ОтправитьЗапросSoap(ЗапросXML, метод);

//	СообщитьИнфо("Загрузка XML-файла: "+КомпонентаНаСервере.LogFilename);    

//	ЧтениеXML = новый ЧтениеXML;
//	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
//	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

//	Если НайтиОшибки(КомпонентаНаСервере.LogFilename) Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	Возврат xdto;
//КонецФункции

//Функция ПолучитьПлощадкиПоУсловиям(СписокУсловий) Экспорт
//	//Запрашивает, загружает полученный XML в Реквизит Площадки, возвращает ТЗ
//	Параметры = ВСД.ЗагрузитьПараметры( Организация );

//	Площадки.Очистить();
//	Спр = Новый("СправочникМенеджер.ВСД_Площадка");
//	
//	ПолученоЗаписей = 1000; //Смещение = 0;
//	Пока ПолученоЗаписей = 1000 Цикл
//		ПолученоЗаписей = 0;
//		
//		xdto = ВСД_Запросы.Площадки_НайтиПоУсловиям( Параметры, СписокУсловий, Смещение );	
//		Если xdto = Неопределено Тогда
//			Возврат Неопределено;	
//		КонецЕсли;
//		//Попытка
//		Если xdto.Body.getRussianEnterpriseListResponse.enterpriseList.count="0" Тогда 
//			СообщитьИнфо("По данным условиям ничего не найдено");
//			Возврат Неопределено;
//		КонецЕсли; 
//		
//			List = xdto.Body.getRussianEnterpriseListResponse.enterpriseList.enterprise;
//		
//			Если ТипЗнч(List)<>Тип("СписокXDTO") Тогда 
//				enterpriseList = Новый Массив;
//				enterpriseList.Добавить(List);
//			Иначе
//				enterpriseList = List;
//			КонецЕсли;
//			ПолученоЗаписей = enterpriseList.Количество();
//			Для каждого enterprise из enterpriseList Цикл		
//											
//				Стр = Площадки.Добавить();
//				стр.GUID = enterprise.guid;
//				стр.UUID = enterprise.UUID;
//				Попытка ГУИДХС = enterprise.owner.guid; Исключение ГУИДХС = СписокУсловий.Получить("ХС").GUID; КонецПопытки;  //ЖД  Если есть owner то его ГУИД и пишем
//				стр.GUIDХозСубъекта = ГУИДХС;
//				стр.GUID = enterprise.guid;
//				Если НЕ(enterprise.Свойства().Получить("name") = Неопределено) Тогда
//					стр.Наименование = enterprise.name;	
//				Иначе
//					стр.Наименование = "";
//				КонецЕсли;
//				
//				Попытка стр.Адрес = enterprise.address.addressView; Исключение стр.Адрес = ""; КонецПопытки;
//				стр.Активная = enterprise.active;
//				Если стр.Активная Тогда 
//					стр.Отметка=1;
//				КонецЕсли;
//				
//				стр.Площадка = Спр.НайтиПоРеквизиту("GUID", enterprise.guid );
//				
//			КонецЦикла;
//		Смещение = Смещение + 1000;
//	КонецЦикла;  // более 1000
//	
//	Возврат Площадки.Выгрузить(); 
//КонецФункции

Функция ЗагрузитьПлощадкуПоGUID(GUID, ХС="", ИскатьПлощадку=Истина) Экспорт
	//Если КомпонентаНаСервере = Неопределено тогда
	//	ЗагрузитьГлПеременныеИзВременногоХранилища();
	//КонецЕсли;
	////СообщитьИнфо(" Запрос getEnterpriseByGuid [ "+СокрЛП(GUID)+" ]");		
	////Результат = КомпонентаНаСервере.getEnterpriseByGuid( СокрЛП(GUID) );	
	//Результат = ЗагрузитьПлощадкуSOAP( СокрЛП(GUID) );
	//
	//ЧтениеXML = новый ЧтениеXML;
	//ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	//xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	//
	//enterprise = xdto.Body.getEnterpriseByGuidResponse.enterprise ;						
	//guid = enterprise.guid;
	//_uuid = enterprise.uuid;
	//name = enterprise.name;
	//active = enterprise.active;		
	//Попытка address =  ?(ТипЗнч(enterprise.address.addressView) = Тип("Строка"),enterprise.address.addressView,""); Исключение address = "" ;КонецПопытки;
	//
	//Если ИскатьПлощадку Тогда 
	//	Ссылка_ВСД_Площадка = НайтиПлощадку( GUID, ХС );
	//Иначе
	//	Ссылка_ВСД_Площадка = "";
	//КонецЕсли;
	//
	//Если НЕ ПустоеЗначение(Ссылка_ВСД_Площадка) Тогда 
	//	Объект_ВСД_Площадка = Ссылка_ВСД_Площадка.ПолучитьОбъект(); 
	//Иначе
	//	Объект_ВСД_Площадка = Справочники.ВСД_Площадка.СоздатьЭлемент();
	//КонецЕсли;
	//Объект_ВСД_Площадка.Наименование = name;
	//Объект_ВСД_Площадка.Адрес = address;
	//Объект_ВСД_Площадка.GUID = guid;
	//Объект_ВСД_Площадка.UUID = _uuid;	
	//
	//Если ХС="" Тогда
	//	СообщитьОшибку("Внимание: создана площадка ["+GUID+"] без указания ХозСубъекта ");
	//	//Возврат;
	//Иначе 
	//	Объект_ВСД_Площадка.GUIDХозСубъекта = ХС.GUID;		
	//КонецЕсли;		
	//Объект_ВСД_Площадка.Записать();
	//
	//СообщитьИнфо("Записана ВСД_Площадка ["+Объект_ВСД_Площадка+"] GUID = "+ Guid);		
	//
	////ВСД.Установить_Соответствие( Объект_ВСД_Площадка.Ссылка, ХС);
	//
	//Возврат Объект_ВСД_Площадка.Ссылка;
КонецФункции

Функция ЗагрузитьПлощадки(ХС)	Экспорт
	//Если ПустаяСтрока(ХС.GUID)=1 Тогда 
	//	ХС_ПолучитьGuid(ХС);
	//КонецЕсли;
	//
	//Если ПустаяСтрока(ХС.GUID)=1 Тогда 
	//	СообщитьИнфо("В ХозСубъекте ["+ХС+"] не указан GUID");
	//	Возврат "";
	//КонецЕсли;
	//Если КомпонентаНаСервере = Неопределено тогда
	//	ЗагрузитьГлПеременныеИзВременногоХранилища();
	//КонецЕсли;
	////СообщитьИнфо(" Запрос getBusinessEntityByGuid v1.4 [ "+СокрЛП(ХС.GUID)+" ]");		
	////Результат = КомпонентаНаСервере.GetBusinessEntityByGuid( СокрЛП(ХС.GUID) );
	//результат = ПолучитьХСпоGUID_SOAP_1_4( СокрЛП(ХС.GUID) );
	////Отладка();
	//		
	//СообщитьИнфо("Загрузка XML-файла: "+КомпонентаНаСервере.LogFilename);    
	//
	//ЧтениеXML = новый ЧтениеXML;
	//ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	//xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	//Если НайтиОшибки(КомпонентаНаСервере.LogFilename) Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//Попытка
	//	List = xdto.Body.getBusinessEntityByGuidResponse.businessEntity.activityLocation;
	//	
	//	Если ТипЗнч(List)<>Тип("СписокXDTO") Тогда 
	//		activityLocationList = Новый Массив;
	//		activityLocationList.Добавить(List);
	//	Иначе
	//		activityLocationList = List;
	//	КонецЕсли;
	//	
	//	Для каждого activityLocation из activityLocationList Цикл		
	//			
	//		guid = activityLocation.enterprise.guid;
	//		
	//		ЗагрузитьПлощадкуПоGUID(guid, ХС);
	//					
	//	КонецЦикла;
	//Исключение
	//	СообщитьИнфо("Ошибка при получении площадок, привязанных к ХозСубъекту");
	//КонецПопытки;
	//СообщитьИнфо("Загрузка площадок завершена");
КонецФункции

Процедура ЗагрузитьПлощадкиСписком(ВыбНаименование="")  Экспорт
	//
	//тзСвертка = Отгрузки.Выгрузить();
	//тзСвертка.Свернуть("Отметка, Грузополучатель, Площадка, Контрагент, ХозСубъект",);
	//
	//Для Каждого стр Из тзСвертка Цикл
	//	Если стр.Отметка Тогда 
	//		Если стр.ХозСубъект = Справочники.ВСД_ХозСубъект.ПустаяСсылка() Тогда 
	//			стр.ХозСубъект = НайтиХозСубъект(стр.Контрагент);
	//		КонецЕсли;	
	//		
	//		Если ПустаяСтрока(стр.ХозСубъект.GUID) Тогда 
	//			ХС_ПолучитьGuid(стр.ХозСубъект);
	//		КонецЕсли;
	//		Если НЕ (ЗначениеЗаполнено(ВыбНаименование)) Тогда 
	//			Если НЕ(ПустаяСтрока(стр.ХозСубъект.GUID)) Тогда 
	//				ЗагрузитьПлощадки(стр.ХозСубъект);							
	//			КонецЕсли;
	//		Иначе
	//			Если НЕ(ПустаяСтрока(стр.ХозСубъект.GUID)) Тогда 
	////				НайтиПлощадкиПоНазванию(стр.ХозСубъект, СписокКонстант.Получить("Регион"), ВыбНаименование);						
	//			КонецЕсли;
	//		КонецЕсли;
	//					
	//	КонецЕсли
	//КонецЦикла;
	//РаскраситьТЧОтгрузки();
	//
	////отменяем пометки в ТЧ
	//Для каждого ДанныеСтроки из Отгрузки Цикл
	//	Если ЗначениеЗаполнено(ДанныеСтроки.ХозСубъект.GUID)Тогда
	//		ДанныеСтроки.Отметка = Ложь;
	//	КонецЕсли;
	//КонецЦикла;
КонецПроцедуры

//================================================================


// Работа с документами
Функция РассчитатьКоличествоДляВСД(СтрокаТЧДок, Продукция_Элемент = "") Экспорт
// вызов переопределения
	Обработка = ФункцияПереопределена("РассчитатьКоличествоДляВСД");
	Если обработка <> Неопределено Тогда
		Возврат Обработка.РассчитатьКоличествоДляВСД(ЭтотОбъект, СтрокаТЧДок, Продукция_Элемент);
	КонецЕсли;
	
	Рез = 0;
	Попытка
		КПересчета = ПарамКоэффициентПересчетаКоличества;//СокрЛП(СписокКонстант.Получить("ПарамКоэффициентПересчетаКоличества"));
		Коэфф = 0;
		Попытка
			Коэфф = Число(КПересчета);
		Исключение
			Коэфф = 0;
		КонецПопытки;
					
		Если НЕ(ЗначениеЗаполнено(КПересчета)) Тогда
			Коэфф = 1;
		ИначеЕсли Строка(Коэфф)	= КПересчета Тогда
			Коэфф = Число(КПересчета);
		Иначе //реквизитСтрокиДока.
			_Точка = Найти(КПересчета,".");
			ИмяРекв = Сред(КПересчета,1,_Точка-1);
			ИмяПодРекв = Сред(КПересчета,_Точка+1);
			Коэфф = СтрокаТЧДок[ИмяРекв];
			_Точка = Найти(ИмяПодРекв,".");
			Пока _Точка > 0 Цикл
				ИмяРекв = Сред(ИмяПодРекв,1,_Точка-1);
				ИмяПодРекв = Сред(ИмяПодРекв,_Точка+1);
				Коэфф = Коэфф[ИмяРекв];
				_Точка = Найти(ИмяПодРекв,".");
			КонецЦикла;
			Если НЕ ТипЗнч(Коэфф) = Тип("Число") Тогда
				Коэфф = Коэфф[ИмяПодРекв];
			КонецЕсли;
		КонецЕсли;
		Если Коэфф = 0 Тогда
			СообщитьИнфо("Коэфф пересчета "+КПересчета+" для "+СтрокаТЧДок.Номенклатура + " равен 0 - ставлю 1" );
			Коэфф = 1;
		КонецЕсли;
					
		Рез = СтрокаТЧДок[НазваниеРеквизитаКоличество]*Коэфф;//СтрокаТЧДок[СписокКонстант.Получить("НазваниеРеквизитаКоличество")]*Коэфф;	
	Исключение
		СообщитьИнфо("Указан неверный параметр НазваниеРеквизитаКоличество или ПарамКоэффициентПересчетаКоличества");
		СообщитьИнфо(ОписаниеОшибки());
		Рез = 0;
	КонецПопытки;
	
	Возврат Рез;
КонецФункции

Функция СвернутьТч(Док)
	//тзДок = Новый("Массив");
	//Док.Товары.Выгрузить(тзДок);
	
	тзРез = Новый("ТаблицаЗначений");
	тзРез.Колонки.Добавить("ВСД_Продукция_Элемент");
	тзРез.Колонки.Добавить("Количество");
	тзРез.Колонки.Добавить("КоличествоМест");
	
	//тзДок.ВыбратьСтроки();
	//Пока тзДок.ПолучитьСтроку() = 1 Цикл
	для каждого стрДок из док.Товары Цикл
		
		
		ВСДПродукцияЭлемент = ВСД.Продукция_Элемент_ПолучитьПоНоменклатуре(стрДок.Номенклатура);
		Если (ВСДПродукцияЭлемент=Справочники.ВСД_Продукция_Элемент.ПустаяСсылка()) и НЕ(ПропускатьПустыеСвойства) Тогда
			СообщитьИнфо("["+стрДок.Номенклатура+"] -> не указан ВСД_Продукция_Элемент");
		ИначеЕсли (ВСДПродукцияЭлемент=Справочники.ВСД_Продукция_Элемент.ПустаяСсылка()) и (ПропускатьПустыеСвойства) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрТЧ = тзРез.Добавить();
		СтрТЧ.ВСД_Продукция_Элемент = ВСДПродукцияЭлемент;
		СтрТЧ.Количество = РассчитатьКоличествоДляВСД(стрДок);	
		СтрТЧ.КоличествоМест = стрДок.КоличествоМест;
	КонецЦикла;
		
	тзРез.Свернуть("ВСД_Продукция_Элемент","Количество, КоличествоМест");
	
	Возврат тзРез;
КонецФункции

//Функция ВыгрузитьТч(Док) Экспорт
//// вызов переопределения
//	Обработка = ФункцияПереопределена("ВыгрузитьТч");
//	Если обработка <> Неопределено Тогда
//		Возврат Обработка.ВыгрузитьТч(ЭтотОбъект, Док);
//	КонецЕсли;
//	
//	тзРез = Новый("ТаблицаЗначений");
//	тзРез.Колонки.Добавить("Номенклатура");
//	тзРез.Колонки.Добавить("Продукция_Элемент");
//	тзРез.Колонки.Добавить("Количество");
//	тзРез.Колонки.Добавить("Упаковки");
//	
//	для каждого стрДок из док.Товары Цикл
//		ВСДПродукцияЭлемент = ВСД.Продукция_Элемент_ПолучитьПоНоменклатуре(стрДок.Номенклатура);
//		Если (ВСДПродукцияЭлемент = Справочники.ВСД_Продукция_Элемент.ПустаяСсылка()) и НЕ(ПропускатьПустыеСвойства) Тогда
//			СообщитьИнфо("["+стрДок.Номенклатура+"] -> не указан ВСД_Продукция_Элемент");
//		ИначеЕсли (ВСДПродукцияЭлемент=Справочники.ВСД_Продукция_Элемент.ПустаяСсылка()) и (ПропускатьПустыеСвойства) Тогда
//			Продолжить;
//		КонецЕсли;
//		СтрТЧ = тзРез.Добавить();
//		СтрТЧ.Номенклатура = стрДок.Номенклатура;
//		СтрТЧ.Продукция_Элемент = ВСДПродукцияЭлемент;
//		СтрТЧ.Количество = РассчитатьКоличествоДляВСД(стрДок);
//		Попытка
//		Если ЗначениеЗаполнено(стрДок[НазваниеРеквизитаКоличествоМест]) Тогда
//			СтрТЧ.Упаковки = стрДок[НазваниеРеквизитаКоличествоМест];
//		КонецЕсли;
//		Исключение КонецПопытки;
//	КонецЦикла;
//	Возврат тзРез;
//КонецФункции

//************* Создание ВСД Транзакции
Функция ПолучитьМаркировку( Единица, Покупатель)
	Обработка = ФункцияПереопределена("ПолучитьМаркировку");
	Если обработка <> Неопределено Тогда
		Возврат Обработка.ПолучитьМаркировку( Единица, Покупатель);
	КонецЕсли;	
	
	Рез = "";
	Попытка	Рез = Единица.ШтрихКод; Исключение Рез=""; КонецПопытки;
	
	Возврат Рез;
КонецФункции

//Функция ЗаполнитьРеквизитыСтрокиВСД(НоваяСтрока, СтрокаОснования, ДокСсылка)
//	
//// вызов переопределения
//	Обработка = ФункцияПереопределена("ЗаполнитьРеквизитыСтрокиВСД");
//	Если обработка <> Неопределено Тогда
//		Возврат Обработка.ЗаполнитьРеквизитыСтрокиВСД(ЭтотОбъект, НоваяСтрока, СтрокаОснования, ДокСсылка);
//		//Возврат;
//	КонецЕсли;	
//	
////	НоваяСтрока.Номенклатура 			= СтрокаОснования.Номенклатура;
////	НоваяСтрока.Продукция_Элемент 		= СтрокаОснования.Продукция_Элемент;
////	НоваяСтрока.ЕдиницаИзмерения 		= НоваяСтрока.Партия.ЕдиницаИзмерения;
//	// 
//	Попытка
//		НоваяСтрока.Продукция 				= НоваяСтрока.Продукция_Элемент.Продукция;
//		НоваяСтрока.ВидПродукции 			= НоваяСтрока.Продукция_Элемент.ВидПродукции;
//		НоваяСтрока.НаименованиеПродукции 	= НоваяСтрока.Продукция_Элемент.Наименование;
//	Исключение КонецПопытки;
//	
//	Попытка НоваяСтрока.GTIN 					= НоваяСтрока.Продукция_Элемент.GTIN; Исключение КонецПопытки;
//	Попытка НоваяСтрока.Артикул	 				= НоваяСтрока.Продукция_Элемент.Артикул; Исключение КонецПопытки;
//	
//	Попытка
//		НоваяСтрока.Цель 					= НоваяСтрока.Продукция_Элемент.ВидПродукции.Цель;
//		Если ПустоеЗначение(НоваяСтрока.Цель)=1 Тогда 
//			НоваяСтрока.Цель = СписокКонстант.Получить("ВСДЦель");
//		КонецЕсли;
//	Исключение КонецПопытки;
//	
//	Если докСсылка.Метаданные().ТабличныеЧасти.Найти("УровниУпаковки") <> Неопределено тогда
//		Если НЕ(ЗначениеЗаполнено(ПарамНомерУровняУпаковкиДляВСД)) или НЕ(ЗначениеЗаполнено(ПарамФормаУпаковкиДляВСД)) Тогда
//			//СообщитьИнфо("Не аполнены Параметры для упаковки на уровнях");
//			Возврат "";	
//		КонецЕсли;
//	// Упаковка на уровнях
//		Попытка
//		
//			Если ЗначениеЗаполнено(СтрокаОснования.Упаковки) Тогда
//				Если Цел(СтрокаОснования.Упаковки/СтрокаОснования.Количество*НоваяСтрока.Количество) = 0 Тогда
//					СообщитьИнфо("Нулевое кол-во упаковки у "+СтрокаОснования.Продукция_Элемент+" в "+ДокСсылка);	
//				иначе
//			
//					СтрокаУпак = докСсылка.УровниУпаковки.Добавить(); //Документы.ВСД2_транзакция.СоздатьДокумент().УровниУпаковки.Добавить();
//					СтрокаУпак.СтрокаПродукции = НоваяСтрока.НомерСтроки;
//					СтрокаУпак.Количество = Цел(СтрокаОснования.Упаковки/СтрокаОснования.Количество*НоваяСтрока.Количество); //Пропорционально Распределенному количеству
//					СтрокаУпак.НомерУровня = ПарамНомерУровняУпаковкиДляВСД;//СписокПараметров.Получить("ПарамНомерУровняУпаковкиДляВСД");
//					СтрокаУпак.ФормаУпаковки = ПарамФормаУпаковкиДляВСД;//СписокПараметров.Получить("ПарамФормаУпаковкиДляВСД");;
//					//Маркировки
//		//			СтрокаМарк = докСсылка.Маркировка.Добавить();
//		//			СтрокаМарк.Строкапродукции = СтрокаУпак.СтрокаПродукции;
//		//			СтрокаМарк.НомерУровня = СтрокаУпак.НомерУровня;
//		//			СтрокаМарк.Класс = Перечисления.ВСД_Маркировка.BN;
//		//			СтрокаМарк.Маркировка = "ТЕСТ";  //ПолучитьМаркировку( ТЗПартий.Номенклатура.ОсновнаяЕдиница, Контрагент);
//				КонецЕсли;
//			КонецЕсли;
//			
//		Исключение 
//			СообщитьИнфо(ОписаниеОшибки());	
//		КонецПопытки;
//	КонецЕсли;
//	
//КонецФункции

//Процедура ЗаполнитьТЧВСД(ДанныеЗаполнения = Неопределено, докСсылка, тзАктуальныхПартий = "", ПолеСортировки = "", ЗнакСортировки = Неопределено, тзЭлементыОснования = Неопределено) Экспорт
//// заполняет ТЧ документа ВСД по Входящим данным , вызывается из ЗаполнитьНаосновании ВСД2_Транзакция
//// ДанныеЗаполнения = Документ основание, берем из него ТЧ для расчета Кол-ва и Продэлементы для фильтра партий,
//// также данные для заполнения Маркировок

//// Добавлен реквизит - тзЭлементыОснования = ТЧ докоснования, для подбора Партий без Документа Основания
//// Оптимизировать в дальнейшем входящие Параметры !!! ЖД

//// вызов переопределения
//	Обработка = ФункцияПереопределена("ЗаполнитьТЧВСД");
//	Если обработка <> Неопределено Тогда
//		Обработка.ЗаполнитьТЧВСД(ЭтотОбъект, ДанныеЗаполнения, докСсылка, тзАктуальныхПартий, ПолеСортировки, ЗнакСортировки, тзЭлементыОснования);
//		Возврат;
//	КонецЕсли;	

//	Если (тзЭлементыОснования = Неопределено) и НЕ(ДанныеЗаполнения = Неопределено) тогда
//		тзЭлементыОснования = ВыгрузитьТЧ(ДанныеЗаполнения.Ссылка); 		
//	КонецЕсли;
//	
////	Если НЕ ЗначениеЗаполнено(тзАктуальныхПартий) Тогда
////		Попытка
////			тзАктуальныхПартий = ВСД.ПолучитьАктуальныеПартии(тзЭлементыОснования.ВыгрузитьКолонку("Продукция_Элемент"), докСсылка.Отправитель_Площадка, докСсылка.Отправитель_ХозСубъект,СписокКонстант, ПолеСортировки , ЗнакСортировки);
////		Исключение
////			СообщитьИнфо("Не переданы параметры для получения Актуальных партий - ДанныеЗаполнения или тзЭлементыОснования");
////			Возврат;
////		КонецПопытки;
////	КонецЕсли;
//	
//	Если СписокКонстант = Неопределено Тогда
//		СписокКонстант = ВСД.ЗагрузитьПараметры( ДокСсылка.Организация );
//	КонецЕсли;
//	
//	//Парам = Новый Структура("Организация, Отправитель_ХозСубъект, Отправитель_Площадка",докСсылка.Организация,докСсылка.Отправитель_ХозСубъект,докСсылка.Отправитель_Площадка);	
//	ПартииКСписанию = ВСД.тзПартииСписанияПоТзПродукция_Элемент( СписокКонстант, тзЭлементыОснования, тзАктуальныхПартий );
//	
//	Если (ПартииКСписанию.Количество() = 0) и (ПарамЗаполнятьТранзакциюПриОтсутствииПартий = Ложь) Тогда
//		СообщитьИнфо("Нет актуальных партий для создания ВСД по "+ ?(ДанныеЗаполнения = Неопределено,"Переданным данным",ДанныеЗаполнения.Ссылка));
//		Возврат;
//	КонецЕсли;
//	
//	Для Каждого ТекСтрокаТовары Из ПартииКСписанию Цикл
//		НоваяСтрока = докСсылка.Товары.Добавить();			
//		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрокаТовары);
//		ЗаполнитьРеквизитыСтрокиВСД(НоваяСтрока, ТекСтрокаТовары, докСсылка);
//		Если ЗначениеЗаполнено (ТекСтрокаТовары.Продукция_Элемент) Тогда
//			//докСсылка.ТермическоеСостояние = МИН(ТекСтрокаТовары.Продукция_Элемент.ТермическиеУсловияПеревозки,докСсылка.ТермическоеСостояние) ;
//			//ДокВСД.ТермическиеУсловияПеревозки = ПараметрыОрганизации.Получить("ТермическиеУсловияПеревозки")
//		КонецЕсли;
//	КонецЦикла;
//	//докСсылка.ТермическоеСостояние = ?(докСсылка.ТермическоеСостояние=0,1,докСсылка.ТермическоеСостояние); //!!!!
//КонецПроцедуры


//Функция ЗаполнитьТабЧастьЭлементовДляСозданияВСД(ДокОсн = Неопределено) Экспорт
//	Обработка = ФункцияПереопределена("ЗаполнитьТабЧастьЭлементовДляСозданияВСД");
//	Если обработка <> Неопределено Тогда
//		Возврат Обработка.ЗаполнитьТабЧастьЭлементовДляСозданияВСД(ЭтотОбъект, ДокОсн);		
//	КонецЕсли;	
// 	// Данные из таблицы Партии по недостающим к реализации
//	// либо из докОснования - ВыгрузитьТЧ выполняется
//	РезТаб = Новый ТаблицаЗначений;
//	РезТаб.Колонки.Добавить("Номенклатура",новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
//	РезТаб.Колонки.Добавить("Продукция_Элемент",новый ОписаниеТипов("СправочникСсылка.ВСД_Продукция_Элемент"));
//	РезТаб.Колонки.Добавить("Количество",новый ОписаниеТипов("Число"));
//	РезТаб.Колонки.Добавить("Упаковки"); // для совместимости с ВыгрузитьТЧ
//	Если Докосн = Неопределено Тогда
//		для каждого стрПартии из Партии Цикл
//			Если НЕ(ЗначениеЗаполнено(стрПартии.ВСД_Продукция_Элемент)) тогда
//				Продолжить;	
//			КонецЕсли;
//			Если (стрПартии.КоличествоСписания - стрПартии.Количество) <= 0 Тогда 
//				Продолжить; //пропустим то что есть в наличии				
//			КонецЕсли;			
//			стрТаб = Резтаб.Добавить();
//			стрТаб.Продукция_Элемент = стрПартии.ВСД_Продукция_Элемент;
//			стрТаб.Количество = стрПартии.КоличествоСписания - стрПартии.Количество;
//		КонецЦикла;
//	иначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.ВСД2_транзакция") Тогда		
//		Для каждого строкаДок из Докосн.Товары  Цикл
//			стрТаб = Резтаб.Добавить();
//			стрТаб.Номенклатура = строкаДок.Номенклатура;
//			стрТаб.Продукция_Элемент = ?(ЗначениеЗаполнено(строкаДок.Продукция_Элемент),строкаДок.Продукция_Элемент, ВСД.Продукция_Элемент_ПолучитьПоНоменклатуре(строкаДок.Номенклатура));
//			стрТаб.Количество = строкаДок.Количество;			
//		КонецЦикла
//	Иначе
//		// возьмем реализацию тогда за Основу...
//		Возврат ВыгрузитьТЧ(ДокОсн);
//	КонецЕсли;
//	
//	Возврат резТаб;
//КонецФункции

//Функция ПолучитьДанныеДляСозданияВСДТранзакции(ДокументОснование = Неопределено, Получатель_Хозсубъект = Неопределено, Получатель_Площадка = Неопределено) Экспорт
//// вызов переопределения
//	Обработка = ФункцияПереопределена("ПолучитьДанныеДляСозданияВСДТранзакции");
//	Если обработка <> Неопределено Тогда
//		Возврат Обработка.ПолучитьДанныеДляСозданияВСДТранзакции(ЭтотОбъект, ДокументОснование, Получатель_Хозсубъект, Получатель_Площадка);
//	КонецЕсли;	
//	
//	Рез = Новый Структура;
//	
//	Если ДокументОснование <> Неопределено Тогда //Заполним все по основанию
//		// При вызове из Вввод на соновании - инициализация Обработки, проведена - СписокКонстант Заполнен нужными данными 
//		_Отправитель_ХозСубъект = СписокКонстант.Получить("Отправитель_ХозСубъект");			
//		_Перевозчик_ХозСубъект = СписокКонстант.Получить("Перевозчик_ХозСубъект");
//		_РеквизитГрузополучатель 	= СписокКонстант.Получить("РеквизитГрузополучатель");
//		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
//			//Если СписокКонстант.Получить("ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя") Тогда
//			Если ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя Тогда   // Определим нашу площадку по Складу
//				_Отправитель_Площадка = ВСД.НайтиПлощадкуПоСкладу(ДокументОснование.Склад, _Отправитель_ХозСубъект);
//				Отправитель_Площадка = _Отправитель_Площадка;
//			Иначе
//				_Отправитель_Площадка = СписокКонстант.Получить("Отправитель_Площадка");
//			КонецЕсли;
//			_Получатель_ХозСубъект = ВСД.НайтиХозСубъект(ДокументОснование.Контрагент);				
//			Если _РеквизитГрузополучатель = 0 Тогда 
//				//контрагент
//				_Получатель_Площадка = ВСД.НайтиПлощадкуПоКонтрагенту(ДокументОснование.Контрагент);
//			Иначе
//				//Адрес доставки
//				_Получатель_Площадка = ВСД.НайтиПлощадкуПоКонтрагенту(ДокументОснование.АдресДоставки);
//			КонецЕсли;
//				
//		Иначе //Перемещение
//			_Отправитель_Площадка = ВСД.НайтиПлощадкуПоСкладу(ДокументОснование.СкладОтправитель, _Отправитель_ХозСубъект);
//			Отправитель_Площадка = _Отправитель_Площадка;
//			_Получатель_ХозСубъект = Отправитель_ХозСубъект;
//			_Получатель_Площадка = ВСД.НайтиПлощадкуПоСкладу(ДокументОснование.СкладПолучатель, _Получатель_ХозСубъект);
//		КонецЕсли;
//		Рез.Вставить("Организация",ДокументОснование.Организация);
//		Рез.Вставить("Отправитель_Хозсубъект",_Отправитель_Хозсубъект);  // Взяли из реквизитов обработки - активные данные
//		Рез.Вставить("Отправитель_Площадка",_Отправитель_Площадка);
//		Рез.Вставить("Получатель_Хозсубъект",_Получатель_Хозсубъект); // в параметре получили
//		Рез.Вставить("Получатель_Площадка",_Получатель_Площадка);
////		Рез.Вставить("Перевозчик_ХозСубъект",_Перевозчик_ХозСубъект);
//		Рез.Вставить("ДокОснование",ДокументОснование);
//		Рез.Вставить("СтрокиВСД", ВСД_Общий.ЗаполнитьТабЧастьЭлементовДляСозданияВСД(Партии.Выгрузить(), ДокументОснование));
//	Иначе
//		// Создание док-та из этой обработки по тч Партии
//		Рез.Вставить("Организация",Организация);
//		Рез.Вставить("Отправитель_Хозсубъект",Отправитель_Хозсубъект);  // Взяли из реквизитов обработки - активные данные
//		Рез.Вставить("Отправитель_Площадка",Отправитель_Площадка);
//		Рез.Вставить("Получатель_Хозсубъект",Получатель_Хозсубъект); // в параметре получили
//		Рез.Вставить("Получатель_Площадка",Получатель_Площадка);
////		Рез.Вставить("Перевозчик_ХозСубъект",Перевозчик_ХозСубъект);
//		Рез.Вставить("ДокОснование",ДокументОснование);
//		Рез.Вставить("СтрокиВСД", ВСД_Общий.ЗаполнитьТабЧастьЭлементовДляСозданияВСД(Партии.Выгрузить(), ДокументОснование));
//	КонецЕсли;
//	
//	Возврат Рез;
//КонецФункции

//Процедура ЗаполнитьСвязанныеДокументы(ДокВСД) экспорт
//	Обработка = ФункцияПереопределена("ЗаполнитьСвязанныеДокументы");
//	Если обработка <> Неопределено Тогда
//		Обработка.ЗаполнитьСвязанныеДокументы(ДокВСД);
//		Возврат;
//	КонецЕсли;	
//КонецПроцедуры

//Процедура ЗаполнитьШапку_ВСД2_Транзакция(ДокВСД, СписокПараметров, ПараметрыОрганизации) Экспорт
////ТЕСТ вызов переопределения
//	Обработка = ФункцияПереопределена("ЗаполнитьШапку_ВСД2_Транзакция");
//	Если обработка <> Неопределено Тогда
//		Обработка.ЗаполнитьШапку_ВСД2_Транзакция(ДокВСД, СписокПараметров, ПараметрыОрганизации);
//		Возврат;
//	КонецЕсли;		
//	
//	ДокВСД.ДокументОснование = ?(СписокПараметров.ДокОснование = неопределено,"",СписокПараметров.ДокОснование);
//	ДокВСД.Организация = СписокПараметров.Организация;
//	ДокВСД.Дата = ?(ЗначениеЗаполнено(ДокВСД.ДокументОснование),ДокВСД.ДокументОснование.Дата, ТекущаяДата());			
//	ДокВСД.Отправитель_ХозСубъект = СписокПараметров.Отправитель_ХозСубъект;
//	ДокВСД.Отправитель_Площадка = СписокПараметров.Отправитель_Площадка;			
//	
//	ДокВСД.Получатель_ХозСубъект = СписокПараметров.Получатель_ХозСубъект;		
//	ДокВСД.Получатель_Площадка = СписокПараметров.Получатель_Площадка;					
//		
//	ДокВСД.Перевозчик_ХозСубъект = ПараметрыОрганизации.Получить("Перевозчик_ХозСубъект");
//			
//	ДокВСД.ТтнСерия = ""; //ТТН.Серия;
//	ДокВСД.ТтнНомер = ПолучитьНомерДокБезПрефикса(ДокВСД.ДокументОснование);
//	ДокВСД.ТтнДата = ?(ЗначениеЗаполнено(ДокВСД.ТтнНомер),ДокВСД.Дата,"");//?(ЗначениеЗаполнено(ДокВСД.ДокументОснование),ДокВСД.ДокументОснование.Дата, ТекущаяДата());
//	Попытка ДокВСД.номерАвто = ПолучитьНомерАвто(ДокВСД.ДокументОснование); Исключение ДокВСД.номерАвто = "не используется"; КонецПопытки;
//	
//	ДокВСД.Местность 		= ПараметрыОрганизации.Получить("ВСД_Местность");
//	ДокВСД.ОсобыеОтметки 	= ПараметрыОрганизации.Получить("ВСД_ОсобыеОтметки");
//	ДокВСД.cargoInspected  	= истина;			
//	Попытка ДокВСД.РезультатыИсследований = ПараметрыОрганизации.Получить("ВСД_РезультатыИсследований"); Исключение КонецПопытки; //Транзакция 1.4
//	ДокВСД.ТермическиеУсловияПеревозки = ПараметрыОрганизации.Получить("ТермическиеУсловияПеревозки");
//	//ДокВСД.ТермическоеСостояние = 4;
//	Попытка	ЗаполнитьСвязанныеДокументы(ДокВСД); Исключение КонецПопытки; //Транзакция 1.4
//КонецПроцедуры

Функция СоздатьДокумент_ВСД2_Транзакция(СписокПараметров, тзАктуальныхПартий = Неопределено) Экспорт
	//Создает ВСД по переданным параметрам
	Если НЕ(ЗначениеЗаполнено(СписокПараметров.Отправитель_ХозСубъект)) или НЕ(ЗначениеЗаполнено(СписокПараметров.Отправитель_Площадка)) Тогда
		СообщитьОшибку("Неизвестен ХС или Площадка получателя -> Невозможно создать ВСД2 Транзакция ");
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОрганизации = ВСД.ЗагрузитьПараметры( СписокПараметров.Организация );
					
	Если ПараметрыОрганизации = Неопределено Тогда   // Вот тут всегда будет Определено, нужно поменять условие
		СообщитьИнфо("Невозможно создать ВСД2 Транзакция, т.к. нет параметров для " + СписокПараметров.Организация);
		Возврат Неопределено;
	КонецЕсли;
	
	Если тзАктуальныхПартий = Неопределено тогда
		СзПродэлементов = СписокПараметров.СтрокиВСД.ВыгрузитьКолонку("Продукция_Элемент");
		тзАктуальныхПартий = ВСД.ПолучитьАктуальныеПартии(ПараметрыОрганизации, СзПродэлементов, СписокПараметров.Отправитель_Площадка, СписокПараметров.Отправитель_ХозСубъект );
	КонецЕсли;
	
	Если НЕ (ТипЗнч(тзАктуальныхПартий) = Тип("ТаблицаЗначений")) и НЕ ПараметрыОрганизации.Получить("ПарамЗаполнятьТранзакциюПриОтсутствииПартий") Тогда
		СообщитьИнфо("Нет актуальных партий для создания Документов ");
		Возврат Неопределено;
	КонецЕсли;
			
	ДокВСД = Документы.ВСД2_транзакция.СоздатьДокумент();
	ВСД_Общий.ЗаполнитьШапку_ВСД2_Транзакция(ДокВСД, СписокПараметров, ПараметрыОрганизации);
	// заполняет ТЧ документа ВСД по Входящим данным , вызывается из ЗаполнитьНаосновании ВСД2_Транзакция
	//ВСД_Общий.ЗаполнитьТЧВСД(ПараметрыОрганизации, СписокПараметров.ДокОснование, ДокВСД, тзАктуальныхПартий, СписокПараметров.СтрокиВСД);
	ВСД_Общий.ЗаполнитьТабЧастьВСД(ПараметрыОрганизации, СписокПараметров.ДокОснование, ДокВСД, тзАктуальныхПартий );

	//ЖД Контроль
	Если ДокВСД.Товары.Количество() = 0 Тогда
		СообщитьИнфо("Нет данных (пустая таб часть) для создания ВСД2_Транзакция ");
		Возврат Неопределено;	
	КонецЕсли;
		
	ДокВСД.Записать();
	СообщитьИнфо(" Создан документ "+докВСД);
		
	Возврат докВСД.Ссылка;
КонецФункции

Процедура СоздатьВСД2() Экспорт
	//Создает ВСД по списку из тч Отгрузки
 	// С учетом актуальных Партий (за минусом неотправленных ВСД изи списка ГО
	Если Партии.Количество()=0 Тогда
		СообщитьИнфо("Не заполнена таблица партий.");
		Возврат;
	КонецЕсли;
	
//	Если (КомпонентаНаСервере = Неопределено) и ЗначениеЗаполнено(АдресКомпонентыНаСервере) тогда
//		ЗагрузитьГлПеременныеИзВременногоХранилища();
//	Конецесли;
	Если СписокКонстант = Неопределено Тогда
		СписокКонстант = ВСД.ЗагрузитьПараметры( Организация );
	КонецЕсли;
	
	тзАктуальныхПартий = ВСД.ПолучитьАктуальныеПартии(СписокКонстант, Партии.ВыгрузитьКолонку("ВСД_Продукция_Элемент"), Отправитель_Площадка, Отправитель_ХозСубъект );
	
	Если НЕ (ТипЗнч(тзАктуальныхПартий) = Тип("ТаблицаЗначений")) и НЕ ПарамЗаполнятьТранзакциюПриОтсутствииПартий Тогда
		СообщитьИнфо("Нет актуальных партий для создания Документов ");
		Возврат;
	КонецЕсли;
	
	УменьшитьАктуальныеПартииНаРаспределенные(тзАктуальныхПартий);
	
	Для Каждого СтрОтгрузки Из Отгрузки Цикл
		Если НЕ(СтрОтгрузки.Отметка) Тогда
			Продолжить;
		КонецЕсли;

		//Если НЕ(СтрОтгрузки.ВСД=Документы.ВСД2_транзакция.ПустаяСсылка()) и НЕ(СтрОтгрузки.ВСД=Документы.ВСД_транзакция.ПустаяСсылка()) Тогда       
		Если СтрОтгрузки.ВСД <> Неопределено Тогда
			Если СтрОтгрузки.ВСД.Проведен Тогда
				СообщитьОшибку("Для "+СтрОтгрузки.Док+" уже отправлен "+СтрОтгрузки.ВСД+", Статус:"+СтрОтгрузки.ВСД.Статус);
				Продолжить;
			КонецЕсли;
			Если (ПустаяСтрока(СтрОтгрузки.ВСД.Статус) = 1) Тогда 
				СообщитьОшибку("Для "+СтрОтгрузки.Док+" ВСД уже создан, но не отправлен");
				Продолжить;
			КонецЕсли;		
		КонецЕсли;		
		
		Если НЕ(ЗначениеЗаполнено(СтрОтгрузки.Площадка)) или НЕ(ЗначениеЗаполнено(СтрОтгрузки.ХозСубъект)) Тогда
			СообщитьОшибку("Для "+СтрОтгрузки.Док+" неизвестен ХС или Площадка получателя ");
			Продолжить;
		КонецЕсли;
		// Доп контроль Переходный Период с 1.4 на 2.*
		ДокВСД = ВСД.НайтиВСД(СтрОтгрузки.Док);
		Если ЗначениеЗаполнено(ДокВСД) Тогда
				СообщитьИнфо("Уже создан "+ДокВСД +" для "+СтрОтгрузки.Док);
			Продолжить;
		КонецЕсли;
				
		//ХС = СтрОтгрузки.ХозСубъект;
		//Площадка = СтрОтгрузки.Площадка;
		СписокКонстант.Вставить("Получатель_Хозсубъект", СтрОтгрузки.ХозСубъект);
		СписокКонстант.Вставить("Получатель_Площадка", СтрОтгрузки.Площадка);
		
		ДокВСД = СоздатьДокумент_ВСД2_Транзакция( ВСД_Общий.ПолучитьДанныеДляСозданияВСДТранзакции( СписокКонстант, СтрОтгрузки.Док ) );
		Если ЗначениеЗаполнено(ДокВСД) тогда
			СтрОтгрузки.ВСД = ДокВСД.Ссылка;		
			СообщитьИнфо("["+СтрОтгрузки.Грузополучатель+"] создан документ "+СтрОтгрузки.ВСД);		
		КонецЕсли;
	КонецЦикла;								

КонецПроцедуры

Процедура ВСД_Транзакция_ВводНаОсновании(ДокВСД, СписокПараметров = Неопределено, ПараметрыОрганизации = Неопределено) Экспорт
	Обработка = ФункцияПереопределена("ВСД_Транзакция_ВводНаОсновании");
	Если обработка <> Неопределено Тогда
		Обработка.ВСД_Транзакция_ВводНаОсновании(ДокВСД, СписокПараметров, ПараметрыОрганизации);
		Возврат;
	КонецЕсли;	
	
	Если ПараметрыОрганизации = Неопределено Тогда
		ПараметрыОрганизации =  ВСД.ЗагрузитьПараметры( СписокПараметров.Организация );
	КонецЕсли;
	
	Если СписокПараметров = Неопределено Тогда
		СписокПараметров = ВСД_Общий.ПолучитьДанныеДляСозданияВСДТранзакции(ПараметрыОрганизации, ДокВСД.ДокументОснование);
	КонецЕсли;
		
	ВСД_Общий.ЗаполнитьШапку_ВСД2_Транзакция(ДокВСД, СписокПараметров, ПараметрыОрганизации);
	//ВСД_Общий.ЗаполнитьТЧВСД( ПараметрыОрганизации, СписокПараметров.ДокОснование, ЭтотОбъект, Неопределено, СписокПараметров.СтрокиВСД);
	
КонецПроцедуры
//
//************* Смена Владельца

//Функция ПолучитьДанныеДляСозданияВСДПеремещения(ДокОсн = Неопределено) Экспорт
//    Рез = Новый Структура;
//	Рез.Вставить("Организация",ПарамПоставщикОрганизация);
//	Рез.Вставить("Отправитель_Хозсубъект",ПарамПоставщикХозСубъект);
//	Рез.Вставить("Отправитель_Площадка",ПарамПоставщикПлощадка);
//	Рез.Вставить("Получатель_Хозсубъект",Отправитель_Хозсубъект);
//	Рез.Вставить("Получатель_Площадка",Отправитель_Площадка);
//	Рез.Вставить("ДокОснование",ДокОсн);
//	Рез.Вставить("СтрокиВСД",ЗаполнитьТабЧастьЭлементовДляСозданияВСД(ДокОсн));
//	
//	Возврат Рез;
//КонецФункции

Функция АвтоГашениеПеремещения(ВСДОтправителя, ФайлОтвета)
	НетОшибки = ложь;
	ФлНеЗагружать = Истина;
	ВСДВходящие.Очистить();
	// ! ЗагрузитьXML_ВСД2(ФайлОтвета ,ВСДВходящие);
	
	Если ВСДВходящие.Количество() = 0 Тогда
		СообщитьИнфо("Нет вход данных для гашения");
		Возврат ложь;
	КонецЕсли;
	
	для Каждого стрВход из ВСДВходящие Цикл
		стрВход.Отметка = Истина;	
	КонецЦикла;
	СообщитьИнфо("Отправляем запросы на гашение...");
	Попытка	
		//ОтправкаЗапросовНаГашение();
		НетОшибки = истина;
		для Каждого стрВход из ВСДВходящие Цикл
			Если Не (СокрЛП(стрВход.Статус) = "COMPLETED") Тогда
				НетОшибки = ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	исключение
		Возврат ложь;	
	КонецПопытки;
	
	Возврат НетОшибки;
КонецФункции

Функция СменаВладельцаВызовИзФормы(ДокОсн = Неопределено) Экспорт
	// Переработать/проверить под вызов извне - т.е. при инициализацииОбработки
	
	//Контрользаполненности параметров Поставщика
	Если (НЕ ЗначениеЗаполнено(ПарамПоставщикОрганизация)) или
		(НЕ ЗначениеЗаполнено(ПарамПоставщикХозСубъект)) или
		(НЕ ЗначениеЗаполнено(ПарамПоставщикПлощадка)) Тогда
		СообщитьИнфо("Не заполнен Параметр Основной Постащик");
		Возврат "НЕТПАРАМЕТРОВ";
	КонецЕсли;
	
	
	СписокПараметров = ВСД_Общий.ПолучитьДанныеДляСозданияВСДПеремещения(СписокПараметров, Партии.Выгрузить(), Докосн);
	
	ДокВСД = СоздатьДокумент_ВСД2_Транзакция(СписокПараметров);
	Если ДокВСД = Неопределено Тогда
		СообщитьИнфо("Нас постигла неудача при создании ВСД на смену владельца");
		Возврат "ОШИБКАСОЗДАНИЯ";
	КонецЕсли;
	// Сохраним текущее состояние переменных
	ТекОрганизация = Организация;
	ТекПлощадка = Отправитель_Площадка;
	
	СообщитьИнфо("Отправляем запрос на Перемещение...");
	// ! appID = Отправить_ВСД2_транзакция( ДокВСД );
	//СтрИмяФайла = КомпонентаНаСервере.LogFileName; - здесь невидна???
	//мы его записали в Реквизит модуля при ПолучитьРезультат_ВСД2()
	
	//Восстановим Параметры до отправки
	
	Организация = ТекОрганизация;
	Инициализация();
	
	Отправитель_Площадка = ТекПлощадка;
	СписокКонстант.Вставить("Отправитель_Площадка", ТекПлощадка);
	Результ = ложь;
	
	Если ДокВСД.Статус = "COMPLETED" Тогда
		Результ = АвтоГашениеПеремещения(ДокВСД, СтрИмяФайла);
	Иначе		
		СообщитьИнфо("Неудача автоотправки ВСД на смену Владельца "+ДокВСД);
		СообщитьОшибку("Отправьте вручную, погасите у Получателя." );
		//ОткрытьФорму("Документ.ВСД2_транзакция.ФормаОбъекта", Новый Структура("Ключ", ДокВСД));
		Возврат "ОШИБКАОТПРАВКИВСД";   //МБ док вернуть?
	КонецЕсли;
	
	Если Не Результ Тогда
		СообщитьОшибку("Возникли ошибки при автогашении");
		//Вот тут наверное не проканает на сервере
		Возврат "ОШИБКААВТОГАШЕНИЯ";
	иначе
		//Все пучком прошло
		// партии оприходовались
		СообщитьИнфо("Перемещенные партии успешно оприходованы на "+Организация+", Площадка - "+Отправитель_Площадка);
		Возврат "ОК";
	КонецЕсли
КонецФункции

Функция ПогаситьВСДПоставщика(докВСД) Экспорт
	Если НЕ ЗначениеЗаполнено(ДокВСД) Тогда
		СообщитьОшибку("Не передан ВСД для гашения");
		Возврат ложь;
	ИначеЕсли НЕ (ДокВСД.Статус = "COMPLETED") Тогда
		СообщитьОшибку("ВСД не оформлен в Меркурий "+докВСД);
		Возврат ложь;
//	ИначеЕсли НЕ ЗначениеЗаполнено(ДокВСД.ДокументОснование) Тогда
		//СообщитьОшибку("Не указан документ основание ВСД - > автогашение Невоможно "+докВСД);
		//Возврат ложь;
	Иначе
		Если ДокВСД.Метаданные().Реквизиты.Найти("ИмяФайлаОтвет")<> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(ДокВСД.ИмяФайлаОтвет) Тогда
				СообщитьОшибку("остутствет файл ответа Меркурий - гасите обработкой Гашение "+докВСД);
				Возврат ложь;
			КонецЕсли;
			ФайлНаДиске = Новый Файл(СокрЛП(ДокВСД.ИмяФайлаОтвет));
		    Если Не ФайлНаДиске.Существует() Тогда
        		СообщитьИнфо("Не могу найти файл ответа на диске -> "+ФайлНаДиске);
		    	Возврат Ложь;
			КонецЕсли;
		Иначе
			СообщитьОшибку("остутствет Реквизит файл ответа Меркурий - гасите обработкой Гашение "+докВСД);
			Возврат ложь;
		КонецЕсли;
	КонецЕсли; //Проверки закончены
	
	Организация = ВСД.ПолучитьОрганизациюПоХС(ДокВСД.Получатель_ХозСубъект);// докВСД.ДокументОснование.Организация;
	Инициализация();	
	Отправитель_Площадка = докВСД.Получатель_Площадка;
	СписокКонстант.Вставить("Отправитель_Площадка", Отправитель_Площадка);
	Результ = АвтоГашениеПеремещения(ДокВСД, СокрЛП(ДокВСД.ИмяФайлаОтвет));
	Если Не Результ Тогда
		СообщитьОшибку("Возникли ошибки при автогашении");
		Возврат "ОШИБКААВТОГАШЕНИЯ";
	иначе
		//Все пучком прошло
		// партии оприходовались
		СообщитьИнфо("Перемещенные партии успешно оприходованы на "+Организация+", Площадка - "+Отправитель_Площадка);
		Возврат "ОК";
	КонецЕсли
	
КонецФункции
//************** Смена Владельца = Перемещения, окончание

//********** ВСД Входящий
//Функция НайтиВСД_ВходящийпоUUID( _uuid ) Экспорт		
//	если ЗначениеЗаполнено(_uuid) Тогда			
//		Запрос = Новый Запрос("ВЫБРАТЬ
//		                      |	ВСД2_входящий.Ссылка
//		                      |ИЗ
//		                      |	Документ.ВСД2_входящий КАК ВСД2_входящий
//		                      |ГДЕ
//		                      |	ВСД2_входящий.UUID = &UUID");
//		
//		Запрос.УстановитьПараметр("UUID", _Uuid );
//		
//		Результат = Запрос.Выполнить().Выбрать();
//		
//		Если Результат.Следующий() Тогда 
//			ДокОб = Результат.Ссылка;//.ПолучитьОбъект();		
//		Иначе
//			ДокОб = "";
//		КонецЕсли;	
//	Иначе
//		ДокОб = "";
//	КонецЕсли;
//	
//	Возврат ДокОб;

//КонецФункции

//Функция НайтиСоздатьВСД_ВходящийпоUUID( _uuid ) экспорт 
//	
//	если ЗначениеЗаполнено(_uuid) Тогда			
////		Запрос = Новый Запрос("ВЫБРАТЬ
////		                      |	ВСД2_входящий.Ссылка
////		                      |ИЗ
////		                      |	Документ.ВСД2_входящий КАК ВСД2_входящий
////		                      |ГДЕ
////		                      |	ВСД2_входящий.UUID = &UUID");
////		
////		Запрос.УстановитьПараметр("UUID", _Uuid );
//		
////		Результат = Запрос.Выполнить().Выбрать();
//		ДокСсылка = НайтиВСД_ВходящийпоUUID(_uuid);		
//		Если ЗначениеЗаполнено(ДокСсылка) Тогда//Результат.Следующий() Тогда 
//			ДокОб = ДокСсылка.Ссылка.ПолучитьОбъект();//Результат.Ссылка.ПолучитьОбъект();		
//			ДокОб.Записать( РежимЗаписиДокумента.ОтменаПроведения, );
//			ДокОб.УстановитьПометкуУдаления(Ложь);
//			
//			СообщитьИнфо("Найден "+ДокСсылка.Ссылка);
//		Иначе
//			ДокОб = Документы.ВСД2_входящий.СоздатьДокумент();
//			СообщитьИнфо("Создан новый "+ДокОб+" № "+ДокОб.Номер);
//		КонецЕсли;	
//	Иначе
//		СообщитьИнфо("Пустой UUID");
//	КонецЕсли;
//	
//	Возврат ДокОб;

//КонецФункции

//Функция ЗаполнитьВСДВходящийИзТЗ(стрвход) Экспорт
////	Для каждого стрВход из ВСДВходящие Цикл
////		если НЕ стрвход.Отметка Тогда
////			Продолжить;	
////		КонецЕсли;
//		докОбъект = НайтиСоздатьВСД_ВходящийпоUUID( стрВход.uuid );//Документы.ВСД2_входящий.СоздатьДокумент();//	
//		докОбъект.ФормаВСД 	 = стрВход.ФормаВСД;
//	
//		докОбъект.applicationId = стрВход.applicationId;
//		докОбъект.uuid = стрВход.uuid;
//		докОбъект.Статус = стрВход.Статус;
//		докОбъект.Дата = стрВход.Дата;
//		докОбъект.ВСДДата = стрВход.ВСДДата;		
//		докОбъект.Организация = стрВход.Организация;
//		докОбъект.ТипВСД = стрВход.ТипВСД;
//		
//		докОбъект.всдсерия =стрВход.всдсерия;
//		докОбъект.всдномер =стрВход.всдномер;  
//		докОбъект.ВидВСД = стрВход.ВидВСД ; 
//		
//		докОбъект.Отправитель_ХозСубъект = стрВход.Отправитель_ХозСубъект;
//		докОбъект.Отправитель_Площадка 	= стрВход.Отправитель_Площадка;
//		докОбъект.Получатель_ХозСубъект = стрВход.Получатель_ХозСубъект;
//		докОбъект.Получатель_Площадка 	= стрВход.Получатель_Площадка;
//		докОбъект.ВладелецХС = стрВход.ВладелецХС;
//        докОбъект.Перевозчик_ХозСубъект = стрВход.Перевозчик_ХозСубъект;
//		
//		докОбъект.номеравто = стрВход.номеравто; 
//		докОбъект.номерПолуприцепа = стрВход.номерПолуприцепа;
//		докОбъект.номерКонтейнера = стрВход.номерКонтейнера;
//		докОбъект.ТипТС = стрВход.ТипТС;
//		докОбъект.термическоесостояние = стрВход.термическоесостояние;
//			
//		докОбъект.Продукция 	= стрВход.Продукция;
//		докОбъект.ВидПродукции 	= стрВход.ВидПродукции; 
//		докОбъект.Продукция_Элемент = стрВход.Продукция_Элемент;
//		докОбъект.НаименованиеПродукции = стрВход.НаименованиеПродукции;
//		докОбъект.GTIN = стрВход.GTIN;
//		докОбъект.Артикул = стрВход.Артикул;
//		докОбъект.ФасовкаНаименование = стрВход.ФасовкаНаименование;
//		докОбъект.ФасовкаФормаУпаковки = стрВход.ФасовкаФормаУпаковки;
//		докОбъект.ФасовкаКоличество = стрВход.ФасовкаКоличество;
//		докОбъект.ФасовкаОбъем = стрВход.ФасовкаОбъем;
//		докОбъект.ФасовкаЕдиницаИзм = стрВход.ФасовкаЕдиницаИзм;
//		
//		
//		// Объем продукции
//		Попытка
//			докОбъект.КоличествоПринять = стрВход.КоличествоПринять;// - стрВход.КоличествоВозврат;
//			докОбъект.КоличествоВозврат = стрВход.КоличествоВозврат;
//		Исключение КонецПопытки;
//	
//		докОбъект.Количество 		= стрВход.Количество;
//		докОбъект.ЕдиницаИзмерения	= стрВход.ЕдиницаИзмерения;
//		
//		докОбъект.ДатаИзготовления1 = стрВход.ДатаИзготовления1;
//		докОбъект.ДатаИзготовления2 = стрВход.ДатаИзготовления2; 
//		докОбъект.ДатаИзготовления = стрВход.ДатаИзготовления; 
//		
//		ДокОбъект.ДатаИзготовления1XML.Очистить();
//		ДокОбъект.ДатаИзготовления2XML.Очистить();
//		ДокОбъект.ДатаСрокГодности1XML.Очистить();
//		ДокОбъект.ДатаСрокГодности2XML.Очистить();

//		Если ЗначениеЗаполнено(стрВход.ДатаИзготовления1СЗ) Тогда
//			сзДаты = ЗначениеИзСтрокиВнутр(стрВход.ДатаИзготовления1СЗ);
//			для каждого элементсз из сзДаты Цикл
//				стрТЧ = ДокОбъект.ДатаИзготовления1XML.Добавить();
//				стрТЧ.СтрокаXML = элементсз.значение;
//			КонецЦикла;
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено(стрВход.ДатаИзготовления2СЗ) Тогда
//			сзДаты = ЗначениеИзСтрокиВнутр(стрВход.ДатаИзготовления2СЗ);
//			для каждого элементсз из сзДаты Цикл
//				стрТЧ = ДокОбъект.ДатаИзготовления2XML.Добавить();
//				стрТЧ.СтрокаXML = элементсз.значение;
//			КонецЦикла;
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено(стрВход.ДатаСрокГодности1СЗ) Тогда
//			сзДаты = ЗначениеИзСтрокиВнутр(стрВход.ДатаСрокГодности1СЗ);
//			для каждого элементсз из сзДаты Цикл
//				стрТЧ = ДокОбъект.ДатаСрокГодности1XML.Добавить();
//				стрТЧ.СтрокаXML = элементсз.значение;
//			КонецЦикла;
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено(стрВход.ДатаСрокГодности2СЗ) Тогда
//			сзДаты = ЗначениеИзСтрокиВнутр(стрВход.ДатаСрокГодности2СЗ);
//			для каждого элементсз из сзДаты Цикл
//				стрТЧ = ДокОбъект.ДатаСрокГодности2XML.Добавить();
//				стрТЧ.СтрокаXML = элементсз.значение;
//			КонецЦикла;
//		КонецЕсли;		
//		
//		докОбъект.ДатаСрокГодности1 = стрВход.ДатаСрокГодности1;
//		докОбъект.ДатаСрокГодности = стрВход.ДатаСрокГодности; 
//		докОбъект.ДатаСрокГодности2 = стрВход.ДатаСрокГодности2;

//		докОбъект.НомераПартий.Очистить();
//		Если ЗначениеЗаполнено(стрВход.НомерПартии) Тогда
//			спНомераПартий = ЗначениеИзСтрокиВнутр(стрВход.НомерПартии);
//			Для Каждого СтрокаНомера из спНомераПартий Цикл
//				стрТЧ = ДокОбъект.НомераПартий.Добавить();
//				стрТЧ.НомерПартии = СокрЛП(СтрокаНомера.Значение); 
//			КонецЦикла;
//		КонецЕсли;
//		
//		докОбъект.Скоропортящийся = стрВход.Скоропортящийся;
//		докОбъект.Некачественный =  стрВход.Некачественный;

//		докОбъект.Производители.Очистить();		
//		Если ЗначениеЗаполнено(стрВход.ПроизводителиСписок) Тогда    
//			СпПроизводители = ЗначениеИзСтрокиВнутр(стрВход.ПроизводителиСписок);
//			Для Каждого Производитель из СпПроизводители Цикл
//				стрТЧ = ДокОбъект.Производители.Добавить();
//				стрТЧ.Площадка = Производитель.Площадка;
//				стрТч.Роль = СокрЛП(Производитель.Роль);
//				стрТЧ.Имя = СокрЛП(Производитель.Имя);
//			КонецЦикла;
//		КонецЕсли;
//		
//		докОбъект.УровниУпаковки.Очистить();
//		докобъект.Маркировка.Очистить();
//		
//		Если ЗначениеЗаполнено(стрВход.УровниУпаковки) Тогда 
//    		ТЗУровни = ЗначениеИзСтрокиВнутр(стрВход.УровниУпаковки);
//		Иначе
//			ТЗУровни = "";
//		КонецЕсли;
//		Если ТипЗнч(ТЗУровни) = Тип("ТаблицаЗначений") Тогда
//			для каждого стрУровня из ТЗУровни Цикл
//				стрТч = докобъект.УровниУпаковки.Добавить();
//				стрТЧ.НомерУровня = Перечисления.ВСД_УровниУпаковки.Получить(СтрУровня.НомерУровня-1);
//				стрТЧ.ФормаУпаковки = стрУровня.Упаковка;
//				стрТЧ.Количество = стрУровня.Колво;
//				Попытка	СзМаркировок = ЗначениеИзСтрокиВнутр(стрУровня.Маркировки); исключение СзМаркировок = ""; КонецПопытки;
//				Если ТипЗнч(СзМаркировок) = Тип("СписокЗначений") Тогда
//					для каждого стрМаркировки из СзМаркировок Цикл
//						стрТчМ = докобъект.Маркировка.Добавить();
//						стрТЧМ.Маркировка = стрМаркировки.Значение;
//						стрТЧМ.Класс = Перечисления.ВСД_Маркировка[стрМаркировки.Представление];//стрМаркировки.Представление;
//						стрТЧМ.НомерУровня = стрТЧ.НомерУровня;
//					КонецЦикла;
//				КонецЕсли;
//			КонецЦикла;
//		КонецЕсли;
//		
//		докобъект.СвязанныеДокументы.Очистить();
//		докобъект.МаршрутСледования.Очистить();
//		Если ЗначениеЗаполнено(стрВход.СвязанныеДокументы) Тогда    
//			СпСвязанныеДокументы = ЗначениеИзСтрокиВнутр(стрВход.СвязанныеДокументы);
//			Для Каждого строкаДок из СпСвязанныеДокументы Цикл
//				стрТЧ = ДокОбъект.СвязанныеДокументы.Добавить();
//				СтрТЧ.ТипДокумента = строкаДок.ТипДокумента;
//				стрТЧ.ДатаДокумента = СтрокаВДату(строкаДок.ДатаДокумента);
//				стрТЧ.НомерДокумента = строкаДок.НомерДокумента;
//				стрТЧ.СерияДокумента = строкаДок.СерияДокумента;
//				стрТЧ.ТипОтношенияДок = строкаДок.ТипОтношенияДок;
//			КонецЦикла;
//		КонецЕсли;
//		докобъект.ТтнДата = стрВход.ТтнДата;
//		докобъект.ТтнСерия = стрВход.ТтнСерия;
//		докобъект.ТтнНомер = стрВход.ТтнНомер;
//		докобъект.ТтнТип = стрВход.ТтнТип;
//		Если ЗначениеЗаполнено(стрВход.МаршрутСледования) Тогда    
//			Маршруты = ЗначениеИзСтрокиВнутр(стрВход.МаршрутСледования);
//			Для Каждого точкаМаршрута из Маршруты Цикл
//				стрТЧ = ДокОбъект.МаршрутСледования.Добавить();
//				стрТЧ.UUID = точкаМаршрута.UUID;
//				стрТЧ.НомерТочки = точкаМаршрута.НомерТочки;
//				стрТЧ.Перегрузка = точкаМаршрута.Перегрузка;
//				стрТЧ.Площадка = точкаМаршрута.ВыбПлощадка;
//				стрТЧ.ТипТранспорта  = точкаМаршрута.ТипТранспорта;
//				стрТЧ.номеравто = точкаМаршрута.номеравто;
//				стрТЧ.номерПрицепа = точкаМаршрута.номерПрицепа;
//				стрТЧ.номерКонтейнера = точкаМаршрута.номерКонтейнера;
//				стрТЧ.номерВагона = точкаМаршрута.номерВагона;
//				стрТЧ.НомерАвиарейса = точкаМаршрута.НомерАвиарейса;
//				стрТЧ.НазваниеСудна = точкаМаршрута.НазваниеСудна;
//			КонецЦикла;
//		КонецЕсли;

//		докОбъект.Страна_ГУИД = стрВход.Страна_ГУИД;

//		докОбъект.cargoInspected = стрВход.cargoInspected;
//		докОбъект.РезультатыИсследований = стрВход.РезультатыИсследований;
//		докОбъект.особыеотметки = стрВход.особыеотметки;
//		докОбъект.Местность = стрВход.Местность; //В гашении ВСДМестность
//		докОбъект.Записать(РежимЗаписиДокумента.Запись);// .Проведение);
//		СообщитьИнфо("Записан "+докОбъект+" "+докОбъект.Номер+" от "+докОбъект.Дата+" ["+докОбъект.uuid+"]");
//		Возврат докобъект.ссылка;
////	КонецЦикла;
//КонецФункции

//Функция СоздатьВСД_ВходящиеПоТЗВходящих() экспорт
//	Для каждого стрВход из ВСДВходящие Цикл
//		если НЕ стрвход.Отметка Тогда
//			Продолжить;	
//		КонецЕсли;
//		стрВход.ДокВСД = ЗаполнитьВСДВходящийИзТЗ(стрвход);
//	КонецЦикла;	
//КонецФункции

//********** ВСД Входящий / Возврат окончание

//Процедура ПолучитьОтветыПоСпискуВСД(сзДокументыКОтправке) Экспорт
//	Для каждого Стрдок Из сзДокументыКОтправке Цикл
//		_ВСД = Стрдок.Значение;
//		Попытка
//			//ПолучитьРезультат_ВСД2(СокрЛП(_ВСД.ApplicationID), _ВСД);
//		исключение
//			СообщитьИнфо(ОписаниеОшибки());
//		КонецПопытки;
//	КонецЦикла;
//КонецПроцедуры


// ***** Продукция v2  окончание

//**************************ВСД Партии v2 ****************************

//**************************ВСД Партии v2  окончание****************************
//*************** Объединение Партий v2 Окончание

// ***************** Транзакция v2

//Процедура ОтправитьСписокВСД(сзДокументыКОтправке) Экспорт
//		
//	СообщитьИнфо("Начало отправки документов");
//	
//	Для каждого Стрдок Из сзДокументыКОтправке Цикл
//		ДокВсдСсылка = Стрдок.Значение;
//		//Отправить_ВСД2_транзакция( _ВСД );
//		ПараметрыФункции = 
//		ВСД_Запросы.ВСД2_транзакция_Отправить(ПараметрыФункции, ДокВсдСсылка );
//	КонецЦикла;
//	РаскраситьТЧОтгрузки();
//	СообщитьИнфо("Отправка документов завершена");
//КонецПроцедуры

// ************************************************

//================== Версия 1.4 =============================== **************************************
Функция ВыбратьВидДокументаВСД(type)
	
    //{ VetDocumentType 
    //    TRANSPORT, = 1	= Транспортный ВСД.	
    //    PRODUCTIVE, = 2 	= Производственный ВСД.
    //    RETURNABLE, = 3 	= Возвратный ВСД.
    //    INCOMING, = 4  	= Входящий ВСД.
    //    OUTGOING, = 5  	= Исходящий ВСД.
    //}
	
	рез = "";
	Если type="TRANSPORT" Тогда
		рез = "ВСД";
	ИначеЕсли type="PRODUCTIVE" Тогда
		рез = "ВСД_Производство";
	ИначеЕсли type="INCOMING" Тогда
		рез = "ВСД_входящий";
	ИначеЕсли type="RETURNABLE" Тогда
		рез = "ВСД_возвратный";
	ИначеЕсли type="OUTGOING" Тогда
		// проверить !!!
		рез = "ВСД";
	Иначе
		СообщитьИнфо("Неопределенный вид ВСД ["+type+"]");
	КонецЕсли;
	
	Возврат рез;
КонецФункции

Процедура ЗагрузитьXML_ВСД(имяФайла, докОснование)
	Если ПустоеЗначение( докОснование )=1 Тогда 	
		Возврат;
	КонецЕсли;
	Если НайтиОшибки(имяФайла, докОснование)>0 Тогда 
		Возврат;
	КонецЕсли;		
	
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	//applicationId = xdto.application.applicationId;
	Попытка applicationId = xdto.Body.receiveApplicationResultResponse.application.applicationId; Исключение	applicationId = ""; КонецПопытки;//xdto.application.applicationId;
	
	Попытка	seList = xdto.Body.receiveApplicationResultResponse.application.result.prepareOutcomingConsignmentResponse.vetDocument;	Исключение	seList = ""; КонецПопытки;
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		// Аннулирование
		Попытка	seList = xdto.Body.receiveApplicationResultResponse.application.result.withdrawVetDocumentResponse.vetDocument; Исключение seList = ""; КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		// Входящие
		Попытка seList = xdto.Body.receiveApplicationResultResponse.application.result.getVetDocumentListResponse.vetDocumentList.vetDocument;Исключение	seList = "";	КонецПопытки;	
	КонецЕсли;
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		// Инвентаризация
		Попытка seList = xdto.Body.receiveApplicationResultResponse.application.result.resolveDiscrepancyResponse.vetDocumentList.vetDocument;Исключение	seList = "";	КонецПопытки;	
	КонецЕсли;
	
	//*** тут еще варианты
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		СообщитьИнфо("Отсутствуют / Не далось прочитать ВСД из "+имяФайла);
		Возврат ;
	КонецЕсли;
	
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		vetDocumentList = Новый Массив;
		vetDocumentList.Добавить(seList);
	Иначе
		vetDocumentList = seList;
	КонецЕсли;
	
	Для каждого vetDocument из vetDocumentList Цикл		
		uuid = vetDocument.uuid;
		st 	 = vetDocument.status;
		type = vetDocument.type;
		
		ВидДокумента = ВыбратьВидДокументаВСД(type);
		
		createDate = vetDocument.issueDate;
		lastUpdateDate = vetDocument.lastUpdateDate;
		
		consignorBusinessEntity = vetDocument.consignor.businessEntity.guid;
		consignorEnterprise 	= vetDocument.consignor.enterprise.guid;
		
		Попытка
			consigneeBusinessEntity = vetDocument.consignee.businessEntity.guid;
		Исключение
			consigneeBusinessEntity ="";
		КонецПопытки;
		Попытка
			consigneeEnterprise 	= vetDocument.consignee.enterprise.guid;
		Исключение
			consigneeEnterprise = "";
		КонецПопытки;
		
		batch = vetDocument.batch;
		
		product 	= batch.product.guid;
		subProduct 	= batch.subProduct.guid;

		Попытка
			productItemName = batch.productItem.name;
		Исключение
			СообщитьИнфо("Не удалось получить элемент [productItem]");
			productItemName = "";
		КонецПопытки;
		
		Попытка
			productItemGuid = batch.productItem.guid;
		Исключение			
			productItemGuid="";
		КонецПопытки;		
		Попытка
			productItemUuid = batch.productItem.uuid;
		Исключение
			productItemUuid="";
		КонецПопытки;
		volume 		= batch.volume;
		unitGuid	= batch.unit.guid;
		
		Попытка
			packingFormUuid	= batch.packingList.packingForm.uuid;			
		Исключение
			СообщитьИнфо("Не удалось получить элемент [packingForm] [uuid]");
			packingFormUuid = "";			
		КонецПопытки;
		Попытка
			packingFormName	= batch.packingList.packingForm.name;	
		Исключение
			packingFormName="";
			СообщитьИнфо("Не удалось получить элемент [packingForm] [name]");
		КонецПопытки;

		packingAmount = batch.packingAmount;
						
		//Попытка			
		//	producer = batch.producerList.producer.enterprise.guid;
		//Исключение
		//	producer = "";
		//КонецПопытки;
		ДатаИзготовления1="";
		ДатаИзготовления="";
		попытка			
			год = batch.dateOfProduction.firstDate.year;
			мес = batch.dateOfProduction.firstDate.month;
			день = batch.dateOfProduction.firstDate.day;
			ДатаИзготовления1 = Дата(год, мес, день);
		Исключение
			Попытка
				ДатаИзготовления = batch.dateOfProduction.informalDate;
			Исключение				
			КонецПопытки;
		КонецПопытки;				
		ДатаИзготовления2="";
		попытка
			год = batch.dateOfProduction.secondDate.year;
			мес = batch.dateOfProduction.secondDate.month;
			день = batch.dateOfProduction.secondDate.day;
			ДатаИзготовления2 = Дата(год, мес, день);
		Исключение			
		КонецПопытки;
		
		//ДатаСрокГодности
		попытка			
			год = batch.expiryDate.firstDate.year;
			мес = batch.expiryDate.firstDate.month;
			день = batch.expiryDate.firstDate.day;
			ДатаСрокГодности1 = Дата(год, мес, день);
		Исключение
			Попытка
				ДатаСрокГодности = batch.expiryDate.informalDate;
			Исключение				
			КонецПопытки;
		КонецПопытки;				
		ДатаСрокГодности2="";
		попытка
			год = batch.expiryDate.secondDate.year;
			мес = batch.expiryDate.secondDate.month;
			день = batch.expiryDate.secondDate.day;
			ДатаСрокГодности2 = Дата(год, мес, день);
		Исключение			
		КонецПопытки;
		
		owner = batch.owner.guid; //ХозСубъект
		ВладелецХС = НайтиХСпоGUID(owner);
				
		//Если ТипЗнч(докОснование) = Тип("ДокументСсылка.ВСД_транзакция") Тогда 
		//	докОбъект = НайтиВсд(applicationId, uuid, ВидДокумента, 1);
		//Иначе			
		//	докОбъект = НайтиВсд(applicationId, uuid, ВидДокумента);
		//КонецЕсли;
		докОбъект = НайтиВСДпоUUID( uuid );
		докОбъект.UUID = uuid;
		докОбъект.applicationId = applicationId;
		//Если докОбъект.ТекущийДокумент() <> докОснование Тогда 
			докОбъект.ДокументОснование = докОснование;
		//КонецЕсли;
		//док.UUID = Компонента.DocUUID;					
		
		Попытка 
			докОбъект.Отправитель_ХозСубъект 	= НайтиХСпоGUID(consignorBusinessEntity);
		Исключение			
		КонецПопытки;
		Попытка			
			докОбъект.Отправитель_Площадка 		= НайтиПлощадку(consignorEnterprise);
		Исключение			
		КонецПопытки;

		Попытка
			докОбъект.Получатель_ХозСубъект 	= НайтиХСпоGUID(consigneeBusinessEntity);
		Исключение			
		КонецПопытки;

		Попытка			
			докОбъект.Получатель_Площадка 		= НайтиПлощадку(consigneeEnterprise);
		Исключение			
		КонецПопытки;
		Попытка	докОбъект.Организация = Организация; Исключение КонецПопытки;	
		//докОбъект.Производитель_Площадка 	= НайтиПлощадку(producer);
		//Попытка
		//	докОбъект.Производитель_ХозСубъект = докОбъект.Производитель_Площадка.Контрагент;
		//Исключение
		//	СообщитьИнфо(ОписаниеОшибки());
		//КонецПопытки;		
		//ДокПартия.Перевозчик_ХозСубъект = ;
		докОбъект.Продукция 	= ВСД_Запросы.НайтиПродукцию(product);
		докОбъект.ВидПродукции 	= ВСД_Запросы.НайтиВидПродукции(subProduct);
		
		//докОбъект.Продукция_Элемент = Найти_Продукция_Элемент(productItemName, "", productItemUuid, докОбъект.Продукция, докОбъект.ВидПродукции);
		докОбъект.Продукция_Элемент = Найти_Продукция_Элемент2(batch.productItem, докОбъект.Продукция, докОбъект.ВидПродукции);
		//докОбъект.СвойствоНоменклатурыЗначение = докОбъект.Продукция_Элемент.СвойствоНоменклатурыЗначение;
		
		докОбъект.Количество 	= Число(volume);
		докОбъект.КоличествоМест = Число(packingAmount);
		ФормаУпаковки 			= НайтиФормуУпаковки( packingFormUuid, packingFormName);
		докОбъект.ФормаУпаковки = ФормаУпаковки;	

		докОбъект.ЕдиницаИзмерения = НайтиЕдИзмерения( unitGuid );;
		
		докОбъект.ДатаИзготовления1 = ДатаИзготовления1;
		докОбъект.ДатаИзготовления2 = ДатаИзготовления2;
		докОбъект.ДатаИзготовления =  ДатаИзготовления;
		докОбъект.ДатаСрокГодности = ДатаСрокГодности;
		докОбъект.ДатаСрокГодности1 = ДатаСрокГодности1;
		докОбъект.ДатаСрокГодности2 = ДатаСрокГодности2;
		
		докОбъект.Статус = st;		
		докОбъект.НаименованиеПродукции = докОбъект.Продукция_Элемент.Наименование;
		//докОбъект.Фирма = глПользователь.ОсновнаяФирма;
		//докОбъект.Автор = глПользователь;	
		  		
		//докОбъект.Дата = СтрокаВДату(createDate);
		докОбъект.Дата = СтрокаВДатаВремя(lastUpdateDate);
				
		докОбъект.Записать(РежимЗаписиДокумента.Проведение);

		СообщитьИнфо("Записан "+ВидДокумента+" "+докОбъект.Номер+" от "+докОбъект.Дата+" ["+uuid+"]");
	КонецЦикла;

	Если ПустоеЗначение(докОснование)=0 Тогда
		докОснованиеОбъект = докОснование.ПолучитьОбъект();
		докОснованиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;		
КонецПроцедуры

Процедура ЗагрузитьXML_Партии(имяФайла, _Смещение = 0, _УдалятьПартии = 0) 
	
	Если НайтиОшибки(имяФайла)>0 Тогда 
		Возврат;
	КонецЕсли;	
	
    СообщитьИнфо("Загрузка XML-файла: "+ИмяФайла);    
	ЧтениеXML = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Попытка	seList = xdto.Body.receiveApplicationResultResponse.application.result.prepareOutcomingConsignmentResponse.StockEntry;	Исключение	seList = ""; КонецПопытки;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		Попытка	seList = xdto.Body.receiveApplicationResultResponse.application.result.getStockEntryListResponse.stockEntryList.StockEntry;	Исключение seList = ""; КонецПопытки;
	КонецЕсли;
	
	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
		СообщитьИнфо("Партии для записи в справочник отсутствют в "+имяФайла);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
		stockEntryList = Новый Массив;
		stockEntryList.Добавить(seList);
	Иначе
		stockEntryList = seList;
	КонецЕсли;
	Попытка ПришлоПартий = Число(stockEntryList.Владелец.count); исключение ПришлоПартий = 1; КонецПопытки;
	СообщитьИнфо("Получено "+ПришлоПартий+" записей");
	Для каждого stockEntry из stockEntryList Цикл		
					
		Партия = ЗаписатьПартию(stockEntry);
		
//		Если докОснование<>"" Тогда 
//			Партия.ДокОснование = докОснование;
//			Партия.Записать();
//		КонецЕсли;
			
	КонецЦикла;
	Если ПришлоПартий = 1000 Тогда   // 1000 стоит в запросе на получение
		УдалитьXML( имяФайла ); //На случай рекурсивного вызова
		//Площадку берем из Констант, либо передавать в параметрах функции
		ПолучитьПартии(Отправитель_Площадка, _Смещение+1000, 0);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьРезультат_ВСД(applicationID, докСсылка, Пауза = Истина ) Экспорт
	Если ПустоеЗначение(applicationID)=1 Тогда
		СообщитьИнфо("Пустая ссылка applicationID");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	Если Пауза Тогда		
		Пауза( );
	КонецЕсли;	
	
	СообщитьИнфо("Отправляем запрос ["+докСсылка+"]" );
	//Результат = КомпонентаНаСервере.SendRequestResult( applicationID );
	Результат = ПолучитьРезультатСервер( applicationID );

	СохранитьСтатусЗапроса(докСсылка);
	СохранитьИмяОтветаВДокументе(докСсылка);
	
	//Если НайтиОшибки(КомпонентаНаСервере.LogFilename, докСсылка)>0 Тогда 
	//	Возврат Результат;
	//КонецЕсли;		
	
	ЗагрузитьXML_ВСД( КомпонентаНаСервере.LogFilename, докСсылка);	

	ЗагрузитьXML_Партии( КомпонентаНаСервере.LogFilename );
		
	УдалитьXML( КомпонентаНаСервере.LogFilename );
	
	Возврат Результат;
КонецФункции

Функция  ОтправитьТранзакцию(ЗапросXML, док) Экспорт
	метод = КомпонентаНаСервере.GetMethod();
    метод.Service = "platform/services/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";

	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	СохранитьИмяЗапросаВДокументе(док);
	
	УдалитьXML( КомпонентаНаСервере.LogFilename);

	Если ПустоеЗначение(appID)=0 Тогда

		Результат = "";
		//СообщитьИнфо("Результат = "+Результат);
		Для А=1 По 10 Цикл
			Если (Результат="IN_PROCESS") или (ПустоеЗначение(Результат)=1) Тогда
				Пауза();
				Результат = ПолучитьРезультат_ВСД( appID, док);
				СообщитьИнфо("Результат = "+Результат);
			КонецЕсли;
		КонецЦикла;
	Иначе
		СообщитьОшибку("ответ сервера не получен");
	КонецЕсли;

	Возврат appID;
КонецФункции

// ----------- исход 1.4
Функция Проверка_ВСД_Исходящий(док)
	Если НЕ(ЗначениеЗаполнено(Док)) тогда
		Возврат 0;	
	КонецЕсли;
	
	Результат = 1; //все в порядке
	
	Если ПустаяСтрока(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		СообщитьИнфо("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;

	Если ПустаяСтрока(док.Отправитель_Площадка.GUID)=1 Тогда 
		СообщитьИнфо("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		СообщитьИнфо("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Получатель_Площадка.GUID)=1 Тогда 
		СообщитьИнфо("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Партия.Производитель_Площадка.GUID)=1 Тогда 
		СообщитьИнфо("Не указан док.Партия.Производитель_Площадка.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Перевозчик_ХозСубъект.GUID)=1 Тогда 
		СообщитьИнфо("Не указан Перевозчик_ХозСубъект.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Партия.GUID)=1 Тогда 
		СообщитьИнфо("Не указан Партия.GUID Выполните синхронизацию справочников");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.Партия.ВсдДата)=1 Тогда 
		СообщитьИнфо("Не указан Партия.ВсдДата");
		Результат = 0;
	КонецЕсли;
	//Если ПустаяСтрока(док.Партия.ФормаУпаковки)=1 Тогда 
	//	СообщитьИнфо("Не указан Партия.ФормаУпаковки");
	//	Результат = 0;
	//КонецЕсли;
	Если ПустаяСтрока(док.Продукция)=1 Тогда 
		СообщитьИнфо("Не указан Продукция");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.ВидПродукции)=1 Тогда 
		СообщитьИнфо("Не указан ВидПродукции");
		Результат = 0;
	КонецЕсли;
	Если ПустаяСтрока(док.НаименованиеПродукции)=1 Тогда 
		СообщитьИнфо("Не указан НаименованиеПродукции");
		Результат = 0;
	КонецЕсли;
	//Если ПустаяСтрока(док.ЕдиницаИзмерения)=1 Тогда 
	//	СообщитьИнфо("Не указан ЕдиницаИзмерения");
	//	Результат = 0;
	//КонецЕсли;
	//Если ПустаяСтрока(док.ФормаУпаковки)=1 Тогда 
	//	СообщитьИнфо("Не указан ФормаУпаковки");
	//	Результат = 0;
	//КонецЕсли;

//	Если ПустаяСтрока(док.applicationID)=0 Тогда 
//		СообщитьИнфо("ВСД уже отправлен "+док);
//		Результат = 0;
//	КонецЕсли;
	Если ПустаяСтрока( СокрЛП(док.UUID) )=0 Тогда 
		СообщитьИнфо("ВСД уже отправлен "+док);
		Результат = 0;
	КонецЕсли;
	//Если док.ФормаВСД=0 Тогда 
	//	СообщитьИнфо("Не указана форма ВСД "+док);
	//	Результат = 0;
	//КонецЕсли;
	Если  док.Количество=0 Тогда 
		СообщитьИнфо("не указано Количество "+док);
		Результат = 0;
	КонецЕсли;
	//Если док.КоличествоМест =0 Тогда 
	//	СообщитьИнфо("не указано Количество коробов"+док);
	//	Результат = 0;
	//КонецЕсли;

	Если ПустаяСтрока(док.Партия.Продукция.Тип)=1 Тогда 
		СообщитьИнфо("Не указан Партия.Продукция.Тип");
		Результат = 0;
	КонецЕсли;

	
	Возврат Результат;
КонецФункции

Функция ПолучитьРезультат_ВСД_Исходящий( докСсылка ) Экспорт	

	applicationID = СокрЛП(докСсылка.applicationID);
	Если ПустаяСтрока(applicationID)=1 Тогда
		СообщитьИнфо("Пустая ссылка applicationID");
		Возврат "Пустая ссылка applicationID";
	КонецЕсли;
	
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;

	СообщитьИнфо("Отправляем запрос ВСД_Исходящий_Результат ["+докСсылка+"]" );
	Результат = КомпонентаНаСервере.Send_VSD_OUT_Result( applicationID );

	СохранитьСтатусЗапроса(докСсылка);

	Если Результат="COMPLETED" Тогда

		ЗагрузитьXML_Партии( КомпонентаНаСервере.LogFilename );
		
		//Если докСсылка.Вид()="ВСД_исходящий" Тогда 
		//	ДокОснование = докСсылка.ДокОснование;
		//Иначе
			ДокОснование = докСсылка;
		//КонецЕсли;
		//
		ЗагрузитьXML_ВСД( КомпонентаНаСервере.LogFilename, ДокОснование);
		
	Иначе
		СообщитьИнфо(докСсылка.Комментарий);		
	КонецЕсли;
			
	УдалитьXML( КомпонентаНаСервере.LogFilename );
	
	Возврат Результат;
КонецФункции

Функция Отправить_ВСД_Исходящий(док) Экспорт
	
	Если Проверка_ВСД_Исходящий(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;
	
	СообщитьИнфо("Отправляем запрос ВСД_Исходящий ["+док+"]");
	Результат = КомпонентаНаСервере.Send_VSD_OUT( док );
	
	//Отладка();
	УдалитьXML( КомпонентаНаСервере.LogFilename );
	
	Попытка
		СохранитьСтатусЗапроса(док);
		
		Если Результат="ACCEPTED" Тогда 
			//ВСД отправлен успешно, осталось получить ответ				
			Пауза();			
			
			Результат = ПолучитьРезультат_ВСД_Исходящий( док );
			СообщитьИнфо("Результат = "+Результат);
			Для А=1 По 10 Цикл
				Если (Результат="IN_PROCESS") Тогда 
					Пауза();
					Результат = ПолучитьРезультат_ВСД_Исходящий( док );
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		СообщитьИнфо("Не удалось записать ApplicationID в документ ВСД "+ОписаниеОшибки());
	КонецПопытки;		

	Возврат 1;
	
КонецФункции


//------------ ВСД_транзакция 1.4

Функция Проверка_ВСД_транзакция(док)
	Если НЕ(ЗначениеЗаполнено(Док)) тогда
		Возврат Ложь;
	КонецЕсли;
	Результат = Истина; //все в порядке
	Если СокрЛП(Док.Статус) = "COMPLETED" Тогда		
		СообщитьИнфо("Документ "+Док+" уже отправлен ");
		Результат = Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Док.Организация) Тогда
		СообщитьИнфо("Не указана Организация в документе "+Док);
		Результат = Ложь;
	КонецЕсли;
		
	Если ПустаяСтрока(док.Отправитель_ХозСубъект.GUID)=1 Тогда 
		СообщитьИнфо("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников "+Док);
		Результат = Ложь;
	КонецЕсли;

	Если ПустаяСтрока(док.Отправитель_Площадка.GUID)=1 Тогда 
		СообщитьИнфо("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников "+Док);
		Результат = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(док.Получатель_ХозСубъект.GUID)=1 Тогда 
		СообщитьИнфо("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников "+док);
		Результат = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(док.Получатель_Площадка.GUID)=1 Тогда 
		СообщитьИнфо("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников "+док);
		Результат = Ложь;
	КонецЕсли;
	Если Не(ЗначениеЗаполнено(док.ТермическоеСостояние)) Тогда
		СообщитьИнфо("Не указаны Термические условия перемещения товаров в "+Док);
		Результат = Ложь;
	КонецЕсли;	
	
	Для Каждого ТекСтр из Док.Товары Цикл		
		
		Если ПустаяСтрока(ТекСтр.Партия.GUID)=1 Тогда 
			СообщитьИнфо("Не указан Партия.GUID в " + Док);
			Результат = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(ТекСтр.Партия.ВсдДата)=1 Тогда 
			СообщитьИнфо("Не указан Партия.ВсдДата");
			Результат = Ложь;
		КонецЕсли;
		Если  ТекСтр.Количество=0 Тогда 
			СообщитьИнфо("не указано Количество "+док);
			Результат = Ложь;
		КонецЕсли;
		Если  ТекСтр.Количество>ТекСтр.Партия.Количество Тогда 
			СообщитьИнфо("В строке №"+ ТекСтр.НомерСтроки +" не хватает "+(ТекСтр.Количество-ТекСтр.Партия.Количество)+" = списывается количество "+ТекСтр.Количество+" больше, чем в Партии "+ТекСтр.Партия.Количество+" "+док);
			Результат = Ложь;
		КонецЕсли;
	
		Если ПустаяСтрока(ТекСтр.Партия.Продукция.Тип)=1 Тогда 
			СообщитьИнфо("Не указан Партия.Продукция.Тип");
			Результат = Ложь;
		КонецЕсли;
	
	КонецЦикла;
		
	Возврат Результат;
КонецФункции

Функция ВСД_транзакция_ЗапросXML(док)
	Запрос_Шапка = "
	|<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|                  xmlns:app='http://api.vetrf.ru/schema/cdm/application'
	|                  xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/applications'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:com='http://api.vetrf.ru/schema/cdm/argus/common'
	|                  xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'
	|                  xmlns:vet='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
	|                  xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production'
	|                  xmlns:shp='http://api.vetrf.ru/schema/cdm/argus/shipment'>
	|   <SOAP-ENV:Header/>
	|   <SOAP-ENV:Body>
	|      <ws:submitApplicationRequest>
	|         <ws:apiKey>" + param_api_key + "</ws:apiKey>
	|         <app:application>
	|            <app:serviceId>mercury-g2b.service</app:serviceId>
	|            <app:issuerId>" + param_issuer_id + "</app:issuerId>
	|            <app:issueDate>"+ ДатаXML(ТекущаяДата(), "T00:00:00") +"</app:issueDate>
	|            <app:data>
	|<merc:prepareOutcomingConsignmentRequest xmlns:xs='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>
	|        <merc:localTransactionId>[GUID]</merc:localTransactionId>
	|        <merc:initiator>
	|          <com:login>"+СокрЛП( param_intiator_login )+"</com:login>
	|        </merc:initiator>
	|";

	delivery = "
	|        <merc:delivery>
	|          <vet:deliveryDate>" + ДатаXML(док.ТтнДата, "T00:00:00") + "</vet:deliveryDate>
	|          <vet:consignor>
	|            <ent:businessEntity>
	|              <base:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</base:guid>
	|            </ent:businessEntity>
	|            <ent:enterprise>
	|              <base:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</base:guid>
	|            </ent:enterprise>
	|          </vet:consignor>
	|          <vet:consignee>
	|            <ent:businessEntity>
	|              <base:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</base:guid>
	|            </ent:businessEntity>
	|            <ent:enterprise>
	|              <base:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</base:guid>
	|            </ent:enterprise>
	|          </vet:consignee>
	|";

	consignment=""; vetCertificate ="";
	
	Для каждого строкаТовары из  Док.Товары Цикл
		consignment = consignment+ "
		|          <vet:consignment id='id"+ строкаТовары.НомерСтроки +"'>
		|            <vet:productType>"+ строкаТовары.Партия.Продукция.Тип +"</vet:productType>
		|            <vet:product>
		|              <base:guid>"+ СокрЛП(строкаТовары.Партия.Продукция.GUID) +"</base:guid>
		|            </vet:product>
		|            <vet:subProduct>
		|              <base:guid>"+ СокрЛП(строкаТовары.Партия.ВидПродукции.GUID) +"</base:guid>
		|            </vet:subProduct>
		|            <vet:productItem>
		|";
		Если ПустоеЗначение(строкаТовары.Партия.Продукция_Элемент.GUID)=0 Тогда
			consignment = consignment+ "
			|              <base:guid>"+ СокрЛП(строкаТовары.Партия.Продукция_Элемент.GUID) +"</base:guid>
			|";
		Иначе
			consignment = consignment+ "
			|              <prod:name>"+ СокрЛП(строкаТовары.Партия.Продукция_Элемент.Наименование) +"</prod:name>
			|";

		КонецЕсли;
		// планируют добавить реквизиты в Ветис API в марте
		//Если ПустоеЗначение(док.КодПродукции)=0 Тогда
		//	consignment = consignment+ "
		//	|              <prod:сode>"+ СокрЛП(док.Партия.Продукция_Элемент.GUID) +"</prod:сode>
		//	|";
		//КонецЕсли;
		//Если ПустоеЗначение(док.Штрихкод)=0 Тогда
		//	consignment = consignment+ "
		//	|              <prod:globalID>"+ СокрЛП(док.Штрихкод) +"</prod:globalID>
		//	|";
		//КонецЕсли;
		consignment = consignment+ "
		//|              <prod:name>"+ СокрЛП(док.Партия.Продукция_Элемент.Наименование) +"</prod:name>
		|            </vet:productItem>
		|            <vet:volume>"+ Формат(строкаТовары.Количество, "ЧРД=.; ЧГ=0;ЧН=0") +"</vet:volume>
		|            <vet:unit>
		|              <base:guid>"+ СокрЛП(строкаТовары.ЕдиницаИзмерения.GUID) +"</base:guid>
		|            </vet:unit>
		|";

		Если строкаТовары.КоличествоМест>0 Тогда
			consignment = consignment+ "
			|            <vet:packingList>
			|              <com:packingForm>
			|                <base:uuid>"+ СокрЛП(строкаТовары.ФормаУпаковки.GUID) +"</base:uuid>
			|              </com:packingForm>
			|            </vet:packingList>
			|            <vet:packingAmount>"+ строкаТовары.КоличествоМест +"</vet:packingAmount>
			|";
		КонецЕсли;
		consignment = consignment+ "
		|            <vet:dateOfProduction>
		|";
		Если (ПустоеЗначение(строкаТовары.Партия.ДатаИзготовления1)=0) Тогда
			consignment = consignment+ "
		|              <vet:firstDate>
		|                <base:year>"+ДатаГод(строкаТовары.Партия.ДатаИзготовления1)+"</base:year>
		|                <base:month>"+ ДатаМесяц(строкаТовары.Партия.ДатаИзготовления1) +"</base:month>
		|                <base:day>"+ ДатаЧисло(строкаТовары.Партия.ДатаИзготовления1) +"</base:day>
		|                <base:hour>0</base:hour>
		|              </vet:firstDate>
		|";
	КонецЕсли;
		Если ((ПустоеЗначение(строкаТовары.Партия.ДатаИзготовления2)=0) и
				(строкаТовары.Партия.ДатаИзготовления2 > строкаТовары.Партия.ДатаИзготовления1)) Тогда
			consignment=consignment+"
			|              <vet:secondDate>
			|                <base:year>"+ ДатаГод(строкаТовары.Партия.ДатаИзготовления2) +"</base:year>
			|                <base:month>"+ ДатаМесяц(строкаТовары.Партия.ДатаИзготовления2) +"</base:month>
			|                <base:day>"+ ДатаЧисло(строкаТовары.Партия.ДатаИзготовления2) +"</base:day>
			|                <base:hour>0</base:hour>
			|              </vet:secondDate>
			|";
		КонецЕсли;
		consignment=consignment+"
		|              <vet:informalDate />
		|            </vet:dateOfProduction>
		|            <vet:expiryDate>
		|";

		Если (ПустоеЗначение(строкаТовары.Партия.ДатаСрокГодности1)=0) Тогда
			consignment=consignment+"
			|              <vet:firstDate>
			|                <base:year>"+ ДатаГод(строкаТовары.Партия.ДатаСрокГодности1) +"</base:year>
			|                <base:month>"+ ДатаМесяц(строкаТовары.Партия.ДатаСрокГодности1) +"</base:month>
			|                <base:day>"+ ДатаЧисло(строкаТовары.Партия.ДатаСрокГодности1) +"</base:day>
			|                <base:hour>0</base:hour>
			|              </vet:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(строкаТовары.Партия.ДатаСрокГодности2)=0) и
				(строкаТовары.Партия.ДатаСрокГодности2 > строкаТовары.Партия.ДатаСрокГодности1)) Тогда
			consignment=consignment+"
			|              <vet:secondDate>
			|                <base:year>"+ ДатаГод(строкаТовары.Партия.ДатаСрокГодности2) +"</base:year>
			|                <base:month>"+ ДатаМесяц(строкаТовары.Партия.ДатаСрокГодности2) +"</base:month>
			|                <base:day>"+ ДатаЧисло(строкаТовары.Партия.ДатаСрокГодности2) +"</base:day>
			|                <base:hour>0</base:hour>
			|              </vet:secondDate>
			|";
		КонецЕсли;
		consignment=consignment+"
		|              <vet:informalDate />
		|            </vet:expiryDate>
		|            <vet:perishable>false</vet:perishable>
		|            <vet:countryOfOrigin>
		|              <base:uuid>"+ СокрЛП( Страна.UUID) +"</base:uuid>
		|            </vet:countryOfOrigin>
		|            <vet:producerList />
		|            <vet:productMarkingList />
		|            <vet:lowGradeCargo>false</vet:lowGradeCargo>
		|            <vet:productName>"+ СокрЛП(строкаТовары.Партия.НаименованиеПродукции) +"</vet:productName>
		|            <vet:productCode />
		|            <vet:sourceStockEntry>
		|              <base:guid>"+ СокрЛП(строкаТовары.Партия.GUID) +"</base:guid>
		|            </vet:sourceStockEntry>
		|          </vet:consignment>
		|";

		vetCertificate  = vetCertificate + "
		|            <vet:vetCertificate for='id"+ строкаТовары.НомерСтроки +"'>
		|              <vet:issueSeries />
		|              <vet:issueNumber />
		|              <vet:issueDate>"+ ДатаXML(док.Дата) +"</vet:issueDate>
		|              <vet:form>LIC2</vet:form>
		|          <vet:consignor>
		|            <ent:businessEntity>
		|              <base:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</base:guid>
		|            </ent:businessEntity>
		|            <ent:enterprise>
		|              <base:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</base:guid>
		|            </ent:enterprise>
		|          </vet:consignor>
		|          <vet:consignee>
		|            <ent:businessEntity>
		|              <base:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</base:guid>
		|            </ent:businessEntity>
		|            <ent:enterprise>
		|              <base:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</base:guid>
		|            </ent:enterprise>
		|          </vet:consignee>
		|              <vet:batch>
		|            <vet:productType>"+ строкаТовары.Партия.Продукция.Тип +"</vet:productType>
		|            <vet:product>
		|              <base:guid>"+ СокрЛП(строкаТовары.Партия.Продукция.GUID) +"</base:guid>
		|            </vet:product>
		|            <vet:subProduct>
		|              <base:guid>"+ СокрЛП(строкаТовары.Партия.ВидПродукции.GUID) +"</base:guid>
		|            </vet:subProduct>
		|            <vet:productItem>
		|";
		Если ПустоеЗначение(строкаТовары.Партия.Продукция_Элемент.GUID)=0 Тогда
			vetCertificate=vetCertificate+"
			|              <base:guid>"+ СокрЛП(строкаТовары.Партия.Продукция_Элемент.GUID) +"</base:guid>
			|";
		Иначе
			vetCertificate=vetCertificate+"
			|              <prod:name>"+ СокрЛП(строкаТовары.Партия.Продукция_Элемент.Наименование) +"</prod:name>
			|";

		КонецЕсли;
		vetCertificate=vetCertificate+"
		//|              <prod:name>"+ СокрЛП(док.Партия.Продукция_Элемент.Наименование) +"</prod:name>
		|            </vet:productItem>
		|            <vet:volume>"+ Формат(строкаТовары.Количество, "ЧРД=.; ЧГ=0;ЧН=0") +"</vet:volume>
		|            <vet:unit>
		|              <base:guid>"+ СокрЛП(строкаТовары.ЕдиницаИзмерения.GUID) +"</base:guid>
		|            </vet:unit>
		|";
		Если строкаТовары.КоличествоМест>0 Тогда
			vetCertificate=vetCertificate+"
			|            <vet:packingList>
			|              <com:packingForm>
			|                <base:uuid>"+ СокрЛП(строкаТовары.ФормаУпаковки.GUID) +"</base:uuid>
			|              </com:packingForm>
			|            </vet:packingList>
			|            <vet:packingAmount>"+ строкаТовары.КоличествоМест +"</vet:packingAmount>
			|";
		КонецЕсли;
		vetCertificate=vetCertificate+"
		|            <vet:dateOfProduction>
		|";

		Если (ПустоеЗначение(строкаТовары.Партия.ДатаИзготовления1)=0) Тогда
			vetCertificate=vetCertificate+"
			|              <vet:firstDate>
			|                <base:year>"+ДатаГод(строкаТовары.Партия.ДатаИзготовления1)+"</base:year>
			|                <base:month>"+ ДатаМесяц(строкаТовары.Партия.ДатаИзготовления1) +"</base:month>
			|                <base:day>"+ ДатаЧисло(строкаТовары.Партия.ДатаИзготовления1) +"</base:day>
			|                <base:hour>0</base:hour>
			|              </vet:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(строкаТовары.Партия.ДатаИзготовления2)=0) и
				(строкаТовары.Партия.ДатаИзготовления2 > строкаТовары.Партия.ДатаИзготовления1)) Тогда
			vetCertificate=vetCertificate+"
			|              <vet:secondDate>
			|                <base:year>"+ ДатаГод(строкаТовары.Партия.ДатаИзготовления2) +"</base:year>
			|                <base:month>"+ ДатаМесяц(строкаТовары.Партия.ДатаИзготовления2) +"</base:month>
			|                <base:day>"+ ДатаЧисло(строкаТовары.Партия.ДатаИзготовления2) +"</base:day>
			|                <base:hour>0</base:hour>
			|              </vet:secondDate>
			|";
		КонецЕсли;
		vetCertificate=vetCertificate+"
		|              <vet:informalDate />
		|            </vet:dateOfProduction>
		|            <vet:expiryDate>
		|";
		Если (ПустоеЗначение(строкаТовары.Партия.ДатаСрокГодности1)=0) Тогда
			vetCertificate=vetCertificate+"
			|              <vet:firstDate>
			|                <base:year>"+ ДатаГод(строкаТовары.Партия.ДатаСрокГодности1) +"</base:year>
			|                <base:month>"+ ДатаМесяц(строкаТовары.Партия.ДатаСрокГодности1) +"</base:month>
			|                <base:day>"+ ДатаЧисло(строкаТовары.Партия.ДатаСрокГодности1) +"</base:day>
			|                <base:hour>0</base:hour>
			|              </vet:firstDate>
			|";
		КонецЕсли;
		Если ((ПустоеЗначение(строкаТовары.Партия.ДатаСрокГодности2)=0) и
				(строкаТовары.Партия.ДатаСрокГодности2 > строкаТовары.Партия.ДатаСрокГодности1)) Тогда
			vetCertificate=vetCertificate+"
			|              <vet:secondDate>
			|                <base:year>"+ ДатаГод(строкаТовары.Партия.ДатаСрокГодности2) +"</base:year>
			|                <base:month>"+ ДатаМесяц(строкаТовары.Партия.ДатаСрокГодности2) +"</base:month>
			|                <base:day>"+ ДатаЧисло(строкаТовары.Партия.ДатаСрокГодности2) +"</base:day>
			|                <base:hour>0</base:hour>
			|              </vet:secondDate>
			|";
		КонецЕсли;
		vetCertificate=vetCertificate+"
		|              <vet:informalDate />
		|            </vet:expiryDate>
		|            <vet:perishable>false</vet:perishable>
		|            <vet:countryOfOrigin>
		|              <base:uuid>"+ СокрЛП( Страна.UUID) +"</base:uuid>
		|            </vet:countryOfOrigin>
		|            <vet:productMarkingList />
		|            <vet:lowGradeCargo>false</vet:lowGradeCargo>
		//|                <vet:producerList>
		//|                  <ent:producer>
		//|                    <ent:enterprise>
		//|                      <base:guid>"+ СокрЛП(док.Партия.Производитель_Площадка.GUID) +"</base:guid>
		//|                    </ent:enterprise>
		//|                  </ent:producer>
		//|                </vet:producerList>
		|              </vet:batch>
		|              <vet:productName>"+ СокрЛП(строкаТовары.НаименованиеПродукции) +"</vet:productName>
		|              <vet:productCode />
		|              <vet:purpose>
		|                <base:guid>"+ СокрЛП( ВСДЦель.Guid ) +"</base:guid>
		|              </vet:purpose>";
		Если ПустоеЗначение(док.Перевозчик_ХозСубъект) = 0 Тогда
			vetCertificate=vetCertificate+"
			|              <vet:broker>
			|                <base:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</base:guid>
			|              </vet:broker>";
		КонецЕсли;
		vetCertificate=vetCertificate+"
		|              <vet:transportInfo>
		|                <shp:transportType>1</shp:transportType>
		|                <shp:transportNumber>
		|                  <shp:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</shp:vehicleNumber>
		|                </shp:transportNumber>
		|              </vet:transportInfo>
		|              <vet:cargoReloadingPointList />
		|              <vet:cargoInspected>"+ Нашебулево(док.cargoInspected) +"</vet:cargoInspected>
		|              <vet:cargoExpertized>"+  Нашебулево(док.cargoExpertized) +"</vet:cargoExpertized>
		|              <vet:expertiseInfo>"+ СокрЛП(док.Экспертиза) +"</vet:expertiseInfo>
		|              <vet:confirmedBy>
		|                <com:login>"+ СокрЛП( param_vetdoctor_login) +"</com:login>
		|              </vet:confirmedBy>
		|              <vet:locationProsperity>"+ СокрЛП(док.Местность) +"</vet:locationProsperity>
		|              <vet:importPermit />
		|              <vet:transferPermit />
		|              <vet:specialMarks>"+ СокрЛП(док.ОсобыеОтметки) +"</vet:specialMarks>
		|              <vet:withdrawedBy />
		|              <vet:utilizedBy />
		|            </vet:vetCertificate>
		|";

	КонецЦикла;


	accompanyingForms_Шапка = "
	|          <vet:accompanyingForms>
	|            <vet:waybill>
	|              <shp:issueSeries />
	|              <shp:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</shp:issueNumber>
	|              <shp:issueDate>"+ ДатаXML(док.ТтнДата) +"</shp:issueDate>
	|              <shp:type>1</shp:type>
	|              <shp:consignor>
	|                <ent:businessEntity />
	|                <ent:enterprise />
	|              </shp:consignor>
	|              <shp:consignee>
	|                <ent:businessEntity />
	|                <ent:enterprise />
	|              </shp:consignee>";
	Если ПустоеЗначение(док.Перевозчик_ХозСубъект) = 0 Тогда
		accompanyingForms_Шапка = accompanyingForms_Шапка +"
		|              <shp:broker>
		|                <base:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</base:guid>
		|              </shp:broker>";
	КонецЕсли;
	accompanyingForms_Шапка = accompanyingForms_Шапка +"
	|              <shp:transportInfo>
	|                <shp:transportType>1</shp:transportType>
	|                <shp:transportNumber>
	|                  <shp:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</shp:vehicleNumber>
	|                </shp:transportNumber>
	|              </shp:transportInfo>
	|              <shp:transportStorageType>"+ ТермическиеУсловияПеревозки.Получить( док.ТермическоеСостояние - 1 ) +"</shp:transportStorageType>
	|              <shp:cargoReloadingPointList />
	|            </vet:waybill>
	|";


	ЗапросПодвал = "
	|          </vet:accompanyingForms>
	|        </merc:delivery>
	|      </merc:prepareOutcomingConsignmentRequest>
   |          </app:data>
   |         </app:application>
   |      </ws:submitApplicationRequest>
   |   </SOAP-ENV:Body>
   |</SOAP-ENV:Envelope>
   |";

	Запрос = Запрос_Шапка+
		delivery+
		consignment+
		accompanyingForms_Шапка+
		vetCertificate+
		ЗапросПодвал;

	Возврат Запрос;	
	
КонецФункции

Функция Отправить_ВСД_транзакция(док) Экспорт
	
	Если Проверка_ВСД_транзакция(док)=0 Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Организация = док.Организация;//док.ДокументОснование.Организация;
	Инициализация();
	Если НЕ ЗначениеЗаполнено(СписокКонстант.Получить("ВСДЦель")) Тогда
		СообщитьИнфо("Заполните параметр ВСД Цель");
		Возврат "";
	КонецЕсли;
	Отправитель_Площадка = Док.Отправитель_Площадка;
	
	СообщитьИнфо("Отправляем запрос Send_VSD ["+док+"]" );
	ЗапросXML = ВСД_транзакция_ЗапросXML(док);
	
//	appID = ОтправитьЗапросXML(ЗапросXML, док);
	appID = ОтправитьТранзакцию(ЗапросXML, док);
	
	//СохранитьИмяЗапросаОтветаВДокументе( док, истина );
	Возврат appID;
	
КонецФункции
// ************ Транзакция 1.4 окончание

// *********  Партии 1.4
Функция ПолучитьПартии_ТекстЗапросаSoap(_Отправитель_Площадка, _Смещение=0) Экспорт

	//стандартное поведение функции
	Если ПустоеЗначение(_Отправитель_Площадка.GUID)=1 Тогда
		СообщитьИнфо("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;

	//выражение [GUID] будет заменено на новый Guid в формате: d82d83f7-944b-45e9-88dc-67892eae1e3e

	Запрос = "
	|<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'
	|                  xmlns:ws='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
	|                  xmlns:app='http://api.vetrf.ru/schema/cdm/application'
	|                  xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/applications'
	|                  xmlns:base='http://api.vetrf.ru/schema/cdm/base'
	|                  xmlns:com='http://api.vetrf.ru/schema/cdm/argus/common'
	|                  xmlns:ent='http://api.vetrf.ru/schema/cdm/cerberus/enterprise'
	|                  xmlns:ikar='http://api.vetrf.ru/schema/cdm/ikar'
	|                  xmlns:vet='http://api.vetrf.ru/schema/cdm/mercury/vet-document'
	|                  xmlns:prod='http://api.vetrf.ru/schema/cdm/argus/production'
	|                  xmlns:shp='http://api.vetrf.ru/schema/cdm/argus/shipment'>
	|   <SOAP-ENV:Header/>
	|   <SOAP-ENV:Body>
	|      <ws:submitApplicationRequest>
	|         <ws:apiKey>" + param_api_key + "</ws:apiKey>
	|         <app:application>
	|            <app:serviceId>mercury-g2b.service</app:serviceId>
	|            <app:issuerId>" + param_issuer_id + "</app:issuerId>
	|            <app:issueDate>"+ ДатаXML(ТекущаяДата(), "T00:00:00") +"</app:issueDate>
	|            <app:data>
				|<merc:getStockEntryListRequest>
				|        <merc:localTransactionId>[GUID]</merc:localTransactionId>
				|        <merc:initiator>
				|          <com:login>"+param_intiator_login+"</com:login>
				|        </merc:initiator>
				|        <base:listOptions>
				|        <base:count>1000</base:count>
				|        <base:offset>"+СтрЗаменить( _Смещение , Символы.НПП ,"")+"</base:offset>
				|        </base:listOptions>
				|        <ent:enterpriseGuid>"+СокрЛП(_Отправитель_Площадка.GUID)+"</ent:enterpriseGuid>
				|</merc:getStockEntryListRequest>
    |          </app:data>
    |         </app:application>
    |      </ws:submitApplicationRequest>
    |   </SOAP-ENV:Body>
    |</SOAP-ENV:Envelope>
    |";

	Возврат Запрос;
КонецФункции

Функция ЗаписатьПартию(stockEntry)
	//t = stockEntry.text;	
	active = stockEntry.active;		
	_uuid = stockEntry.uuid;
	guid = stockEntry.guid;
	st = stockEntry.status;
	entryNumber = stockEntry.entryNumber;
	updateDate = stockEntry.updateDate;
	createDate = stockEntry.createDate;
	
	batch = stockEntry.batch;
	
	product 	= batch.product.guid;
	subProduct 	= batch.subProduct.guid;

	Попытка
		productItemName = batch.productItem.name;
	Исключение
		СообщитьИнфо("Не удалось получить элемент [productItem]");
		productItemName = "";
	КонецПопытки;
	Попытка
		productItemGuid = batch.productItem.guid;
	Исключение			
		productItemGuid="";
	КонецПопытки;	
	Попытка
		productItemUuid = batch.productItem.uuid;
	Исключение			
		productItemUuid="";
	КонецПопытки;
	
	volume 		= batch.volume;
	unit		= batch.unit.guid;

	Попытка
		unitGuid	= batch.unit.guid;			
	Исключение
		unitGuid = "";			
	КонецПопытки;
	Попытка
		unitUuid	= batch.unit.uuid;			
	Исключение
		unitUuid = "";			
	КонецПопытки;
	
	Попытка
		packingFormUuid	= batch.packingList.packingForm.uuid;
	Исключение
		СообщитьИнфо("Не удалось получить элемент [packingForm] [uuid]");
		packingFormUuid = "";			
	КонецПопытки;
	Попытка
		packingFormName	= batch.packingList.packingForm.name;
	Исключение
		packingFormName="";
		СообщитьИнфо("Не удалось получить элемент [packingForm] [name]");
	КонецПопытки;

	packingAmount = batch.packingAmount;
		
	// dateOfProduction 1
	ДатаИзготовления1="";
	ДатаИзготовления="";
	попытка			
		год = batch.dateOfProduction.firstDate.year;
		мес = batch.dateOfProduction.firstDate.month;
		день = batch.dateOfProduction.firstDate.day;
		ДатаИзготовления1 = Дата(год, мес, день);
	Исключение
		Попытка
			ДатаИзготовления = batch.dateOfProduction.informalDate;
		Исключение				
		КонецПопытки;
	КонецПопытки;				
	ДатаИзготовления2="";
	попытка
		год = batch.dateOfProduction.secondDate.year;
		мес = batch.dateOfProduction.secondDate.month;
		день = batch.dateOfProduction.secondDate.day;
		ДатаИзготовления2 = Дата(год, мес, день);
	Исключение			
	КонецПопытки;
	
	//ДатаСрокГодности
	попытка			
		год = batch.expiryDate.firstDate.year;
		мес = batch.expiryDate.firstDate.month;
		день = batch.expiryDate.firstDate.day;
		ДатаСрокГодности1 = Дата(год, мес, день);
	Исключение
		Попытка
			ДатаСрокГодности = batch.expiryDate.informalDate;
		Исключение				
		КонецПопытки;
	КонецПопытки;				
	ДатаСрокГодности2="";
	попытка
		год = batch.expiryDate.secondDate.year;
		мес = batch.expiryDate.secondDate.month;
		день = batch.expiryDate.secondDate.day;
		ДатаСрокГодности2 = Дата(год, мес, день);
	Исключение			
	КонецПопытки;
	
	producer = "";
	Попытка			
		спПроизводителей = batch.producerList.producer;
		Если ТипЗнч(спПроизводителей)=Тип("СписокXDTO") Тогда
			Для Каждого ЭлСписка Из спПроизводителей Цикл
				producer = ЭлСписка.enterprise.guid;
			КонецЦикла;
		Иначе	
			Попытка
				producer = batch.producerList.producer.enterprise.guid;
			Исключение
				producerName = batch.producerList.producer.enterprise.name;
			КонецПопытки;			
		КонецЕсли;
	Исключение		
	КонецПопытки;
	
	Попытка				
		owner = batch.owner.guid; //ХозСубъект
		ВладелецХС = НайтиХСпоGUID(owner);
	Исключение
		ВладелецХС = "";
	КонецПопытки;

	Партия = ВСД_Запросы.НайтиПартиюПоGUID(guid);
	
	Если active="false" Тогда 
		СообщитьИнфо("Изменения в партию "+Партия+" uuid ["+_uuid+"] не внесены. Признак партии = не активна");
		Партия.УстановитьПометкуУдаления(истина);
		//ЖД Партия.Удалить(0);
		Возврат Партия;
	КонецЕсли;
	
	СообщитьИнфо(" ВСД_Партия от "+updateDate+" # "+entryNumber);
	
	Партия.ДатаИзменения = СтрокаВДатаВремя( updateDate );
					
	Партия.Получатель_ХозСубъект = ВладелецХС;
	Партия.Получатель_Площадка = Отправитель_Площадка; 
	Партия.Производитель_Площадка = НайтиПлощадку(producer);
	//Попытка
	//	Партия.Производитель_ХозСубъект = Партия.Производитель_Площадка.Контрагент;
	//Исключение
	//	СообщитьИнфо(ОписаниеОшибки());
	//КонецПопытки;
	Партия.Продукция 	= ВСД_Запросы.НайтиПродукцию(product);
	Партия.ВидПродукции = ВСД_Запросы.НайтиВидПродукции(subProduct);
	
	//Партия.Продукция_Элемент = Найти_Продукция_Элемент(productItemName, productItemGuid, productItemUuid, Партия.Продукция, Партия.ВидПродукции);
	Партия.Продукция_Элемент = Найти_Продукция_Элемент2(batch.productItem, Партия.Продукция, Партия.ВидПродукции);
	
	//Партия.СвойствоНоменклатурыЗначение = Партия.Продукция_Элемент.СвойствоНоменклатурыЗначение;
	
	Партия.Количество 	= Число(volume);
	Партия.КоличествоМест = Число(packingAmount);
	Партия.ФормаУпаковки = НайтиФормуУпаковки( packingFormUuid, packingFormName);;

	Партия.ЕдиницаИзмерения = НайтиЕдИзмерения( unitGuid, unitUUID );
	
	Партия.ДатаИзготовления1 = ДатаИзготовления1;
	Партия.ДатаИзготовления2 = ДатаИзготовления2;
	Партия.ДатаИзготовления =  ДатаИзготовления;
	Партия.ДатаСрокГодности = ДатаСрокГодности;
	Партия.ДатаСрокГодности1 = ДатаСрокГодности1;
	Партия.ДатаСрокГодности2 = ДатаСрокГодности2;
	Партия.Статус = st;		
	Партия.GUID = guid;
	Партия.UUID = _uuid;
	//Партия.ДатаИзменения = updateDate;
	Партия.НомерЗаписи = entryNumber;
	Партия.НаименованиеПродукции = productItemName;
	Если НЕ(ПустаяСтрока(productItemName)) Тогда 
		Партия.Наименование = productItemName;
	Иначе
		Партия.Наименование = Партия.Продукция_Элемент.Наименование;
	КонецЕсли;
	//Партия.Фирма = глПользователь.ОсновнаяФирма;
	//Если ПустаяСтрока(Партия.Автор)=1 Тогда
	//	Партия.Автор = глПользователь;
	//КонецЕсли;
	
	Партия.ВсдДата = СтрокаВДатаВремя(createDate);
			
	Если Партия.Количество=0 Тогда 
		
		Если ( Партия.ЭтоНовый()=0 ) Тогда
			СообщитьИнфо("Количество партии guid ["+guid+"] uuid ["+_uuid+"] = 0. Партия удалена. ");
			Партия.Записать();
			Партия.УстановитьПометкуУдаления(истина);
		Иначе
			СообщитьИнфо("Количество партии guid ["+guid+"] uuid ["+_uuid+"] = 0. Партия пропущена. ");
			Возврат "";
		КонецЕсли;
	Иначе
		Партия.Записать();
		Партия.УстановитьПометкуУдаления(ложь);
	КонецЕсли;		
	Возврат Партия;	
КонецФункции

Функция  ПолучитьПартии(_Отправитель_Площадка, _Смещение=0, _УдалятьПартии=1) Экспорт
	
	Если ПустаяСтрока(_Отправитель_Площадка.GUID) Тогда 
		СообщитьОшибку("В выбранной Площадке пустой GUID");
		Возврат "REJECTED";
	КонецЕсли;
	Если _УдалятьПартии=1 Тогда
		СообщитьИнфо("Плановая очистка справочника ВСД_Партии");
		Выборка = Справочники.ВСД_Партия.Выбрать();
		Пока Выборка.Следующий() Цикл			
			// ЖД Не стираем партии другой площадки
			Если Выборка.Получатель_Площадка = Отправитель_Площадка Тогда
				СпрОбъект = Выборка.ПолучитьОбъект();
				СпрОбъект.УстановитьПометкуУдаления(истина);
			КонецЕсли;				
		КонецЦикла;
	КонецЕсли;
	
	Если КомпонентаНаСервере = Неопределено тогда
		ЗагрузитьГлПеременныеИзВременногоХранилища();
	КонецЕсли;

	ЗапросXML = ПолучитьПартии_ТекстЗапросаSoap(_Отправитель_Площадка, _Смещение);

	метод = КомпонентаНаСервере.GetMethod();
    метод.Service = "platform/services/ApplicationManagementService";
    метод.Action = "submitApplicationRequest";
	
	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
	
	УдалитьXML( КомпонентаНаСервере.LogFilename);
	Если ЗначениеЗаполнено(appID) Тогда
		Результат = "";
		Для А=1 По 10 Цикл
			Если ((Результат="IN_PROCESS") или (ПустоеЗначение(Результат)=1)) Тогда

				Пауза( );

				СообщитьИнфо("Отправляем запрос на получение ответа [Актуальные партии]" );
				Результат = ПолучитьРезультатСервер( appID );
				СообщитьИнфо("Результат = "+Результат);
				ЗагрузитьXML_Партии( КомпонентаНасервере.LogFilename, _Смещение, _УдалятьПартии );
				УдалитьXML( КомпонентаНаСервере.LogFilename );

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	//УдалитьXML( КомпонентаНаСервере.LogFilename);
	
	Возврат Результат;
	
КонецФункции
// Партии 1.4 окончание

// Версия 1.4 Окончание **************************************************

// Распределение Партий для ВСД2_Транзакция
Процедура РаскраситьТЧПартий() Экспорт
	Для каждого ДанныеСтроки из Партии Цикл
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ВСД_Продукция_Элемент) Тогда
			 ДанныеСтроки.сЦвет = 1;   //красный
		ИначеЕсли ДанныеСтроки.Партия = Справочники.ВСД_Партия.ПустаяСсылка() Тогда
			ДанныеСтроки.сЦвет = 2;   //желтый
		ИначеЕсли ДанныеСтроки.Количество < ДанныеСтроки.КоличествоСписания Тогда
			ДанныеСтроки.сЦвет = 1;   //красный
		ИначеЕсли ДанныеСтроки.Количество >= ДанныеСтроки.КоличествоСписания Тогда
			ДанныеСтроки.сЦвет = 3;  //зеленый
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеСтроки.ВСД_Производство) Тогда
			ДокОбъект = ДанныеСтроки.ВСД_Производство.ПолучитьОбъект();
			Если ЗначениеЗаполнено(ДокОбъект.ApplicationID) и НЕ(СокрЛП(ДокОбъект.Статус = "COMPLETED")) Тогда
				ДанныеСтроки.сЦвет = 1;   //красный
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УменьшитьАктуальныеПартииНаРаспределенные(тзАктуальныхПартий)
	//Уменьшаем Акт партии на Неотправленные ВСД
	// Подберем уже заполненнные, но не отправленные ВСД, 
	// Выбираем ВСЕ документы, т.к. они м.б. не отмечены, но в них есть эти партии к отправке!!!
	//тзАктуальныхПартий.ВыбратьСтроку(); ТЕСТ
	тз = Отгрузки.Выгрузить();
	тз.Свернуть("ВСД","");
	//	тз.Сортировать("ВСД");
	для каждого Строкатз из Тз Цикл
		Если НЕ ЗначениеЗаполнено(Строкатз.ВСД) Тогда
		    Продолжить;
		КонецЕсли;
		Если (Строкатз.ВСД.Проведен) или (СокрЛП(Строкатз.ВСД.Статус) = "COMPLETED") Тогда
		    Продолжить;
		КонецЕсли;
		
		тзДокВСД = Строкатз.ВСД.Товары.Выгрузить();
		тзДокВСД.Свернуть("Партия","Количество");
		
		Для каждого СтрокаВСД из тзДокВСД Цикл
		    Если НЕ ЗначениеЗаполнено(СтрокаВСД.Партия) Тогда
		        Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока = ТзАктуальныхПартий.Найти(СтрокаВСД.Партия,"Партия");

			Если НайденнаяСтрока = Неопределено Тогда
    			//Предупреждение("Товар не найден!");
			Иначе
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - СтрокаВСД.Количество;
				Если НайденнаяСтрока.Количество < 0  Тогда
					СообщитьИнфо("В заполненных ранее ВСД на отправку обнаружено ПРЕВЫШЕНИЕ количества имеющейся партии по "+НайденнаяСтрока.Продукция_Элемент+"; (№ записи : "+СокрЛП(НайденнаяСтрока.Партия.НомерЗаписи)+") ; документ "+Строкатз.ВСД);
					НайденнаяСтрока.Количество = 0;    
				КонецЕсли;
				//СообщитьИнфо("Есть в документах на отправку "+ТзАктуальныхПартий.ВСД_Партия+ ", уменьшаем на " + тздокСтр.Количество)
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	//Совсем выкинем уже распределенные Партии из списка Актуальных
	НайденнаяСтрока = ТзАктуальныхПартий.Найти(0,"Количество");
	Пока НЕ(НайденнаяСтрока = Неопределено) Цикл
		ТзАктуальныхПартий.Удалить(НайденнаяСтрока);
		НайденнаяСтрока = ТзАктуальныхПартий.Найти(0,"Количество");
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПартий() Экспорт
	
 	Если СписокКонстант = Неопределено Тогда
		СписокКонстант = ВСД.ЗагрузитьПараметры( Организация );
	КонецЕсли;
	
	// Заполняем Партии на форме с Распределением
	Партии.Очистить();
	ВремПартии = Новый ТаблицаЗначений;   // Вся Реализация
	ВремПартии.Колонки.Добавить("Номенклатура");
	ВремПартии.Колонки.Добавить("ВСД_Продукция_Элемент");
	//ВремПартии.Колонки.Добавить("Количество");
	ВремПартии.Колонки.Добавить("КоличествоСписания");
	
	РаспределеннаяПартии = Новый ТаблицаЗначений; // итоговая ТЗ
	РаспределеннаяПартии.Колонки.Добавить("Номенклатура");
	РаспределеннаяПартии.Колонки.Добавить("ВСД_Продукция_Элемент");
	РаспределеннаяПартии.Колонки.Добавить("Партия");
	РаспределеннаяПартии.Колонки.Добавить("Количество");
	РаспределеннаяПартии.Колонки.Добавить("КоличествоСписания");
	РаспределеннаяПартии.Колонки.Добавить("ПолеСортировки");
	//СообщитьИнфо("Заполнение списка партий ВСД ");
	Для Каждого СтрОтгрузки Из Отгрузки Цикл
		Если НЕ(СтрОтгрузки.Отметка) Тогда
			Продолжить;
		КонецЕсли;
		
		//ЖД Контроль уже отправленного/удаленного ВСД
		Если ЗначениеЗаполнено(СтрОтгрузки.ВСД) Тогда
			СообщитьИнфо("Для "+СтрОтгрузки.Док+" уже создан "+СтрОтгрузки.ВСД+" ->Пропускаю");
			//Если (СтрОтгрузки.ВСД.Проведен) или (СтрОтгрузки.ВСД.ПометкаУдаления)  Тогда 
				продолжить;
			//КонецЕсли;
		КонецЕсли;
		
		тз = ВСД_Общий.ВыгрузитьТЧ(СтрОтгрузки.Док, СписокКонстант);
		Для Каждого стрТЗ из ТЗ Цикл
	        СтрПартий = Времпартии.Добавить();
			СтрПартий.Номенклатура = стрТЗ.Номенклатура;
			СтрПартий.ВСД_Продукция_Элемент = стрТЗ.Продукция_Элемент;
			СтрПартий.КоличествоСписания = стрТЗ.Количество;
		КонецЦикла;
	КонецЦикла;
	ВремПартии.Свернуть("ВСД_Продукция_Элемент","КоличествоСписания");    //!!!
	ВремПартии.Сортировать("ВСД_Продукция_Элемент");

	Если ВремПартии.Количество() = 0 Тогда
		СообщитьИнфо("Нет документов к созданию ВСД ->");
		Возврат;
	КонецЕсли;
	//Выбрали Реализацию, Свернули по ВСД_Продукция_Элемент  - Получим Актуальные Партии
	тзАктуальныхПартий = ВСД.ПолучитьАктуальныеПартии(СписокКонстант, ВремПартии.ВыгрузитьКолонку("ВСД_Продукция_Элемент"), Отправитель_Площадка, Отправитель_ХозСубъект );
	
	Если НЕ (ТипЗнч(тзАктуальныхПартий) = Тип("ТаблицаЗначений")) и НЕ ПарамЗаполнятьТранзакциюПриОтсутствииПартий Тогда
		СообщитьИнфо("Нет актуальных партий для создания Документов ");
		Возврат;
	КонецЕсли;
	
	УменьшитьАктуальныеПартииНаРаспределенные(тзАктуальныхПартий);
	
	Для каждого стрНужныеПартии из ВремПартии Цикл
		// Код из ЗаполнитьТЧВСД, только с отключенным Условием ПарамЗаполнятьТранзакциюПриОтсутствииПартий - покажем недостающие партии
		СтрокиПартий = ВСД.ПодобратьПартииПоПродукцияЭлемент(тзАктуальныхПартий,стрНужныеПартии.ВСД_Продукция_Элемент,стрНужныеПартии.КоличествоСписания);
		Если СтрокиПартий.Количество() = 0  Тогда
			//Если ПарамЗаполнятьТранзакциюПриОтсутствииПартий Тогда
				НоваяСтрока = РаспределеннаяПартии.Добавить();
				НоваяСтрока.ВСД_Продукция_Элемент = стрНужныеПартии.ВСД_Продукция_Элемент;
				НоваяСтрока.КоличествоСписания = стрНужныеПартии.КоличествоСписания;
				НоваяСтрока.Количество = 0;
			//	Продолжить;
			//КонецЕсли;
			СообщитьИнфо("Нет партий для ["+стрНужныеПартии.ВСД_Продукция_Элемент +"]");// Продукция_Элемент ["+ Строка(Продукция_Элемент) +"] Пропускаем!","!");				
		   	Продолжить;
		КонецЕсли;
		
		Для каждого СтрПартии из СтрокиПартий Цикл
			НоваяСтрока = РаспределеннаяПартии.Добавить();
			НоваяСтрока.Партия = СтрПартии.Партия;
			НоваяСтрока.ВСД_Продукция_Элемент = стрНужныеПартии.ВСД_Продукция_Элемент;
			НоваяСтрока.Количество = СтрПартии.Количество; 
			НоваяСтрока.КоличествоСписания = СтрПартии.Количество;
			НоваяСтрока.ПолеСортировки 		= СтрПартии.ПолеСортировки;
		КонецЦикла;
		
		Если (СтрокиПартий.Итог("Количество") < стрНужныеПартии.КоличествоСписания) Тогда // и ПарамЗаполнятьТранзакциюПриОтсутствииПартий  Тогда
			//Добавим с пустыми партиями
			НоваяСтрока = РаспределеннаяПартии.Добавить();
			НоваяСтрока.ВСД_Продукция_Элемент = стрНужныеПартии.ВСД_Продукция_Элемент;
			НоваяСтрока.КоличествоСписания	=  стрНужныеПартии.КоличествоСписания - СтрокиПартий.Итог("Количество") ;
			НоваяСтрока.Количество = 0; //Нет Партий, нет кол-ва
		КонецЕсли;
	КонецЦикла;
	Партии.Загрузить(РаспределеннаяПартии);
	РаскраситьТЧПартий();
КонецПроцедуры

// ***************** Транзакция окончание v2

//Процедура Отправить_ВСД2_АннулированиеВыбранные(ЭтоПеремещения = false) Экспорт
//	//Если КомпонентаНаСервере = Неопределено тогда
//	//	ЗагрузитьГлПеременныеИзВременногоХранилища();
//	//КонецЕсли;
//	Для Каждого стр из Отгрузки Цикл				
//		Если НЕ(ЗначениеЗаполнено(стр.ВСД)) или НЕ(стр.Отметка) Тогда
//			Продолжить;
//		КонецЕсли;
//		//Аннулировать_ВСД2_транзакция(стр.ВСД);
//	КонецЦикла;
//	//Перерисуем
//	ЗаполнитьТабличныеЧасти(ЭтоПеремещения);
//КонецПроцедуры

//// ************* Регионализация v2
//Функция РегионализацияМаршрута_2_ЗапросXML(док)
//	//СокрЛП(док.Партия.Продукция.GUID)
//	//СокрЛП(док.Партия.ВидПродукции.GUID)
//	//СокрЛП(док.Партия.Продукция_Элемент.GUID) 
//Запрос = "
//	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
//	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
//	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
//	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
//	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
//	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
//	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
//	|  <SOAP-ENV:Header/>
//	|  <SOAP-ENV:Body>
//	|    <apldef:submitApplicationRequest>
//	|      <apldef:apiKey>"+ СокрЛП( СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
//	|      <apl:application>
//	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
//	|        <apl:issuerId>"+ СокрЛП( СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
//	|        <apl:issueDate>" + ДатаXML(док.Дата, "T00:00:00") + "</apl:issueDate>
//	|        <apl:data>
//	|          <merc:checkShipmentRegionalizationRequest>
//	|            <merc:localTransactionId>" + СокрЛП(док.Номер) + "</merc:localTransactionId>
//	|            <merc:initiator>
//	|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
//	|            </merc:initiator>
//	|";

//	Если (типЗнч(Док) = тип("ДокументСсылка.ВСД2_входящий")) Тогда          //(типЗнч(Док) = тип("ДокументСсылка.ВСД2_исходящий")) или 
//			Запрос = Запрос+"
//			|            <dt:cargoType>
//			|              <bs:guid>"+ Док.Продукция_Элемент.ВидПродукции.GUID +"</bs:guid>       
//			|            </dt:cargoType>";	    
//	Иначе
//		тз = Док.Товары.Выгрузить();
//		Для А=0 По тз.Количество()-1 Цикл
//			СтрокаДокумента = тз[А];
//			ГУИДПродукции = ?(ЗначениеЗаполнено(СтрокаДокумента.Партия.ВидПродукции.GUID),СокрЛП(СтрокаДокумента.Партия.ВидПродукции.GUID),СокрЛП(СтрокаДокумента.Продукция_Элемент.ВидПродукции.GUID));
//			Запрос = Запрос+"
//			|            <dt:cargoType>
//			|              <bs:guid>"+ ГУИДПродукции +"</bs:guid>       
//			|            </dt:cargoType>";	    
//		КонецЦикла;
//	КонецЕсли;	
//		//<vd:sqnId>1</vd:sqnId>
//	//Порядовый номер точки маршрута.
//    //Не обязателен для заполнения, будет сгенерирован автоматически в ответе	
//	
//	// <vd:enterprise>
//	//Сведения о предприятии, которое является точкой маршрута.
//    //Указывается в случае, если не указано значение location 	
//	
//	Запрос = Запрос+"
//	|            <vd:shipmentRoute>
//	|              <vd:routePoint>
//	|                <vd:sqnId>1</vd:sqnId>
//	|                <vd:enterprise>
//	|                  <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
//	|                </vd:enterprise>
//	|              </vd:routePoint>
//	|              <vd:routePoint>
//	|                <vd:sqnId>2</vd:sqnId>
//	|                <vd:enterprise>
//	|                  <bs:guid>"+ СокрЛП(док.Получатель_Площадка.GUID) +"</bs:guid>
//	|                </vd:enterprise>
//	|              </vd:routePoint>
////	|              <vd:routePoint>
////	|                <vd:sqnId>2</vd:sqnId>
////	|                <vd:location>
////	|                  <dt:address>
////	|                    <dt:country>
////	|                      <bs:guid>74a3cbb1-56fa-94f3-ab3f-e8db4940d96b</bs:guid>
////	|                    </dt:country>
////	|                    <dt:region>
////	|                      <bs:guid>d00e1013-16bd-4c09-b3d5-3cb09fc54bd8</bs:guid>
////	|                    </dt:region>
////	|                    <dt:district>
////	|                      <bs:guid>f4ab6f10-4f56-4ebd-a881-4b767dbf4473</bs:guid>
////	|                    </dt:district>
////	|                    <dt:locality>
////	|                      <bs:guid>6f039940-2e3b-4857-a30e-c142865d859e</bs:guid>
////	|                    </dt:locality>
////	|                  </dt:address>
////	|                </vd:location>
////	|              </vd:routePoint>
//	|            </vd:shipmentRoute>
//	|          </merc:checkShipmentRegionalizationRequest>
//	|        </apl:data>
//	|      </apl:application>
//	|    </apldef:submitApplicationRequest>
//	|  </SOAP-ENV:Body>
//	|</SOAP-ENV:Envelope>	
//	|";
//	Возврат Запрос;	
//КонецФункции

//Функция ЗагрузитьXML_ПеревозкаРазрешена_2(имяФайла, Решение="") Экспорт 
//	//<dt:decision> 	dt:RegionalizationDecision
//	//1 	Перемещение разрешено.
//	//2 	Перемещение разрешено при обязательном соблюдении условий.
//	//3 	Перемещение запрещено. 
//	Если НайтиОшибки(имяФайла)>0 Тогда 
//		Возврат "";
//	КонецЕсли;	
//	
//    СообщитьИнфо("Загрузка XML-файла: "+ИмяФайла);    
//	ЧтениеXML = новый ЧтениеXML;
//	ЧтениеXML.ОткрытьФайл(КомпонентаНаСервере.LogFilename);
//	xdto = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
//	
//	Попытка	seList = xdto.application.result.checkShipmentRegionalizationResponse.r13nRouteSection; Исключение	seList = ""; КонецПопытки;
//	

////                  <vd:r13nRouteSection>
////                     <vd:sqnId>1</vd:sqnId>
////                     <vd:appliedR13nRule>
////                        <dt:cargoType>
////                           <bs:guid>55d3c8dc-432d-58c8-151f-cda720795add</bs:guid>
////                        </dt:cargoType>
////                        <dt:decision>1</dt:decision>
////                     </vd:appliedR13nRule>
////                  </vd:r13nRouteSection>
//	
//	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
//	//Компонента 1.1
//		Попытка	seList = xdto.Body.receiveApplicationResultResponse.application.result.checkShipmentRegionalizationResponse.r13nRouteSection; Исключение	seList = ""; КонецПопытки;
//	КонецЕсли;
//	
//	Если (ТипЗнч(seList)<>Тип("СписокXDTO"))и (ТипЗнч(seList)<>Тип("ОбъектXDTO")) Тогда
//		СообщитьИнфо("Не далось прочитать условия перевозки из "+имяФайла);
//		Возврат "";
//	КонецЕсли;
//	Если ТипЗнч(seList)<>Тип("СписокXDTO") Тогда 
//		RouteSectionList = Новый Массив;
//		RouteSectionList.Добавить(seList);
//	Иначе
//		RouteSectionList = seList;
//	КонецЕсли;
//	тзРез = Новый("ТаблицаЗначений");
//	тзРез.Колонки.Добавить("Отметка");
//	тзРез.Колонки.Добавить("UUID");
//	тзРез.Колонки.Добавить("GUID");
//	тзРез.Колонки.Добавить("ВидПродукции");
//	тзРез.Колонки.Добавить("Название");
//	тзРез.Колонки.Добавить("Решение");
//			
//	Для каждого RouteSection из RouteSectionList Цикл
//		
//		Попытка RList = RouteSection.appliedR13nRule; Исключение RList=""; КонецПопытки; 
//		Если ТипЗнч(RList)<>Тип("СписокXDTO") Тогда 
//			RuleList = Новый Массив;
//			RuleList.Добавить(RList);
//		Иначе
//			RuleList = RList;
//		КонецЕсли;
//		
//		Для каждого appliedR13nRule из RuleList Цикл 
//			Решение = Число(appliedR13nRule.decision);
//			Попытка ВидПродукции = ВСД_Запросы.НайтиВидПродукции(appliedR13nRule.cargoType.guid); Исключение ВидПродукции=""; КонецПопытки;		
//			Попытка reqlist = appliedR13nRule.requirement; Исключение Продолжить; КонецПопытки;
//		
//			Если ТипЗнч(reqlist)<>Тип("СписокXDTO") Тогда 
//				requirementsList = Новый Массив;
//				requirementsList.Добавить(reqlist);
//			Иначе
//				requirementsList = reqlist;
//			КонецЕсли;
//		
//			Для каждого requirements  из requirementsList Цикл
//				Попытка cGroupList = requirements.conditionGroup;Исключение Продолжить; КонецПопытки;
//				Если ТипЗнч(cGroupList)<>Тип("СписокXDTO") Тогда 
//					conditionGroupList = Новый Массив;
//					conditionGroupList.Добавить(cGroupList);
//				Иначе
//					conditionGroupList = cGroupList;
//				КонецЕсли; 			
//			
//				Для каждого conditionGroup из conditionGroupList Цикл 
//					Попытка cList = conditionGroup.condition;Исключение Продолжить; КонецПопытки;
//					Если ТипЗнч(cList)<>Тип("СписокXDTO") Тогда 
//						conditionList = Новый Массив;
//						conditionList.Добавить(cList);
//					Иначе
//						conditionList = cList;
//					КонецЕсли; 			
//					Для каждого condition из conditionList Цикл 
//						//condition = conditionGroup.condition;
//						УсловияПеревозки = тзРез.Добавить();
//						УсловияПеревозки.Отметка = true;
//						УсловияПеревозки.ВидПродукции = ВидПродукции;
//						УсловияПеревозки.Решение = Решение;
//						УсловияПеревозки.Название = condition.text;
//						УсловияПеревозки.UUID = condition.uuid;
//						УсловияПеревозки.GUID = condition.guid;
//					КонецЦикла;
//				КонецЦикла;
//			КонецЦикла;
//		КонецЦикла;
//	КонецЦикла;

//	Возврат тзРез;
//	
//КонецФункции

//Функция ПолучитьРезультат_Регион_2(applicationID, докСсылка ) Экспорт
//	Если ПустоеЗначение(applicationID)=1 Тогда
//		СообщитьИнфо("Пустая ссылка applicationID","!");
//		Возврат "Пустая ссылка applicationID";
//	КонецЕсли;
//	
//	Пауза( );
//	
//	СообщитьИнфо("Отправляем запрос ["+докСсылка+"]" );
//	//Результат = КомпонентаНаСервере.SendRequestResult( applicationID );
//	Результат = ПолучитьРезультатСервер( applicationID );
//	тзУсловия = ЗагрузитьXML_ПеревозкаРазрешена_2( КомпонентаНаСервере.LogFilename ); 
//	
//	СохранитьИмяОтветаВДокументе( докСсылка );
//	
//	УдалитьXML( КомпонентаНаСервере.LogFilename );
//	Если ЗначениеЗаполнено(тзУсловия) и (ПустоеЗначение(докСсылка)=0) Тогда
//		докОбъект = докСсылка.ПолучитьОбъект();
//		докОбъект.УсловияПеревозки.Очистить();
//		докОбъект.УсловияПеревозки.Загрузить(тзУсловия);
//		//докОбъект.ПеревозкаРазрешена = МожноВезти;
//		докОбъект.Комментарий = "Условия перевозки заполнены";
//		докОбъект.Записать();
//		СообщитьИнфо("Условия перевозки записаны в "+докСсылка);
//	КонецЕсли;	
//	Возврат Результат;
//КонецФункции

//Функция ПроверитьВозможностьПеремещения(док) Экспорт

//	Организация = док.Организация;//док.ДокументОснование.Организация;
//	Инициализация();
//	
//	Отправитель_Площадка = Док.Отправитель_Площадка;
//	
//	ЗапросXML = РегионализацияМаршрута_2_ЗапросXML(док);

//	метод = КомпонентаНаСервере.GetMethod();
//	метод.Service = "platform/services/2.0/ApplicationManagementService";
//    метод.Action = "submitApplicationRequest";	
//	
//	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
//	
//	СохранитьИмяЗапросаВДокументе( док );
//	
//	УдалитьXML( КомпонентаНаСервере.LogFilename);

//	Если ПустоеЗначение(appID)=0 Тогда
//		
//		Результат = ПолучитьРезультат_Регион_2(appID,док); 
//		СообщитьИнфо("Результат = "+Результат);
//		Для А=1 По 10 Цикл
//			Если (Результат="IN_PROCESS") Тогда 
//				Результат = ПолучитьРезультат_Регион_2(appID,док); 
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//	Возврат appID;
//КонецФункции

//Функция ПроверитьВозможностьПеремещенияВСДПоСписку() Экспорт
//	//СообщитьИнфо("Выполняется запрос условий перевозки для выделенных документов ВСД");
//	Параметры = ВСД.ЗагрузитьПараметры( Организация );
//	
//	тзОтгрузки = Отгрузки.Выгрузить();
//	Для каждого строкаТЗ из тзОтгрузки Цикл
//		ВыбВСД = строкаТЗ.ВСД;
//		Если НЕ (ЗначениеЗаполнено(ВыбВСД)) или НЕ(строкаТЗ.Отметка) Тогда
//			Продолжить;	
//		КонецЕсли;
//		Если (СокрЛП(ВыбВСД.Статус) = "COMPLETED") или (СокрЛП(ВыбВСД.Статус) = "IN_PROCESS") Тогда
//			Продолжить;	
//		КонецЕсли;		
//		Попытка
//			//ПроверитьВозможностьПеремещения(ВыбВСД);
//			ВСД_Запросы.ВСД2_Транзакция_УсловияПеревозки_Отправить( Параметры, ВыбВСД);
//		Исключение
//		    СообщитьИнфо(ОписаниеОшибки());
//		КонецПопытки;
//	КонецЦикла;
//	СообщитьИнфо("-> Проверка условий перевозки Завершена ");
//КонецФункции

//// ************* Регионализация v2 окончание


//**************************ВСД_Производство v2 ****************************
Функция ПолучитьДанныеДляСозданияВСДПроизводство(ДокументОснование = Неопределено) Экспорт
//ТЕСТ вызов переопределения
	//Обработка = ФункцияПереопределена("ПолучитьДанныеДляСозданияВСДПроизводство");
	//Если обработка <> Неопределено Тогда
	//	Возврат Обработка.ПолучитьДанныеДляСозданияВСДПроизводство(ЭтотОбъект, ДокументОснование);
	//КонецЕсли;	
	
	ПараметрыОрганизации =  ВСД.ЗагрузитьПараметры( ЭтотОбъект.Организация );
	Рез = Новый Структура;
	
	Если ДокументОснование <> Неопределено Тогда //Заполним все по основанию
		// При вызове из Вввод на соновании - инициализация Обработки, проведена - СписокКонстант Заполнен нужными данными 
		_Производитель_ХозСубъект = СписокКонстант.Получить("Отправитель_ХозСубъект");			
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			//Если СписокКонстант.Получить("ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя") Тогда
			Если ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя Тогда   // Определим нашу площадку по Складу
				_Производитель_Площадка = ВСД.НайтиПлощадкуПоСкладу(ДокументОснование.Склад, _Производитель_ХозСубъект);
				Отправитель_Площадка = _Производитель_Площадка;
			Иначе
				_Производитель_Площадка = СписокКонстант.Получить("Отправитель_Площадка");
			КонецЕсли;
		
		Иначе //Перемещение
			_Производитель_Площадка = ВСД.НайтиПлощадкуПоСкладу(ДокументОснование.СкладОтправитель, _Производитель_ХозСубъект);
			Отправитель_Площадка = _Производитель_Площадка;
		КонецЕсли;
		Рез.Вставить("Организация",ДокументОснование.Организация);
		Рез.Вставить("Производитель_Хозсубъект",_Производитель_ХозСубъект);  // Взяли из реквизитов обработки - активные данные
		Рез.Вставить("Производитель_Площадка",_Производитель_Площадка);
		//Рез.Вставить("ДокОснование",ДокументОснование);		
		//Рез.Вставить("СтрокиВСД", ВСД_Общий.ЗаполнитьТабЧастьЭлементовДляСозданияВСД( ПараметрыОрганизации, Партии.Выгрузить(), ДокументОснование));
	Иначе
		Рез.Вставить("Организация",Организация);
		Рез.Вставить("Производитель_Хозсубъект",Отправитель_Хозсубъект);  // Взяли из реквизитов обработки - активные данные
		Рез.Вставить("Производитель_Площадка",Отправитель_Площадка);
		//Рез.Вставить("ДокОснование",ДокументОснование);
		//Рез.Вставить("СтрокиВСД", ВСД_Общий.ЗаполнитьТабЧастьЭлементовДляСозданияВСД( ПараметрыОрганизации, Партии.Выгрузить(), ДокументОснование));
	КонецЕсли;
		Рез.Вставить("ДокОснование",ДокументОснование);
	ТабЧасть = ВСД_Общий.ЗаполнитьТабЧастьВсдПоПартиям( ПараметрыОрганизации, Партии.Выгрузить(), ДокументОснование );
	Рез.Вставить("СтрокиВСД", ТабЧасть);
	
	Возврат Рез;

КонецФункции

Процедура ЗаполнитьШапку_ВСД2_Производство(ДокВСД, СписокПараметров, ПараметрыОрганизации) Экспорт
//ТЕСТ вызов переопределения
	Обработка = ФункцияПереопределена("ЗаполнитьШапку_ВСД2_Производство");
	Если обработка <> Неопределено Тогда
		Обработка.ЗаполнитьШапку_ВСД2_Производство(ДокВСД, СписокПараметров, ПараметрыОрганизации);
		Возврат;
	КонецЕсли;		
	
	ДокВСД.ДокументОснование = ?(СписокПараметров.ДокОснование = неопределено,"",СписокПараметров.ДокОснование);
	ДокВСД.Организация = СписокПараметров.Организация;
	ДокВСД.Дата = ?(ЗначениеЗаполнено(ДокВСД.ДокументОснование),ДокВСД.ДокументОснование.Дата, ТекущаяДата());			
	ДокВСД.Производитель_ХозСубъект = СписокПараметров.Производитель_ХозСубъект;
	ДокВСД.Производитель_Площадка = СписокПараметров.Производитель_Площадка;			
	
	ДокВСД.ЗавершитьОперацию = true;
	ДокВСД.cargoInspected  	= истина;			
	Попытка ДокВСД.РезультатыИсследований = ПараметрыОрганизации.Получить("ВСД_РезультатыИсследований"); Исключение КонецПопытки; //Транзакция 1.4
КонецПроцедуры

Процедура ЗаполнитьТЧВСДПроизводство(ДанныеЗаполнения = Неопределено, докСсылка,  тзЭлементыОснования = Неопределено) Экспорт
	Обработка = ФункцияПереопределена("ЗаполнитьТЧВСДПроизводство");
	Если обработка <> Неопределено Тогда
		Обработка.ЗаполнитьТЧВСДПроизводство(ЭтотОбъект, ДанныеЗаполнения, докСсылка,  тзЭлементыОснования);
		Возврат;
	КонецЕсли;	

	Если (тзЭлементыОснования = Неопределено) и НЕ(ДанныеЗаполнения = Неопределено) тогда
		тзЭлементыОснования = ВСД_Общий.ВыгрузитьТЧ(ДанныеЗаполнения.Ссылка, СписокКонстант); 		
	КонецЕсли;
	
	Для Каждого ТекСтрокаТовары Из тзЭлементыОснования Цикл
		НоваяСтрока = докСсылка.Продукция.Добавить();
		НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
		НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
		НоваяСтрока.Продукция_Элемент = ТекСтрокаТовары.Продукция_Элемент;
		НоваяСтрока.Продукция = НоваяСтрока.Продукция_Элемент.Продукция ;
		НоваяСтрока.ВидПродукции =  НоваяСтрока.Продукция_Элемент.ВидПродукции;
		НоваяСтрока.НаименованиеПродукции =  НоваяСтрока.Продукция_Элемент.Наименование;
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Продукция_Элемент.ЕдиницаИзмерения;
		НоваяСтрока.ДатаИзготовления1 = ДанныеЗаполнения.Дата;
		НоваяСтрока.ДатаСрокГодности1 = НоваяСтрока.ДатаИзготовления1+60*60*24*НоваяСтрока.Продукция_Элемент.СрокГодности;
//		ЗаполнитьРеквизитыСтрокиВСД(НоваяСтрока, ТекСтрокаТовары, докСсылка);
	КонецЦикла;

КонецПроцедуры

Процедура ВСД_Производство_ВводНаОсновании(ДокВСД, СписокПараметров = Неопределено, ПараметрыОрганизации = Неопределено) Экспорт
	Обработка = ФункцияПереопределена("ВСД_Производство_ВводНаОсновании");
	Если обработка <> Неопределено Тогда
		Обработка.ВСД_Производство_ВводНаОсновании(ДокВСД, СписокПараметров, ПараметрыОрганизации);
		Возврат;
	КонецЕсли;	
	
	Если СписокПараметров = Неопределено Тогда     //!!!!!!!
		СписокПараметров = ПолучитьДанныеДляСозданияВСДПроизводство(ДокВСД.ДокументОснование);
	КонецЕсли;
	Если ПараметрыОрганизации = Неопределено Тогда
		ПараметрыОрганизации =  ВСД.ЗагрузитьПараметры( СписокПараметров.Организация );
	КонецЕсли;
	
	ЗаполнитьШапку_ВСД2_Производство(ДокВСД, СписокПараметров, ПараметрыОрганизации);
	ЗаполнитьТЧВСДПроизводство(СписокПараметров.ДокОснование, ДокВСД,СписокПараметров.СтрокиВСД);
	//Заполнение Партий Списания
	тзПартий = ВСД_Производство.ЗаполнитьТчСписаниеИзСпецификацииНоменклатуры( ПараметрыОрганизации, ДокВСД.Продукция.Выгрузить() );
	//Парам = Новый Структура("Организация, Отправитель_ХозСубъект, Отправитель_Площадка",ДокВСД.Организация,ДокВСД.Производитель_ХозСубъект,ДокВСД.Производитель_Площадка);	
	//тзПартий = ВСД_Производство.тзПартииСписанияПоТзПродукция_Элемент( ПараметрыОрганизации, тзСырье );
	ДокВСД.ПартииСписания.Загрузить( тзПартий );
	
КонецПроцедуры

Функция ОтправитьВсе_ВСД2_Производство(СписокВСД="",НачДата, КонДата) Экспорт
	//стандартное поведение функции		
	//Состояние("Меркурий: отправка ВСД Производство");
	СообщитьИнфо("Начало отправки документов");
	
	Если НЕ(ЗначениеЗаполнено(СписокВСД)) тогда 
		//Выберем документы производства  - запросом
		СписокВСД = Новый СписокЗначений;
 		Запрос = Новый Запрос;
    	Запрос.Текст = 
        "ВЫБРАТЬ
        |	ВСД_Производство.Ссылка
        |ИЗ
        |	Документ.ВСД_Производство КАК ВСД_Производство
        |ГДЕ
        |	ВСД_Производство.Производитель_ХозСубъект = &ВыбХС
        |	И ВСД_Производство.ПометкаУдаления = ЛОЖЬ
        |	И ВСД_Производство.Дата МЕЖДУ &ДатаН И &ДатаК
        |	И ВСД_Производство.Проведен = ЛОЖЬ";
 
	    Запрос.УстановитьПараметр("ДатаН", НачалоДня(НачДата));
		Запрос.УстановитьПараметр("ДатаК", КонецДня(КонДата));
    	Запрос.УстановитьПараметр("ВыбХС", Отправитель_Хозсубъект);
	    //МассивВСД = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		СписокВСД.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		СообщитьИнфо("отправляются ВСД производство за период "+ПредставлениеПериода(НачДата,КонецДня(КонДата),"ФП=ИСТИНА")+ "в количестве "+СписокВСД.Количество());//ПериодСтр(НачДата, КонДата));
	Иначе
		СообщитьИнфо("отправляются ВСД производство "+СписокВСД.Количество()+" документов");
	КонецЕсли;
		
	Для Каждого стрСпискаВСД из СписокВСД Цикл
		ВСДСсылка = стрСпискаВСД.Значение ;
	
		Если ВСДСсылка.Проведен Тогда 
			продолжить;
		КонецЕсли;
		Если ВСДСсылка.ПометкаУдаления Тогда 
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВСДСсылка.applicationID) Тогда
			СообщитьИнфо("Разработчик - > Диалог на сервере ОтправитьВсе_ВСД2_Производство - Нужно решить!!!");
			//Ответ = Вопрос("Документ ["+ВСДСсылка+"] статус=["+СокрЛП(ВСДСсылка.Статус)+"] уже был отправлен, отправить ПОВТОРНО?",РежимДиалогаВопрос.ДаНет,0);
			//Если Ответ = КодВозвратаДиалога.Нет Тогда
    			Продолжить;
			//КонецЕсли;
		КонецЕсли;		
	
		//Отправить_ВСД2_производство( ВСДСсылка );
		Параметры = ВСД.ЗагрузитьПараметры( Организация );
		ВСД_Запросы.ВСД2_Производство_Отправить( Параметры, ВСДСсылка );

	КонецЦикла;
	
	СообщитьИнфо("Отправка документов завершена");
КонецФункции

Процедура Создать_ВСД2_Производство(ДатаВыпуска = "") Экспорт
	//Если НЕ(ЗначениеЗаполнено(ДатаВыпуска)) тогда
	//	ДатаВыпуска = ДатаНачалаОтбора;	
	//КонецЕсли;
	Если СписокКонстант = Неопределено Тогда
		СписокКонстант = ВСД.ЗагрузитьПараметры( Организация );
	КонецЕсли;
	
	////Для правильного распределения имеющихся партий сырья при Групповом создании
	////Проведем расчет необходимого сырья и получим список Акт партий сырья
	//ТЗНеобходимойПродукции = Партии.Выгрузить(,"ВСД_Продукция_Элемент,КоличествоСписания");
	//ТЗНеобходимойПродукции.Колонки["ВСД_Продукция_Элемент"].Имя = "Продукция_Элемент";
	//ТЗНеобходимойПродукции.Колонки["КоличествоСписания"].Имя = "Количество";		
	////ТзНеобходимогоСырья = ВСД_Производство.ЗаполнитьСырьеИзВСД_Продукция_Элемент(ТЗНеобходимойПродукции);	
	//
	//ТЗНеобходимойПродукции.Колонки.Добавить("Номенклатура");
	//Для Каждого стр из ТЗНеобходимойПродукции Цикл
	//	стр.Номенклатура = ВСД.ПолучитьНоменклатуруПоПродукцияЭлемент( стр.Продукция_Элемент, истина );
	//КонецЦикла;
	
	//ТзНеобходимогоСырья = ВСД_Производство.ЗаполнитьТчСписаниеИзСпецификацииНоменклатуры( СписокКонстант, ТЗНеобходимойПродукции );	
	//
	//тзАктуальныхПартийСписанияВПроизводство = ВСД.ПолучитьАктуальныеПартии( СписокКонстант, ТзНеобходимогоСырья, Отправитель_Площадка, Отправитель_ХозСубъект );
	//
		ДокВСД = Документы.ВСД2_Производство.СоздатьДокумент(); 
		ДокВСД.Дата = ДатаВыпуска;//ДатаНачалаОтбора;			
		ДокВСД.Организация = Организация;
		ДокВСД.Производитель_ХозСубъект = Отправитель_ХозСубъект;
		ДокВСД.Производитель_площадка = Отправитель_Площадка;
		
		ДокВСД.РезультатыИсследований = ВСД_РезультатыИсследований;//СписокКонстант.Получить("ВСД_РезультатыИсследований");//Перечисления.ВСД_РезультатИсследования.VSEFULL;
		ДокВСД.cargoInspected	= 1;
		ДокВСД.НомерПартии = Формат(ДатаВыпуска, "ДЛФ=Д");				
		
		ДокВСД.Заполнить( Партии.Выгрузить() );
		ДокВСД.Записать();
		
	Для каждого стрПартий из Партии Цикл
		Если НЕ(ЗначениеЗаполнено(стрПартий.ВСД_Продукция_Элемент)) Тогда
			СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+"  не указан ВСД_Продукция_Элемент. Пропускаем...");
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стрПартий.ВСД_Производство) Тогда
			Продолжить;	
		КонецЕсли;
		Если ЗначениеЗаполнено(стрПартий.Партия) Тогда
			СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+" указана партия. Пропускаем...");
			Продолжить;
		КонецЕсли;
		Если СтрПартий.КоличествоСписания <= СтрПартий.Количество Тогда
			Продолжить;	
		КонецЕсли;
		
		Если НЕ(ЗначениеЗаполнено(стрПартий.ВСД_Продукция_Элемент.ЕдиницаИзмерения)) Тогда
			СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+" у "+СокрЛП(стрПартий.ВСД_Продукция_Элемент.Наименование)+" не указана Единица измерения. Пропускаем...");
			Продолжить;
		КонецЕсли;
		
		Если НЕ(ЗначениеЗаполнено(стрПартий.ВСД_Продукция_Элемент.СрокГодности)) Тогда
			СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+" у "+СокрЛП(стрПартий.ВСД_Продукция_Элемент.Наименование)+" не указан Срок годности. Пропускаем...");
			Продолжить;
		КонецЕсли;
		// Возможно несколько производителей-площадок  / продумать
		Если НЕ(стрПартий.ВСД_Продукция_Элемент.Площадка = Отправитель_Площадка)  Тогда
			СообщитьИнфо("В строке партий № "+стрПартий.НомерСтроки+" у "+СокрЛП(стрПартий.ВСД_Продукция_Элемент.Наименование)+" Производителем является "+стрПартий.ВСД_Продукция_Элемент.Площадка+". Пропускаем...");
			Продолжить;
		КонецЕсли;
		
		
		//Состояние("Создание ВСД_Производство ");
		
//		СтрПродукция = ДокВСД.Продукция.Добавить();		
//		СтрПродукция.Продукция_Элемент 	= стрПартий.ВСД_Продукция_Элемент;
//		СтрПродукция.Количество 		= стрПартий.КоличествоСписания - стрПартий.Количество; //ЖД вероятно не нужно - Количество 
//		СтрПродукция.ЕдиницаИзмерения 	= СтрПродукция.Продукция_Элемент.ЕдиницаИзмерения;
//		СтрПродукция.Продукция 			= СтрПродукция.Продукция_Элемент.Продукция;
//		СтрПродукция.ВидПродукции 		= СтрПродукция.Продукция_Элемент.ВидПродукции;
//		СтрПродукция.НаименованиеПродукции = СтрПродукция.Продукция_Элемент.Наименование;
//		СтрПродукция.ДатаИзготовления1 = ДатаВыпуска;		
////		Если ДатаОкончанияОтбора>ДатаНачалаОтбора Тогда
////			СтрПродукция.ДатаИзготовления2 = ДатаОкончанияОтбора;
////			СтрПродукция.ДатаСрокГодности2 = СтрПродукция.ДатаИзготовления2+60*60*24*СтрПродукция.Продукция_Элемент.СрокГодности;
////		КонецЕсли;
//		СтрПродукция.ДатаСрокГодности1 = СтрПродукция.ДатаИзготовления1+60*60*24*СтрПродукция.Продукция_Элемент.СрокГодности;
//		СтрПродукция.Номенклатура 		= ВСД.ПолучитьНоменклатуруПоПродукцияЭлемент( стрПартий.ВСД_Продукция_Элемент, истина );
//		
//		ДокВСД.ЗавершитьОперацию = true;
//		
//		//ТабСырья = ВСД_Производство.ЗаполнитьСырьеИзВСД_Продукция_Элемент(ДокВСД.Продукция.Выгрузить());
//		//ТабСырья = ВСД_Производство.ЗаполнитьСырьеИзВСД_Продукция_Элемент( ДокВСД.Продукция.Выгрузить() );
//		тзПартии = ВСД_Производство.ЗаполнитьТчСписаниеИзСпецификацииНоменклатуры( СписокКонстант, ДокВСД.Продукция.Выгрузить() );
//		
//		//Парам = Новый Структура("Отправитель_ХозСубъект, Отправитель_Площадка",ДокВСД.Производитель_ХозСубъект,ДокВСД.Производитель_Площадка);	
//		//тзПартии = ВСД_Производство.тзПартииСписанияПоТзПродукция_Элемент( СписокКонстант, ТабСырья, тзАктуальныхПартийСписанияВПроизводство );
//		ДокВСД.ПартииСписания.Загрузить( тзПартии );
		
		//ДокВСД.Записать();
		//ДокументСсылка = ДокВСД.Ссылка;
		стрПартий.ВСД_Производство = ДокВСД.Ссылка;
		
		СообщитьИнфо(" создан документ "+ДокВСД.Ссылка, ДокВСД.Ссылка);		
	КонецЦикла;
	РаскраситьТЧПартий();
КонецПроцедуры


//*************************ВСД_Производство Окончание*********************
// ************** Гашение
//Функция Проверка_ВСД2_Входящий(док) 

//	//стандартное поведение функции	
//	Результат = 1; //все в порядке
//	
//	Если НЕ(ЗначениеЗаполнено(док.Отправитель_ХозСубъект.GUID)) Тогда 
//		СообщитьОшибку("Не указан Отправитель_ХозСубъект.GUID Выполните синхронизацию справочников");
//		результат = 0;
//	КонецЕсли;

//	Если НЕ(ЗначениеЗаполнено(док.Отправитель_Площадка.GUID)) Тогда 
//		СообщитьОшибку("Не указан Отправитель_Площадка.GUID Выполните синхронизацию справочников");
//		результат = 0;
//	КонецЕсли;
//	Если НЕ(ЗначениеЗаполнено(док.Получатель_ХозСубъект.GUID)) Тогда 
//		СообщитьОшибку("Не указан Получатель_ХозСубъект.GUID Выполните синхронизацию справочников");
//		результат = 0;
//	КонецЕсли;
//	Если НЕ(ЗначениеЗаполнено(док.Получатель_Площадка.GUID)) Тогда 
//		СообщитьОшибку("Не указан Получатель_Площадка.GUID Выполните синхронизацию справочников");
//		результат = 0;
//	КонецЕсли;

//	Если док.ВидВСД = 1 Тогда 
//		//бумажный
//		Если НЕ(ЗначениеЗаполнено(док.ВсдНомер)) Тогда 
//			СообщитьОшибку("Не указан ВсдНомер ");
//			результат = 0;
//		КонецЕсли;
//		Если НЕ(ЗначениеЗаполнено(док.ВсдДата)) Тогда 
//			СообщитьОшибку("Не указан ВсдДата ");
//			результат = 0;
//		КонецЕсли;
//	Иначе
//		//электронный
//		Если НЕ(ЗначениеЗаполнено(док.UUID)) Тогда 
//			СообщитьОшибку("Не указан UUID ");
//			результат = 0;
//		КонецЕсли;
//		
//	КонецЕсли;
//		
//	Если НЕ(ЗначениеЗаполнено(док.ЕдиницаИзмерения)) Тогда 
//		СообщитьОшибку("Не указана ЕдиницаИзмерения ");
//		результат = 0;
//	КонецЕсли;	
//	
//	Возврат результат;
//КонецФункции

//Функция ВСД2_ВходящийБумажныйГашение_ЗапросXML(док)
////	ТермическиеУсловияПеревозки2 = Новый("СписокЗначений");
////	ТермическиеУсловияПеревозки2.Добавить("FROZEN","1");
////	ТермическиеУсловияПеревозки2.Добавить("CHILLED","2");
////	ТермическиеУсловияПеревозки2.Добавить("COOLED","3");
////	ТермическиеУсловияПеревозки2.Добавить("VENTILATED","4");	
//	
//	Запрос = "
//    |              <vd:issueSeries>"+СокрЛП(док.ВСДСерия)+"</vd:issueSeries>
//    |              <vd:issueNumber>"+СокрЛП(док.ВСДномер)+"</vd:issueNumber>
//    |              <vd:issueDate>"+ ДатаXML(док.ВсдДата) +"</vd:issueDate>
//    |              <vd:vetDForm>"+СокрЛП(док.ФормаВСД)+"</vd:vetDForm>
//    |              <vd:certifiedConsignment>
//	|              <vd:consignor>
//	|                <dt:businessEntity>
//	|                  <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
//	|                </dt:businessEntity>
//	|                </dt:businessEntity>";
//	Если ЗначениеЗаполнено(док.Отправитель_Площадка) Тогда // У импортных ВСД отсутствует
//		Запрос = запрос +"
//		|                <dt:enterprise>
//		|                  <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
//		|                </dt:enterprise>";
//	КонецЕсли;
//	// У импортных ВСД может отсутствовать
//	ВремПолучатель_Площадка = ?(ЗначениеЗаполнено(док.Получатель_Площадка) ,док.Получатель_Площадка,СписокКонстант.Получить("Отправитель_Площадка")); // возьмем из Парметров
//   Запрос = запрос +"
//	|              </vd:consignor>
//	|              <vd:consignee>
//	|                <dt:businessEntity>
//	|                  <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
//	|                </dt:businessEntity>
//	|                <dt:enterprise>
//	|                  <bs:guid>"+ СокрЛП(ВремПолучатель_Площадка.GUID) +"</bs:guid>
//	|                </dt:enterprise>
//	|              </vd:consignee>";

//	
//	Если ЗначениеЗаполнено(СокрЛП(док.Перевозчик_ХозСубъект)) Тогда  
//			Запрос=Запрос+"			
//			|        <vd:broker>
//			|          <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
//			|        </vd:broker>";
//		КонецЕсли;
//		Если ЗначениеЗаполнено(СокрЛП(док.ТипТС)) Тогда  
//			Запрос=Запрос+"			
//			|        <vd:transportInfo>
//			|          <vd:transportType>"+СокрЛП(док.ТипТС)+"</vd:transportType>
//			|          <vd:transportNumber>";
////			|"; 
//	
//			Если СокрЛП(Док.ТипТС) = "1" Тогда
//				Попытка
//					// Странный важный момент - контейнер д.б. первым !
//				Если ЗначениеЗаполнено(док.номерКонтейнера) Тогда
//			    	Запрос = Запрос+"
//					|            <vd:containerNumber>"+ СокрЛП(док.номерКонтейнера) +"</vd:containerNumber>
//					|";
//				КонецЕсли;
//				Исключение КонецПопытки;

//				Запрос = Запрос+"
//				|            <vd:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</vd:vehicleNumber>
//				|"; 
//				Попытка
//				Если ЗначениеЗаполнено(док.номерПолуприцепа) Тогда
//			    	Запрос = Запрос+"
//					|            <vd:trailerNumber>"+ СокрЛП(док.номерПолуприцепа) +"</vd:trailerNumber>
//					|";
//				КонецЕсли;
//				Исключение КонецПопытки;
//			иначеЕсли СокрЛП(Док.ТипТС) = "2" Тогда
//		    Запрос = Запрос+"
//			|            <vd:wagonNumber>"+ СокрЛП(док.номерАвто) +"</vd:wagonNumber>
//			|"; 
//			иначеЕсли СокрЛП(Док.ТипТС) = "3" Тогда
//		    Запрос = Запрос+"
//			|            <vd:flightNumber>"+ СокрЛП(док.номерАвто) +"</vd:flightNumber>
//			|";
//			иначеЕсли (СокрЛП(Док.ТипТС) = "4") или (СокрЛП(Док.ТипТС) = "5") или (СокрЛП(Док.ТипТС) = "6") Тогда
//		    Запрос = Запрос+"
//			|            <vd:shipName>"+ СокрЛП(док.номерАвто) +"</vd:shipName>
//			|";
//			
//			КонецЕсли;	
//			Запрос=Запрос+"
//			|          </vd:transportNumber>
//			|        </vd:transportInfo>";
//	КонецЕсли;
//	Если ЗначениеЗаполнено(док.ТермическоеСостояние) Тогда
//		Запрос=Запрос+"			
//		|              <vd:transportStorageType>"+ док.ТермическиеУсловияПеревозки +"</vd:transportStorageType>";
//	КонецЕсли;
//	Запрос=Запрос+"			
//	|              <vd:batch>
//	|                <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
//	|                <vd:product>
//	|                  <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
//	|                </vd:product>
//	|                <vd:subProduct>
//	|                  <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
//	|                </vd:subProduct>
//	|                <vd:productItem>"; 
//	
//// <dt:globalID> 	dt:GTINType 	[0..1] 	Trade Identification Number (GTIN) - идентификационный номер продукции производителя. Уникальность не проверяется. 	<dt:globalID>85672854</dt:globalID>
////·<dt:name> 	bs:String255 	[0..1] 	Наименование продукции. 	<dt:name>Наименование</dt:name>
//// <dt:code> 	bs:String255 	[0..1] 	Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
//// Артикул должен быть уникален в пределах одного производителя 	<dt:code>12</dt:code> 	

//	Если ЗначениеЗаполнено(док.Продукция_Элемент.GUID) Тогда
//		Запрос = Запрос + "
//		|              <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>";
//	КонецЕсли;
//	Попытка
//		Запрос = Запрос + "
//		|              <dt:name>"+ СокрЛП(док.НаименованиеПродукции) +"</dt:name>";
//	Исключение
//		Запрос = Запрос + "
//		|              <dt:name>"+ СокрЛП(док.Продукция_Элемент.Наименование) +"</dt:name>";
//	КонецПопытки;


////	Если ЗначениеЗаполнено(док.GTIN) Тогда
////		Запрос = Запрос + "
////		|              <dt:globalID>"+ СокрЛП(док.GTIN) +"</dt:globalID>";
////	КонецЕсли;
////	Если ЗначениеЗаполнено(док.Артикул)  Тогда
////		Запрос = Запрос + "
////		|              <dt:code>"+ СокрЛП(док.Артикул) +"</dt:code>";
////	КонецЕсли;
//	
//// сведения о фасовке
//	Если ЗначениеЗаполнено(док.ФасовкаФормаУпаковки) Тогда
//		Запрос = Запрос + "
//		|             <dt:packaging>
//		|               <dt:packagingType>
//		|                  <bs:guid>"+ СокрЛП(док.ФасовкаФормаУпаковки.GUID) +"</bs:guid>
//		|               </dt:packagingType>
//		|               <dt:quantity>"+ Формат(док.ФасовкаКоличество, "ЧРД=.; ЧГ=0;ЧН=0") +"</dt:quantity>
//		|               <dt:volume>"+ Формат(док.ФасовкаОбъем, "ЧРД=.; ЧГ=0;ЧН=0") +"</dt:volume>
//		|               <dt:unit>
//		|                  <bs:guid>"+ СокрЛП(док.ФасовкаЕдиницаИзм.GUID) +"</bs:guid>
//		|               </dt:unit>
//		|             </dt:packaging>";
//	КонецЕсли;
//	
//	Запрос = Запрос + "
//			|            </vd:productItem>
//			|            <vd:volume>"+ Формат(Док.Количество, "ЧРД=.; ЧГ=0;ЧН=0") +"</vd:volume>
//			|            <vd:unit>
//			|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
//			|            </vd:unit>";
//		Если (ЗначениеЗаполнено(док.ДатаИзготовления1)) или (ЗначениеЗаполнено(док.ДатаИзготовления2)) или (ЗначениеЗаполнено(док.ДатаИзготовления)) Тогда
//			Запрос = Запрос + "
//        				|                <vd:dateOfProduction>"; 

//			Если (ЗначениеЗаполнено(док.ДатаИзготовления1)) Тогда
//				Запрос = Запрос + "
//				|              <vd:firstDate>
//				|                <dt:year>"+ДатаГод(док.ДатаИзготовления1)+"</dt:year>
//				|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</dt:month>
//				|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</dt:day>
//				|                <dt:hour>0</dt:hour>
//				|              </vd:firstDate>";
//			КонецЕсли;
//			Если ((ЗначениеЗаполнено(док.ДатаИзготовления2)) и 
//					(док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
//				Запрос = Запрос + "
//				|              <vd:secondDate>
//				|                <dt:year>"+ ДатаГод(док.ДатаИзготовления2) +"</dt:year>
//				|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</dt:month>
//				|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</dt:day>
//				|                <dt:hour>0</dt:hour>
//				|              </vd:secondDate>";
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(док.ДатаИзготовления) Тогда
//				Запрос = Запрос + "
//				|              <vd:informalDate>"+ СокрЛП(док.ДатаИзготовления) +"</vd:informalDate>";
//			КонецЕсли;
//			Запрос = Запрос + "
//			|                </vd:dateOfProduction>"; 
//		КонецЕсли;
//		
//		Если (ЗначениеЗаполнено(док.ДатаСрокГодности1) ) или (ЗначениеЗаполнено(док.ДатаСрокГодности2) ) или (ЗначениеЗаполнено(док.ДатаСрокГодности)) Тогда
//			Запрос = Запрос + "
//				|                <vd:expiryDate>";
//			Если (ЗначениеЗаполнено(док.ДатаСрокГодности1)) Тогда
//				Запрос = Запрос + "
//				|              <vd:firstDate>
//				|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</dt:year>
//				|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</dt:month>
//				|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</dt:day>
//				|                <dt:hour>0</dt:hour>
//				|              </vd:firstDate>";
//			КонецЕсли;
//			Если ((ЗначениеЗаполнено(док.ДатаСрокГодности2)) и 
//					(док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
//				Запрос = Запрос + "
//				|              <vd:secondDate>
//				|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</dt:year>
//				|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</dt:month>
//				|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</dt:day>
//				|                <dt:hour>0</dt:hour>
//				|              </vd:secondDate>";
//			КонецЕсли; 
//			Если ЗначениеЗаполнено(док.ДатаСрокГодности) Тогда
//				Запрос = Запрос + "
//				|              <vd:informalDate>"+ СокрЛП(док.ДатаСрокГодности) +"</vd:informalDate>";
//			КонецЕсли;
//			
//			Запрос = Запрос + "
//				|            </vd:expiryDate>";
//		КонецЕсли;
//		Попытка
//			Если ЗначениеЗаполнено(док.НомерПартии) Тогда
//				Запрос = Запрос + "
//				|			<vd:batchID>"+СокрЛП(док.НомерПартии)+"</vd:batchID>";
//			КонецЕсли;	
//		Исключение КонецПопытки;	

////			|           <vd:batchID>BN-875999954</vd:batchID>    Уникальный идентификатор производственной партии продукции.
//		Попытка ГУИДСтраны = СокрЛП( док.Страна_Гуид); Исключение ГУИДСтраны = СокрЛП( СписокКонстант.Получить("Страна").GUID); КонецПопытки;

//		Запрос = Запрос + "
//			|			<vd:perishable>"+НашеБулево(док.скоропортящийся)+"</vd:perishable>
//			|			<vd:origin>
//			|            <vd:country>
//			|              <bs:guid>"+ ГУИДСтраны +"</bs:guid>
//			|            </vd:country>";


//			
//		Если ЗначениеЗаполнено(Док.ПроизводителиСписок) Тогда  
//			СпПроизводители = ЗначениеИзСтрокиВнутр(Док.ПроизводителиСписок);
//			Для Каждого Производитель из СпПроизводители Цикл
//				Запрос=Запрос+"
//				|        		<vd:producer>
//				|          			<dt:enterprise>
//				|            			<bs:guid>"+ СокрЛП(Производитель.Площадка.GUID) +"</bs:guid>
//				|          			</dt:enterprise>
//				|					<dt:role>"+ СокрЛП(Производитель.Роль) +"</dt:role>
//				|        		</vd:producer>";
//			КонецЦикла;
//		КонецЕсли;
//			
//			
//		Запрос = Запрос + "
//	|                </vd:origin>
//	|                <vd:lowGradeCargo>"+НашеБулево(док.некачественный)+"</vd:lowGradeCargo>"; 
////<vd:packageList> 	dt:PackageList 	[0..1] 	Список физической упаковки. ЖД Уровни упаковки
//	Если ЗначениеЗаполнено(док.УровниУпаковки) Тогда 
//    	ТЗУровни = ЗначениеИзСтрокиВнутр(док.УровниУпаковки);
//	Иначе
//		ТЗУровни = "";
//	КонецЕсли;
//	Если ТипЗнч(ТЗУровни) = Тип("ТаблицаЗначений") Тогда
//		Запрос=Запрос+"
//		|                <vd:packageList>";

//		Для каждого стрУровня из ТЗУровни Цикл 
//			Запрос=Запрос+"
//			|                  <dt:package>
//			|                    <dt:level>"+стрУровня.НомерУровня+"</dt:level>";
//			Если ЗначениеЗаполнено(ТЗУровни.Упаковка.GUID) Тогда
//				Запрос=Запрос+"
//				|                    <dt:packingType>
//				|                      <bs:guid>"+ СокрЛП(стрУровня.Упаковка.GUID) +"</bs:guid>
//				|                    </dt:packingType>";
//			КонецЕсли;
//			Запрос=Запрос+"
//			|                    <dt:quantity>"+ Формат(стрУровня.Колво,"ЧРД=.; ЧГ=0;ЧН=0") +"</dt:quantity>";
//			Попытка
//				СзМаркировок = ЗначениеИзСтрокиВнутр(стрУровня.Маркировки);
//			исключение
//				СзМаркировок = "";
//			КонецПопытки;
//			Если ТипЗнч(СзМаркировок) = Тип("СписокЗначений") Тогда
//				для каждого стрМаркировки из СзМаркировок Цикл				
//					стрМарк = стрМаркировки.Представление;
//					ЗнМарк = стрМаркировки.Значение;
//					
//					Запрос=Запрос+"
//					|                    <dt:productMarks class='"+стрМарк+"'>"+знМарк+"</dt:productMarks>";
//				КонецЦикла;
//			КонецЕсли;
//			Запрос=Запрос+"
//       		|                  </dt:package>";

//		КонецЦикла;
//		Запрос=Запрос+"
//		|                </vd:packageList>";

//	КонецЕсли;

////		ТЗВСД.cargoInspected = ?(cargoInspected="true",1,0);//cargoInspected;
////		ТЗВСД.РезультатыИсследований = Перечисление.ВСД2_РезультатИсследований.ЗначениеПоИдентификатору(cargoExpertized); 

//		Запрос=Запрос+"
//	|              </vd:batch>
//	|              </vd:certifiedConsignment>
//    |              <vd:authentication>
//    |                <vd:purpose>
//    |                  <bs:guid>"+ СокрЛП( СписокКонстант.Получить("Цель").Guid ) +"</bs:guid>
//    |                </vd:purpose>
//    |                <vd:cargoInspected>"+ НашеБулево(док.cargoInspected) +"</vd:cargoInspected>
//    |                <vd:cargoExpertized>"+док.РезультатыИсследований.Идентификатор()+"</vd:cargoExpertized>
//    |                <vd:locationProsperity>"+СокрЛП(Док.Местность)+"</vd:locationProsperity>
//    |                <vd:specialMarks>"+СокрЛП(док.ОсобыеОтметки)+"</vd:specialMarks>
//    |              </vd:authentication>";
////    |              <vd:precedingVetDocuments>ВСД №5891</vd:precedingVetDocuments> 



//	//ЖД не факт, что в Бумажном это нужно, оставлю только ТТН 
////	Если ЗначениеЗаполнено(док.СвязанныеДокументы) Тогда 
////    	ТЗДокументов = ЗначениеИзСтрокиВнутр(док.СвязанныеДокументы);
////	Иначе
////		ТЗДокументов = "";
////	КонецЕсли;
//	Если ЗначениеЗаполнено(док.ТтнНомер) Тогда
//		Запрос=Запрос+"
//    	|              <vd:referencedDocument>
//		|                <vd:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</vd:issueSeries>
//		|                <vd:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:issueNumber>
//	    |                <vd:issueDate>"+ ДатаXML(док.ТтнДата) +"</vd:issueDate>
//    	|                <vd:type>1</vd:type>
//	    |                <vd:relationshipType>1</vd:relationshipType>
//    	|              </vd:referencedDocument>";
//	КонецЕсли;
//	
//		
//		Запрос=Запрос+"
//    |              <vd:statusChange>
//    |                <vd:status>CONFIRMED</vd:status>
//    |                <vd:specifiedPerson>
//    |                  <vd:fio>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_fio")) +"</vd:fio>
//    |                  <vd:post>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_post")) +"</vd:post>
//    |                </vd:specifiedPerson>
//    |                <vd:actualDateTime>"+ ДатаXML(док.Дата,"T00:00:00") +"</vd:actualDateTime>
//    |              </vd:statusChange>";
//                
//	
//	Возврат Запрос;
//КонецФункции

//// Запрос на гашение ВСД входящего ЖД 08/08/2018
//Функция ВСД2_входящийГашение_ЗапросXMLПрежний(док)
//	
//		Запрос="
//	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
//	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
//	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
//	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
//	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
//	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
//	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
//	|  <SOAP-ENV:Header/>
//	|  <SOAP-ENV:Body>  
//	|    <apldef:submitApplicationRequest>
//	|      <apldef:apiKey>"+ СокрЛП( СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
//	|      <apl:application>
//	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
//	|        <apl:issuerId>"+ СокрЛП( СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
//	|        <apl:issueDate>" + ДатаXML(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
//	|        <apl:data>
//	|          <merc:processIncomingConsignmentRequest>
//	|            <merc:localTransactionId>"+СокрЛП(док.НомерДок)+"</merc:localTransactionId>
//	|            <merc:initiator>
//	|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
//	|            </merc:initiator>";
//   Запрос = запрос +"
//	|            <merc:delivery>
//	|              <vd:deliveryDate>" + ДатаXML(?(ЗначениеЗаполнено(док.ТтнДата),док.ТтнДата,ТекущаяДата()), "T00:00:00") + "</vd:deliveryDate>
//	|              <vd:consignor>
//	|                <dt:businessEntity>
//	|                  <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
//	|                </dt:businessEntity>";
//	Если ЗначениеЗаполнено(док.Отправитель_Площадка) Тогда // У импортных ВСД отсутствует
//		Запрос = запрос +"
//		|                <dt:enterprise>
//		|                  <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
//		|                </dt:enterprise>";
//	КонецЕсли;
//	// У импортных ВСД может отсутствовать
//	ВремПолучатель_Площадка = ?(ЗначениеЗаполнено(док.Получатель_Площадка) ,док.Получатель_Площадка,СписокКонстант.Получить("Отправитель_Площадка")); // возьмем из Парметров
//   Запрос = запрос +"
//	|              </vd:consignor>
//	|              <vd:consignee>
//	|                <dt:businessEntity>
//	|                  <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
//	|                </dt:businessEntity>
//	|                <dt:enterprise>
//	|                  <bs:guid>"+ СокрЛП(ВремПолучатель_Площадка.GUID) +"</bs:guid>
//	|                </dt:enterprise>
//	|              </vd:consignee>
//	|              <vd:consignment>
//	|                <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
//	|                <vd:product>
//	|                  <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
//	|                </vd:product>
//	|                <vd:subProduct>
//	|                  <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
//	|                </vd:subProduct>
//	|                <vd:productItem>"; 
//	
//// <dt:globalID> 	dt:GTINType 	[0..1] 	Trade Identification Number (GTIN) - идентификационный номер продукции производителя. Уникальность не проверяется. 	<dt:globalID>85672854</dt:globalID>
////·<dt:name> 	bs:String255 	[0..1] 	Наименование продукции. 	<dt:name>Наименование</dt:name>
//// <dt:code> 	bs:String255 	[0..1] 	Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
//// Артикул должен быть уникален в пределах одного производителя 	<dt:code>12</dt:code> 	

//	Если ЗначениеЗаполнено(док.Продукция_Элемент.GUID) Тогда
//		Запрос = Запрос + "
//		|              <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>";
//	КонецЕсли;
//	Попытка
//		Запрос = Запрос + "
//		|              <dt:name>"+ СокрЛП(док.НаименованиеПродукции) +"</dt:name>";
//	Исключение
//		Запрос = Запрос + "
//		|              <dt:name>"+ СокрЛП(док.Продукция_Элемент.Наименование) +"</dt:name>";
//	КонецПопытки;
//	
////	ЖД Ошибка при указании ГТИН - Element 'globalID' not expected
////	Если ЗначениеЗаполнено(док.GTIN)  Тогда
////		Запрос = Запрос + "
////		|              <dt:globalID>"+ СокрЛП(док.GTIN) +"</dt:globalID>";
////	КонецЕсли;
//// ЖД На наличие Артикула Меркурий никак не реагирует
////	Если ЗначениеЗаполнено(док.Артикул)  Тогда
////		Запрос = Запрос + "
////		|              <dt:code>"+ СокрЛП(док.Артикул) +"</dt:code>";
////	КонецЕсли;
//	
//// сведения о фасовке
//	Если ЗначениеЗаполнено(док.ФасовкаФормаУпаковки)  Тогда
//		Запрос = Запрос + "
//		|             <dt:packaging>
//		|               <dt:packagingType>
//		|                  <bs:guid>"+ СокрЛП(док.ФасовкаФормаУпаковки.GUID) +"</bs:guid>
//		|               </dt:packagingType>
//		|               <dt:quantity>"+ Формат(док.ФасовкаКоличество, "ЧРД=.; ЧГ=0;ЧН=0") +"</dt:quantity>
//		|               <dt:volume>"+ Формат(док.ФасовкаОбъем, "ЧРД=.; ЧГ=0;ЧН=0") +"</dt:volume>
//		|               <dt:unit>
//		|                  <bs:guid>"+ СокрЛП(док.ФасовкаЕдиницаИзм.GUID) +"</bs:guid>
//		|               </dt:unit>
//		|             </dt:packaging>";
//	КонецЕсли;


//	Запрос = Запрос + "
//			|            </vd:productItem>
//			|            <vd:volume>"+ Формат(Док.Количество, "ЧРД=.; ЧГ=0;ЧН=0") +"</vd:volume>
//			|            <vd:unit>
//			|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
//			|            </vd:unit>";
//	
//		Если (ЗначениеЗаполнено(док.ДатаИзготовления1)) или (ЗначениеЗаполнено(док.ДатаИзготовления2)) или (ЗначениеЗаполнено(док.ДатаИзготовления)) Тогда
//			Запрос = Запрос + "
//        	|                <vd:dateOfProduction>"; 

//			Если (ЗначениеЗаполнено(док.ДатаИзготовления1)) Тогда
//				Запрос = Запрос + "
//				|              <vd:firstDate>";
//				
//				Если ЗначениеЗаполнено(док.ДатаИзготовления1СЗ) Тогда
//					сзДаты = ЗначениеИзСтрокиВнутр(док.ДатаИзготовления1СЗ);
//					для каждого элементсз из сзДаты Цикл
//						Запрос = Запрос + "
//						|"+элементсз.значение;
//					КонецЦикла;
//				Иначе
//					Запрос = Запрос + "
//					|                <dt:year>"+ДатаГод(док.ДатаИзготовления1)+"</dt:year>
//					|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</dt:month>
//					|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</dt:day>
//					|                <dt:hour>0</dt:hour>";
//				КонецЕсли;
//				Запрос = Запрос + "
//				|              </vd:firstDate>";
//			КонецЕсли;
//			Если ((ЗначениеЗаполнено(док.ДатаИзготовления2)) и 
//					(док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
//				Запрос = Запрос + "
//				|              <vd:secondDate>";
//				
//				Если ЗначениеЗаполнено(док.ДатаИзготовления2СЗ) Тогда
//					сзДаты = ЗначениеИзСтрокиВнутр(док.ДатаИзготовления2СЗ);
//					для каждого элементсз из сзДаты Цикл
//						Запрос = Запрос + "
//						|"+элементсз.значение;
//					КонецЦикла;
//				Иначе
//					
//					Запрос = Запрос + "
//					|                <dt:year>"+ ДатаГод(док.ДатаИзготовления2) +"</dt:year>
//					|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</dt:month>
//					|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</dt:day>
//					|                <dt:hour>0</dt:hour>";				
//				КонецЕсли;
//				Запрос = Запрос + "
//				|              </vd:secondDate>";
//				
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(док.ДатаИзготовления) Тогда
//				Запрос = Запрос + "
//				|              <vd:informalDate>"+ СокрЛП(док.ДатаИзготовления) +"</vd:informalDate>";
//			КонецЕсли;
//			Запрос = Запрос + "
//			|                </vd:dateOfProduction>"; 
//		КонецЕсли;
//		
//		Если (ЗначениеЗаполнено(док.ДатаСрокГодности1) ) или (ЗначениеЗаполнено(док.ДатаСрокГодности2) ) или (ЗначениеЗаполнено(док.ДатаСрокГодности)) Тогда
//			Запрос = Запрос + "
//				|                <vd:expiryDate>";
//			Если (ЗначениеЗаполнено(док.ДатаСрокГодности1)) Тогда
//				Запрос = Запрос + "
//				|              <vd:firstDate>";
//				
//				Если ЗначениеЗаполнено(док.ДатаСрокГодности1СЗ) Тогда
//					сзДаты = ЗначениеИзСтрокиВнутр(док.ДатаСрокГодности1СЗ);
//					для каждого элементсз из сзДаты Цикл
//						Запрос = Запрос + "
//						|"+элементсз.значение;
//					КонецЦикла;
//				Иначе				
//					Запрос = Запрос + "
//					|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</dt:year>
//					|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</dt:month>
//					|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</dt:day>
//					|                <dt:hour>0</dt:hour>";
//				КонецЕсли;
//				Запрос = Запрос + "
//				|              </vd:firstDate>";
//			КонецЕсли;
//			Если ((ЗначениеЗаполнено(док.ДатаСрокГодности2)) и 
//					(док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
//				Запрос = Запрос + "
//				|              <vd:secondDate>";
//				Если ЗначениеЗаполнено(док.ДатаСрокГодности2СЗ) Тогда
//					сзДаты = ЗначениеИзСтрокиВнутр(док.ДатаСрокГодности2СЗ);
//					для каждого элементсз из сзДаты Цикл
//						Запрос = Запрос + "
//						|"+элементсз.значение;
//					КонецЦикла;
//				Иначе
//					Запрос = Запрос + "
//					|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</dt:year>
//					|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</dt:month>
//					|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</dt:day>
//					|                <dt:hour>0</dt:hour>";
//				КонецЕсли;
//				Запрос = Запрос + "
//				|              </vd:secondDate>";
//			КонецЕсли;
//			Если ЗначениеЗаполнено(док.ДатаСрокГодности) Тогда
//				Запрос = Запрос + "
//				|              <vd:informalDate>"+ СокрЛП(док.ДатаСрокГодности) +"</vd:informalDate>";
//			КонецЕсли;
//			
//			
//			Запрос = Запрос + "
//				|            </vd:expiryDate>";
//		КонецЕсли;
//		Попытка
//			Если ЗначениеЗаполнено(док.НомерПартии) Тогда
//				Попытка
//					спНомераПартий = ЗначениеИзСтрокиВнутр(Док.НомерПартии);
//					Для Каждого СтрокаНомера из спНомераПартий Цикл
//						Запрос = Запрос + "
//						|			<vd:batchID>"+СокрЛП(СтрокаНомера.Значение)+"</vd:batchID>";
//					КонецЦикла;
//				Исключение
//				 	СообщитьИнфо("Не удалось преобразовать номера партий");
//					СообщитьИнфо(ОписаниеОшибки());
//				КонецПопытки;
//			КонецЕсли;	
//		Исключение КонецПопытки;	

//		// По идее страну мы загрузили в ТЗ, вот только в документе ее нет
//		Попытка ГУИДСтраны = СокрЛП( док.Страна_Гуид); Исключение ГУИДСтраны = СокрЛП( СписокКонстант.Получить("Страна").GUID); КонецПопытки;
//		Запрос = Запрос + "
//			|			<vd:perishable>"+НашеБулево(док.скоропортящийся)+"</vd:perishable>
//			|			<vd:origin>
//			|            <vd:country>
//			|              <bs:guid>"+ ГУИДСтраны +"</bs:guid>
//			|            </vd:country>";
//			
//		Если ЗначениеЗаполнено(Док.ПроизводителиСписок) Тогда    
//			СпПроизводители = ЗначениеИзСтрокиВнутр(Док.ПроизводителиСписок);
//			Для Каждого Производитель из СпПроизводители Цикл
//				Запрос=Запрос+"
//				|        		<vd:producer>
//				|          			<dt:enterprise>";
//				Если ЗначениеЗаполнено(Производитель.Площадка) Тогда
//					Запрос=Запрос+"	
//					|            			<bs:guid>"+ СокрЛП(Производитель.Площадка.GUID) +"</bs:guid>";
//				КонецЕсли;
//				Если ЗначениеЗаполнено(Производитель.Имя) Тогда
//					Запрос=Запрос+"	
//					|            			<dt:name>"+ СокрЛП(Производитель.Имя) +"</dt:name>";
//				КонецЕсли;
//				Запрос=Запрос+"
//				|          			</dt:enterprise>
//				|					<dt:role>"+ СокрЛП(Производитель.Роль) +"</dt:role>
//				|        		</vd:producer>";
//			КонецЦикла;
//		КонецЕсли;
//			
//			
//		Запрос = Запрос + "
//	|                </vd:origin>
//	|                <vd:lowGradeCargo>"+НашеБулево(док.некачественный)+"</vd:lowGradeCargo>"; 
////<vd:packageList> 	dt:PackageList 	[0..1] 	Список физической упаковки. ЖД Уровни упаковки
//	Если ЗначениеЗаполнено(док.УровниУпаковки) Тогда 
//    	ТЗУровни = ЗначениеИзСтрокиВнутр(док.УровниУпаковки);
//	Иначе
//		ТЗУровни = "";
//	КонецЕсли;
//	Если ТипЗнч(ТЗУровни) = Тип("ТаблицаЗначений") Тогда
//		Запрос=Запрос+"
//		|                <vd:packageList>";
//		
//		для каждого стрУровня из ТЗУровни Цикл 		
//			Запрос=Запрос+"
//			|                  <dt:package>
//			|                    <dt:level>"+стрУровня.НомерУровня+"</dt:level>";
//			Если ЗначениеЗаполнено(стрУровня.Упаковка.GUID) Тогда
//				Запрос=Запрос+"
//				|                    <dt:packingType>
//				|                      <bs:guid>"+ СокрЛП(стрУровня.Упаковка.GUID) +"</bs:guid>
//				|                    </dt:packingType>";
//			КонецЕсли;
//			Запрос=Запрос+"
//			|                    <dt:quantity>"+ Формат(стрУровня.Колво,"ЧРД=.; ЧГ=0;ЧН=0") +"</dt:quantity>";   
//			Попытка	СзМаркировок = ЗначениеИзСтрокиВнутр(стрУровня.Маркировки); исключение СзМаркировок = ""; КонецПопытки;
//			Если ТипЗнч(СзМаркировок) = Тип("СписокЗначений") Тогда
//				для каждого стрМаркировки из СзМаркировок Цикл				
//					стрМарк=стрМаркировки.Представление;
//					ЗнМарк = стрМаркировки.Значение;					
//					Запрос=Запрос+"
//					|                    <dt:productMarks class='"+стрМарк+"'>"+знМарк+"</dt:productMarks>";
//				КонецЦикла;
//			КонецЕсли;
//			Запрос=Запрос+"
//       		|                  </dt:package>";
//		КонецЦикла;
//		Запрос=Запрос+"
//		|                </vd:packageList>";
//	КонецЕсли;


//		Запрос=Запрос+"
//	|              </vd:consignment>";
//		Если ЗначениеЗаполнено(СокрЛП(док.Перевозчик_ХозСубъект)) Тогда  
//			Запрос=Запрос+"			
//			|        <vd:broker>
//			|          <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
//			|        </vd:broker>";
//		КонецЕсли;
//		Если ЗначениеЗаполнено(СокрЛП(док.ТипТС)) Тогда  
//			Запрос=Запрос+"			
//			|        <vd:transportInfo>
//			|          <vd:transportType>"+СокрЛП(док.ТипТС)+"</vd:transportType>
//			|          <vd:transportNumber>";
//	
//			Если СокрЛП(Док.ТипТС) = "1" Тогда
//				Попытка
//					// Странный важный момент - контейнер д.б. первым !
//				Если ЗначениеЗаполнено(док.номерКонтейнера) Тогда
//			    	Запрос = Запрос+"
//					|            <vd:containerNumber>"+ СокрЛП(док.номерКонтейнера) +"</vd:containerNumber>
//					|";
//				КонецЕсли;
//				Исключение КонецПопытки;

//				Запрос = Запрос+"
//				|            <vd:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</vd:vehicleNumber>
//				|"; 
//				Попытка
//				Если ЗначениеЗаполнено(док.номерПолуприцепа) Тогда
//			    	Запрос = Запрос+"
//					|            <vd:trailerNumber>"+ СокрЛП(док.номерПолуприцепа) +"</vd:trailerNumber>
//					|";
//				КонецЕсли;
//				Исключение КонецПопытки;
//			иначеЕсли СокрЛП(Док.ТипТС) = "2" Тогда
//		    Запрос = Запрос+"
//			|            <vd:wagonNumber>"+ СокрЛП(док.номерАвто) +"</vd:wagonNumber>
//			|"; 
//			иначеЕсли СокрЛП(Док.ТипТС) = "3" Тогда
//		    Запрос = Запрос+"
//			|            <vd:flightNumber>"+ СокрЛП(док.номерАвто) +"</vd:flightNumber>
//			|";
//			иначеЕсли (СокрЛП(Док.ТипТС) = "4") или (СокрЛП(Док.ТипТС) = "5") или (СокрЛП(Док.ТипТС) = "6") Тогда
//		    Запрос = Запрос+"
//			|            <vd:shipName>"+ СокрЛП(док.номерАвто) +"</vd:shipName>
//			|";
//			
//			КонецЕсли;	
//			Запрос=Запрос+"
//			|          </vd:transportNumber>
//			|        </vd:transportInfo>";
//		КонецЕсли;
//		Если ЗначениеЗаполнено(док.ТермическоеСостояние) Тогда		
//			Запрос=Запрос+"			
//			|              <vd:transportStorageType>"+ док.ТермическиеУсловияПеревозки +"</vd:transportStorageType>";
//		КонецЕсли;	
////	Запрос=Запрос+"			
////	|              <vd:transportStorageType>"+ Док.ТермическоеСостояние +"</vd:transportStorageType>";
//// сложный вариант с перегрузками Пример
////              <vd:shipmentRoute>
////                <vd:routePoint>
////                  <vd:sqnId>1</vd:sqnId>
////                  <vd:enterprise>
////                    <bs:guid>ac264dc6-a3eb-4b0f-a86a-9c9577209d6f</bs:guid>
////                  </vd:enterprise>
////                  <vd:nextTransport>
////                    <vd:transportType>1</vd:transportType>
////                    <vd:transportNumber>
////                      <vd:vehicleNumber>в206кв58</vd:vehicleNumber>
////                    </vd:transportNumber>
////                  </vd:nextTransport>
////                </vd:routePoint>
////              </vd:shipmentRoute>

//// ЖД в тестовой для гашения достаточно только ТТН, связанных доков не нужно !!!!
////	Если ТипЗнч(ТЗДокументов) = Тип("ТаблицаЗначений") Тогда
////		Для каждого СтрДокумент из ТЗДокументов Цикл
////		КонецЦикла;
////	КонецЕсли;

//	Запрос=Запрос+"			
//	|              <vd:accompanyingForms>";
// // Для гашения нужен только ТТН, при "Без ТТН" - waybill не нужен
// 	Если ЗначениеЗаполнено(док.ТтнНомер) Тогда
//		Запрос=Запрос+"			
//		|                <vd:waybill>  
//		|                  <vd:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</vd:issueSeries>
//		|                  <vd:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:issueNumber>
//		|                  <vd:issueDate>"+ ДатаXML(док.ТтнДата) +"</vd:issueDate>";
//		Попытка
//			Запрос=Запрос+"			
//			|                  <vd:type>"+ док.ТтнТип +"</vd:type>";
//		Исключение
//			//Добавить Реквизит ттнТип в документ ВСД2_входящий
//			СообщитьИнфо("Добавьте Реквизит ттнТип (число 1.0) в документ ВСД2_входящий");
//			СообщитьИнфо("Отправляю с типом 1 - Товарно транспортная накладная");
//			Запрос=Запрос+"			
//			|                  <vd:type>1</vd:type>";
//		КонецПопытки;
//		Запрос=Запрос+"			
//		|                </vd:waybill>";
//	КонецЕсли;	
//		
//	Запрос=Запрос+"		
//	|                <vd:vetCertificate>";
//	Если док.ВидВСД=1 Тогда
//		Запрос = Запрос + ВСД2_ВходящийБумажныйГашение_ЗапросXML(док);
//	Иначе	
//		Запрос=Запрос+"
//		|                  <bs:uuid>"+ СокрЛП(док.UUID) +"</bs:uuid>";
//	КонецЕсли;
//	
//	Запрос=Запрос+"			
//	|                </vd:vetCertificate>
//	|              </vd:accompanyingForms>
//	|            </merc:delivery>
//	|            <merc:deliveryFacts>";
//	Если док.ВидВСД=1 Тогда
//		Запрос=Запрос+"			
//		|              <vd:vetCertificatePresence>PAPER</vd:vetCertificatePresence>";
//	Иначе
//		Запрос=Запрос+"			
//		|              <vd:vetCertificatePresence>ELECTRONIC</vd:vetCertificatePresence>";
//	КонецЕсли;
//	
////	|";
////<vd:docInspection> 	vd:DeliveryInspection 	[1..1] 	Соответствуют ли сведения о партии, указанной в ВСД, фактическим. 	
////<vd:responsible> 	dt:User 	[1..1] 	Пользователь, указавший результат соответствия. 	
////<vd:login> 	xs:NCName 	[0..1] 	Логин пользователя, зарегистрированного в системе Меркурий. 	<vd:login>user_ab_150101</vd:login>
////</vd:responsible> 				
////·<vd:result> 	vd:DeliveryInspectionResult 	[1..1] 	Результат соответствия. 	<vd:result>CORRESPONDS</vd:result>
////</vd:docInspection> 

//	Запрос=Запрос+"			
//	|              <vd:docInspection>
//	|                <vd:responsible>
//	|                  <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_login")) +"</vd:login>
//	|                </vd:responsible>
//	|                <vd:result>CORRESPONDS</vd:result>
//	|              </vd:docInspection>
//	|              <vd:vetInspection>
//	|                <vd:responsible>
//	|                  <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_login")) +"</vd:login>
//	|                </vd:responsible>
//	|                <vd:result>CORRESPONDS</vd:result>
//	|              </vd:vetInspection>
//	|              <vd:decision>ACCEPT_ALL</vd:decision>
//	|            </merc:deliveryFacts>";
//	
//	// Акт несоотв.
//   	Если ФлАктНесоответствия = 1 Тогда
//	Запрос = Запрос+"
//	|            <merc:discrepancyReport>
////	|              <vd:issueSeries>S1624387448</vd:issueSeries>  Для электронного акта несоответствия серия генерируется автоматически
////	|              <vd:issueNumber>N1584929183</vd:issueNumber>
//	|              <vd:issueDate>"+ ДатаXML(док.ТтнДата) +"</vd:issueDate>
//	|              <vd:reason>
//	|                <vd:name>"+СокрЛП(тПричинаАкта)+"</vd:name>
//	|              </vd:reason>
//	|              <vd:description>"+?(НЕ(ЗначениеЗаполнено(тОписаниеНесоответствия)),"Описание несоответствия",СокрЛП(тОписаниеНесоответствия)) +"</vd:description>
//	|            </merc:discrepancyReport>";
//    КонецЕсли;

//	Запрос = Запрос+"
//	|          </merc:processIncomingConsignmentRequest>
//	|        </apl:data>
//	|      </apl:application>
//	|    </apldef:submitApplicationRequest>
//	|  </SOAP-ENV:Body>
//	|</SOAP-ENV:Envelope>	
//	|";	
//	

//	Возврат Запрос;
//КонецФункции

//Функция ГашениеБлокВозвратXML(Док, НужноеКоличество)
//	ЗапросШапка = "
//    |        <merc:returnedDelivery>";
//	
//	//Тут перевертыш - предусмотреть при оптимизации блока
//	ЗапросШапка = ЗапросШапка +"
//    |          <vd:consignor>
//    |            <dt:businessEntity>
//    |              <bs:guid>"+СокрЛП(Док.Получатель_ХозСубъект.GUID)+"</bs:guid>
//    |            </dt:businessEntity>
//    |            <dt:enterprise>
//    |              <bs:guid>"+ СокрЛП(Док.Получатель_Площадка.GUID) +"</bs:guid>
//    |            </dt:enterprise>
//    |          </vd:consignor>
//    |          <vd:consignee>
//    |            <dt:businessEntity>
//    |              <bs:guid>"+ СокрЛП(Док.Отправитель_ХозСубъект.GUID) +"</bs:guid>
//    |            </dt:businessEntity>
//    |            <dt:enterprise>
//    |              <bs:guid>"+ СокрЛП(Док.Отправитель_Площадка.GUID) +"</bs:guid>
//    |            </dt:enterprise>
//    |          </vd:consignee>";
//	
//	consignment =  "
//	|       <vd:consignment>";
//	consignment =  consignment+"
//	|                <vd:productType>"+ док.Продукция_Элемент.Продукция.Тип +"</vd:productType>
//	|                <vd:product>
//	|                  <bs:guid>"+ СокрЛП(док.Продукция_Элемент.Продукция.GUID) +"</bs:guid>
//	|                </vd:product>
//	|                <vd:subProduct>
//	|                  <bs:guid>"+ СокрЛП(док.Продукция_Элемент.ВидПродукции.GUID) +"</bs:guid>
//	|                </vd:subProduct>";
//	
//	
//	
//	consignment =  consignment+"
//	|                <vd:productItem>"; 

//	Если ЗначениеЗаполнено(док.Продукция_Элемент.GUID) Тогда
//		consignment = consignment + "
//		|              <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>";
//	КонецЕсли;
//		consignment = consignment + "
//		|              <dt:name>"+ СокрЛП(док.Продукция_Элемент.Наименование) +"</dt:name>";
//// сведения о фасовке
//	Если ЗначениеЗаполнено(док.ФасовкаФормаУпаковки)  Тогда
//		consignment = consignment + "
//		|             <dt:packaging>
//		|               <dt:packagingType>
//		|                  <bs:guid>"+ СокрЛП(док.ФасовкаФормаУпаковки.GUID) +"</bs:guid>
//		|               </dt:packagingType>
//		|               <dt:quantity>"+ Формат(док.ФасовкаКоличество, "ЧРД=.; ЧГ=0;ЧН=0") +"</dt:quantity>
//		|               <dt:volume>"+ Формат(док.ФасовкаОбъем, "ЧРД=.; ЧГ=0;ЧН=0") +"</dt:volume>
//		|               <dt:unit>
//		|                  <bs:guid>"+ СокрЛП(док.ФасовкаЕдиницаИзм.GUID) +"</bs:guid>
//		|               </dt:unit>
//		|             </dt:packaging>";
//	КонецЕсли;

//	consignment = consignment + "
//			|            </vd:productItem>";
//	
//	consignment = consignment + "
//			|            <vd:volume>"+ Формат(НужноеКоличество, "ЧРД=.; ЧГ=0;ЧН=0") +"</vd:volume>
//			|            <vd:unit>
//			|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
//			|            </vd:unit>";
//	
//	// даты
//		Если (ЗначениеЗаполнено(док.ДатаИзготовления1)) или (ЗначениеЗаполнено(док.ДатаИзготовления2)) или (ЗначениеЗаполнено(док.ДатаИзготовления)) Тогда
//			consignment = consignment + "
//        	|                <vd:dateOfProduction>"; 

//			Если (ЗначениеЗаполнено(док.ДатаИзготовления1)) Тогда
//				consignment = consignment + "
//				|              <vd:firstDate>
//				|                <dt:year>"+ДатаГод(док.ДатаИзготовления1)+"</dt:year>
//				|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</dt:month>
//				|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</dt:day>
//				|                <dt:hour>0</dt:hour>
//				|              </vd:firstDate>";
//			КонецЕсли;
//			Если ((ЗначениеЗаполнено(док.ДатаИзготовления2)) и 
//					(док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
//				consignment = consignment + "
//				|              <vd:secondDate>
//				|                <dt:year>"+ ДатаГод(док.ДатаИзготовления2) +"</dt:year>
//				|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</dt:month>
//				|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</dt:day>
//				|                <dt:hour>0</dt:hour>				
//				|              </vd:secondDate>";
//				
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(док.ДатаИзготовления) Тогда
//				consignment = consignment + "
//				|              <vd:informalDate>"+ СокрЛП(док.ДатаИзготовления) +"</vd:informalDate>";
//			КонецЕсли;
//			consignment = consignment + "
//			|                </vd:dateOfProduction>"; 
//		КонецЕсли;
//		
//		Если (ЗначениеЗаполнено(док.ДатаСрокГодности1) ) или (ЗначениеЗаполнено(док.ДатаСрокГодности2) ) или (ЗначениеЗаполнено(док.ДатаСрокГодности)) Тогда
//			consignment = consignment + "
//				|                <vd:expiryDate>";
//			Если (ЗначениеЗаполнено(док.ДатаСрокГодности1)) Тогда
//				consignment = consignment + "
//				|              <vd:firstDate>
//				|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</dt:year>
//				|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</dt:month>
//				|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</dt:day>
//				|                <dt:hour>0</dt:hour>
//				|              </vd:firstDate>";
//			КонецЕсли;
//			Если ((ЗначениеЗаполнено(док.ДатаСрокГодности2)) и 
//					(док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
//				consignment = consignment + "
//				|              <vd:secondDate>
//				|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</dt:year>
//				|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</dt:month>
//				|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</dt:day>
//				|                <dt:hour>0</dt:hour>
//				|              </vd:secondDate>";
//			КонецЕсли;
//			Если ЗначениеЗаполнено(док.ДатаСрокГодности) Тогда
//				consignment = consignment + "
//				|              <vd:informalDate>"+ СокрЛП(док.ДатаСрокГодности) +"</vd:informalDate>";
//			КонецЕсли;
//			
//			
//			consignment = consignment + "
//				|            </vd:expiryDate>";
//		КонецЕсли;
//		
//// №№ партий
//		Для Каждого СтрокаНомера из док.НомераПартий Цикл
//			consignment = consignment + "
//			|			<vd:batchID>"+СокрЛП(СтрокаНомера.НомерПартии)+"</vd:batchID>";
//		КонецЦикла;
//	
//		Попытка ГУИДСтраны = СокрЛП( док.Страна_Гуид); Исключение ГУИДСтраны = СокрЛП( СписокКонстант.Получить("Страна").GUID); КонецПопытки;
//		
//		consignment = consignment + "
//			|			<vd:perishable>"+НашеБулево(док.скоропортящийся)+"</vd:perishable>
//			|			<vd:origin>
//			|            <vd:country>
//			|              <bs:guid>"+ ГУИДСтраны +"</bs:guid>
//			|            </vd:country>";
//			
//  // производители 
//			Для Каждого Производитель из Док.Производители Цикл
//				consignment = consignment + "
//				|        		<vd:producer>
//				|          			<dt:enterprise>";
//				Если ЗначениеЗаполнено(Производитель.Площадка) Тогда
//					consignment = consignment + "	
//					|            			<bs:guid>"+ СокрЛП(Производитель.Площадка.GUID) +"</bs:guid>";
//				КонецЕсли;
//				Если ЗначениеЗаполнено(Производитель.Имя) Тогда
//					consignment = consignment + "	
//					|            			<dt:name>"+ СокрЛП(Производитель.Имя) +"</dt:name>";
//				КонецЕсли;
//				consignment = consignment + "
//				|          			</dt:enterprise>
//				|					<dt:role>"+ СокрЛП(Производитель.Роль) +"</dt:role>
//				|        		</vd:producer>";
//			КонецЦикла;

//			
//			
//		consignment = consignment + "
//	|                </vd:origin>
//	|                <vd:lowGradeCargo>"+НашеБулево(док.некачественный)+"</vd:lowGradeCargo>";
//// маркировки		
//	Если Док.УровниУпаковки.Количество() > 0 Тогда
//		consignment = consignment + "
//		|                <vd:packageList>";
//		
//		для каждого стрУровня из Док.УровниУпаковки Цикл 		
//			consignment = consignment + "
//			|                  <dt:package>
//			|                    <dt:level>"+ПолучитьПорядковыйНомерПеречисления(стрУровня.НомерУровня)+"</dt:level>";
//			Если ЗначениеЗаполнено(стрУровня.ФормаУпаковки.GUID) Тогда
//				consignment = consignment + "
//				|                    <dt:packingType>
//				|                      <bs:guid>"+ СокрЛП(стрУровня.ФормаУпаковки.GUID) +"</bs:guid>
//				|                    </dt:packingType>";
//			КонецЕсли;
//			consignment = consignment + "
//			|                    <dt:quantity>"+ Формат(стрУровня.Количество,"ЧРД=.; ЧГ=0;ЧН=0") +"</dt:quantity>";   
//			
//			для каждого стрМаркировки из Док.Маркировка Цикл				
//				consignment = consignment + "
//				|                    <dt:productMarks class='"+ПолучитьИдентификаторПеречисления(стрМаркировки.Класс)+"'>"+стрМаркировки.Маркировка+"</dt:productMarks>";
//			КонецЦикла;
//			
//			consignment = consignment + "
//       		|                  </dt:package>";
//		КонецЦикла;
//		consignment = consignment + "
//		|                </vd:packageList>";
//	КонецЕсли;
//	
//	
//	consignment = consignment + "	
//    |          </vd:consignment>";		
//	
//	
////****************	
////	тзУпаковка = Док.УровниУпаковки.Выгрузить();
////	тзМаркировка = Док.Маркировка.Выгрузить();
////	consignment = consignment+  УровниУпаковки_в_XML(док,тзУпаковка,тзМаркировка);
//		
//	ЗапросПодвал = "";
//	Если ЗначениеЗаполнено(док.Перевозчик_ХозСубъект) Тогда
//	ЗапросПодвал = "		  
//        |      <vd:broker>
//        |        <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
//        |      </vd:broker>";
//	КонецЕсли;
//	
//	
//	ЗапросПодвал = ЗапросПодвал+"		  
//        |      <vd:transportInfo>
//        |        <vd:transportType>1</vd:transportType>
//        |        <vd:transportNumber>
//        |          <vd:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</vd:vehicleNumber>
//        |        </vd:transportNumber>
//        |      </vd:transportInfo>";
//	
//	
//	ЗапросПодвал = ЗапросПодвал+"
//        |      <vd:transportStorageType>"+ ТермическиеУсловияПеревозки.Получить( док.ТермическоеСостояние-1 ) +"</vd:transportStorageType>";
//	
//	
//	ЗапросПодвал = ЗапросПодвал+"	
//        |      <vd:accompanyingForms>";
//	
//	Если док.ТтнТип > 0 тогда
//	//Тип товарно-транспортной накладной.
//    //Допустимые типы для waybill: 1, 2, 3, 4, 5
//		ЗапросПодвал = ЗапросПодвал+"		  
//       	|        <vd:waybill>
//        |          <vd:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</vd:issueSeries>
//   	    |          <vd:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:issueNumber>
//       	|          <vd:issueDate>"+ ДатаXML(док.ТтнДата) +"</vd:issueDate>
//        |          <vd:type>"+док.ТтнТип+"</vd:type>      
//   	    |        </vd:waybill>";
//	КонецЕсли;
//	
//	ЗапросПодвал = ЗапросПодвал+"		  
//        |        <vd:vetCertificate>
//        |          <vd:authentication>
//        |            <vd:purpose>
//        |              <bs:guid>"+ СокрЛП( СписокКонстант.Получить("ВСДЦель").Guid ) +"</bs:guid>		
//        |            </vd:purpose>
//        |            <vd:cargoInspected>"+ НашеБулево(док.cargoInspected) +"</vd:cargoInspected>";
//			ЗапросПодвал = ЗапросПодвал+ "
//			|             <vd:cargoExpertized>"+ПолучитьИдентификаторПеречисления(док.РезультатыИсследований)+"</vd:cargoExpertized>
////			|            <vd:locationProsperity>"+ СокрЛП(док.Местность) +"</vd:locationProsperity>
//			|";
//	
//		тзУсловияПеревозки = Док.УсловияПеревозки.Выгрузить();
//		Если ЗначениеЗаполнено(тзУсловияПеревозки) Тогда
//			ЗапросПодвал = ЗапросПодвал+ "		  
//			|            <vd:locationProsperity>"+ СокрЛП(док.Местность) +"</vd:locationProsperity>";
//			
//			Для каждого стрУсловия из тзУсловияПеревозки Цикл
//				Если стрУсловия.Отметка Тогда
//					ЗапросПодвал=ЗапросПодвал+"
//					|<vd:r13nClause>
//					|<vd:condition>
//					|<bs:guid>" + стрУсловия.GUID + "</bs:guid>
//					|</vd:condition>
//					|</vd:r13nClause>
//					|";	
//				КонецЕсли;
//			КонецЦикла;		
//		Иначе
//			ЗапросПодвал = ЗапросПодвал+ "
////			|             <vd:cargoExpertized>"+ПолучитьИдентификаторПеречисления(док.РезультатыИсследований)+"</vd:cargoExpertized>
//			|            <vd:locationProsperity>"+ СокрЛП(док.Местность) +"</vd:locationProsperity>
//			|";
//			
//		КонецЕсли;
//		
//		ЗапросПодвал = ЗапросПодвал+ ?(ЗначениеЗаполнено(док.особыеотметки) , "            <vd:specialMarks>"+ СокрЛП(док.особыеотметки) +"</vd:specialMarks>","");	
//		
//		ЗапросПодвал = ЗапросПодвал+ "
//        |          </vd:authentication>
//        |        </vd:vetCertificate>";
//	
//		СвязДок = Док.СвязанныеДокументы.Выгрузить();
//		Если ЗначениеЗаполнено(СвязДок) Тогда
//	    	Для каждого стрдок из СвязДок Цикл
//	        ЗапросПодвал = ЗапросПодвал+ "
//	        |        <vd:relatedDocument>
//    	    |          <vd:issueNumber>"+СокрЛП(стрдок.НомерДокумента)+"</vd:issueNumber>
//	        |          <vd:issueDate>"+ ДатаXML(стрдок.ДатаДокумента) +"</vd:issueDate>
//    	    |          <vd:type>"+стрдок.ТипДокумента+"</vd:type>
//        	|          <vd:relationshipType>"+стрдок.ТипОтношенияДок+"</vd:relationshipType>
//	        |        </vd:relatedDocument>";
//			КонецЦикла;
//        КонецЕсли;
//		
//		
//	ЗапросПодвал = ЗапросПодвал+ "
//    |          </vd:accompanyingForms>
//    |        </merc:returnedDelivery>";

//Тест = "	
//    |          <vd:consignor>
//    |            <dt:businessEntity>
//    |              <bs:uuid>cbee869d-5405-4181-a1d8-7e8c8af4597b</bs:uuid>
//    |              <bs:guid>4277703a-7b49-455c-a2c3-3215faeca5d2</bs:guid>
//    |            </dt:businessEntity>
//    |            <dt:enterprise>
//    |              <bs:uuid>1820e24c-8ac5-4985-a472-43111095166c</bs:uuid>
//    |              <bs:guid>01c5c8be-08d5-405d-a7fa-9da5960f560c</bs:guid>
//    |            </dt:enterprise>
//    |          </vd:consignor>
//    |          <vd:consignee>
//    |            <dt:businessEntity>
//    |              <bs:uuid>5810843e-4d66-4d14-8d00-5221f9454095</bs:uuid>
//    |              <bs:guid>fcd89443-218a-11e2-a69b-b499babae7ea</bs:guid>
//    |            </dt:businessEntity>
//    |            <dt:enterprise>
//    |              <bs:uuid>8888c36c-df2e-442f-b0d9-faef5e063b43</bs:uuid>
//    |              <bs:guid>ac264dc6-a3eb-4b0f-a86a-9c9577209d6f</bs:guid>
//    |            </dt:enterprise>
//    |          </vd:consignee>";
//Тест2 = "
//    |          <vd:consignment>
//    |            <vd:productType>5</vd:productType>
//    |            <vd:product>
//    |              <bs:guid>d34504bb-7a93-e1c8-4859-339eafd97c6c</bs:guid>
//    |            </vd:product>
//    |            <vd:subProduct>
//    |              <bs:guid>9540bfdd-4cd6-6f47-ae83-a32a36c36bfe</bs:guid>
//    |            </vd:subProduct>
//    |            <vd:productItem>
//    |              <bs:guid>1f8142f6-fbde-4c4a-bf94-e70c5961c1fe</bs:guid>
//    |            </vd:productItem>
//    |            <vd:volume>10</vd:volume>
//    |            <vd:unit>
//    |              <bs:guid>21ed96c9-337b-4a27-8761-c6e6ad3c9f5b</bs:guid>
//    |            </vd:unit>
//    |            <vd:dateOfProduction>
//    |              <vd:firstDate>
//    |                <dt:year>2020</dt:year>
//    |                <dt:month>12</dt:month>
//    |                <dt:day>6</dt:day>
//    |                <dt:hour>0</dt:hour>
//    |              </vd:firstDate>
//    |            </vd:dateOfProduction>
//    |            <vd:expiryDate>
//    |              <vd:firstDate>
//    |                <dt:year>2021</dt:year>
//    |                <dt:month>12</dt:month>
//    |                <dt:day>6</dt:day>
//    |                <dt:hour>1</dt:hour>
//    |              </vd:firstDate>
//    |            </vd:expiryDate>
//    |            <vd:batchID>BN1726452238</vd:batchID>
//    |            <vd:perishable>false</vd:perishable>
//    |            <vd:origin>
//    |              <vd:country>
//    |                <bs:guid>74a3cbb1-56fa-94f3-ab3f-e8db4940d96b</bs:guid>
//    |              </vd:country>
//    |              <vd:producer>
//    |                <dt:enterprise>
//    |                  <bs:guid>ac264dc6-a3eb-4b0f-a86a-9c9577209d6f</bs:guid>
//    |                </dt:enterprise>
//    |                <dt:role>PRODUCER</dt:role>
//    |              </vd:producer>
//    |            </vd:origin>
//    |            <vd:lowGradeCargo>false</vd:lowGradeCargo>
//    |          </vd:consignment>";
//	
//	Тест3 = "
//    |          <vd:broker>
//    |            <bs:uuid>cbee869d-5405-4181-a1d8-7e8c8af4597b</bs:uuid>
//    |            <bs:guid>4277703a-7b49-455c-a2c3-3215faeca5d2</bs:guid>
//    |          </vd:broker>
//    |          <vd:transportInfo>
//    |            <vd:transportType>1</vd:transportType>
//    |            <vd:transportNumber>
//    |              <vd:vehicleNumber>vehicleNumber</vd:vehicleNumber>
//    |            </vd:transportNumber>
//    |          </vd:transportInfo>
//    |          <vd:transportStorageType>VENTILATED</vd:transportStorageType>
//    |          <vd:accompanyingForms>
//    |            <vd:waybill>
//    |              <vd:issueSeries>wbSeries</vd:issueSeries>
//    |              <vd:issueNumber>waybillNumber</vd:issueNumber>
//    |              <vd:issueDate>2017-02-13</vd:issueDate>
//    |              <vd:type>1</vd:type>
//    |            </vd:waybill>
//    |            <vd:vetCertificate>
//    |              <vd:authentication>
//    |                <vd:purpose>
//    |                  <bs:guid>5b90da1b-e089-11e1-bcf3-b499babae7ea</bs:guid>
//    |                </vd:purpose>
//    |                <vd:cargoInspected>true</vd:cargoInspected>
//    |                <vd:cargoExpertized>VSEFULL</vd:cargoExpertized>
//    |                <vd:locationProsperity>Местность благополучна</vd:locationProsperity>
//    |              </vd:authentication>
//    |            </vd:vetCertificate>
//    |          </vd:accompanyingForms>
//    |        </merc:returnedDelivery>";
//	Запрос = ЗапросШапка + consignment + ЗапросПодвал;
//	Возврат Запрос;
//КонецФункции

//Функция ВСД2_входящийГашение_ЗапросXML(док)
//	
//	Если Док.КоличествоПринять = 0 тогда
//		Решение = "RETURN_ALL";	
//	ИначеЕсли Док.КоличествоВозврат = 0 Тогда
//		Решение = "ACCEPT_ALL";
//	Иначе
//		Решение = "PARTIALLY";			
//	КонецЕсли;
////	КонецЕсли;
//	
//		Запрос="
//	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
//	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
//	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
//	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
//	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
//	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
//	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
//	|  <SOAP-ENV:Header/>
//	|  <SOAP-ENV:Body>  
//	|    <apldef:submitApplicationRequest>
//	|      <apldef:apiKey>"+ СокрЛП( СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
//	|      <apl:application>
//	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
//	|        <apl:issuerId>"+ СокрЛП( СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
//	|        <apl:issueDate>" + ДатаXML(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
//	|        <apl:data>
//	|          <merc:processIncomingConsignmentRequest>
//	|            <merc:localTransactionId>[GUID]</merc:localTransactionId>
//	|            <merc:initiator>
//	|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
//	|            </merc:initiator>";
//   Запрос = запрос +"
//	|            <merc:delivery>
//	|              <vd:deliveryDate>" + ДатаXML(?(ЗначениеЗаполнено(док.ТтнДата),док.ТтнДата,ТекущаяДата()), "T00:00:00") + "</vd:deliveryDate>
//	|              <vd:consignor>
//	|                <dt:businessEntity>
//	|                  <bs:guid>"+СокрЛП(док.Отправитель_ХозСубъект.GUID)+"</bs:guid>
//	|                </dt:businessEntity>";
//	Если ЗначениеЗаполнено(док.Отправитель_Площадка) Тогда // У импортных ВСД отсутствует
//		Запрос = запрос +"
//		|                <dt:enterprise>
//		|                  <bs:guid>"+ СокрЛП(док.Отправитель_Площадка.GUID) +"</bs:guid>
//		|                </dt:enterprise>";
//	КонецЕсли;
//	// У импортных ВСД может отсутствовать
//	ВремПолучатель_Площадка = ?(ЗначениеЗаполнено(док.Получатель_Площадка) ,док.Получатель_Площадка,СписокКонстант.Получить("Отправитель_Площадка")); // возьмем из Парметров
//   Запрос = запрос +"
//	|              </vd:consignor>
//	|              <vd:consignee>
//	|                <dt:businessEntity>
//	|                  <bs:guid>"+ СокрЛП(док.Получатель_ХозСубъект.GUID) +"</bs:guid>
//	|                </dt:businessEntity>
//	|                <dt:enterprise>
//	|                  <bs:guid>"+ СокрЛП(ВремПолучатель_Площадка.GUID) +"</bs:guid>
//	|                </dt:enterprise>
//	|              </vd:consignee>";
////********************************   
//Если Док.КоличествоПринять > 0 Тогда
//    Запрос = запрос +"
//	|              <vd:consignment>
//	|                <vd:productType>"+ док.Продукция.Тип +"</vd:productType>
//	|                <vd:product>
//	|                  <bs:guid>"+ СокрЛП(док.Продукция.GUID) +"</bs:guid>
//	|                </vd:product>
//	|                <vd:subProduct>
//	|                  <bs:guid>"+ СокрЛП(док.ВидПродукции.GUID) +"</bs:guid>
//	|                </vd:subProduct>
//	|                <vd:productItem>"; 
//	
//// <dt:globalID> 	dt:GTINType 	[0..1] 	Trade Identification Number (GTIN) - идентификационный номер продукции производителя. Уникальность не проверяется. 	<dt:globalID>85672854</dt:globalID>
////·<dt:name> 	bs:String255 	[0..1] 	Наименование продукции. 	<dt:name>Наименование</dt:name>
//// <dt:code> 	bs:String255 	[0..1] 	Артикул (код) продукции в соответствии с внутренним кодификатором производителя.
//// Артикул должен быть уникален в пределах одного производителя 	<dt:code>12</dt:code> 	

//	Если ЗначениеЗаполнено(док.Продукция_Элемент.GUID) Тогда
//		Запрос = Запрос + "
//		|              <bs:guid>"+ СокрЛП(док.Продукция_Элемент.GUID) +"</bs:guid>";
//	КонецЕсли;
//	Попытка
//		Запрос = Запрос + "
//		|              <dt:name>"+ СокрЛП(док.НаименованиеПродукции) +"</dt:name>";
//	Исключение
//		Запрос = Запрос + "
//		|              <dt:name>"+ СокрЛП(док.Продукция_Элемент.Наименование) +"</dt:name>";
//	КонецПопытки;
//	
////	ЖД Ошибка при указании ГТИН - Element 'globalID' not expected
////	Если ЗначениеЗаполнено(док.GTIN)  Тогда
////		Запрос = Запрос + "
////		|              <dt:globalID>"+ СокрЛП(док.GTIN) +"</dt:globalID>";
////	КонецЕсли;
//// ЖД На наличие Артикула Меркурий никак не реагирует
////	Если ЗначениеЗаполнено(док.Артикул)  Тогда
////		Запрос = Запрос + "
////		|              <dt:code>"+ СокрЛП(док.Артикул) +"</dt:code>";
////	КонецЕсли;
//	
//// сведения о фасовке
//	Если ЗначениеЗаполнено(док.ФасовкаФормаУпаковки)  Тогда
//		Запрос = Запрос + "
//		|             <dt:packaging>
//		|               <dt:packagingType>
//		|                  <bs:guid>"+ СокрЛП(док.ФасовкаФормаУпаковки.GUID) +"</bs:guid>
//		|               </dt:packagingType>
//		|               <dt:quantity>"+ Формат(док.ФасовкаКоличество, "ЧРД=.; ЧГ=0;ЧН=0") +"</dt:quantity>
//		|               <dt:volume>"+ Формат(док.ФасовкаОбъем, "ЧРД=.; ЧГ=0;ЧН=0") +"</dt:volume>
//		|               <dt:unit>
//		|                  <bs:guid>"+ СокрЛП(док.ФасовкаЕдиницаИзм.GUID) +"</bs:guid>
//		|               </dt:unit>
//		|             </dt:packaging>";
//	КонецЕсли;


//	Запрос = Запрос + "
//			|            </vd:productItem>
//			|            <vd:volume>"+ Формат(Док.КоличествоПринять, "ЧРД=.; ЧГ=0;ЧН=0") +"</vd:volume>
//			|            <vd:unit>
//			|              <bs:guid>"+ СокрЛП(док.ЕдиницаИзмерения.GUID) +"</bs:guid>
//			|            </vd:unit>";
//	
//		Если (ЗначениеЗаполнено(док.ДатаИзготовления1)) или (ЗначениеЗаполнено(док.ДатаИзготовления2)) или (ЗначениеЗаполнено(док.ДатаИзготовления)) Тогда
//			Запрос = Запрос + "
//        	|                <vd:dateOfProduction>"; 

//			Если (ЗначениеЗаполнено(док.ДатаИзготовления1)) Тогда
//				Запрос = Запрос + "
//				|              <vd:firstDate>";
//				
//				Если ЗначениеЗаполнено(док.ДатаИзготовления1СЗ) Тогда
//					сзДаты = ЗначениеИзСтрокиВнутр(док.ДатаИзготовления1СЗ);
//					для каждого элементсз из сзДаты Цикл
//						Запрос = Запрос + "
//						|"+элементсз.значение;
//					КонецЦикла;
//				Иначе
//					Запрос = Запрос + "
//					|                <dt:year>"+ДатаГод(док.ДатаИзготовления1)+"</dt:year>
//					|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления1) +"</dt:month>
//					|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления1) +"</dt:day>
//					|                <dt:hour>0</dt:hour>";
//				КонецЕсли;
//				Запрос = Запрос + "
//				|              </vd:firstDate>";
//			КонецЕсли;
//			Если ((ЗначениеЗаполнено(док.ДатаИзготовления2)) и 
//					(док.ДатаИзготовления2 > док.ДатаИзготовления1)) Тогда
//				Запрос = Запрос + "
//				|              <vd:secondDate>";
//				
//				Если ЗначениеЗаполнено(док.ДатаИзготовления2СЗ) Тогда
//					сзДаты = ЗначениеИзСтрокиВнутр(док.ДатаИзготовления2СЗ);
//					для каждого элементсз из сзДаты Цикл
//						Запрос = Запрос + "
//						|"+элементсз.значение;
//					КонецЦикла;
//				Иначе
//					
//					Запрос = Запрос + "
//					|                <dt:year>"+ ДатаГод(док.ДатаИзготовления2) +"</dt:year>
//					|                <dt:month>"+ ДатаМесяц(док.ДатаИзготовления2) +"</dt:month>
//					|                <dt:day>"+ ДатаЧисло(док.ДатаИзготовления2) +"</dt:day>
//					|                <dt:hour>0</dt:hour>";				
//				КонецЕсли;
//				Запрос = Запрос + "
//				|              </vd:secondDate>";
//				
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(док.ДатаИзготовления) Тогда
//				Запрос = Запрос + "
//				|              <vd:informalDate>"+ СокрЛП(док.ДатаИзготовления) +"</vd:informalDate>";
//			КонецЕсли;
//			Запрос = Запрос + "
//			|                </vd:dateOfProduction>"; 
//		КонецЕсли;
//		
//		Если (ЗначениеЗаполнено(док.ДатаСрокГодности1) ) или (ЗначениеЗаполнено(док.ДатаСрокГодности2) ) или (ЗначениеЗаполнено(док.ДатаСрокГодности)) Тогда
//			Запрос = Запрос + "
//				|                <vd:expiryDate>";
//			Если (ЗначениеЗаполнено(док.ДатаСрокГодности1)) Тогда
//				Запрос = Запрос + "
//				|              <vd:firstDate>";
//				
//				Если ЗначениеЗаполнено(док.ДатаСрокГодности1СЗ) Тогда
//					сзДаты = ЗначениеИзСтрокиВнутр(док.ДатаСрокГодности1СЗ);
//					для каждого элементсз из сзДаты Цикл
//						Запрос = Запрос + "
//						|"+элементсз.значение;
//					КонецЦикла;
//				Иначе				
//					Запрос = Запрос + "
//					|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности1) +"</dt:year>
//					|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности1) +"</dt:month>
//					|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности1) +"</dt:day>
//					|                <dt:hour>0</dt:hour>";
//				КонецЕсли;
//				Запрос = Запрос + "
//				|              </vd:firstDate>";
//			КонецЕсли;
//			Если ((ЗначениеЗаполнено(док.ДатаСрокГодности2)) и 
//					(док.ДатаСрокГодности2 > док.ДатаСрокГодности1)) Тогда
//				Запрос = Запрос + "
//				|              <vd:secondDate>";
//				Если ЗначениеЗаполнено(док.ДатаСрокГодности2СЗ) Тогда
//					сзДаты = ЗначениеИзСтрокиВнутр(док.ДатаСрокГодности2СЗ);
//					для каждого элементсз из сзДаты Цикл
//						Запрос = Запрос + "
//						|"+элементсз.значение;
//					КонецЦикла;
//				Иначе
//					Запрос = Запрос + "
//					|                <dt:year>"+ ДатаГод(док.ДатаСрокГодности2) +"</dt:year>
//					|                <dt:month>"+ ДатаМесяц(док.ДатаСрокГодности2) +"</dt:month>
//					|                <dt:day>"+ ДатаЧисло(док.ДатаСрокГодности2) +"</dt:day>
//					|                <dt:hour>0</dt:hour>";
//				КонецЕсли;
//				Запрос = Запрос + "
//				|              </vd:secondDate>";
//			КонецЕсли;
//			Если ЗначениеЗаполнено(док.ДатаСрокГодности) Тогда
//				Запрос = Запрос + "
//				|              <vd:informalDate>"+ СокрЛП(док.ДатаСрокГодности) +"</vd:informalDate>";
//			КонецЕсли;
//			
//			
//			Запрос = Запрос + "
//				|            </vd:expiryDate>";
//		КонецЕсли;
//		Попытка
//			Если ЗначениеЗаполнено(док.НомерПартии) Тогда
//				Попытка
//					спНомераПартий = ЗначениеИзСтрокиВнутр(Док.НомерПартии);
//					Для Каждого СтрокаНомера из спНомераПартий Цикл
//						Запрос = Запрос + "
//						|			<vd:batchID>"+СокрЛП(СтрокаНомера.Значение)+"</vd:batchID>";
//					КонецЦикла;
//				Исключение
//				 	СообщитьИнфо("Не удалось преобразовать номера партий");
//					СообщитьИнфо(ОписаниеОшибки());
//				КонецПопытки;
//			КонецЕсли;	
//		Исключение КонецПопытки;	

//		// По идее страну мы загрузили в ТЗ, вот только в документе ее нет
//		Попытка ГУИДСтраны = СокрЛП( док.Страна_Гуид); Исключение ГУИДСтраны = СокрЛП( СписокКонстант.Получить("Страна").GUID); КонецПопытки;
//		Запрос = Запрос + "
//			|			<vd:perishable>"+НашеБулево(док.скоропортящийся)+"</vd:perishable>
//			|			<vd:origin>
//			|            <vd:country>
//			|              <bs:guid>"+ ГУИДСтраны +"</bs:guid>
//			|            </vd:country>";
//			
//		Если ЗначениеЗаполнено(Док.ПроизводителиСписок) Тогда    
//			СпПроизводители = ЗначениеИзСтрокиВнутр(Док.ПроизводителиСписок);
//			Для Каждого Производитель из СпПроизводители Цикл
//				Запрос=Запрос+"
//				|        		<vd:producer>
//				|          			<dt:enterprise>";
//				Если ЗначениеЗаполнено(Производитель.Площадка) Тогда
//					Запрос=Запрос+"	
//					|            			<bs:guid>"+ СокрЛП(Производитель.Площадка.GUID) +"</bs:guid>";
//				КонецЕсли;
//				Если ЗначениеЗаполнено(Производитель.Имя) Тогда
//					Запрос=Запрос+"	
//					|            			<dt:name>"+ СокрЛП(Производитель.Имя) +"</dt:name>";
//				КонецЕсли;
//				Запрос=Запрос+"
//				|          			</dt:enterprise>
//				|					<dt:role>"+ СокрЛП(Производитель.Роль) +"</dt:role>
//				|        		</vd:producer>";
//			КонецЦикла;
//		КонецЕсли;
//			
//			
//		Запрос = Запрос + "
//	|                </vd:origin>
//	|                <vd:lowGradeCargo>"+НашеБулево(док.некачественный)+"</vd:lowGradeCargo>"; 
////<vd:packageList> 	dt:PackageList 	[0..1] 	Список физической упаковки. ЖД Уровни упаковки
//	Если ЗначениеЗаполнено(док.УровниУпаковки) Тогда 
//    	ТЗУровни = ЗначениеИзСтрокиВнутр(док.УровниУпаковки);
//	Иначе
//		ТЗУровни = "";
//	КонецЕсли;
//	Если ТипЗнч(ТЗУровни) = Тип("ТаблицаЗначений") Тогда
//		Запрос=Запрос+"
//		|                <vd:packageList>";
//		
//		для каждого стрУровня из ТЗУровни Цикл 		
//			Запрос=Запрос+"
//			|                  <dt:package>
//			|                    <dt:level>"+стрУровня.НомерУровня+"</dt:level>";
//			Если ЗначениеЗаполнено(стрУровня.Упаковка.GUID) Тогда
//				Запрос=Запрос+"
//				|                    <dt:packingType>
//				|                      <bs:guid>"+ СокрЛП(стрУровня.Упаковка.GUID) +"</bs:guid>
//				|                    </dt:packingType>";
//			КонецЕсли;
//			Запрос=Запрос+"
//			|                    <dt:quantity>"+ Формат(стрУровня.Колво,"ЧРД=.; ЧГ=0;ЧН=0") +"</dt:quantity>";   
//			Попытка	СзМаркировок = ЗначениеИзСтрокиВнутр(стрУровня.Маркировки); исключение СзМаркировок = ""; КонецПопытки;
//			Если ТипЗнч(СзМаркировок) = Тип("СписокЗначений") Тогда
//				для каждого стрМаркировки из СзМаркировок Цикл				
//					стрМарк=стрМаркировки.Представление;
//					ЗнМарк = стрМаркировки.Значение;					
//					Запрос=Запрос+"
//					|                    <dt:productMarks class='"+стрМарк+"'>"+знМарк+"</dt:productMarks>";
//				КонецЦикла;
//			КонецЕсли;
//			Запрос=Запрос+"
//       		|                  </dt:package>";
//		КонецЦикла;
//		Запрос=Запрос+"
//		|                </vd:packageList>";
//	КонецЕсли;


//		Запрос=Запрос+"
//	|              </vd:consignment>";
//КонецЕсли; // ПринимаемоеКолво > 0
////*************************	
//	
//		Если ЗначениеЗаполнено(СокрЛП(док.Перевозчик_ХозСубъект)) Тогда  
//			Запрос=Запрос+"			
//			|        <vd:broker>
//			|          <bs:guid>"+ СокрЛП(док.Перевозчик_ХозСубъект.GUID) +"</bs:guid>
//			|        </vd:broker>";
//		КонецЕсли;
//		Если ЗначениеЗаполнено(СокрЛП(док.ТипТС)) Тогда  
//			Запрос=Запрос+"			
//			|        <vd:transportInfo>
//			|          <vd:transportType>"+СокрЛП(док.ТипТС)+"</vd:transportType>
//			|          <vd:transportNumber>";
//	
//			Если СокрЛП(Док.ТипТС) = "1" Тогда
//				Попытка
//					// Странный важный момент - контейнер д.б. первым !
//				Если ЗначениеЗаполнено(док.номерКонтейнера) Тогда
//			    	Запрос = Запрос+"
//					|            <vd:containerNumber>"+ СокрЛП(док.номерКонтейнера) +"</vd:containerNumber>
//					|";
//				КонецЕсли;
//				Исключение КонецПопытки;

//				Запрос = Запрос+"
//				|            <vd:vehicleNumber>"+ СокрЛП(док.номерАвто) +"</vd:vehicleNumber>
//				|"; 
//				Попытка
//				Если ЗначениеЗаполнено(док.номерПолуприцепа) Тогда
//			    	Запрос = Запрос+"
//					|            <vd:trailerNumber>"+ СокрЛП(док.номерПолуприцепа) +"</vd:trailerNumber>
//					|";
//				КонецЕсли;
//				Исключение КонецПопытки;
//			иначеЕсли СокрЛП(Док.ТипТС) = "2" Тогда
//		    Запрос = Запрос+"
//			|            <vd:wagonNumber>"+ СокрЛП(док.номерАвто) +"</vd:wagonNumber>
//			|"; 
//			иначеЕсли СокрЛП(Док.ТипТС) = "3" Тогда
//		    Запрос = Запрос+"
//			|            <vd:flightNumber>"+ СокрЛП(док.номерАвто) +"</vd:flightNumber>
//			|";
//			иначеЕсли (СокрЛП(Док.ТипТС) = "4") или (СокрЛП(Док.ТипТС) = "5") или (СокрЛП(Док.ТипТС) = "6") Тогда
//		    Запрос = Запрос+"
//			|            <vd:shipName>"+ СокрЛП(док.номерАвто) +"</vd:shipName>
//			|";
//			
//			КонецЕсли;	
//			Запрос=Запрос+"
//			|          </vd:transportNumber>
//			|        </vd:transportInfo>";
//		КонецЕсли;
//		Если ЗначениеЗаполнено(док.ТермическоеСостояние) Тогда		
//			Запрос=Запрос+"			
//			|              <vd:transportStorageType>"+ док.ТермическиеУсловияПеревозки +"</vd:transportStorageType>";
//		КонецЕсли;	


//	Запрос=Запрос+"			
//	|              <vd:accompanyingForms>";
// // Для гашения нужен только ТТН, при "Без ТТН" - waybill не нужен
// 	Если ЗначениеЗаполнено(док.ТтнНомер) Тогда
//		Запрос=Запрос+"			
//		|                <vd:waybill>  
//		|                  <vd:issueSeries>"+ СокрЛП(док.ТтнСерия) +"</vd:issueSeries>
//		|                  <vd:issueNumber>"+ СокрЛП(док.ТтнНомер) +"</vd:issueNumber>
//		|                  <vd:issueDate>"+ ДатаXML(док.ТтнДата) +"</vd:issueDate>";
//		Попытка
//			Запрос=Запрос+"			
//			|                  <vd:type>"+ док.ТтнТип +"</vd:type>";
//		Исключение
//			//Добавить Реквизит ттнТип в документ ВСД2_входящий
//			СообщитьИнфо("Добавьте Реквизит ттнТип (число 1.0) в документ ВСД2_входящий");
//			СообщитьИнфо("Отправляю с типом 1 - Товарно транспортная накладная");
//			Запрос=Запрос+"			
//			|                  <vd:type>1</vd:type>";
//		КонецПопытки;
//		Запрос=Запрос+"			
//		|                </vd:waybill>";
//	КонецЕсли;	
//		
//	Запрос=Запрос+"		
//	|                <vd:vetCertificate>";
//	Если док.ВидВСД=1 Тогда
//		Запрос = Запрос + ВСД2_ВходящийБумажныйГашение_ЗапросXML(док);
//	Иначе	
//		Запрос=Запрос+"
//		|                  <bs:uuid>"+ СокрЛП(док.UUID) +"</bs:uuid>";
//	КонецЕсли;
//	
//	Запрос=Запрос+"			
//	|                </vd:vetCertificate>
//	|              </vd:accompanyingForms>
//	|            </merc:delivery>
//	|            <merc:deliveryFacts>";
//	Если док.ВидВСД=1 Тогда
//		Запрос=Запрос+"			
//		|              <vd:vetCertificatePresence>PAPER</vd:vetCertificatePresence>";
//	Иначе
//		Запрос=Запрос+"			
//		|              <vd:vetCertificatePresence>ELECTRONIC</vd:vetCertificatePresence>";
//	КонецЕсли;
//	
////	|";
////<vd:docInspection> 	vd:DeliveryInspection 	[1..1] 	Соответствуют ли сведения о партии, указанной в ВСД, фактическим. 	
////<vd:responsible> 	dt:User 	[1..1] 	Пользователь, указавший результат соответствия. 	
////<vd:login> 	xs:NCName 	[0..1] 	Логин пользователя, зарегистрированного в системе Меркурий. 	<vd:login>user_ab_150101</vd:login>
////</vd:responsible> 				
////·<vd:result> 	vd:DeliveryInspectionResult 	[1..1] 	Результат соответствия. 	<vd:result>CORRESPONDS</vd:result>
////</vd:docInspection> 

//	Запрос=Запрос+"			
//	|              <vd:docInspection>
//	|                <vd:responsible>
//	|                  <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_login")) +"</vd:login>
//	|                </vd:responsible>
//	|                <vd:result>CORRESPONDS</vd:result>
//	|              </vd:docInspection>
//	|              <vd:vetInspection>
//	|                <vd:responsible>
//	|                  <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_vetdoctor_login")) +"</vd:login>
//	|                </vd:responsible>
//	|                <vd:result>CORRESPONDS</vd:result>
//	|              </vd:vetInspection>
//	|              <vd:decision>"+Решение+"</vd:decision>
//	|            </merc:deliveryFacts>";
//	
//	// Акт несоотв.
//   	Если (ФлАктНесоответствия = 1) или Не(Док.Количество = (Док.КоличествоПринять + Док.КоличествоВозврат)) Тогда
//	Запрос = Запрос+"
//	|            <merc:discrepancyReport>
////	|              <vd:issueSeries>S1624387448</vd:issueSeries>  Для электронного акта несоответствия серия генерируется автоматически
////	|              <vd:issueNumber>N1584929183</vd:issueNumber>
//	|              <vd:issueDate>"+ ?(ЗначениеЗаполнено(ДатаXML(док.ТтнДата)),ДатаXML(док.ТтнДата),ДатаXML(Док.Дата)) +"</vd:issueDate>
//	|              <vd:reason>
//	|                <vd:name>"+?(ЗначениеЗаполнено(СокрЛП(тПричинаАкта)),СокрЛП(тПричинаАкта),"несоответствие")+"</vd:name>
//	|              </vd:reason>
//	|              <vd:description>"+?(НЕ(ЗначениеЗаполнено(тОписаниеНесоответствия)),"Описание несоответствия",СокрЛП(тОписаниеНесоответствия)) +"</vd:description>
//	|            </merc:discrepancyReport>";
//    КонецЕсли;
//	
//	// Возврат поставщику
//	Если док.КоличествоВозврат > 0 тогда //ЗначениеЗаполнено(ДокВозврат) тогда
//		Запрос = Запрос + ГашениеБлокВозвратXML(док.ДокВСД, док.КоличествоВозврат);	
//	КонецЕсли;
//	

//	Запрос = Запрос+"
//	|          </merc:processIncomingConsignmentRequest>
//	|        </apl:data>
//	|      </apl:application>
//	|    </apldef:submitApplicationRequest>
//	|  </SOAP-ENV:Body>
//	|</SOAP-ENV:Envelope>	
//	|";	
//	

//	Возврат Запрос;
//КонецФункции

//Функция ПолучитьРезультат_ГашениеВСД2(applicationID, докСсылка="" ) Экспорт
//	
//	//стандартное поведение функции
//	Если НЕ(ЗначениеЗаполнено(applicationID)) Тогда
//		СообщитьИнфо("Пустая ссылка applicationID","!");
//		Возврат "Пустая ссылка applicationID";
//	КонецЕсли;
//	
//	Пауза( );
//	
//	СообщитьИнфо("Отправляем запрос ["+докСсылка+"]" );
//	//Результат = КомпонентаНаСервере.SendRequestResult( applicationID );
//	Результат = ПолучитьРезультатСервер( applicationID );
//	Если ЗначениеЗаполнено(докСсылка) Тогда 
//		докСсылка.applicationID = СокрЛП(КомпонентаНаСервере.ApplicationId);
//		докСсылка.Статус 		= СокрЛП(КомпонентаНаСервере.Status);
//		докСсылка.Комментарий = СокрЛП(КомпонентаНаСервере.ErrorMessage);
//		
//		СообщитьИнфо(" статус = "+докСсылка.Статус );
//		Если ЗначениеЗаполнено(СокрЛП(докСсылка.Комментарий)) Тогда
//			СообщитьИнфо("Ошибка: "+докСсылка.Комментарий);
//		КонецЕсли;
//			
//		Если (ЗначениеЗаполнено(докСсылка)) и (ТипЗНЧ(докСсылка) = ТИП("ДокументСсылка.ВСД2_входящий")) Тогда
//			СохранитьИмяОтветаВДокументе(докСсылка);
//			докОснованиеОбъект = докСсылка.ПолучитьОбъект();
//			докОснованиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
//			//  можно ВСД результирующий при Возврате загрузить
//			//ЗагрузитьXML_ВСД2(КомпонентаНаСервере.LogFileName, докСсылка);
//		КонецЕсли;	
//	КонецЕсли;
//	// ! ЗагрузитьXML_Партии2(КомпонентаНаСервере.LogFilename, "")	;
//		
//	УдалитьXML( КомпонентаНаСервере.LogFilename );
//	
//	Возврат Результат;
//КонецФункции

//Функция Отправить_ВСД2_ВходящийГашение(док)

//	Если Проверка_ВСД2_Входящий(док)=0 Тогда 
//		Возврат 0;
//	КонецЕсли;
//	
//	Если (КомпонентаНаСервере = Неопределено) и ЗначениеЗаполнено(АдресКомпонентыНаСервере) тогда
//		ЗагрузитьГлПеременныеИзВременногоХранилища();
//	КонецЕсли;
//	// refs #2346 31/01/19 - Берем данные о получателе из vetDocument 
//	Если Отправитель_Площадка <> Док.Получатель_Площадка Тогда
//		СообщитьИнфо("Отладка стр  10326 -> Текущая Площадка "+Отправитель_Площадка+" <> Получателю: "+Док.Получатель_Площадка+" Меняю Параметр");
//		Отправитель_Площадка = Док.Получатель_Площадка;  // Меняем у объекта и в Константах 
//		СписокКонстант.Вставить("Отправитель_Площадка", Отправитель_Площадка);
//	КонецЕсли;
//	Если Отправитель_ХозСубъект <> Док.Получатель_ХозСубъект Тогда
//		СообщитьИнфо("Отладка стр  10331 -> Текущий ХС "+Отправитель_ХозСубъект+" <> ХС Получателя: "+Док.Получатель_ХозСубъект+" Меняю Параметр");
//		Отправитель_ХозСубъект = Док.Получатель_ХозСубъект;
//		СписокКонстант.Вставить("Отправитель_ХозСубъект", Отправитель_ХозСубъект);
//	КонецЕсли;
//	// Окончание refs #2346 31/01/19
//	
//	ЗапросXML = ВСД2_входящийГашение_ЗапросXML(док);
//	метод = КомпонентаНаСервере.GetMethod();
//	метод.Service = "platform/services/2.0/ApplicationManagementService";
//    //метод.Service = "platform/services/ApplicationManagementService";
//    метод.Action = "submitApplicationRequest";	

//	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
//	Если ТипЗНЧ(Док) = ТИП("ДокументСсылка.ВСД2_входящий") Тогда
//		СохранитьИмяЗапросаВДокументе(Док);
//	КонецЕсли;
//	УдалитьXML( КомпонентаНаСервере.LogFilename);
//	Если ЗначениеЗаполнено(appID) Тогда
//		
//		Результат = ПолучитьРезультат_ГашениеВСД2(appID, док );
//		СообщитьИнфо("Результат = "+Результат);
//		Для А=1 По 10 Цикл
//			Если (Результат="IN_PROCESS") Тогда 
//				Результат = ПолучитьРезультат_ГашениеВСД2(appID, док );
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//	Возврат appID;
//	
//КонецФункции 

//Процедура ОтправкаЗапросовНаГашение() Экспорт
//	Отправлено = 0;
//	Для каждого СтрокаТЗ из ВСДВходящие Цикл 
//		Если НЕ(СтрокаТЗ.Отметка) Тогда
//		    Продолжить;
//		КонецЕсли;
//		
//		Если (СтрокаТЗ.КоличествоВозврат > 0) И НЕ ЗначениеЗаполнено(СтрокаТЗ.ДокВСД) Тогда 
//			СтрокаТЗ.ДокВСД = ЗаполнитьВСДВходящийИзТЗ(СтрокаТЗ);
//		ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.ДокВСД) тогда
//			СтрокаТЗ.ДокВСД = ЗаполнитьВСДВходящийИзТЗ(СтрокаТЗ); // Перезаполнить данными из ТЗ - вдруг юзер поменял все в колонках
//		КонецЕсли;

//		Если (ФлНеЗагружать = 0) Тогда//или (ЗначениеЗаполнено(СтрокаТЗ.ДокВСД)) Тогда   - изменить запрос на гашение по документу
//			Если НЕ(ЗначениеЗаполнено(СтрокаТЗ.ДокВСД)) Тогда
//			    Продолжить;
//			КонецЕсли;
//			Если СтрокаТЗ.ДокВСД.Проведен Тогда
//			    Продолжить;
//			КонецЕсли;
//			Рез = Отправить_ВСД2_ВходящийГашение(СтрокаТЗ.ДокВСД);			
//		Иначе
//			Если СокрЛП(СтрокаТЗ.Статус) = "COMPLETED" Тогда
//				СообщитьИнфо("Партия уже оформлена. uuid "+СтрокаТЗ.uuid);
//		    	Продолжить;
//			КонецЕсли;
//			Рез = Отправить_ВСД2_ВходящийГашение(СтрокаТЗ); // не создаем документ ВСД2_Входящий в 1с
//		КонецЕсли;
//		Отправлено = Отправлено + 1;
//		СтрокаТЗ.Отметка = 0;
//	КонецЦикла;
//	
//	Если Отправлено>0 Тогда
//    	//ВремТЗ.Выгрузить(ВСДВходящие); 
//		//РаскраситьСписокДокументов();    
//	КонецЕсли;
//	
//КонецПроцедуры // Отправка()

//Функция ПолучитьСписокВСД2_ЗапросXML(ГУИД_Площадки, vetDocumentType, vetDocumentStatus, Смещение, ПоступилиС = "", ПоступилиПо ="",ОтХСГУИД = "", ОтПлощадкиГУИД="")

//	Запрос = "
//	|<SOAP-ENV:Envelope xmlns:dt='http://api.vetrf.ru/schema/cdm/dictionary/v2'
//	|xmlns:bs='http://api.vetrf.ru/schema/cdm/base'
//	|xmlns:merc='http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2'
//	|xmlns:apldef='http://api.vetrf.ru/schema/cdm/application/ws-definitions'
//	|xmlns:apl='http://api.vetrf.ru/schema/cdm/application'
//	|xmlns:vd='http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2'
//	|xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
//	|  <SOAP-ENV:Header/>
//	|  <SOAP-ENV:Body>
//	|    <apldef:submitApplicationRequest>
//	|      <apldef:apiKey>"+ СокрЛП( СписокКонстант.Получить("param_api_key") ) +"</apldef:apiKey>
//	|      <apl:application>
//	|        <apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>
//	|        <apl:issuerId>"+ СокрЛП( СписокКонстант.Получить("param_issuer_id") ) +"</apl:issuerId>
//	|        <apl:issueDate>" + ДатаXML(ТекущаяДата(), "T00:00:00") + "</apl:issueDate>
//	|        <apl:data>
//	|          <merc:getVetDocumentListRequest>
//	|            <merc:localTransactionId>a1</merc:localTransactionId>
//	|            <merc:initiator>
//	|              <vd:login>"+ СокрЛП( СписокКонстант.Получить("param_intiator_login") ) +"</vd:login>
//	|            </merc:initiator>
//	|            <bs:listOptions>
//	|              <bs:count>1000</bs:count>
//	|              <bs:offset>"+СтрЗаменить( Смещение , Символы.НПП ,"")+"</bs:offset>
//	|            </bs:listOptions>
//	|            <vd:vetDocumentType>"+ vetDocumentType +"</vd:vetDocumentType>
//	|            <vd:vetDocumentStatus>"+ vetDocumentStatus +"</vd:vetDocumentStatus>";
//	Если значениеЗаполнено(ПоступилиС) тогда
//		Запрос = Запрос +"
//		|            <vd:issueDateInterval>
//		|                <bs:beginDate>"+ ДатаXML(ПоступилиС, "T00:00:00") +"</bs:beginDate>
//		|                <bs:endDate>"+ ДатаXML(ПоступилиПо, "T23:59:59") +"</bs:endDate>
//		|            </vd:issueDateInterval>";
//	КонецЕсли;
//	Если значениеЗаполнено(ОтХСГУИД) или значениеЗаполнено(ОтПлощадкиГУИД) тогда
//		Запрос = Запрос +"
//		|            <vd:consignor>";
//		Если значениеЗаполнено(ОтХСГУИД) тогда
//			Запрос = Запрос +"
//			|               <dt:businessEntity>
//			|                  <bs:guid>"+СокрЛП(ОтХСГУИД)+"</bs:guid>
//			|               </dt:businessEntity>";
//		КонецЕсли;
//		Если значениеЗаполнено(ОтПлощадкиГУИД) тогда
//			Запрос = Запрос +"
//			|               <dt:enterprise>
//			|                  <bs:guid>"+СокрЛП(ОтПлощадкиГУИД)+"</bs:guid>
//			|               </dt:enterprise>";
//		КонецЕсли;
//		Запрос = Запрос +"
//		|            </vd:consignor>";
//	КонецЕсли;
//	
//	Запрос = Запрос +"
//	|            <dt:enterpriseGuid>"+ ГУИД_Площадки +"</dt:enterpriseGuid>
//	|          </merc:getVetDocumentListRequest>
//	|        </apl:data>
//	|      </apl:application>
//	|    </apldef:submitApplicationRequest>
//	|  </SOAP-ENV:Body>
//	|</SOAP-ENV:Envelope>	
//	|";
//	
//	Если значениеЗаполнено(ПоступилиС) или значениеЗаполнено(ОтХСГУИД) тогда
//		Запрос = стрЗаменить(Запрос,"mercury-g2b.service:2.0","mercury-g2b.service:2.1");
//	КонецЕсли;
//	Возврат Запрос;
//КонецФункции

//Функция  ПолучитьСписокВСД(Предприятие, vetDocumentType	= "INCOMING", vetDocumentStatus = "CONFIRMED", Смещение,ПоступилиС = "", ПоступилиПо ="",ОтХС = "", ОтПлощадки="") Экспорт
//	ВСДВходящие.Очистить();
//	
//	Параметры = ВСД.ЗагрузитьПараметры( Организация );
//	Результат = ВСД_Запросы.ПолучитьСписокВСД(Параметры, ВСДВходящие, Предприятие, vetDocumentType, vetDocumentStatus, Смещение,ПоступилиС, ПоступилиПо,ОтХС, ОтПлощадки);
//	
////	Если НЕ(ЗначениеЗаполнено(Предприятие.GUID)) Тогда 
////		СообщитьИнфо("В выбранной Площадке пустой GUID");
////		Возврат "REJECTED";
////	КонецЕсли;
////	
////	Если (КомпонентаНаСервере = Неопределено) и ЗначениеЗаполнено(АдресКомпонентыНаСервере) тогда
////		ЗагрузитьГлПеременныеИзВременногоХранилища();
////	КонецЕсли;
////	Попытка
////		ОтХСГУИД = ?(значениеЗаполнено(отХС),отХС.GUID,"");
////		ОтПлощадкиГУИД = ?(значениеЗаполнено(ОтПлощадки),ОтПлощадки.GUID,"");
////	Исключение
////		ОтХСГУИД = "";
////		ОтПлощадкиГУИД = "";
////	КонецПопытки;

////	ЗапросXML = ПолучитьСписокВСД2_ЗапросXML(СокрЛП(Предприятие.GUID), vetDocumentType, vetDocumentStatus, Смещение,ПоступилиС , ПоступилиПо,ОтХСГУИД, ОтПлощадкиГУИД);
////	
////	метод = КомпонентаНаСервере.GetMethod();
////	Если (значениеЗаполнено(ПоступилиС)) или (значениеЗаполнено(ОтХС)) или (значениеЗаполнено(ОтПлощадки)) тогда
////		метод.Service = "platform/services/2.1/ApplicationManagementService";
////	Иначе
////		метод.Service = "platform/services/2.0/ApplicationManagementService";
////	КонецЕсли;
////    метод.Action = "submitApplicationRequest";	
////	
////	appID = ОтправитьЗапросSoap(ЗапросXML, метод);
////		
//////	appID = Получить_ApplicationID(Компонента.LogFilename);
////	
////	УдалитьXML( КомпонентаНаСервере.LogFilename);
////	Результат = "";
////	
////	Если ФлНеЗагружать = 0 Тогда  // - решается передачей параметра  в ПолучитьРезультат_ВСД2
//////		СоздатьВСД2Входящие();    
////	КонецЕсли;

////	Если ЗначениеЗаполнено(appID) Тогда
////		//Результат = ПолучитьРезультат_ВСД2(appID, ВСДВходящие);//ПолучитьСписокВСД2_ОтветXML(appID ); 
////		Параметры="";
////		Ответ =  ВСД_Запросы.ПолучитьРезультат_ВСД2( Параметры, appID, ВСДВходящие );	
////		СообщитьИнфо("Результат = "+Результат);
////		Для А=1 По 10 Цикл
////			Если (Результат="IN_PROCESS") Тогда 
////				Результат = ПолучитьРезультат_ВСД2(appID, ВСДВходящие);//ПолучитьСписокВСД2_ОтветXML( appID );
////			КонецЕсли;
////		КонецЦикла;
////	КонецЕсли;
////	УдалитьXML( КомпонентаНаСервере.LogFilename);
//////	РаскраситьСписокДокументов();
//	Для каждого стрВход из ВСДВходящие Цикл
//		стрВход.ДокВСД = НайтиВСД_ВходящийпоUUID(стрВход.uuid);
//		Если значениеЗаполнено(стрВход.ДокВСД) Тогда
//			стрВход.КоличествоПринять = стрВход.ДокВСД.КоличествоПринять;
//			стрВход.КоличествоВозврат = стрВход.ДокВСД.КоличествоВозврат;
//			//стрВход.УдалитьДокВозврат = ВСД.НайтиВСД_ИсходящийНаВозврат(стрВход.ДокВСД);	
//		КонецЕсли;
//	КонецЦикла;
//	Возврат Результат;
//	
//КонецФункции

// ***************** Гашение окончание


//Функция ЗагрузитьПараметры(_Организация="") Экспорт
//	Если НЕ(ЗначениеЗаполнено(_Организация)) Тогда
//		_Организация = ВСД_Общий.ПолучитьОрганизациюПоУмолчанию();
//	
//		Если _Организация.Пустая() Тогда
//			СообщитьОшибку("Не определена Основная Организация пользователя");
//		КонецЕсли;		
//	КонецЕсли;
//	
//	СписокКонстант = ВСД.ЗагрузитьПараметры( _Организация );
//	ВСД.ЗагрузитьПараметрыВОбработку(ЭтотОбъект, СписокКонстант); 
//КонецФункции

//Процедура ПоместитьГлПеременныеВоВременноеХранилище()
//	Структура = Новый Структура("Компонента", КомпонентаНаСервере);
//	АдресКомпонентыНаСервере		= ПоместитьВоВременноеХранилище(Структура,Новый УникальныйИдентификатор);
//	Структура = Новый Структура("Константы,ТермическиеУсловияПеревозки,ТермическиеУсловияПеревозки2", СписокКонстант,ТермическиеУсловияПеревозки,ТермическиеУсловияПеревозки2);
//	АдресСпискаКонстантнаСервере	= ПоместитьВоВременноеХранилище(Структура,Новый УникальныйИдентификатор);
//КонецПроцедуры

Процедура ЗагрузитьГлПеременныеИзВременногоХранилища()
//	КомпонентаНаСервере 	= ПолучитьИзВременногоХранилища(АдресКомпонентыНаСервере).Компонента;
//	СписокКонстант		 	= ПолучитьИзВременногоХранилища(АдресСпискаКонстантнаСервере).Константы;
//	ТермическиеУсловияПеревозки		 	= ПолучитьИзВременногоХранилища(АдресСпискаКонстантнаСервере).ТермическиеУсловияПеревозки;
//	ТермическиеУсловияПеревозки2		 	= ПолучитьИзВременногоХранилища(АдресСпискаКонстантнаСервере).ТермическиеУсловияПеревозки2;
//	Если КомпонентаНаСервере = Неопределено Тогда
//		СообщитьИнфо("Хранилище пустое - реинициализация");
//		АдресКомпонентыНаСервере = "";
//		Инициализация();
//	КонецЕсли;
КонецПроцедуры

Процедура Инициализация( ) Экспорт
//	ЗагрузитьПараметры(Организация); // Получили заполненные реквизиты для ЭтотОбъект
//	
//	Если НЕ(ЗначениеЗаполнено(param_api_key)) Тогда
//		// Первый Запуск?
//		СообщитьИнфо("Внимание: не заполнен Параметр param_api_key - > вкл. Тестовый Режим");
//		ТестовыйРежим = Истина;
//	КонецЕсли;
//	
//	Если (КомпонентаНаСервере = Неопределено) и ЗначениеЗаполнено(АдресКомпонентыНаСервере) тогда
//		ЗагрузитьГлПеременныеИзВременногоХранилища();
//		ВСД.ИнициализироватьКомпоненту(ЭтотОбъект);
//		//?? ИнициализироватьКомпоненту(ЭтотОбъект);
//	ИначеЕсли НЕ(КомпонентаНаСервере = Неопределено) Тогда
//		// Просто реинициализируем - зачем загружать
//		ВСД.ИнициализироватьКомпоненту(ЭтотОбъект);		
//	иначе
//		ТермическиеУсловияПеревозки = Новый("СписокЗначений");
//		ТермическиеУсловияПеревозки.Добавить("1", "FROZEN");
//		ТермическиеУсловияПеревозки.Добавить("2", "CHILLED");
//		ТермическиеУсловияПеревозки.Добавить("3", "COOLED");
//		ТермическиеУсловияПеревозки.Добавить("4", "VENTILATED");
//		// напрямую как в 7.7 не найти по представлению
//		ТермическиеУсловияПеревозки2 = Новый("СписокЗначений");
//		ТермическиеУсловияПеревозки2.Добавить("FROZEN","1");
//		ТермическиеУсловияПеревозки2.Добавить("CHILLED","2");
//		ТермическиеУсловияПеревозки2.Добавить("COOLED","3");
//		ТермическиеУсловияПеревозки2.Добавить("VENTILATED","4");
//		
//		КомпонентаНаСервере = ВСД.ЗагрузитьComКомпонентуНаСервере(ЭтотОбъект);//ЗагрузитьКомпонетуНаСервере( ЭтотОбъект );
////		МодульПереопределения = ПодключитьМодульПереопределения(ПолноеИмяФайлаПереопределения);
//				
//		ПоместитьГлПеременныеВоВременноеХранилище();	
//	КонецЕсли;
//	Возврат;// КомпонентаНаСервере;
//	
//	//ИнициализацияСправочников();

КонецПроцедуры


