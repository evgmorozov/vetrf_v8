&НаКлиенте
Перем мПредставлениеПустогоРасписания;

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	мПредставлениеПустогоРасписания = Строка(Новый РасписаниеРегламентногоЗадания);
	ОбновитьПредставлениеРасписания();
КонецПроцедуры

&НаКлиенте
Процедура Ок(Команда)

	Если ЗаписатьПараметрыРегламентногоЗадания() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаписатьПараметрыРегламентногоЗадания()
	
	НайденыОшибки = Ложь;
	Если ИспользованиеЗагружатьПартии И Площадка.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не выбраны площадки'");
		кб99_ВСД.СообщитьПользователю(ТекстОшибки,,"Площадка");
		НайденыОшибки = ИСТИНА;
	КонецЕсли;
	
	Если НайденыОшибки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Очистить регистр сведений кб99_Запросы
	РегламентноеЗаданиеОбъект = СоздатьРегламентноеЗаданиеПриНеобходимости("кб99_ВСД_УдалитьЗапросы");
	РегламентноеЗаданиеОбъект.Расписание = РасписаниеРегламентногоЗаданияКб99_ВСД_УдалитьЗапросы;
	РегламентноеЗаданиеОбъект.Использование = ИспользованиеОчиститьРС;
	РегламентноеЗаданиеОбъект.КоличествоПовторовПриАварийномЗавершении = КоличествоПовторовПриАварийномЗавершенииОчиститьРС_Запросы;
	РегламентноеЗаданиеОбъект.ИнтервалПовтораПриАварийномЗавершении = ИнтервалПовтораПриАварийномЗавершенииОчиститьРС;
	РегламентноеЗаданиеОбъект.Записать();
	
	//Очистить внешнюю папку с лог Файлами
	РегламентноеЗаданиеОбъект = СоздатьРегламентноеЗаданиеПриНеобходимости("кб99_ВСД_УдалитьЗапросы_XML");
	РегламентноеЗаданиеОбъект.Расписание = РасписаниеРегламентногоЗаданияКБ99_ОчиститьВнешнююПапкуСЛогФайлами;
	РегламентноеЗаданиеОбъект.Использование = ИспользованиеОчиститьВнешФайлы;
	РегламентноеЗаданиеОбъект.КоличествоПовторовПриАварийномЗавершении = КоличествоПовторовПриАварийномЗавершенииОчиститьВнешнююПапкуСЛогФайлами;
	РегламентноеЗаданиеОбъект.ИнтервалПовтораПриАварийномЗавершении = ИнтервалПовтораПриАварийномЗавершенииОчиститьВнешнююПапкуСЛогФайлами;
	РегламентноеЗаданиеОбъект.Записать();
	
	//ПолучитьАктуальныеПартии
	МассивПараметров = Новый Массив;
	//МассивНастроек = Новый Массив;
	
	СтруктураНастройки = Новый Структура();
	СтруктураНастройки.Вставить("Площадки"	, Площадка);
	МассивПараметров.Добавить(СтруктураНастройки);
	
	РегламентноеЗаданиеОбъект =  СоздатьРегламентноеЗаданиеПриНеобходимости("кб99_ПолучитьАктуальныеПартии");
	РегламентноеЗаданиеОбъект.Использование = ИспользованиеЗагружатьПартии;
	РегламентноеЗаданиеОбъект.Расписание = РасписаниеРегламентногоЗаданияКб99_ПолучитьАктуальныеПартии;
	РегламентноеЗаданиеОбъект.ИнтервалПовтораПриАварийномЗавершении = ИнтервалПовтораПриАварийномЗавершенииПолучитьАктуальныеПартии;
	РегламентноеЗаданиеОбъект.КоличествоПовторовПриАварийномЗавершении = КоличествоПовторовПриАварийномЗавершенииПолучитьАктуальныеПартии;
	//МассивПараметров.Добавить(МассивНастроек);
	РегламентноеЗаданиеОбъект.Параметры = МассивПараметров;
	РегламентноеЗаданиеОбъект.Записать();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция НайтиРегламентноеЗадание(НаименованиеРегламентногоЗадания)
	
	РегламентноеЗаданиеОбъект = Неопределено;
	
	Отбор = Новый Структура("Наименование", НаименованиеРегламентногоЗадания);
	МассивЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	Если МассивЗаданий.Количество() <> 0 Тогда
		РегламентноеЗаданиеОбъект = МассивЗаданий[0];
	КонецЕсли;
	
	Возврат РегламентноеЗаданиеОбъект;
	
КонецФункции

&НаСервере
Функция СоздатьРегламентноеЗаданиеПриНеобходимости(НаименованиеРегламентногоЗадания)
	
	РегламентноеЗаданиеОбъект = НайтиРегламентноеЗадание(НаименованиеРегламентногоЗадания);
	
	// при необходимости создаем регл. задание
	Если РегламентноеЗаданиеОбъект = Неопределено Тогда
		РегламентноеЗаданиеОбъект = РегламентныеЗадания.СоздатьРегламентноеЗадание(НаименованиеРегламентногоЗадания);
		РегламентноеЗаданиеОбъект.Наименование = НаименованиеРегламентногоЗадания;
	КонецЕсли;
	
	Возврат РегламентноеЗаданиеОбъект;
	
КонецФункции

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	ИмяРасписания = ""+Команда.Имя;
	
	Если ИмяРасписания = "НастроитьРасписаниекб99_ВСД_УдалитьЗапросы" тогда
		РасписаниеРегламентногоЗадания = РасписаниеРегламентногоЗаданияКб99_ВСД_УдалитьЗапросы;
	ИначеЕсли ИмяРасписания = "НастроитьРасписаниекб99_ОчиститьВнешнююПапкуСлогФайлами" Тогда
		РасписаниеРегламентногоЗадания = РасписаниеРегламентногоЗаданияКБ99_ОчиститьВнешнююПапкуСЛогФайлами;
	Иначе
		РасписаниеРегламентногоЗадания = РасписаниеРегламентногоЗаданияКб99_ПолучитьАктуальныеПартии;
	КонецЕсли;

	РедактированиеРасписаниеРегламентногоЗадания(ИмяРасписания,РасписаниеРегламентногоЗадания);

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписаниеРегламентногоЗадания(ИмяРасписания,РасписаниеРегламентногоЗадания)
	
	
	// если расписание не инициализировано в форме на сервере, то создаем новое
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	
	ПараметрыФункции = Новый Структура("ИмяРасписания", ИмяРасписания);
	// открываем диалог для редактирования Расписания
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РедактированиеРасписанияРегламентногоЗаданияПродолжение",       
		ЭтаФорма, ПараметрыФункции);  
		
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияПродолжение (Расписание, ПараметрыФункции) Экспорт
	
	Если Расписание <> Неопределено Тогда 
		Если  ПараметрыФункции.ИмяРасписания = "НастроитьРасписаниекб99_ВСД_УдалитьЗапросы" Тогда
			РасписаниеРегламентногоЗаданияКб99_ВСД_УдалитьЗапросы = Расписание;	
		ИначеЕсли ПараметрыФункции.ИмяРасписания = "НастроитьРасписаниекб99_ОчиститьВнешнююПапкуСлогФайлами" Тогда 
			РасписаниеРегламентногоЗаданияКБ99_ОчиститьВнешнююПапкуСЛогФайлами = Расписание;
		Иначе
			РасписаниеРегламентногоЗаданияКб99_ПолучитьАктуальныеПартии = Расписание;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеРасписания()
	
	//Очистить РС
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗаданияКб99_ВСД_УдалитьЗапросы);
	Если ПредставлениеРасписания = мПредставлениеПустогоРасписания Тогда
		ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
	КонецЕсли;
	Элементы.НастроитьРасписаниекб99_ВСД_УдалитьЗапросы.Заголовок = ПредставлениеРасписания;
	
	//ОчиститьВнешнююПапкуСЛогФайлами
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗаданияКБ99_ОчиститьВнешнююПапкуСЛогФайлами);
	Если ПредставлениеРасписания = мПредставлениеПустогоРасписания Тогда
		ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
	КонецЕсли;
	Элементы.НастроитьРасписаниекб99_ОчиститьВнешнююПапкуСлогФайлами.Заголовок = ПредставлениеРасписания;
	
	//ПолучитьАктуальныеПартии
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗаданияКб99_ПолучитьАктуальныеПартии);
	Если ПредставлениеРасписания = мПредставлениеПустогоРасписания Тогда
		ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
	КонецЕсли;
	Элементы.НастроитьРасписаниеКб99_ПолучитьАктуальныеПартии.Заголовок = ПредставлениеРасписания;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РегламентноеЗадание_кб99_ВСД_УдалитьЗапросы = СоздатьРегламентноеЗаданиеПриНеобходимости("кб99_ВСД_УдалитьЗапросы");
	РегламентноеЗадание_кб99_ВСД_УдалитьЗапросы_XML = СоздатьРегламентноеЗаданиеПриНеобходимости("кб99_ВСД_УдалитьЗапросы_XML");
	РегламентноеЗадание_кб99_ПолучитьАктуальныеПартии =  СоздатьРегламентноеЗаданиеПриНеобходимости("кб99_ПолучитьАктуальныеПартии");
	
	ИспользованиеОчиститьРС =  РегламентноеЗадание_кб99_ВСД_УдалитьЗапросы.Использование;
	РасписаниеРегламентногоЗаданияКб99_ВСД_УдалитьЗапросы =  РегламентноеЗадание_кб99_ВСД_УдалитьЗапросы.Расписание;
	ИнтервалПовтораПриАварийномЗавершенииОчиститьРС = РегламентноеЗадание_кб99_ВСД_УдалитьЗапросы.ИнтервалПовтораПриАварийномЗавершении;
	КоличествоПовторовПриАварийномЗавершенииОчиститьРС_Запросы = РегламентноеЗадание_кб99_ВСД_УдалитьЗапросы.КоличествоПовторовПриАварийномЗавершении;
	
	ИспользованиеОчиститьВнешФайлы = РегламентноеЗадание_кб99_ВСД_УдалитьЗапросы_XML.Использование;
	РасписаниеРегламентногоЗаданияКБ99_ОчиститьВнешнююПапкуСЛогФайлами = РегламентноеЗадание_кб99_ВСД_УдалитьЗапросы_XML.Расписание; 
	ИнтервалПовтораПриАварийномЗавершенииОчиститьВнешнююПапкуСЛогФайлами = РегламентноеЗадание_кб99_ВСД_УдалитьЗапросы_XML.ИнтервалПовтораПриАварийномЗавершении;
	КоличествоПовторовПриАварийномЗавершенииОчиститьВнешнююПапкуСЛогФайлами = РегламентноеЗадание_кб99_ВСД_УдалитьЗапросы_XML.КоличествоПовторовПриАварийномЗавершении;
	
	ИспользованиеЗагружатьПартии = РегламентноеЗадание_кб99_ПолучитьАктуальныеПартии.Использование;
	РасписаниеРегламентногоЗаданияКб99_ПолучитьАктуальныеПартии = РегламентноеЗадание_кб99_ПолучитьАктуальныеПартии.Расписание;
	МассивПараметров = РегламентноеЗадание_кб99_ПолучитьАктуальныеПартии.Параметры;
	Если ТипЗнч(МассивПараметров) = Тип("Массив") И МассивПараметров.Количество() > 0 Тогда
		МассивНастроек = МассивПараметров[0];
		Для Каждого Настройка Из МассивНастроек Цикл
			
			Площадка = Настройка.Значение;
			
		КонецЦикла;
	КонецЕсли;
	ИнтервалПовтораПриАварийномЗавершенииПолучитьАктуальныеПартии = РегламентноеЗадание_кб99_ПолучитьАктуальныеПартии.ИнтервалПовтораПриАварийномЗавершении;
	КоличествоПовторовПриАварийномЗавершенииПолучитьАктуальныеПартии = РегламентноеЗадание_кб99_ПолучитьАктуальныеПартии.КоличествоПовторовПриАварийномЗавершении;
	
КонецПроцедуры

