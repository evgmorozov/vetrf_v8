// http://www.kb99.pro версия 2.0.0 от 14/03/2019
//
// К Переносу из Обработки в Общий Модуль
// ПолучитьТЗПартииКСписаниюПоТЗПродукцияЭлементов
// ПолучитьАктуальныеПартии
// ПодобратьПартииПоПродукцияЭлемент

Функция ПроверитьСуществованиеКаталога(ИмяКаталога) Экспорт
	Если НЕ(ЗначениеЗаполнено( ИмяКаталога )) Тогда
		СообщитьИнфо("Имя каталога ["+ ИмяКаталога +"] указано неправильно");
		Возврат Ложь;
	КонецЕсли;	
	
    КаталогНаДиске = Новый Файл(ИмяКаталога);
    Если КаталогНаДиске.Существует() Тогда
        Возврат Истина;
    Иначе
        //Ответ = Вопрос("Каталог ["+ИмяКаталога+"] не существует. Создать?", РежимДиалогаВопрос.ОКОтмена);
		СообщитьИнфо("каталога ["+ ИмяКаталога +"] не найден, создайте для сохранения xml запросов...");
        //Если Ответ = КодВозвратаДиалога.ОК Тогда
		//Попытка
		//    СоздатьКаталог(ИмяКаталога);
		//	Возврат Истина;
		//Исключение
		//	Сообщить(ОписаниеОшибки());
			Возврат ложь;
		//КонецПопытки;
            
		//Иначе
		//    Возврат Ложь;
        //КонецЕсли;
    КонецЕсли;
КонецФункции

//Функция ПроверитьСуществованиеФайла(ИмяФайла) Экспорт
//    ФайлНаДиске = Новый Файл(ИмяФайла);
//    Если ФайлНаДиске.Существует() Тогда
//        Возврат Истина;
//    Иначе
//        СообщитьИнфо("Файл ["+ИмяФайла+"] не существует. ", );
//        Возврат Ложь;
//    КонецЕсли;
//КонецФункции

//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка);
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура СообщитьИнфо(ТекстСообщения, Ссылка = Неопределено)  Экспорт
	//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка);
	СообщитьПользователю(ТекстСообщения, Ссылка);
КонецПроцедуры


//// Возвращает серверный модуль менеджера по имени объекта.
////из типовой БП3   - получение нужного модуля конфы
//Функция СтрРазделить82(Имя,знакДелителя)
//	Рез = Новый СписокЗначений;
//	Рез.Вставить("имя",имя);
//	Возврат Рез;	
//КонецФункции

//Функция СерверныйМодульМенеджера(Имя)
//	ОбъектНайден = Ложь;
//	
//	ЧастиИмени = СтрРазделить82(Имя, ".");
//	Если ЧастиИмени.Количество() = 2 Тогда
//		
//		ИмяВида = ВРег(ЧастиИмени[0]);
//		ИмяОбъекта = ЧастиИмени[1];
//		
//		Если ИмяВида = ВРег("Константы") Тогда
//			Если Метаданные.Константы.Найти(ИмяОбъекта) <> Неопределено Тогда
//				ОбъектНайден = Истина;
//			КонецЕсли;
//		ИначеЕсли ИмяВида = ВРег("РегистрыСведений") Тогда
//			Если Метаданные.РегистрыСведений.Найти(ИмяОбъекта) <> Неопределено Тогда
//				ОбъектНайден = Истина;
//			КонецЕсли;
//		ИначеЕсли ИмяВида = ВРег("РегистрыНакопления") Тогда
//			Если Метаданные.РегистрыНакопления.Найти(ИмяОбъекта) <> Неопределено Тогда
//				ОбъектНайден = Истина;
//			КонецЕсли;
//		ИначеЕсли ИмяВида = ВРег("РегистрыБухгалтерии") Тогда
//			Если Метаданные.РегистрыБухгалтерии.Найти(ИмяОбъекта) <> Неопределено Тогда
//				ОбъектНайден = Истина;
//			КонецЕсли;
//		ИначеЕсли ИмяВида = ВРег("РегистрыРасчета") Тогда
//			Если Метаданные.РегистрыРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
//				ОбъектНайден = Истина;
//			КонецЕсли;
//		ИначеЕсли ИмяВида = ВРег("Справочники") Тогда
//			Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
//				ОбъектНайден = Истина;
//			КонецЕсли;
//		ИначеЕсли ИмяВида = ВРег("Документы") Тогда
//			Если Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда
//				ОбъектНайден = Истина;
//			КонецЕсли;
//		ИначеЕсли ИмяВида = ВРег("Отчеты") Тогда
//			Если Метаданные.Отчеты.Найти(ИмяОбъекта) <> Неопределено Тогда
//				ОбъектНайден = Истина;
//			КонецЕсли;
//		ИначеЕсли ИмяВида = ВРег("Обработки") Тогда
//			Если Метаданные.Обработки.Найти(ИмяОбъекта) <> Неопределено Тогда
//				ОбъектНайден = Истина;
//			КонецЕсли;
//		ИначеЕсли ИмяВида = ВРег("БизнесПроцессы") Тогда
//			Если Метаданные.БизнесПроцессы.Найти(ИмяОбъекта) <> Неопределено Тогда
//				ОбъектНайден = Истина;
//			КонецЕсли;
//		ИначеЕсли ИмяВида = ВРег("ЖурналыДокументов") Тогда
//			Если Метаданные.ЖурналыДокументов.Найти(ИмяОбъекта) <> Неопределено Тогда
//				ОбъектНайден = Истина;
//			КонецЕсли;
//		ИначеЕсли ИмяВида = ВРег("Задачи") Тогда
//			Если Метаданные.Задачи.Найти(ИмяОбъекта) <> Неопределено Тогда
//				ОбъектНайден = Истина;
//			КонецЕсли;
//		ИначеЕсли ИмяВида = ВРег("ПланыСчетов") Тогда
//			Если Метаданные.ПланыСчетов.Найти(ИмяОбъекта) <> Неопределено Тогда
//				ОбъектНайден = Истина;
//			КонецЕсли;
//		ИначеЕсли ИмяВида = ВРег("ПланыОбмена") Тогда
//			Если Метаданные.ПланыОбмена.Найти(ИмяОбъекта) <> Неопределено Тогда
//				ОбъектНайден = Истина;
//			КонецЕсли;
//		ИначеЕсли ИмяВида = ВРег("ПланыВидовХарактеристик") Тогда
//			Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
//				ОбъектНайден = Истина;
//			КонецЕсли;
//		ИначеЕсли ИмяВида = ВРег("ПланыВидовРасчета") Тогда
//			Если Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
//				ОбъектНайден = Истина;
//			КонецЕсли;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Если Не ОбъектНайден Тогда
//		ВызватьИсключение("ОШИБКА ПОЛУЧЕНИЯ МОДУЛЯ");
////		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = 'Объект метаданных ""%1"" не найден,
////			|либо для него не поддерживается получение модуля менеджера.'"), Имя);
//	КонецЕсли;
//	
//	Модуль = Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
//	
//	Возврат Модуль;
//КонецФункции

//Функция ОбщийМодуль(Имя) Экспорт
//	Попытка	
//		Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
//			Модуль = Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
//		ИначеЕсли СтрЧислоВхождений(Имя, ".") = 1 Тогда
//			Возврат СерверныйМодульМенеджера(Имя);
//		Иначе
//			Модуль = Неопределено;
//		КонецЕсли;
//	
//		Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
//			ВызватьИсключение("ОШИБКА ПОЛУЧЕНИЯ МОДУЛЯ");//ПодставитьПараметрыВСтроку(НСтр("ru = 'Общий модуль ""%1"" не найден.'"), Имя);
//		КонецЕсли;
//	Исключение
//		СообщитьИнфо( "Ошибка получения модуля Типовой конфигурации "+Имя+ОписаниеОшибки() );
//		Возврат Неопределено;
//	КонецПопытки;
//	
//	Возврат Модуль;
//	
//КонецФункции

//Функция ПолучитьОрганизациюПоУмолчанию() Экспорт
//	
//Попытка	
//	Если Метаданные.ОбщиеМодули.Найти("БухгалтерскийУчетПереопределяемый") <> Неопределено Тогда
//		//БП 3.0, УТ 11
//		МодульТиповойКонфы = ОбщийМодуль("БухгалтерскийУчетПереопределяемый");
//		Рез =  МодульТиповойКонфы.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
//		Если НЕ ЗначениеЗаполнено(Рез) Тогда  //Проверим УТ11
//			// В УТ 11 Засада, заведем регистр сведений
//			Попытка
//				Если Метаданные.РегистрыСведений.Найти("ВСД_ОрганизацияПоУмолчанию") <> Неопределено тогда
//					Запрос = Новый Запрос;
//					Запрос.Текст = "Выбрать ВСД_ОрганизацияПоУмолчанию.Организация из РегистрСведений.ВСД_ОрганизацияПоУмолчанию как ВСД_ОрганизацияПоУмолчанию где ВСД_ОрганизацияПоУмолчанию.Пользователь = &ВыбПользователь";
//					Запрос.УстановитьПараметр("ВыбПользователь", ПараметрыСеанса.АвторизованныйПользователь);	
//					Выборка = Запрос.Выполнить().Выбрать();
//					Если Выборка.Следующий() Тогда
//						Рез = Выборка.Организация;
//					КонецЕсли;
//				КонецЕсли;
//			Исключение КонецПопытки;	
//		КонецЕсли;
//		Возврат Рез;
//	ИначеЕсли Метаданные.ОбщиеМодули.Найти("УправлениеПользователями") <> Неопределено Тогда
//		//УПП
//		МодульТиповойКонфы = ОбщийМодуль("УправлениеПользователями");
//		//МодульТиповойКонфы2 = ОбщийМодуль("ГлобальныйМодуль");
//		ТекПользователь = ПараметрыСеанса.ТекущийПользователь;//МодульТиповойКонфы2.глЗначениеПеременной("глТекущийПользователь");// ИмяПользователя();
//		Возврат МодульТиповойКонфы.ПолучитьЗначениеПоУмолчанию(ТекПользователь,"ОсновнаяОрганизация");
//	Иначе
//		СообщитьИнфо("Для данной конфигурации 1С не удалось получить значение Организации по умолчанию. Обратитесь в техподдержку КБ99");
//		Возврат Справочники.Организации.ПустаяСсылка();
//	КонецЕсли;
//Исключение
//	СообщитьИнфо("Для данной конфигурации 1С не удалось получить значение Организации по умолчанию. Обратитесь в техподдержку КБ99 "+ОписаниеОшибки());
//	Возврат Справочники.Организации.ПустаяСсылка();
//КонецПопытки
////БП 3	Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
////УПП         Организация   =  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяОрганизация");
//КонецФункции
// ************* окончание ф-ции универсализации вызова методов типовых конфигураций

Функция ЕстьРеквизитОбъекта(ИмяРеквизита, знач ОбъектСсылка) Экспорт
	Попытка
		ОбОбъект = ОбъектСсылка.ПолучитьОбъект();
		МетаданныеОбъекта = ОбОбъект.Метаданные();
		Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Исключение
		СообщитьИнфо("Указана не ссылка на объект? Модуль ВСД, ЕстьРеквизитОбъекта("+ОбъектСсылка+")?");
		СообщитьИнфо(ОписаниеОшибки());
	    Возврат Ложь;
	КонецПопытки;
КонецФункции 

Функция ПолучитьЗначениеРевизитаОбъекта_НаСервере(ВыбОбъект,Реквизит) экспорт
	// это раньше делалось просто через точку прямо в модуле формы
	Попытка
		Возврат ВыбОбъект[Реквизит];
	Исключение
		СообщитьИнфо("Указан неверный реквизит "+Реквизит+" для объекта "+ВыбОбъект);
		СообщитьИнфо(ОписаниеОшибки());
		Возврат "";
	КонецПопытки
КонецФункции

//Функция ПутьКфайлуИзПолного(ПутьИИмяВход) Экспорт
//	ПутьИИмя = ПутьИИмяВход;
//	Путь = "";
//	Имя  = "";
//	ПозСлэш = Найти(ПутьИИмя,"\");
//	Пока ПозСлэш > 0 Цикл
//    	Путь = Путь+Сред(ПутьИИмя,1,ПозСлэш);
//	    ПутьИИмя = Сред(ПутьИИмя,ПозСлэш+1);
//    	ПозСлэш = Найти(ПутьИИмя,"\");
//	КонецЦикла;
//	Имя = ПутьИИмя;
//	Возврат Путь;
////	КаталогОбработок = Путь;
////	ИмяОбработкиИнтеграции = Имя;
//	//Сообщить(Путь);
//	//Сообщить(Имя);	
//КонецФункции

//**********
Функция ПолучитьОрганизациюПоХС(ВыбХозСубъект) Экспорт
	Рез = "";
	Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   Организация.ссылка
        |ИЗ
        |   Справочник.Организации КАК Организация";
 
    РезультатЗапроса = Запрос.Выполнить();
 
    ВыборкаОрг = РезультатЗапроса.Выбрать();
 
    Пока ВыборкаОрг.Следующий() Цикл
		СпПарам = ЗагрузитьПараметры(ВыборкаОрг.Ссылка);
		Если СпПарам["Отправитель_ХозСубъект"] = ВыбХозСубъект Тогда
			Возврат ВыборкаОрг.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции

Функция НайтиХозСубъект(Контрагент) Экспорт

     Если НЕ(ЗначениеЗаполнено(Контрагент)) Тогда
         Возврат "";
     КонецЕсли;

     //стандартное поведение функции
     ВыбКонтрагент = Контрагент.ГоловнойКонтрагент;

     Запрос = Новый Запрос("ВЫБРАТЬ
                           |    ВСД_ХозСубъект.Ссылка
                           |ИЗ
                           |    Справочник.ВСД_ХозСубъект КАК ВСД_ХозСубъект
                           |ГДЕ
                           |    ВСД_ХозСубъект.Контрагент = &ВыбКонтрагент");
     Запрос.УстановитьПараметр("ВыбКонтрагент", ВыбКонтрагент );

     Результат = Запрос.Выполнить().Выбрать();

     Если Результат.Следующий() Тогда
         Ответ = Результат.Ссылка;
     Иначе
         СпрХС = Справочники.ВСД_ХозСубъект.СоздатьЭлемент();
         СпрХС.Наименование = ВыбКонтрагент.Наименование;
         СпрХС.Контрагент = ВыбКонтрагент;
         СпрХС.Записать();
         СообщитьИнфо("Создан новый элемент справочника ВСД_ХозСубъект:"+ВыбКонтрагент);

         Ответ = спрХС.Ссылка;
     КонецЕсли;

     Возврат Ответ;
КонецФункции

Функция НайтиПлощадкуПоКонтрагенту(ВыбКонтрагент) Экспорт
     Если НЕ(ЗначениеЗаполнено(ВыбКонтрагент)) Тогда
         Возврат "";
     КонецЕсли;

     Запрос = Новый Запрос("ВЫБРАТЬ
                           |    ВСД_Площадка.Ссылка
                           |ИЗ
                           |    Справочник.ВСД_Площадка КАК ВСД_Площадка
                           |ГДЕ
                           |    ВСД_Площадка.Контрагент = &ВыбКонтрагент");
     Запрос.УстановитьПараметр("ВыбКонтрагент", ВыбКонтрагент );

     Результат = Запрос.Выполнить().Выбрать();

     Если Результат.Следующий() Тогда
         Ответ = Результат.Ссылка;
     Иначе
         Ответ = "";
     КонецЕсли;

     Возврат Ответ;
КонецФункции

Функция НайтиПлощадкуПоСкладу(ВыбСклад, ВыбХозСубъект) Экспорт
     Если НЕ(ЗначениеЗаполнено(ВыбСклад)) Тогда
         Возврат "";
     КонецЕсли;
	 Если НЕ(ЗначениеЗаполнено(ВыбХозСубъект)) Тогда
		 СообщитьИнфо("Не указан параметр ВыбХозСубъект для ВСД.НайтиПлощадкуПоСкладу ");
         Возврат "";
	 КонецЕсли;
	 Запрос = Новый Запрос("ВЫБРАТЬ
                           |	ВСД_Площадка.Ссылка
                           |ИЗ
                           |	Справочник.ВСД_Площадка КАК ВСД_Площадка
                           |ГДЕ
                           |	ВСД_Площадка.Склад = &ВыбСклад
                           |	И ВСД_Площадка.GuidХозСубъекта = &GuidХозСубъекта");
     Запрос.УстановитьПараметр("ВыбСклад", ВыбСклад );
	 Запрос.УстановитьПараметр("GuidХозСубъекта", ВыбХозСубъект.GUID );

     Результат = Запрос.Выполнить().Выбрать();

     Если Результат.Следующий() Тогда
         Ответ = Результат.Ссылка;
     Иначе
         Ответ = "";
     КонецЕсли;

     Возврат Ответ;
КонецФункции

//выбираем партию, которая подходит под условия отбора: количество, свойство, площадка
Функция ВыбратьПартию(Продукция_Элемент, Отправитель_Площадка,Отпр_ХозСубъект) Экспорт
     Если НЕ ЗначениеЗаполнено(Отправитель_Площадка) Тогда
         СообщитьИнфо("Не указана площадка Отправителя!");
         Возврат "";
     КонецЕсли;
     Если НЕ ЗначениеЗаполнено(Отпр_ХозСубъект) Тогда
         Сообщить("Не указан ХС Отправителя!");
         Возврат "";
     КонецЕсли;


     Запрос = Новый Запрос;
     Запрос.Текст = "ВЫБРАТЬ
                    |	ВСД_Партия.Ссылка
                    |ИЗ
                    |	Справочник.ВСД_Партия КАК ВСД_Партия
                    |ГДЕ
                    |	ВСД_Партия.Получатель_Площадка = &Отправитель_Площадка
					|   И ВСД_Партия.Получатель_ХозСубъект.GUID = &ВыбХС
                    |	И ВСД_Партия.Продукция_Элемент = &Продукция_Элемент
                    |	И ВСД_Партия.Количество > 0
                    |	И ВСД_Партия.ПометкаУдаления = ЛОЖЬ";

     Запрос.УстановитьПараметр("Отправитель_Площадка"  ,Отправитель_Площадка);
	 Запрос.УстановитьПараметр("ВыбХС", Отпр_ХозСубъект.GUID);
     Запрос.УстановитьПараметр("Продукция_Элемент" , Продукция_Элемент);

     Выборка = Запрос.Выполнить().Выбрать();

     Если Выборка.Следующий() Тогда
         Возврат Выборка.Ссылка;
     Иначе
         Возврат Справочники.ВСД_Партия.ПустаяСсылка();
     КонецЕсли;

КонецФункции

//Процедура находит первый ВСД_Транзакцию на основании ДокОснование
Функция НайтиВСД(ДокументОснование, ЭтоПеремещениеотПоставщика = ЛОЖЬ) Экспорт
     // ЖД Нужно ли нам удаленные???
     Запрос = Новый Запрос;
     Запрос.УстановитьПараметр("ДокументОснование" , ДокументОснование);
	 Запрос.УстановитьПараметр("ЭтоПеремещение" , ЭтоПеремещениеотПоставщика);
     Запрос.Текст = "ВЫБРАТЬ
                    |	ВСД2_транзакция.Ссылка КАК Ссылка
                    |ИЗ
                    |	Документ.ВСД2_транзакция КАК ВСД2_транзакция
                    |ГДЕ
                    |	ВСД2_транзакция.ДокументОснование = &ДокументОснование
                    |	И ВСД2_транзакция.ПометкаУдаления = ЛОЖЬ
                    |	И ВСД2_транзакция.ЭтоПеремещениеОтПоставщика = &ЭтоПеремещение
                    |
                    |ОБЪЕДИНИТЬ
                    |
                    |ВЫБРАТЬ
                    |	ВСД_транзакция.Ссылка
                    |ИЗ
                    |	Документ.ВСД_транзакция КАК ВСД_транзакция
                    |ГДЕ
                    |	ВСД_транзакция.ДокументОснование = &ДокументОснование
                    |	И ВСД_транзакция.ПометкаУдаления = ЛОЖЬ";

     Выборка = Запрос.Выполнить().Выбрать();

     Если Выборка.Следующий() Тогда
         Возврат Выборка.Ссылка;
     Иначе
         Возврат Неопределено;
     КонецЕсли;

КонецФункции

//Процедура находит первый ВСД2_Производство на основании ДокОснование
Функция НайтиВСД_Производство(ДокументОснование) Экспорт
     // ЖД Нужно ли нам удаленные???
     Запрос = Новый Запрос;
     Запрос.УстановитьПараметр("ДокументОснование" , ДокументОснование);

     Запрос.Текст = "ВЫБРАТЬ
                    |    ВСД2_Производство.Ссылка
                    |ИЗ
                    |    Документ.ВСД2_Производство КАК ВСД2_Производство
                    |ГДЕ
                    |    (ВСД2_Производство.ДокументОснование = &ДокументОснование)
					|    И (ВСД2_Производство.ПометкаУдаления = ЛОЖЬ)";

     Выборка = Запрос.Выполнить().Выбрать();

     Если Выборка.Следующий() Тогда
         Возврат Выборка.Ссылка;
     Иначе
         Возврат "";
     КонецЕсли;

КонецФункции

//Процедура находит список ВСД и ВСД2 на основании ДокОснование
Функция НайтиВСД_Исходящий(ДокументОснование) Экспорт

     Запрос = Новый Запрос;
     Запрос.УстановитьПараметр("ДокументОснование" , ДокументОснование);

     Запрос.Текст = "ВЫБРАТЬ
                    |    ВСД2.Ссылка,
                    |    ВСД2.UUID
                    |ИЗ
                    |    Документ.ВСД2 КАК ВСД2
                    |ГДЕ
                    |    ВСД2.ДокументОснование = &ДокументОснование
					|ОБЪЕДИНИТЬ
					|ВЫБРАТЬ
                    |    ВСД.Ссылка,
                    |    ВСД.UUID
                    |ИЗ
                    |    Документ.ВСД КАК ВСД
					|ГДЕ
                    |    ВСД.ДокументОснование = &ДокументОснование";

     Выборка = Запрос.Выполнить().Выгрузить();

     Возврат Выборка;
     //Если Выборка.Следующий() Тогда
     //    Возврат Выборка.Ссылка;
     //Иначе
     //    Возврат "";
     //КонецЕсли;

КонецФункции

Функция ПолучитьУсловияПеревозки(ДокСсылка) Экспорт
	Если НЕ	 (ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_транзакция")) тогда
		Возврат ложь;
	КонецЕсли;
	
	//Обработка = ИнициализацияОбработки( ДокСсылка.Организация, Ложь );
	//Если типЗнч(Обработка) = Тип("Строка") тогда
	//	СообщитьИнфо("Не удалось инициализировать обработку Интеграция");
	//	Возврат "";
	//КонецЕсли;
	//Возврат Обработка.ПроверитьВозможностьПеремещения(ДокСсылка);
	Параметры = ВСД.ЗагрузитьПараметры( ДокСсылка.Организация );
	Ответ = ВСД_Запросы.ВСД2_Транзакция_УсловияПеревозки_Отправить(Параметры, ДокСсылка);
	Возврат Ответ;
КонецФункции

//Отправка любого ВСД
Процедура ОтправитьВСДвГИС(Знач ДокСсылка) Экспорт
	Параметры = ВСД.ЗагрузитьПараметры( ДокСсылка.Организация );				
	
	Попытка
		Если типЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_транзакция") Тогда
			//Обработка.Отправить_ВСД2_транзакция(ДокСсылка);
			ВСД_Запросы.ВСД2_транзакция_Отправить(Параметры, ДокСсылка);
		//ИначеЕсли типЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД_транзакция") тогда
		//	Обработка.Отправить_ВСД_транзакция(ДокСсылка);
		ИначеЕсли типЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_Инвентаризация") тогда
			ВСД_Запросы.ВСД2_Инвентаризация_Отправить(Параметры, ДокСсылка);
		ИначеЕсли типЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_ОбъединениеПартий") тогда
			ВСД_Запросы.ВСД2_ОбъединениеПартий_Отправить(Параметры, ДокСсылка);
		ИначеЕсли типЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_Производство") тогда
			ВСД_Запросы.ВСД2_Производство_Отправить(Параметры, ДокСсылка);
		ИначеЕсли типЗнч(ДокСсылка) = Тип("ДокументСсылка.ВСД2_ЛабораторныеИсследования") тогда
			ВСД_Запросы.ВСД2_ЛабораторныеИсследования_Отправить(Параметры, ДокСсылка);
		иначе
			ДокВСД = НайтиВСД(ДокСсылка);
			Если Не ЗначениеЗаполнено(ДокВСД) Тогда
				СообщитьИнфо("Не найдены ВСД для Отправки");
				Возврат;
			КонецЕсли;			
			//Если (ТипЗнч(ДокВСД) = Тип("ДокументСсылка.ВСД_транзакция")) тогда
			//	Обработка.Отправить_ВСД_транзакция(ДокВСД);		
			Если (ТипЗнч(ДокВСД) = Тип("ДокументСсылка.ВСД2_транзакция")) тогда	
				ВСД_Запросы.ВСД2_транзакция_Отправить(Параметры, ДокСсылка);
			Иначе
				СообщитьИнфо("документ "+ДокВСД+" не отправляется в ВЕТИС ");
			КонецЕсли;
		КонецЕсли;
	Исключение
		СообщитьИнфо("Ошибка в Процедуре ВСД ОтправитьВСДвГИС "+ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

////Гашение ВСД Поставщика
//Функция ПогаситьВСДПоставщика(Знач ДокСсылка, ТаблицаВсдДляГашения) Экспорт
//	
//	ПоказатьОповещениеПользователя("Выполняем Гашение ВСД",,"Ожидайте...",БиблиотекаКартинок.Информация32);
//	
//	СтруктураПараметров = Новый Структура;
//	СтруктураПараметров.Вставить("ТаблицаВсдДляГашения", ТаблицаВсдДляГашения);
//	//СтруктураПараметров.Вставить("Организация", ДокСсылка.Организация );
//	СтруктураПараметров.Вставить("Организация", ДокСсылка.ОрганизацияПолучатель );
//	СтруктураПараметров.Вставить("Отправитель_ХозСубъект", ДокСсылка.Получатель_ХозСубъект );
//	СтруктураПараметров.Вставить("Отправитель_Площадка", ДокСсылка.Получатель_Площадка );
//	ОткрытьФорму("Обработка.Интеграция_ГИС_Меркурий.Форма.ФормаГашениеУФ",СтруктураПараметров,);
//	
//	ПоказатьОповещениеПользователя("Выполнено");
//	
//	Возврат истина;
//	
//КонецФункции

Функция АннулироватьВСД(ДокОснование) Экспорт
	Параметры = ВСД.ЗагрузитьПараметры( ДокОснование.Организация );				
	
	Если (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД_транзакция")) или
		 (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД2_транзакция")) тогда	
		//ДокВСД = ДокОснование;
		ВСД_Запросы.ВСД2_транзакция_Аннулировать(Параметры, ДокОснование);
	ИначеЕсли (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД")) или
		 (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД2")) тогда
		 //ЭтоДокРезультат = Истина;
		 //ДокВСД = ДокОснование;
		 ВСД_Запросы.ВСД2_Аннулировать(Параметры, ДокОснование);
	 Иначе
		ВСД2_Транзакция_Ссылка = НайтиВСД(ДокОснование);
		ВСД_Запросы.ВСД2_транзакция_Аннулировать(Параметры, ВСД2_Транзакция_Ссылка );
	КонецЕсли;
	
	//Если ((НЕ ЭтоДокРезультат) и НЕ(СокрЛП(ДокВСД.Статус) = "COMPLETED")) и (ЭтоДокРезультат и НЕ(СокрЛП(ДокВСД.Статус) = "COFIRMED")) Тогда
	//	СообщитьИнфо("Не найдены ВСД для Аннулирования");
	//	Возврат "";		
	//КонецЕсли;
	
	//Если этоДокРезультат Тогда
	//	Обработка.Отправить_ВСД2_Аннулирование(ДокВСД);
	//Иначе
	//	Обработка.Аннулировать_ВСД2_транзакция(ДокВСД);
	//КонецЕсли;
	//
КонецФункции

Функция ПутьВСДВБраузере(ТестовыйРежим, _UUID, РежимПечать = ложь)
	Если Режимпечать Тогда
         Если ТестовыйРежим Тогда
  			Возврат ("https://t2-mercury.vetrf.ru/pub/operatorui?_action=printVetDocumentByUuid&uuid="+_UUID);
         Иначе
  			Возврат ("https://mercury.vetrf.ru/pub/operatorui?_action=printVetDocumentByUuid&uuid="+_UUID);
         КонецЕсли;
	Иначе
		Если ТестовыйРежим Тогда
			Возврат ("https://t2-mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+_UUID);
		Иначе
			Возврат ("https://mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+_UUID);
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ОткрытьВСДвГИС(ДокОснование) Экспорт
     СписокПараметров = ЗагрузитьПараметры( ДокОснование.Организация );
     ТестовыйРежим = СписокПараметров["ТестовыйРежим"];
	 СзПутиВСД = Новый СписокЗначений;
	Если (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД_транзакция")) или
		 (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД2_транзакция")) тогда		 
		ДокВСД = ДокОснование;
	ИначеЕсли (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД")) или
		 (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД2")) или 
		 (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД2_входящий")) тогда		 
		 СзПутиВСД.Добавить(ПутьВСДВБраузере(ТестовыйРежим, ДокОснование.UUID));
		Возврат СзПутиВСД;
	Иначе
		ДокВСД = НайтиВСД(ДокОснование);	 
	КонецЕсли;
     
    СписокВСД_Исх = НайтиВСД_Исходящий(ДокВСД);
    Для Каждого стр Из СписокВСД_Исх Цикл
		//ОткрытьВСДВБраузере(ТестовыйРежим, стр.UUID);
		СзПутиВСД.Добавить(ПутьВСДВБраузере(ТестовыйРежим, стр.UUID)); 
    КонецЦикла;
	Возврат  СзПутиВСД;
КонецФункции

Функция ПечатьПолнойФормыВСД(ДокОснование) Экспорт
	СзПутиВСД = Новый СписокЗначений;
     СписокПараметров = ЗагрузитьПараметры( ДокОснование.Организация );
     ТестовыйРежим = СписокПараметров["ТестовыйРежим"];
	Если (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД_транзакция")) или
		 (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД2_транзакция")) тогда		 
		ДокВСД = ДокОснование;
	ИначеЕсли (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД")) или
		 (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД2"))  или 
		 (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВСД2_входящий")) тогда
		 //ОткрытьВСДВБраузере(ТестовыйРежим, ДокОснование.UUID,истина);
		 СзПутиВСД.Добавить(ПутьВСДВБраузере(ТестовыйРежим, ДокОснование.UUID,истина));
		Возврат СзПутиВСД;
	Иначе
		ДокВСД = НайтиВСД(ДокОснование);	 
	КонецЕсли;
	 
	СписокВСД_Исх = НайтиВСД_Исходящий(ДокВСД);
	Для Каждого стр Из СписокВСД_Исх Цикл
 		//ОткрытьВСДВБраузере(ТестовыйРежим, стр.UUID,истина);
		СзПутиВСД.Добавить(ПутьВСДВБраузере(ТестовыйРежим, стр.UUID,Истина));
    КонецЦикла;
		 
	Возврат СзПутиВСД;
КонецФункции

Функция ПечатьВнешнейФормыВСД(знач ДокОснование, ФайлВнешнейОбработки = "") Экспорт
	Если Не ЗначениеЗаполнено(ФайлВнешнейОбработки) Тогда
    	СписокПараметров = ЗагрузитьПараметры( ДокОснование.Организация );	 
		//Адресобработки = ПутьКфайлуИзПолного(СписокПараметров["ПолноеИмяФайлаОбработки"))+"Внешняя_Форма_ВСД.epf";
		Адресобработки = СписокПараметров["КаталогИнтеграции"]+"Внешняя_Форма_ВСД.epf";
	Иначе
		Адресобработки = ФайлВнешнейОбработки;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(Адресобработки);
    Если Не ФайлНаДиске.Существует() Тогда
        СообщитьИнфо("Не существует обработка печати "+Адресобработки);
		Возврат Неопределено;
    КонецЕсли;	 
	ОбработкаПечати = ВнешниеОбработки.Создать(Адресобработки,Ложь);
	Возврат ОбработкаПечати.ПечатьВнешнейПечатнойФормы(ДокОснование, "", "");
КонецФункции

#Область Параметры

Функция ЗагрузитьПараметры( _Организация, ВладелецНастроек = Неопределено  ) Экспорт
	//ВладелецНастроек в параметрах - тогда можно загрузить настройки любого пользователя, а не текущего, м.б. пригодится...
	КлючОбъекта = "Обработка.Интеграция_ГИС_Меркурий.Форма.ФормаУФ";
  	Если ВладелецНастроек = Неопределено Тогда
		ВладелецНастроек = ИмяПользователя();
	КонецЕсли;
	
	Попытка
		 //Проверим, как хранятся настройки у конкретного пользователя: Личные или по организации
		флСохранятьНастройкиДляТекущегоПользователя = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта,"НастройкиВСДПоПользователю",,ВладелецНастроек); // на пользователя
		 
		Если (флСохранятьНастройкиДляТекущегоПользователя = Неопределено) или НЕ флСохранятьНастройкиДляТекущегоПользователя Тогда 		 
			флСохранятьНастройкиДляТекущегоПользователя = ложь;
			
			СписокПараметров = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, _Организация.УникальныйИдентификатор(), , _Организация.УникальныйИдентификатор());
		Иначе 
		 	СписокПараметров = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, _Организация.УникальныйИдентификатор(), , ВладелецНастроек); 
		КонецЕсли;
	Исключение
		СообщитьИнфо("Нет прав на восстановление настроек.");
	КонецПопытки;

	Если СписокПараметров = Неопределено Тогда
		СообщитьИнфо("Не удалось загрузить настройки "+_Организация+" - "+КлючОбъекта+" - "+ВладелецНастроек);
		СписокПараметров = Новый("Структура");
	КонецЕсли;

	СписокПараметров.Вставить("Организация", _Организация );
	СписокПараметров.Вставить("флСохранятьНастройкиДляТекущегоПользователя",флСохранятьНастройкиДляТекущегоПользователя);
	Возврат СписокПараметров;

КонецФункции

&НаСервере
Функция СохранитьПараметры(Объект, _ИмяПользователя = Неопределено) Экспорт
	
	_Организация = Объект.Организация;
	
	Если _ИмяПользователя = Неопределено Тогда
		_ИмяПользователя = ИмяПользователя();
	КонецЕсли;
	
	ПараметрыОрганизации = ВСД_Общий.ПараметрыСервер( Объект );
	
	////СписокКонстант = Новый("Соответствие");   // ? Структура
	//СписокКонстант = Новый("Структура");   // ? Структура
	//
	//Если НЕ ЗначениеЗаполнено(Объект.КаталогИнтеграции) Тогда 
	//	Объект.КаталогИнтеграции = КаталогПрограммы();
	//КонецЕсли;
	//Объект.КаталогЛогов = Объект.КаталогИнтеграции + "logs\";
	////Если НЕ ЗначениеЗаполнено(Объект.ПолноеИмяФайлаОбработки) Тогда 
	////	Объект.ПолноеИмяФайлаОбработки = Объект.КаталогИнтеграции + "Интеграция_ГИС_Меркурий.epf";
	////КонецЕсли;
	//
	//СписокКонстант.Вставить("КаталогИнтеграции", Объект.КаталогИнтеграции);		
	//СписокКонстант.Вставить("ПолноеИмяФайлаОбработки", Объект.ПолноеИмяФайлаОбработки);		
	//СписокКонстант.Вставить("ПолноеИмяФайлаПереопределения", Объект.ПолноеИмяФайлаПереопределения);		
	//
	//СписокКонстант.Вставить("param_username", Объект.param_username);
	//СписокКонстант.Вставить("param_password", Объект.param_password);
	//СписокКонстант.Вставить("param_issuer_id", Объект.param_issuer_id);
	//СписокКонстант.Вставить("param_service_id", Объект.param_service_id);
	//СписокКонстант.Вставить("param_api_key", Объект.param_api_key);
	//СписокКонстант.Вставить("param_intiator_login", Объект.param_intiator_login);
	//СписокКонстант.Вставить("param_vetdoctor_login", Объект.param_vetdoctor_login);
	//СписокКонстант.Вставить("param_vetdoctor_fio", Объект.param_vetdoctor_fio);	
	//СписокКонстант.Вставить("param_vetdoctor_post", Объект.param_vetdoctor_post);	
	//
	//СписокКонстант.Вставить("Отправитель_Площадка", Объект.Отправитель_Площадка);
	//СписокКонстант.Вставить("Отправитель_ХозСубъект", Объект.Отправитель_ХозСубъект );
	//
	//СписокКонстант.Вставить("Страна", Объект.Страна);
	//СписокКонстант.Вставить("Регион", Объект.Регион);
	//СписокКонстант.Вставить("Город", Объект.Город);
	//СписокКонстант.Вставить("ВСД_Экспертиза", Объект.ВСД_Экспертиза);
	//СписокКонстант.Вставить("ВСД_Местность", Объект.ВСД_Местность );
	//СписокКонстант.Вставить("ВСД_ОсобыеОтметки", Объект.ВСД_ОсобыеОтметки);
	//
	//СписокКонстант.Вставить("ПаузаСек", Объект.ПаузаСек);	
	//СписокКонстант.Вставить("РеквизитГрузополучатель", Объект.РеквизитГрузополучатель);	
	//		
	//СписокКонстант.Вставить("ОтладкаЗапросовXML", Объект.ОтладкаЗапросовXML);	
	//СписокКонстант.Вставить("Перевозчик_ХозСубъект", Объект.Перевозчик_ХозСубъект);		
	//СписокКонстант.Вставить("ПропускатьПустыеСвойства", Объект.ПропускатьПустыеСвойства);		
	////СписокКонстант.Вставить(НазваниеВидаДокументаРеализация, "НазваниеВидаДокументаРеализация");		
	//
	//СписокКонстант.Вставить("КаталогЛогов", Объект.КаталогЛогов);
	//СписокКонстант.Вставить("ПаузаСек", Объект.ПаузаСек);		
	//
	//СписокКонстант.Вставить("ТестовыйРежим", Объект.ТестовыйРежим);	
	//СписокКонстант.Вставить("ВыводитьПодробнуюИнформацию", Объект.ВыводитьПодробнуюИнформацию);	
	//
	//СписокКонстант.Вставить("Смещение", Объект.Смещение);
	//СписокКонстант.Вставить("АвтоЗаписьВСДСоответствия", Объект.АвтоЗаписьВСДСоответствия);
	//СписокКонстант.Вставить("НазваниеРеквизитаКоличество", Объект.НазваниеРеквизитаКоличество);
	//СписокКонстант.Вставить("ПарамКоэффициентПересчетаКоличества", Объект.ПарамКоэффициентПересчетаКоличества);
	//СписокКонстант.Вставить("ВСД_РезультатыИсследований", Объект.ВСД_РезультатыИсследований);
	////СписокКонстант.Вставить("ТермУсловияПеревозки", Объект.ТермУсловияПеревозки);
	//СписокКонстант.Вставить("ВСДЦель", Объект.ВСДЦель);
	//СписокКонстант.Вставить("ПарамЗаполнятьТранзакциюПриОтсутствииПартий", Объект.ПарамЗаполнятьТранзакциюПриОтсутствииПартий);
	//СписокКонстант.Вставить("ПарамНомерУровняУпаковкиДляВСД", Объект.ПарамНомерУровняУпаковкиДляВСД);
	//СписокКонстант.Вставить("ПарамФормаУпаковкиДляВСД", Объект.ПарамФормаУпаковкиДляВСД);
	//СписокКонстант.Вставить("НазваниеРеквизитаКоличествоМест", Объект.НазваниеРеквизитаКоличествоМест);
	//СписокКонстант.Вставить("НазваниеРеквизитаКоличествоМест", Объект.НазваниеРеквизитаКоличествоМест);
	////СписокКонстант.Вставить("ОчищатьСправочникВСД_Партии", Объект.ОчищатьСправочникВСД_Партии);
	//СписокКонстант.Вставить("ПарамКолонкаСортировкиПартииСписания", Объект.ПарамКолонкаСортировкиПартииСписания);
	//СписокКонстант.Вставить("ПарамЗнакСортировкиУбывание", Объект.ПарамЗнакСортировкиУбывание);
	//СписокКонстант.Вставить("ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя",Объект.ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя);	
	//
	//СписокКонстант.Вставить("ПарамПоставщикОрганизация",Объект.ПарамПоставщикОрганизация);	
	//СписокКонстант.Вставить("ПарамПоставщикХозСубъект",Объект.ПарамПоставщикХозСубъект);	
	//СписокКонстант.Вставить("ПарамПоставщикПлощадка",Объект.ПарамПоставщикПлощадка);	
	//СписокКонстант.Вставить("ПарамРазрешитьВводНаОснованииБолееОдногоВСД",Объект.ПарамРазрешитьВводНаОснованииБолееОдногоВСД);
	//
	//СписокКонстант.Вставить("ИспользоватьВнешнююОбработку",Объект.флИспользоватьВнешнююОбработку);
	//
	//СписокКонстант.Вставить("ТермическиеУсловияПеревозки", Объект.ТермическиеУсловияПеревозки);
	//
	//СписокКонстант.Вставить("Организация", Объект.Организация);
	//
	//СписокКонстант.Вставить("ОтправлятьВФоне", Объект.ОтправлятьВФоне);
	//СписокКонстант.Вставить("ПарамПроизводствоЗаполнятьПоСправочнику", Объект.ПарамПроизводствоЗаполнятьПоСправочнику);
	
	_НастройкиДляТекущегоПользователя = Объект.флСохранятьНастройкиДляТекущегоПользователя; 
	//Исключение _НастройкиДляТекущегоПользователя = Ложь; КонецПопытки;
	
	// ключи могут быть произвольными строками
    //КлючОбъекта  = "ВСД";
	//КлючНастроек = "НастройкиВСД";
	КлючОбъекта = "Обработка.Интеграция_ГИС_Меркурий.Форма.ФормаУФ";

// Укажем в настройке пользователя, как будем хранить Параметры ВСД - По пользователю или Организации
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  "НастройкиВСДПоПользователю", _НастройкиДляТекущегоПользователя, , _ИмяПользователя);
	
	Если  _НастройкиДляТекущегоПользователя Тогда
//		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  Строка(КлючНастроек), СписокКонстант, , _ИмяПользователя);
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  _Организация.УникальныйИдентификатор(), ПараметрыОрганизации, , _ИмяПользователя);  // Организация по пользователю
	Иначе
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  _Организация.УникальныйИдентификатор(), ПараметрыОрганизации, , _Организация.УникальныйИдентификатор());
	КонецЕсли;

    // имя пользователя - пользователь владелец настроек, если параметр не указать,
    // то настройки будут сохранены для ТЕКУЩЕГО пользователя
	
	Возврат ПараметрыОрганизации;
	
КонецФункции

Процедура ЗагрузитьПараметрыВОбработку(Объект, СписокПараметров) Экспорт
	Попытка
		ЗаполнитьЗначенияСвойств(Объект, СписокПараметров); // не работает, т.к.  СписокПараметров = Соответствие
		
		Если НЕ(ЗначениеЗаполнено(Объект.ВСД_Экспертиза)) Тогда		
			Объект.ВСД_Экспертиза 	= "Произ.лабор ";
		КонецЕсли;
		
		Если НЕ(ЗначениеЗаполнено(Объект.ВСД_Местность))  Тогда 
			Объект.ВСД_Местность 	= "местность благополучная по остро инфекционным заболеваниям с\х животных и птиц";
		КонецЕсли;

		Если ПроверитьСуществованиеКаталога(Объект.КаталогИнтеграции) Тогда			
			Объект.КаталогЛогов = Объект.КаталогИнтеграции + "logs\";
			ПроверитьСуществованиеКаталога(Объект.КаталогЛогов);
		КонецЕсли;
		
		Если НЕ(ЗначениеЗаполнено(Объект.ПаузаСек)) Тогда
			Объект.ПаузаСек=10;
		КонецЕсли;
		//Если НЕ(ЗначениеЗаполнено(Объект.ОтладкаЗапросовXML)) Тогда 
		//	Объект.ОтладкаЗапросовXML = Истина;
		//КонецЕсли ;
		
		Если НЕ(ЗначениеЗаполнено(Объект.ТестовыйРежим)) Тогда 
			Объект.ТестовыйРежим = Истина;
		КонецЕсли ;
		
		Если НЕ ЗначениеЗаполнено(Объект.НазваниеРеквизитаКоличество) Тогда
			Объект.НазваниеРеквизитаКоличество = "Количество";
		КонецЕсли;	
		
	Исключение
		СообщитьИнфо("Используется несоответствующия версии cf и обработки -> Проведите полное обновление !");
	    СообщитьИнфо(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область Продукция_Элемент
	
// Соответствия Номенклатура - ВСД_Продукция_Элемент
&НаСервере
Функция ПолучитьНоменклатуруПоПродукцияЭлемент(ПродукцияЭлемент, ТолькоПервыйЭлемент = ложь) Экспорт
	Запрос = Новый Запрос;
	//Запрос.Текст = "Выбрать ВСД_Соответсвия.Номенклатура из РегистрСведений.ВСД_Соответсвия как ВСД_Соответсвия где ВСД_Соответсвия.ПродукцияЭлемент = &Ресурс1";
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВСД_Соответсвия.Владелец КАК Номенклатура
	               |ИЗ
	               |	Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия
	               |ГДЕ
	               |	ВСД_Соответсвия.ПродукцияЭлемент = &ВыбПродукцияЭлемент
	               |	И ВСД_Соответсвия.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("ВыбПродукцияЭлемент", ПродукцияЭлемент);	
	Если ТолькоПервыйЭлемент Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Номенклатура;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ТзВрем = Запрос.Выполнить().Выгрузить();
		ТзВрем.ВыгрузитьКолонку("Номенклатура");
		Возврат ТзВрем.ВыгрузитьКолонку("Номенклатура");		
	КонецЕсли;
КонецФункции

&НаСервере
Функция Получить_ВСД_Продукция_Элемент(Номенклатура) Экспорт
     Запрос = Новый Запрос;
	 //Запрос.Текст = "ВЫБРАТЬ
	 //               |    ВСД_Соответсвия.ПродукцияЭлемент КАК ПродукцияЭлемент
	 //               |ИЗ
	 //               |    РегистрСведений.ВСД_Соответсвия КАК ВСД_Соответсвия
	 //               |ГДЕ
	 //               |    ВСД_Соответсвия.Номенклатура = &ВыбНоменклатура";
	 
	 Запрос.Текст = "ВЫБРАТЬ
	                |    ВСД_Соответсвия.ПродукцияЭлемент КАК ПродукцияЭлемент
	                |ИЗ
	                |    Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия
	                |ГДЕ
	                |    ВСД_Соответсвия.Владелец = &ВыбНоменклатура
					|	И ВСД_Соответсвия.ПометкаУдаления = ЛОЖЬ";
	 Запрос.УстановитьПараметр("ВыбНоменклатура", Номенклатура);

     Выборка = Запрос.Выполнить().Выбрать();
     Если Выборка.Следующий() Тогда
         ПродукцияЭлемент = Выборка.ПродукцияЭлемент;
     Иначе
         ПродукцияЭлемент = Справочники.ВСД_Продукция_Элемент.ПустаяСсылка();
     КонецЕсли;

     Возврат ПродукцияЭлемент;

КонецФункции

&НаСервере
Процедура Установить_Соответствие_ВСД_Продукция_Элемент( ВыбНоменклатура, ВыбПродукцияЭлемент) Экспорт
	 //Набор = РегистрыСведений.ВСД_Соответсвия.СоздатьНаборЗаписей();
	 //Набор.Отбор.Номенклатура.Установить(Номенклатура);
	 //Набор.Отбор.Номенклатура.Использование = Истина;
	 //Набор.Прочитать();
	 //Набор.Очистить(); // если что и было - подчистим
	 //НовЗапись = Набор.Добавить();
	 //НовЗапись.Номенклатура = Номенклатура;
	 //НовЗапись.ПродукцияЭлемент = ВСД_Продукция_Элемент;
	 //Набор.Записать(true);
	 //СообщитьИнфо(""+Номенклатура+" --> "+ВСД_Продукция_Элемент+ " : установлено соответствие");
	 
	НачатьТранзакцию();
	Попытка
		//1. Очистим все соответсвия по Номенклатуре
		ОчиститьСоответствие_ВСД_Продукция_Элемент( ВыбНоменклатура );
		
		//2. Установить новое соответствие
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|    ВСД_Соответсвия.Ссылка КАК Ссылка,
        |    ВСД_Соответсвия.ПродукцияЭлемент КАК ПродукцияЭлемент
        |ИЗ
        |    Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия
        |ГДЕ
        |    ВСД_Соответсвия.Владелец = &ВыбНоменклатура 
		|    И ВСД_Соответсвия.ПродукцияЭлемент = &ВыбПродукцияЭлемент
		|";
		Запрос.УстановитьПараметр("ВыбНоменклатура", ВыбНоменклатура);
		Запрос.УстановитьПараметр("ВыбПродукцияЭлемент", ВыбПродукцияЭлемент);

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпрОбъект.УстановитьПометкуУдаления(Ложь);
		Иначе
			СпрОбъект = Справочники.ВСД_Соответсвия.СоздатьЭлемент();
			СпрОбъект.Владелец = ВыбНоменклатура;
			СпрОбъект.ПродукцияЭлемент = ВыбПродукцияЭлемент; 
			СпрОбъект.Наименование = ВыбПродукцияЭлемент.Наименование;
			СпрОбъект.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		СообщитьИнфо(""+ВыбНоменклатура+" --> "+ВыбПродукцияЭлемент+ " : установлено соответствие");
		
	Исключение
		ОтменитьТранзакцию();	
		СообщитьИнфо(ОписаниеОшибки());
	КонецПопытки;
 
КонецПроцедуры

&НаСервере
Процедура ОчиститьСоответствие_ВСД_Продукция_Элемент( ВыбНоменклатура, ВыбПродукцияЭлемент = Неопределено ) Экспорт
	//Набор = РегистрыСведений.ВСД_Соответсвия.СоздатьНаборЗаписей();
	//Набор.Отбор.Номенклатура.Установить(ВыбНоменклатура);
	//Набор.Отбор.Номенклатура.Использование = Истина;
	//Набор.Прочитать();
	//Набор.Очистить();
	//Набор.Записать(true);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|    ВСД_Соответсвия.Ссылка КАК Ссылка,
    |    ВСД_Соответсвия.ПродукцияЭлемент КАК ПродукцияЭлемент
    |ИЗ
    |    Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия
    |ГДЕ
    |    ВСД_Соответсвия.Владелец = &ВыбНоменклатура
	|";
	Если ЗначениеЗаполнено(ВыбПродукцияЭлемент) Тогда 
		Запрос.Текст = Запрос.Текст +"
			|    И ВСД_Соответсвия.ПродукцияЭлемент = &ВыбПродукцияЭлемент";
	КонецЕсли;
			
	Запрос.УстановитьПараметр("ВыбНоменклатура", ВыбНоменклатура);
	Запрос.УстановитьПараметр("ВыбПродукцияЭлемент", ВыбПродукцияЭлемент);

	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого ВыборкаСтрока из Выборка Цикл
		СпрОбъект = ВыборкаСтрока.Ссылка.ПолучитьОбъект();
		//СпрОбъект.УстановитьПометкуУдаления(Истина);
		СпрОбъект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

//Функция ПолучитьВСДПродукцияЭлементПоНоменклатуре(ВыбНоменклатура)
Функция Продукция_Элемент_ПолучитьПоНоменклатуре(ВыбНоменклатура) Экспорт
//Вариант 1
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
    |	ВСД_Соответсвия.ПродукцияЭлемент КАК ПродукцияЭлемент
    |ИЗ
    |	Справочник.ВСД_Соответсвия КАК ВСД_Соответсвия
    |ГДЕ
    |	ВСД_Соответсвия.Владелец = &ВыбНоменклатура
	|	И ВСД_Соответсвия.ПометкаУдаления = ЛОЖЬ";
    Запрос.УстановитьПараметр("ВыбНоменклатура", ВыбНоменклатура); 

    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать(); 
	
	ПродукцияЭлемент = Справочники.ВСД_Продукция_Элемент.ПустаяСсылка();	
	Если Выборка.Следующий() Тогда 
		ПродукцияЭлемент = Выборка.ПродукцияЭлемент;
    КонецЕсли; 
	Возврат ПродукцияЭлемент;
	
////Вариант 2	
//	НаборЗаписей = РегистрыСведений.ВСДСоответсвие.СоздатьНаборЗаписей();
//	НаборЗаписей.Отбор.Субъект.Установить(ВыбНоменклатура);
//	НаборЗаписей.Прочитать();
//	СписокЭлементов = НаборЗаписей.ВыгрузитьКолонку("Объект");
//	Если СписокЭлементов.Количество()>0 Тогда
//		ПродукцияЭлемент = СписокЭлементов[0].Значение;	
//	Иначе
//		ПродукцияЭлемент = Справочники.ВСД_Продукция_Элемент.ПустаяСсылка();
//	КонецЕсли;
//	
//	Возврат ПродукцияЭлемент;
КонецФункции


#КонецОбласти


&НаСервере
Процедура УстановитьСоответствиеСписку_ВСД_Продукция_Элемент(СписокНоменклатуры,ВСДЭлемент) Экспорт
	Для каждого Элемент из СписокНоменклатуры Цикл
		Установить_Соответствие_ВСД_Продукция_Элемент(Элемент.Значение,ВСДЭлемент);
	КонецЦикла; 	
КонецПроцедуры

&НаСервере
Процедура УдалитьСоответствиеСписку_ВСД_Продукция_Элемент(СписокНоменклатуры,ВСДЭлемент) Экспорт
	Для каждого Элемент из СписокНоменклатуры Цикл
		ОчиститьСоответствие_ВСД_Продукция_Элемент(Элемент.Значение,ВСДЭлемент);
	КонецЦикла; 	
КонецПроцедуры

//// Формирует список Партий по Фильтру
// для заполнения ТЧ ВСД2_Инвентаризация
Функция СписокАктуальныхПартийПоФильтру_Запрос(ВСД_Продукция_Элемент="",ВСД_Площадка="", ВСД_ХозСубъект="") Экспорт
// ЖД ТЕСТ Выбор не Удаленных, не Пустых, по ВСД_Продукция_Элемент ,по Площадке
     Запрос = Новый Запрос;
	 ТекстЗапроса =         
         "ВЫБРАТЬ
         |    ВСДПартия.Ссылка
         |ИЗ
         |    Справочник.ВСД_Партия КАК ВСДПартия
         |ГДЕ
         |    ВСДПартия.ПометкаУдаления = ЛОЖЬ
		 |    И ВСДПартия.Количество > 0";
	 Если ЗначениеЗаполнено(ВСД_Продукция_Элемент) Тогда
		 ТекстЗапроса = ТекстЗапроса + "		 
         |    И ВСДПартия.Продукция_Элемент = &ВыбПродукция_Элемент";
	 КонецЕсли;
	 Если ЗначениеЗаполнено(ВСД_Площадка) Тогда
		 ТекстЗапроса = ТекстЗапроса + "		 
         |    И ВСДПартия.Получатель_Площадка = &ВыбПлощадка";
	 КонецЕсли;
	 Если ЗначениеЗаполнено(ВСД_ХозСубъект) Тогда
		 ТекстЗапроса = ТекстЗапроса + "		 
         |    И ВСДПартия.Получатель_ХозСубъект.GUID = &ВыбХС";
	 КонецЕсли;
	 	 Запрос.Текст = ТекстЗапроса;
         Запрос.УстановитьПараметр("ВыбПлощадка", ВСД_Площадка);
         Запрос.УстановитьПараметр("ВыбПродукция_Элемент",ВСД_Продукция_Элемент);
	Если ЗначениеЗаполнено(ВСД_ХозСубъект) Тогда
		Запрос.УстановитьПараметр("ВыбХС", ВСД_ХозСубъект.GUID);
	КонецЕсли;
		 
    Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#Область Партии

// Получить Актуальные Партии
//
// Параметры:
//
// ПолеСортировки = выборочные настройки Получателя_ХозСубъекта
// ЗнакСортировки = выборочные настройки Получателя_ХозСубъекта
//
Функция ПолучитьАктуальныеПартии(Знач Параметры, ВыбПродукция_Элемент, ВыбПлощадка, ВыбХозСубъект, ПолеСортировкиПокупателя=Неопределено, ЗнакСортировкиПокупателя=Неопределено ) Экспорт
	Если НЕ ЗначениеЗаполнено(ВыбПлощадка) Тогда
		СообщитьИнфо("Не указана площадка Отправителя!");
		Возврат ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВыбХозСубъект) Тогда
		СообщитьИнфо("Не указан ХС Отправителя!");
		Возврат ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПолеСортировкиПокупателя) Тогда 
		ПолеСортировки = ПолеСортировкиПокупателя;
		ВСД.СообщитьИнфо("! Сортировка партий переопределена в ХозСубъекте = "+ПолеСортировки);
	Иначе
		Если ЗначениеЗаполнено(Параметры["ПарамКолонкаСортировкиПартииСписания"]) Тогда 
			ПолеСортировки = Параметры["ПарамКолонкаСортировкиПартииСписания"];
		Иначе
			ПолеСортировки = "ДатаИзменения"; 
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗнакСортировкиПокупателя) Тогда 
		ЗнакСортировки = ЗнакСортировкиПокупателя;
		ВСД.СообщитьИнфо("! Знак сортировки партий переопределен в ХозСубъекте = "+ЗнакСортировки);
	Иначе
		ЗнакСортировки = Параметры["ПарамЗнакСортировкиУбывание"];		
	КонецЕсли;
	ПорядокСортировки = ?(ЗнакСортировки,"ПолеСортировки УБЫВ","ПолеСортировки");
	
    Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	            |	ВСД_Партия.Ссылка КАК Партия,
	            |	ВСД_Партия.Количество,
	            |	ВСД_Партия.Продукция_Элемент КАК Продукция_Элемент,
	            |	ВСД_Партия.@ПолеСортировки КАК ПолеСортировки
	            |ИЗ
	            |	Справочник.ВСД_Партия КАК ВСД_Партия
	            |ГДЕ
	            |	ВСД_Партия.Получатель_Площадка = &Отправитель_Площадка
	            |	И ВСД_Партия.Получатель_ХозСубъект.GUID = &ВыбХС
	            |	И ВСД_Партия.Продукция_Элемент В ИЕРАРХИИ(&Продукция_Элемент)
	            |	И ВСД_Партия.Количество > 0
	            |	И ВСД_Партия.ПометкаУдаления = ЛОЖЬ
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	Продукция_Элемент,
	            |	@ПорядокПоляСортировки";

	 Запрос.Текст = СтрЗаменить(Запрос.Текст,"@ПолеСортировки",ПолеСортировки);
	 Запрос.Текст = СтрЗаменить(Запрос.Текст,"@ПорядокПоляСортировки",ПорядокСортировки);
     Запрос.УстановитьПараметр("Отправитель_Площадка"  ,ВыбПлощадка);
	 Запрос.УстановитьПараметр("ВыбХС", ВыбХозСубъект.GUID);
     Запрос.УстановитьПараметр("Продукция_Элемент" , ВыбПродукция_Элемент);
	 
	 Попытка
    	Возврат Запрос.Выполнить().Выгрузить();
	Исключение
		СообщитьИнфо("Указано неверное название реквизита сортировки Партий в Параметрах -> "+ПолеСортировки+" исправьте!!");
		СообщитьИнфо(ОписаниеОшибки());
		Возврат "";
	КонецПопытки;

КонецФункции

Функция ПодобратьПартииПоПродукцияЭлемент(ТзПартий,ПродукцияЭлемент,КолвоСписания) Экспорт
	// Подбираем партии под нужное количество списания
	//возвращает ТЗ - Партия и Вес для указанного ПродукцияЭлемент
	// ТзПартий уже отсортирована нужным образом
	// Мы должны вернуть ее с уменьшенным количеством, что необходимо при групповой обработке
	
    Рез = Новый ТаблицаЗначений;
	Рез.Колонки.Добавить("Партия");
	Рез.Колонки.Добавить("Количество");
	Рез.Колонки.Добавить("Упаковки");  // Не нужен похоже тут
	Рез.Колонки.Добавить("ПолеСортировки"); // Не исп-ся в документе
	
	Если НЕ ЗначениеЗаполнено(ПродукцияЭлемент) Тогда 
		СообщитьИнфо("Не указан ПродукцияЭлемент "+ПродукцияЭлемент);
		возврат Рез;
	КонецЕсли;
		
	ОсталосьСписать = КолвоСписания;
	Если значениеЗаполнено(ТзПартий) Тогда
		НайденнаяСтрока = ТзПартий.Найти(ПродукцияЭлемент, "Продукция_Элемент");
	Иначе
		НайденнаяСтрока = Неопределено;
	КонецЕсли;

	Если НайденнаяСтрока = Неопределено Тогда
    	//Предупреждение("Товар не найден!");
	Иначе
		стр = ТзПартий.Индекс(НайденнаяСтрока);
		Пока (ТзПартий.Количество() >= стр) и (НайденнаяСтрока.Продукция_Элемент = ПродукцияЭлемент) Цикл
			//ТзПартий.ПолучитьСтрокуПоНомеру(стр);
			Если осталосьСписать = 0 Тогда
				Прервать;    
			КонецЕсли;
			Если НайденнаяСтрока.Количество = 0 Тогда
				// Уже выбрали из этой партии все
				стр = стр + 1;
				Попытка НайденнаяСтрока = ТзПартий[стр]; Исключение Прервать; КонецПопытки;
			    Продолжить;
			КонецЕсли;
			СтрРез = рез.Добавить();
			СтрРез.Партия = НайденнаяСтрока.Партия;
			СтрРез.ПолеСортировки = НайденнаяСтрока.ПолеСортировки;
			Если ОсталосьСписать >= НайденнаяСтрока.Количество Тогда
				СтрРез.Количество = НайденнаяСтрока.Количество;
			Иначе
				СтрРез.Количество = ОсталосьСписать;
			КонецЕсли;
		
			НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - СтрРез.Количество;
			ОсталосьСписать = ОсталосьСписать - СтрРез.Количество; 
		
			стр = стр + 1;
			Попытка НайденнаяСтрока = ТзПартий[стр]; Исключение Прервать; КонецПопытки; 
		КонецЦикла;
	КонецЕсли;
	
	Если ОсталосьСписать > 0 Тогда
	    СообщитьИнфо("Недостаточно партий для списания "+ПродукцияЭлемент + ", Нужно списать "+КолвоСписания+ ", списываю "+Рез.Итог("Количество"));
	КонецЕсли;
	
	Возврат рез;
КонецФункции

Функция ПодобратьПартии( тзПартий, КолвоСписания ) Экспорт
	// Подбираем партии под нужное количество списания
	//возвращает ТЗ - Партия и Вес для указанного ПродукцияЭлемент
	// тзПартий уже отсортирована нужным образом
	// Мы должны вернуть ее с уменьшенным количеством, что необходимо при групповой обработке
	
    Рез = Новый ТаблицаЗначений;
	Рез.Колонки.Добавить("Партия");
	Рез.Колонки.Добавить("Количество");
	//Рез.Колонки.Добавить("Упаковки");  // Не нужен похоже тут
	//Рез.Колонки.Добавить("ПолеСортировки"); // Не исп-ся в документе
	
	//Если НЕ ЗначениеЗаполнено(ПродукцияЭлемент) Тогда 
	//	СообщитьИнфо("Не указан ПродукцияЭлемент "+ПродукцияЭлемент);
	//	возврат Рез;
	//КонецЕсли;
		
	ОсталосьСписать = КолвоСписания;
	Если НЕ ЗначениеЗаполнено(ТзПартий) Тогда
		СообщитьИнфо("Не заполнена таблица партий ");
		возврат Рез;
	КонецЕсли;
	Для Каждого стрПартия из тзПартий Цикл
	//Если НайденнаяСтрока = Неопределено Тогда
	//	//Предупреждение("Товар не найден!");
	//Иначе
	//	стр = ТзПартий.Индекс(НайденнаяСтрока);
		//Пока (ТзПартий.Количество() >= стрПартия) Цикл
			Если осталосьСписать = 0 Тогда
				Прервать;    
			КонецЕсли;
			//Если НайденнаяСтрока.Количество = 0 Тогда
			//	// Уже выбрали из этой партии все
			//	стр = стр + 1;
			//	Попытка НайденнаяСтрока = ТзПартий[стр]; Исключение Прервать; КонецПопытки;
			//    Продолжить;
			//КонецЕсли;
			СтрРез = рез.Добавить();
			СтрРез.Партия = стрПартия.Партия;
			//СтрРез.ПолеСортировки = стрПартия.ПолеСортировки;
			Если ОсталосьСписать >= стрПартия.Количество Тогда
				СтрРез.Количество = стрПартия.Количество;
			Иначе
				СтрРез.Количество = ОсталосьСписать;
			КонецЕсли;
		
			стрПартия.Количество = стрПартия.Количество - СтрРез.Количество;
			ОсталосьСписать = ОсталосьСписать - СтрРез.Количество; 
		
			//стр = стр + 1;
			//Попытка НайденнаяСтрока = ТзПартий[стр]; Исключение Прервать; КонецПопытки; 
		//КонецЦикла;
	КонецЦикла;
	
	Если ОсталосьСписать > 0 Тогда
	    СообщитьИнфо("Недостаточно партий для списания, нужно списать "+КолвоСписания+ ", списываю "+Рез.Итог("Количество"));
	КонецЕсли;
	
	Возврат рез;
КонецФункции

// Аналог Процедуры ЗаполнитьТЧВСД, только вместо заполнения ТЧ документа Возвращает ТЗ 
// рассмотреть вариант Оптимизации
// Параметр тзАктуальныхПартий необходим при групповом рспределении
// в Парам = Структура переданы Отправитель_ХозСубъект и Отправитель_Площадка
//
// ПолеСортировки = выборочные настройки Получателя_ХозСубъекта
// ЗнакСортировки = выборочные настройки Получателя_ХозСубъекта
//
//Функция ПолучитьТЗПартииКСписаниюПоТЗПродукцияЭлементов(Параметры, тзЭлементыкСписанию, тзАктуальныхПартий = "") Экспорт
Функция тзПартииСписанияПоТзПродукция_Элемент(Параметры, тзЭлементыкСписанию, тзАктуальныхПартий = "", ПолеСортировки=Неопределено, ЗнакСортировки = Неопределено) Экспорт
    
    ПартииКСписанию = новый ("ТаблицаЗначений"); //Можно структуру скопировать из вызывающего документа, если в параметр его добавить
    ПартииКСписанию.Колонки.Добавить("Номенклатура",новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
    ПартииКСписанию.Колонки.Добавить("Продукция_Элемент",новый ОписаниеТипов("СправочникСсылка.ВСД_Продукция_Элемент"));
    ПартииКСписанию.Колонки.Добавить("Продукция",новый ОписаниеТипов("СправочникСсылка.ВСД_Продукция"));
    ПартииКСписанию.Колонки.Добавить("ВидПродукции",новый ОписаниеТипов("СправочникСсылка.ВСД_ВидПродукции"));
    ПартииКСписанию.Колонки.Добавить("Партия",новый ОписаниеТипов("СправочникСсылка.ВСД_Партия"));
    ПартииКСписанию.Колонки.Добавить("Количество",новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 3)));
    ПартииКСписанию.Колонки.Добавить("Упаковки",новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 3)));
    ПартииКСписанию.Колонки.Добавить("ЕдиницаИзмерения",новый ОписаниеТипов("СправочникСсылка.ВСД_ЕдиницыИзмерения"));
    
    Если НЕ ЗначениеЗаполнено(тзАктуальныхПартий) Тогда
        Попытка
            тзАктуальныхПартий = ВСД.ПолучитьАктуальныеПартии(Параметры, тзЭлементыкСписанию.ВыгрузитьКолонку("Продукция_Элемент"), Параметры["Отправитель_Площадка"], Параметры["Отправитель_ХозСубъект"], 
					ПолеСортировки, ЗнакСортировки );
        Исключение
            ВСД.СообщитьИнфо("Не переданы параметры для получения Актуальных партий - ДанныеЗаполнения или тзЭлементыОснования");
            Возврат ПартииКСписанию;
        КонецПопытки;
    КонецЕсли;
    
    Для Каждого ТекСтрокаТовары Из тзЭлементыкСписанию Цикл
        Продукция_Элемент = ТекСтрокаТовары.Продукция_Элемент;
        //**** 
        СтрокиПартий = ВСД.ПодобратьПартииПоПродукцияЭлемент( тзАктуальныхПартий, ТекСтрокаТовары.Продукция_Элемент, ТекСтрокаТовары.Количество );
		
        Если СтрокиПартий.Количество() = 0  Тогда
            Если Параметры["ПарамЗаполнятьТранзакциюПриОтсутствииПартий"] Тогда
                НоваяСтрока = ПартииКСписанию.Добавить();                
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрокаТовары);
                //НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
                НоваяСтрока.Продукция_Элемент = Продукция_Элемент;
                НоваяСтрока.ЕдиницаИзмерения = Продукция_Элемент.ЕдиницаИзмерения;
                //Обработка.ЗаполнитьРеквизитыСтрокиВСД(НоваяСтрока, ТекСтрокаТовары, докСсылка);
                Продолжить;
            КонецЕсли;
              ВСД.СообщитьИнфо("Нет партий для Продукция_Элемент ["+ Строка(Продукция_Элемент) +"] Пропускаем!");               
            //ВСД.СообщитьИнфо("Нет партий для ["+ТекСтрокаТовары.Номенклатура +"] Продукция_Элемент ["+ Строка(Продукция_Элемент) +"] Пропускаем!");               
            Продолжить;
        КонецЕсли;
        
        Для каждого СтрПартии из СтрокиПартий Цикл
            НоваяСтрока = ПартииКСписанию.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрокаТовары);
            НоваяСтрока.Партия = СтрПартии.Партия;
            НоваяСтрока.Количество = СтрПартии.Количество;
            НоваяСтрока.ЕдиницаИзмерения = СтрПартии.Партия.ЕдиницаИзмерения;
            НоваяСтрока.Продукция_Элемент = НоваяСтрока.Партия.Продукция_Элемент;           
            НоваяСтрока.Продукция = НоваяСтрока.Партия.Продукция;           
            НоваяСтрока.ВидПродукции = НоваяСтрока.Партия.ВидПродукции;         
        КонецЦикла;
        
        Если (СтрокиПартий.Итог("Количество") < ТекСтрокаТовары.Количество) и Параметры["ПарамЗаполнятьТранзакциюПриОтсутствииПартий"]  Тогда
            //Добавим с пустыми партиями
            НоваяСтрока = ПартииКСписанию.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрокаТовары);
            НоваяСтрока.Продукция_Элемент = Продукция_Элемент;
            НоваяСтрока.Количество  =  ТекСтрокаТовары.Количество - СтрокиПартий.Итог("Количество") ;
            НоваяСтрока.ЕдиницаИзмерения = Продукция_Элемент.ЕдиницаИзмерения;
//          Обработка.ЗаполнитьРеквизитыСтрокиВСД(НоваяСтрока, ТекСтрокаТовары, докСсылка);
                
        КонецЕсли; 
    КонецЦикла;
    
    Возврат ПартииКСписанию;
КонецФункции


#КонецОбласти
