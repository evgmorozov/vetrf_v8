// Использование модулей конфигурации
//Пример
//Функция СведенияОбАдресе(Адрес, ДополнительныеПараметры = Неопределено) Экспорт
//	Если Метаданные.ОбщиеМодули.Найти("РаботаСАдресами") <> Неопределено Тогда
//		МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
//		Возврат МодульРаботаСАдресами.СведенияОбАдресе(Адрес, ДополнительныеПараметры);
//	КонецЕсли;
// БП 3.0
// 		СведенияОПлательщике      = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Плательщик,      СведенияОДокументе.ДатаДляПолученияСведений);
//		СписокПлательщик = "НаименованиеДляПечатныхФорм,ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
//		ПараметрыЗаполнения = Новый Структура;
//		ПараметрыЗаполнения.Вставить("ПредставлениеПлательщика", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПлательщике, СписокПлательщик));


// Возвращает серверный модуль менеджера по имени объекта.
//из типовой БП3   - получение нужного модуля конфы
Функция СтрРазделить82(Имя,знакДелителя)
	Рез = Новый СписокЗначений;
	Рез.Вставить("имя",имя);
	Возврат Рез;	
КонецФункции

Функция СерверныйМодульМенеджера(Имя)
	ОбъектНайден = Ложь;
	
	ЧастиИмени = СтрРазделить82(Имя, ".");
	Если ЧастиИмени.Количество() = 2 Тогда
		
		ИмяВида = ВРег(ЧастиИмени[0]);
		ИмяОбъекта = ЧастиИмени[1];
		
		Если ИмяВида = ВРег("Константы") Тогда
			Если Метаданные.Константы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыСведений") Тогда
			Если Метаданные.РегистрыСведений.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыНакопления") Тогда
			Если Метаданные.РегистрыНакопления.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыБухгалтерии") Тогда
			Если Метаданные.РегистрыБухгалтерии.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыРасчета") Тогда
			Если Метаданные.РегистрыРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Справочники") Тогда
			Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Документы") Тогда
			Если Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Отчеты") Тогда
			Если Метаданные.Отчеты.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Обработки") Тогда
			Если Метаданные.Обработки.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("БизнесПроцессы") Тогда
			Если Метаданные.БизнесПроцессы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ЖурналыДокументов") Тогда
			Если Метаданные.ЖурналыДокументов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Задачи") Тогда
			Если Метаданные.Задачи.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыСчетов") Тогда
			Если Метаданные.ПланыСчетов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыОбмена") Тогда
			Если Метаданные.ПланыОбмена.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовХарактеристик") Тогда
			Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовРасчета") Тогда
			Если Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОбъектНайден Тогда
		ВызватьИсключение("ОШИБКА ПОЛУЧЕНИЯ МОДУЛЯ");
//		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			НСтр("ru = 'Объект метаданных ""%1"" не найден,
//			|либо для него не поддерживается получение модуля менеджера.'"), Имя);
	КонецЕсли;
	
	Модуль = Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
	
	Возврат Модуль;
КонецФункции

Функция ОбщийМодуль(Имя) Экспорт
	Попытка	
		Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
			Модуль = Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
		ИначеЕсли СтрЧислоВхождений(Имя, ".") = 1 Тогда
			Возврат СерверныйМодульМенеджера(Имя);
		Иначе
			Модуль = Неопределено;
		КонецЕсли;
	
		Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
			ВызватьИсключение("ОШИБКА ПОЛУЧЕНИЯ МОДУЛЯ");//ПодставитьПараметрыВСтроку(НСтр("ru = 'Общий модуль ""%1"" не найден.'"), Имя);
		КонецЕсли;
	Исключение
		ВСД.СообщитьИнфо("Ошибка получения модуля Типовой конфигурации "+Имя+" "+ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Модуль;
	
КонецФункции

Функция ПолучитьОрганизациюПоУмолчанию() Экспорт
	Попытка	
		_Организация = Справочники.Организации.ПустаяСсылка();
		
		Если Метаданные.ОбщиеМодули.Найти("БухгалтерскийУчетПереопределяемый") <> Неопределено Тогда
			//БП 3.0
			МодульТиповойКонфы = ОбщийМодуль("БухгалтерскийУчетПереопределяемый");
			_Организация = МодульТиповойКонфы.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		ИначеЕсли Метаданные.ОбщиеМодули.Найти("УправлениеПользователями") <> Неопределено Тогда
			//УПП
			МодульТиповойКонфы = ОбщийМодуль("УправлениеПользователями");
			//МодульТиповойКонфы2 = ОбщийМодуль("ГлобальныйМодуль");
			ТекПользователь = ПараметрыСеанса.ТекущийПользователь;//МодульТиповойКонфы2.глЗначениеПеременной("глТекущийПользователь");// ИмяПользователя();
			_Организация = МодульТиповойКонфы.ПолучитьЗначениеПоУмолчанию(ТекПользователь,"ОсновнаяОрганизация");
		Иначе
			ВСД.СообщитьИнфо("Для данной конфигурации 1С не удалось получить значение Организации по умолчанию, обратитесь в тех.поддержку КБ99");
			//Возврат Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	Исключение
		ВСД.СообщитьИнфо("Для данной конфигурации 1С не удалось получить значение Организации по умолчанию, обратитесь в тех.поддержку КБ99");
		ВСД.СообщитьИнфо(ОписаниеОшибки());
		//_Организация = Справочники.Организации.ПустаяСсылка();
	КонецПопытки;
	//БП 3	Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	//УПП         Организация   =  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяОрганизация");
	
	// В УТ 11 Засада, добавим регистр сведений
	Попытка
		Если  НЕ(ЗначениеЗаполнено(_Организация)) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "Выбрать ВСД_ОрганизацияПоУмолчанию.Организация из РегистрСведений.ВСД_ОрганизацияПоУмолчанию как ВСД_ОрганизацияПоУмолчанию где ВСД_ОрганизацияПоУмолчанию.Пользователь = &ВыбПользователь";
			Запрос.УстановитьПараметр("ВыбПользователь", ПараметрыСеанса.АвторизованныйПользователь);	
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				_Организация =  Выборка.Организация;
			КонецЕсли;
		КонецЕсли;
	Исключение КонецПопытки;	
	
	Возврат _Организация;
КонецФункции

Функция ПараметрыСервер( ФОбъект ) Экспорт
	
	Параметры = Новый Соответствие(); // т.к. во всех запросах Параметры = Соответствие()
	//СтруктураПараметров = Новый("Структура");   // Соответсвие ? Структура
	
	Параметры["КаталогИнтеграции"] = ФОбъект.КаталогИнтеграции;
	Параметры["КаталогЛогов"] = ФОбъект.КаталогЛогов;
	Параметры["ПолноеИмяФайлаОбработки"] = ФОбъект.КаталогИнтеграции;
	
	Параметры.Вставить("КаталогИнтеграции", ФОбъект.КаталогИнтеграции);		
	Параметры.Вставить("ПолноеИмяФайлаОбработки", ФОбъект.ПолноеИмяФайлаОбработки);		
	Параметры.Вставить("ПолноеИмяФайлаПереопределения", ФОбъект.ПолноеИмяФайлаПереопределения);		
		
	Параметры.Вставить("Адрес", "https://api2.vetrf.ru:8002/"); //тест
	Параметры.Вставить("param_username", ФОбъект.param_username);
	Параметры.Вставить("param_password", ФОбъект.param_password);
	Параметры.Вставить("param_issuer_id", ФОбъект.param_issuer_id);
	Параметры.Вставить("param_service_id", ФОбъект.param_service_id);
	Параметры.Вставить("param_api_key", ФОбъект.param_api_key);
	Параметры.Вставить("param_intiator_login", ФОбъект.param_intiator_login);
	Параметры.Вставить("param_vetdoctor_login", ФОбъект.param_vetdoctor_login);
	Параметры.Вставить("param_vetdoctor_fio", ФОбъект.param_vetdoctor_fio);	
	Параметры.Вставить("param_vetdoctor_post", ФОбъект.param_vetdoctor_post);	
	
	Параметры.Вставить("Отправитель_Площадка", ФОбъект.Отправитель_Площадка);
	Параметры.Вставить("Отправитель_ХозСубъект", ФОбъект.Отправитель_ХозСубъект );
	
	Параметры.Вставить("Страна", ФОбъект.Страна);
	Параметры.Вставить("Регион", ФОбъект.Регион);
	Параметры.Вставить("Город", ФОбъект.Город);
	Параметры.Вставить("ВСД_Экспертиза", ФОбъект.ВСД_Экспертиза);
	Параметры.Вставить("ВСД_Местность", ФОбъект.ВСД_Местность );
	Параметры.Вставить("ВСД_ОсобыеОтметки", ФОбъект.ВСД_ОсобыеОтметки);
	
	Параметры.Вставить("ПаузаСек", ФОбъект.ПаузаСек);	
	Параметры.Вставить("РеквизитГрузополучатель", ФОбъект.РеквизитГрузополучатель);	
			
	Параметры.Вставить("ОтладкаЗапросовXML", ФОбъект.ОтладкаЗапросовXML);	
	Параметры.Вставить("Перевозчик_ХозСубъект", ФОбъект.Перевозчик_ХозСубъект);		
	Параметры.Вставить("ПропускатьПустыеСвойства", ФОбъект.ПропускатьПустыеСвойства);		
	//Параметры.Вставить(НазваниеВидаДокументаРеализация, "НазваниеВидаДокументаРеализация");		
	
	Параметры.Вставить("КаталогЛогов", ФОбъект.КаталогЛогов);
	Параметры.Вставить("ПаузаСек", ФОбъект.ПаузаСек);		
	
	Параметры.Вставить("ТестовыйРежим", ФОбъект.ТестовыйРежим);	
	Параметры.Вставить("ВыводитьПодробнуюИнформацию", ФОбъект.ВыводитьПодробнуюИнформацию);	
	
	Параметры.Вставить("Смещение", ФОбъект.Смещение);
	Параметры.Вставить("АвтоЗаписьВСДСоответствия", ФОбъект.АвтоЗаписьВСДСоответствия);
	Параметры.Вставить("НазваниеРеквизитаКоличество", ФОбъект.НазваниеРеквизитаКоличество);
	Параметры.Вставить("ПарамКоэффициентПересчетаКоличества", ФОбъект.ПарамКоэффициентПересчетаКоличества);
	Параметры.Вставить("ВСД_РезультатыИсследований", ФОбъект.ВСД_РезультатыИсследований);
    Параметры.Вставить("ТермУсловияПеревозки", ФОбъект.ТермУсловияПеревозки);
	Параметры.Вставить("ВСДЦель", ФОбъект.ВСДЦель);
	Параметры.Вставить("ПарамЗаполнятьТранзакциюПриОтсутствииПартий", ФОбъект.ПарамЗаполнятьТранзакциюПриОтсутствииПартий);
	Параметры.Вставить("ПарамНомерУровняУпаковкиДляВСД", ФОбъект.ПарамНомерУровняУпаковкиДляВСД);
	Параметры.Вставить("ПарамФормаУпаковкиДляВСД", ФОбъект.ПарамФормаУпаковкиДляВСД);
	Параметры.Вставить("НазваниеРеквизитаКоличествоМест", ФОбъект.НазваниеРеквизитаКоличествоМест);
	Параметры.Вставить("НазваниеРеквизитаКоличествоМест", ФОбъект.НазваниеРеквизитаКоличествоМест);
	Параметры.Вставить("ОчищатьСправочникВСД_Партии", ФОбъект.ОчищатьСправочникВСД_Партии);
	Параметры.Вставить("ПарамКолонкаСортировкиПартииСписания", ФОбъект.ПарамКолонкаСортировкиПартииСписания);
	Параметры.Вставить("ПарамЗнакСортировкиУбывание", ФОбъект.ПарамЗнакСортировкиУбывание);
	Параметры.Вставить("ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя",ФОбъект.ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя);	
	
	Параметры.Вставить("ПарамПоставщикОрганизация",ФОбъект.ПарамПоставщикОрганизация);	
	Параметры.Вставить("ПарамПоставщикХозСубъект",ФОбъект.ПарамПоставщикХозСубъект);	
	Параметры.Вставить("ПарамПоставщикПлощадка",ФОбъект.ПарамПоставщикПлощадка);	
	Параметры.Вставить("ПарамРазрешитьВводНаОснованииБолееОдногоВСД",ФОбъект.ПарамРазрешитьВводНаОснованииБолееОдногоВСД);
	
	Параметры.Вставить("ИспользоватьВнешнююОбработку",ФОбъект.флИспользоватьВнешнююОбработку);
	
	Параметры.Вставить("ОтправлятьВФоне", ФОбъект.ОтправлятьВФоне);
	
	Попытка 
		_НастройкиДляТекущегоПользователя = ФОбъект.флСохранятьНастройкиДляТекущегоПользователя; 
	Исключение 
		_НастройкиДляТекущегоПользователя = Ложь; 
	КонецПопытки;
	
	Возврат Параметры;

КонецФункции

// Получает сообщения пользователю, отфильтровывает служебные сообщения о состоянии длительной операции.
// 
// Параметры:
//  УдалятьПолученные - Булево - Признак необходимости удаления полученных сообщений.
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания.
// 
// Возвращаемое значение:
//  Массив - ФиксированныйМассив - Массив объектов СообщениеПользователю, которые были сформированы в
//  фоновом задании.
Функция СообщенияПользователю(УдалятьПолученные = Ложь, ИдентификаторЗадания = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если ФоновоеЗадание <> Неопределено Тогда
			ВсеСообщения = ФоновоеЗадание.ПолучитьСообщенияПользователю(УдалятьПолученные);
		КонецЕсли;
	Иначе
		ВсеСообщения = ПолучитьСообщенияПользователю(УдалятьПолученные);
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Для Каждого Сообщение Из ВсеСообщения Цикл
		//Если СтрНачинаетсяС(Сообщение.Текст, "{" + СообщениеПрогресса() + "}") Тогда
			Если УдалятьПолученные Тогда
				Сообщение.Сообщить();
			КонецЕсли;
		//Иначе
		//	Результат.Добавить(Сообщение);
		//КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(Результат);
КонецФункции

